var vendor_64bd46d4 =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(24);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);

	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(11);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(9);

	var emptyFunction = __webpack_require__(12);
	var traverseAllChildren = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactCurrentOwner = __webpack_require__(10);

	var warning = __webpack_require__(11);
	var canDefineProperty = __webpack_require__(13);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(12);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactNoopUpdateQueue = __webpack_require__(19);

	var canDefineProperty = __webpack_require__(13);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ReactElement = __webpack_require__(9);

	var checkReactTypeSpec = __webpack_require__(27);

	var canDefineProperty = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var emptyFunction = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactElement = __webpack_require__(9);

	var invariant = __webpack_require__(8);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(38);
	var ReactMount = __webpack_require__(166);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(56);
	var ReactVersion = __webpack_require__(171);

	var findDOMNode = __webpack_require__(172);
	var getHostComponentFromComposite = __webpack_require__(173);
	var renderSubtreeIntoContainer = __webpack_require__(174);
	var warning = __webpack_require__(11);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(48);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(62);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(175);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(176);
	  var ReactDOMInvalidARIAHook = __webpack_require__(177);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentFlags = __webpack_require__(37);

	var invariant = __webpack_require__(8);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(39);
	var BeforeInputEventPlugin = __webpack_require__(40);
	var ChangeEventPlugin = __webpack_require__(55);
	var DefaultEventPluginOrder = __webpack_require__(72);
	var EnterLeaveEventPlugin = __webpack_require__(73);
	var HTMLDOMPropertyConfig = __webpack_require__(78);
	var ReactComponentBrowserEnvironment = __webpack_require__(79);
	var ReactDOMComponent = __webpack_require__(92);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(137);
	var ReactDOMTreeTraversal = __webpack_require__(138);
	var ReactDOMTextComponent = __webpack_require__(139);
	var ReactDefaultBatchingStrategy = __webpack_require__(140);
	var ReactEventListener = __webpack_require__(141);
	var ReactInjection = __webpack_require__(144);
	var ReactReconcileTransaction = __webpack_require__(145);
	var SVGDOMPropertyConfig = __webpack_require__(153);
	var SelectEventPlugin = __webpack_require__(154);
	var SimpleEventPlugin = __webpack_require__(155);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var FallbackCompositionState = __webpack_require__(49);
	var SyntheticCompositionEvent = __webpack_require__(52);
	var SyntheticInputEvent = __webpack_require__(54);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var warning = __webpack_require__(11);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventPluginRegistry = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(44);
	var ReactErrorUtils = __webpack_require__(45);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var invariant = __webpack_require__(8);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactErrorUtils = __webpack_require__(45);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);
	var isEventSupported = __webpack_require__(70);
	var isTextInputElement = __webpack_require__(71);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactReconciler = __webpack_require__(59);
	var Transaction = __webpack_require__(68);

	var invariant = __webpack_require__(8);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(50);

	var invariant = __webpack_require__(8);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(60);
	var ReactInstrumentation = __webpack_require__(62);

	var warning = __webpack_require__(11);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(61);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(63);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(64);
	var ReactHostOperationHistoryHook = __webpack_require__(65);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(48);

	var performanceNow = __webpack_require__(66);
	var warning = __webpack_require__(11);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(67);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(74);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);
	var ViewportMetrics = __webpack_require__(76);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMIDOperations = __webpack_require__(91);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(81);
	var Danger = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setInnerHTML = __webpack_require__(83);
	var setTextContent = __webpack_require__(85);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(83);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setTextContent = __webpack_require__(85);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var DOMNamespaces = __webpack_require__(82);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(83);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(48);

	var createNodesFromMarkup = __webpack_require__(88);
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(48);

	var createArrayFromMixed = __webpack_require__(89);
	var getMarkupWrap = __webpack_require__(90);
	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(8);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(48);

	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMComponentTree = __webpack_require__(34);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var AutoFocusUtils = __webpack_require__(93);
	var CSSPropertyOperations = __webpack_require__(95);
	var DOMLazyTree = __webpack_require__(81);
	var DOMNamespaces = __webpack_require__(82);
	var DOMProperty = __webpack_require__(36);
	var DOMPropertyOperations = __webpack_require__(103);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactDOMComponentFlags = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMultiChild = __webpack_require__(114);
	var ReactServerRenderingTransaction = __webpack_require__(133);

	var emptyFunction = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var isEventSupported = __webpack_require__(70);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(136);
	var warning = __webpack_require__(11);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);

	var focusNode = __webpack_require__(94);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactInstrumentation = __webpack_require__(62);

	var camelizeStyleName = __webpack_require__(97);
	var dangerousStyleValue = __webpack_require__(99);
	var hyphenateStyleName = __webpack_require__(100);
	var memoizeStringOnly = __webpack_require__(102);
	var warning = __webpack_require__(11);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(98);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var warning = __webpack_require__(11);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(101);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 101 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var quoteAttributeValueForBrowser = __webpack_require__(104);
	var warning = __webpack_require__(11);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(86);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventPluginRegistry = __webpack_require__(43);
	var ReactEventEmitterMixin = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(76);

	var getVendorPrefixedEventName = __webpack_require__(107);
	var isEventSupported = __webpack_require__(70);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMPropertyOperations = __webpack_require__(103);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(112);

	var warning = __webpack_require__(11);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactReconciler = __webpack_require__(59);
	var ReactChildReconciler = __webpack_require__(117);

	var emptyFunction = __webpack_require__(12);
	var flattenChildren = __webpack_require__(132);
	var invariant = __webpack_require__(8);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(59);

	var instantiateReactComponent = __webpack_require__(118);
	var KeyEscapeUtils = __webpack_require__(128);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(26);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var ReactCompositeComponent = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactHostComponent = __webpack_require__(126);

	var getNextDebugID = __webpack_require__(127);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactNodeTypes = __webpack_require__(120);
	var ReactReconciler = __webpack_require__(59);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(121);
	}

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var shallowEqual = __webpack_require__(123);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);

	var invariant = __webpack_require__(8);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactPropTypeLocationNames = __webpack_require__(122);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var invariant = __webpack_require__(8);

	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(130);

	var getIteratorFn = __webpack_require__(131);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(128);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);
	var Transaction = __webpack_require__(68);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactServerUpdateQueue = __webpack_require__(134);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(135);

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMChildrenOperations = __webpack_require__(80);
	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var validateDOMNesting = __webpack_require__(136);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(68);

	var emptyFunction = __webpack_require__(12);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventListener = __webpack_require__(142);
	var ExecutionEnvironment = __webpack_require__(48);
	var PooledClass = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var getEventTarget = __webpack_require__(69);
	var getUnboundedScrollPosition = __webpack_require__(143);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(12);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactHostComponent = __webpack_require__(126);
	var ReactUpdates = __webpack_require__(56);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactInputSelection = __webpack_require__(146);
	var ReactInstrumentation = __webpack_require__(62);
	var Transaction = __webpack_require__(68);
	var ReactUpdateQueue = __webpack_require__(135);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(147);

	var containsNode = __webpack_require__(149);
	var focusNode = __webpack_require__(94);
	var getActiveElement = __webpack_require__(152);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var getNodeForCharacterOffset = __webpack_require__(148);
	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(150);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(151);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(146);
	var SyntheticEvent = __webpack_require__(53);

	var getActiveElement = __webpack_require__(152);
	var isTextInputElement = __webpack_require__(71);
	var shallowEqual = __webpack_require__(123);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventListener = __webpack_require__(142);
	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(156);
	var SyntheticClipboardEvent = __webpack_require__(157);
	var SyntheticEvent = __webpack_require__(53);
	var SyntheticFocusEvent = __webpack_require__(158);
	var SyntheticKeyboardEvent = __webpack_require__(159);
	var SyntheticMouseEvent = __webpack_require__(74);
	var SyntheticDragEvent = __webpack_require__(162);
	var SyntheticTouchEvent = __webpack_require__(163);
	var SyntheticTransitionEvent = __webpack_require__(164);
	var SyntheticUIEvent = __webpack_require__(75);
	var SyntheticWheelEvent = __webpack_require__(165);

	var emptyFunction = __webpack_require__(12);
	var getEventCharCode = __webpack_require__(160);
	var invariant = __webpack_require__(8);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventCharCode = __webpack_require__(160);
	var getEventKey = __webpack_require__(161);
	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(160);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var DOMProperty = __webpack_require__(36);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(167);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMarkupChecksum = __webpack_require__(169);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdateQueue = __webpack_require__(135);
	var ReactUpdates = __webpack_require__(56);

	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(118);
	var invariant = __webpack_require__(8);
	var setInnerHTML = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(136);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(170);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 171 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(116);

	var getHostComponentFromComposite = __webpack_require__(173);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(120);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(166);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	// the whatwg-fetch polyfill installs the fetch() function
	// on the global object (window or self)
	//
	// Return that as the export for use in Webpack, Browserify etc.
	__webpack_require__(179);
	module.exports = self.fetch.bind(self);


/***/ },
/* 179 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';

	  if (self.fetch) {
	    return
	  }

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }

	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]

	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }

	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {}

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)

	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }

	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }

	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }

	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }

	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)

	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }

	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }

	  function Body() {
	    this.bodyUsed = false

	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }

	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }

	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {}
	    var body = options.body

	    if (typeof input === 'string') {
	      this.url = input
	    } else {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    }

	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }

	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }

	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }

	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split('\r\n').forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }

	  Body.call(Request.prototype)

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }

	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }

	  Body.call(Response.prototype)

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }

	  var redirectStatuses = [301, 302, 303, 307, 308]

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  }

	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response

	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.open(request.method, request.url, true)

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	"use strict";

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  if (!(obj instanceof Object && !Array.isArray(obj))) {
	    throw new Error('keyMirror(...): Argument must be an object.');
	  }
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  * Reqwest! A general purpose XHR connection manager
	  * license MIT (c) Dustin Diaz 2015
	  * https://github.com/ded/reqwest
	  */

	!function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  else context[name] = definition()
	}('reqwest', this, function () {

	  var context = this

	  if ('window' in context) {
	    var doc = document
	      , byTag = 'getElementsByTagName'
	      , head = doc[byTag]('head')[0]
	  } else {
	    var XHR2
	    try {
	      XHR2 = __webpack_require__(182)
	    } catch (ex) {
	      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')
	    }
	  }


	  var httpsRe = /^http/
	    , protocolRe = /(^\w+):\/\//
	    , twoHundo = /^(20\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	    , readyState = 'readyState'
	    , contentType = 'Content-Type'
	    , requestedWith = 'X-Requested-With'
	    , uniqid = 0
	    , callbackPrefix = 'reqwest_' + (+new Date())
	    , lastValue // data stored by the most recent JSONP callback
	    , xmlHttpRequest = 'XMLHttpRequest'
	    , xDomainRequest = 'XDomainRequest'
	    , noop = function () {}

	    , isArray = typeof Array.isArray == 'function'
	        ? Array.isArray
	        : function (a) {
	            return a instanceof Array
	          }

	    , defaultHeaders = {
	          'contentType': 'application/x-www-form-urlencoded'
	        , 'requestedWith': xmlHttpRequest
	        , 'accept': {
	              '*':  'text/javascript, text/html, application/xml, text/xml, */*'
	            , 'xml':  'application/xml, text/xml'
	            , 'html': 'text/html'
	            , 'text': 'text/plain'
	            , 'json': 'application/json, text/javascript'
	            , 'js':   'application/javascript, text/javascript'
	          }
	      }

	    , xhr = function(o) {
	        // is it x-domain
	        if (o['crossOrigin'] === true) {
	          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null
	          if (xhr && 'withCredentials' in xhr) {
	            return xhr
	          } else if (context[xDomainRequest]) {
	            return new XDomainRequest()
	          } else {
	            throw new Error('Browser does not support cross-origin requests')
	          }
	        } else if (context[xmlHttpRequest]) {
	          return new XMLHttpRequest()
	        } else if (XHR2) {
	          return new XHR2()
	        } else {
	          return new ActiveXObject('Microsoft.XMLHTTP')
	        }
	      }
	    , globalSetupOptions = {
	        dataFilter: function (data) {
	          return data
	        }
	      }

	  function succeed(r) {
	    var protocol = protocolRe.exec(r.url)
	    protocol = (protocol && protocol[1]) || context.location.protocol
	    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response
	  }

	  function handleReadyState(r, success, error) {
	    return function () {
	      // use _aborted to mitigate against IE err c00c023f
	      // (can't read props on aborted request objects)
	      if (r._aborted) return error(r.request)
	      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')
	      if (r.request && r.request[readyState] == 4) {
	        r.request.onreadystatechange = noop
	        if (succeed(r)) success(r.request)
	        else
	          error(r.request)
	      }
	    }
	  }

	  function setHeaders(http, o) {
	    var headers = o['headers'] || {}
	      , h

	    headers['Accept'] = headers['Accept']
	      || defaultHeaders['accept'][o['type']]
	      || defaultHeaders['accept']['*']

	    var isAFormData = typeof FormData !== 'undefined' && (o['data'] instanceof FormData);
	    // breaks cross-origin requests with legacy browsers
	    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']
	    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']
	    for (h in headers)
	      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])
	  }

	  function setCredentials(http, o) {
	    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {
	      http.withCredentials = !!o['withCredentials']
	    }
	  }

	  function generalCallback(data) {
	    lastValue = data
	  }

	  function urlappend (url, s) {
	    return url + (/\?/.test(url) ? '&' : '?') + s
	  }

	  function handleJsonp(o, fn, err, url) {
	    var reqId = uniqid++
	      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key
	      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)
	      , cbreg = new RegExp('((^|\\?|&)' + cbkey + ')=([^&]+)')
	      , match = url.match(cbreg)
	      , script = doc.createElement('script')
	      , loaded = 0
	      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1

	    if (match) {
	      if (match[3] === '?') {
	        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name
	      } else {
	        cbval = match[3] // provided callback func name
	      }
	    } else {
	      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em
	    }

	    context[cbval] = generalCallback

	    script.type = 'text/javascript'
	    script.src = url
	    script.async = true
	    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {
	      // need this for IE due to out-of-order onreadystatechange(), binding script
	      // execution to an event listener gives us control over when the script
	      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	      script.htmlFor = script.id = '_reqwest_' + reqId
	    }

	    script.onload = script.onreadystatechange = function () {
	      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {
	        return false
	      }
	      script.onload = script.onreadystatechange = null
	      script.onclick && script.onclick()
	      // Call the user callback with the last value stored and clean up values and scripts.
	      fn(lastValue)
	      lastValue = undefined
	      head.removeChild(script)
	      loaded = 1
	    }

	    // Add the script to the DOM head
	    head.appendChild(script)

	    // Enable JSONP timeout
	    return {
	      abort: function () {
	        script.onload = script.onreadystatechange = null
	        err({}, 'Request is aborted: timeout', {})
	        lastValue = undefined
	        head.removeChild(script)
	        loaded = 1
	      }
	    }
	  }

	  function getRequest(fn, err) {
	    var o = this.o
	      , method = (o['method'] || 'GET').toUpperCase()
	      , url = typeof o === 'string' ? o : o['url']
	      // convert non-string objects to query-string form unless o['processData'] is false
	      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')
	        ? reqwest.toQueryString(o['data'])
	        : (o['data'] || null)
	      , http
	      , sendWait = false

	    // if we're working on a GET request and we have data then we should append
	    // query string to end of URL and not post data
	    if ((o['type'] == 'jsonp' || method == 'GET') && data) {
	      url = urlappend(url, data)
	      data = null
	    }

	    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)

	    // get the xhr from the factory if passed
	    // if the factory returns null, fall-back to ours
	    http = (o.xhr && o.xhr(o)) || xhr(o)

	    http.open(method, url, o['async'] === false ? false : true)
	    setHeaders(http, o)
	    setCredentials(http, o)
	    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {
	        http.onload = fn
	        http.onerror = err
	        // NOTE: see
	        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e
	        http.onprogress = function() {}
	        sendWait = true
	    } else {
	      http.onreadystatechange = handleReadyState(this, fn, err)
	    }
	    o['before'] && o['before'](http)
	    if (sendWait) {
	      setTimeout(function () {
	        http.send(data)
	      }, 200)
	    } else {
	      http.send(data)
	    }
	    return http
	  }

	  function Reqwest(o, fn) {
	    this.o = o
	    this.fn = fn

	    init.apply(this, arguments)
	  }

	  function setType(header) {
	    // json, javascript, text/plain, text/html, xml
	    if (header === null) return undefined; //In case of no content-type.
	    if (header.match('json')) return 'json'
	    if (header.match('javascript')) return 'js'
	    if (header.match('text')) return 'html'
	    if (header.match('xml')) return 'xml'
	  }

	  function init(o, fn) {

	    this.url = typeof o == 'string' ? o : o['url']
	    this.timeout = null

	    // whether request has been fulfilled for purpose
	    // of tracking the Promises
	    this._fulfilled = false
	    // success handlers
	    this._successHandler = function(){}
	    this._fulfillmentHandlers = []
	    // error handlers
	    this._errorHandlers = []
	    // complete (both success and fail) handlers
	    this._completeHandlers = []
	    this._erred = false
	    this._responseArgs = {}

	    var self = this

	    fn = fn || function () {}

	    if (o['timeout']) {
	      this.timeout = setTimeout(function () {
	        timedOut()
	      }, o['timeout'])
	    }

	    if (o['success']) {
	      this._successHandler = function () {
	        o['success'].apply(o, arguments)
	      }
	    }

	    if (o['error']) {
	      this._errorHandlers.push(function () {
	        o['error'].apply(o, arguments)
	      })
	    }

	    if (o['complete']) {
	      this._completeHandlers.push(function () {
	        o['complete'].apply(o, arguments)
	      })
	    }

	    function complete (resp) {
	      o['timeout'] && clearTimeout(self.timeout)
	      self.timeout = null
	      while (self._completeHandlers.length > 0) {
	        self._completeHandlers.shift()(resp)
	      }
	    }

	    function success (resp) {
	      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE
	      resp = (type !== 'jsonp') ? self.request : resp
	      // use global data filter on response text
	      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)
	        , r = filteredResponse
	      try {
	        resp.responseText = r
	      } catch (e) {
	        // can't assign this in IE<=8, just ignore
	      }
	      if (r) {
	        switch (type) {
	        case 'json':
	          try {
	            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')
	          } catch (err) {
	            return error(resp, 'Could not parse JSON in response', err)
	          }
	          break
	        case 'js':
	          resp = eval(r)
	          break
	        case 'html':
	          resp = r
	          break
	        case 'xml':
	          resp = resp.responseXML
	              && resp.responseXML.parseError // IE trololo
	              && resp.responseXML.parseError.errorCode
	              && resp.responseXML.parseError.reason
	            ? null
	            : resp.responseXML
	          break
	        }
	      }

	      self._responseArgs.resp = resp
	      self._fulfilled = true
	      fn(resp)
	      self._successHandler(resp)
	      while (self._fulfillmentHandlers.length > 0) {
	        resp = self._fulfillmentHandlers.shift()(resp)
	      }

	      complete(resp)
	    }

	    function timedOut() {
	      self._timedOut = true
	      self.request.abort()
	    }

	    function error(resp, msg, t) {
	      resp = self.request
	      self._responseArgs.resp = resp
	      self._responseArgs.msg = msg
	      self._responseArgs.t = t
	      self._erred = true
	      while (self._errorHandlers.length > 0) {
	        self._errorHandlers.shift()(resp, msg, t)
	      }
	      complete(resp)
	    }

	    this.request = getRequest.call(this, success, error)
	  }

	  Reqwest.prototype = {
	    abort: function () {
	      this._aborted = true
	      this.request.abort()
	    }

	  , retry: function () {
	      init.call(this, this.o, this.fn)
	    }

	    /**
	     * Small deviation from the Promises A CommonJs specification
	     * http://wiki.commonjs.org/wiki/Promises/A
	     */

	    /**
	     * `then` will execute upon successful requests
	     */
	  , then: function (success, fail) {
	      success = success || function () {}
	      fail = fail || function () {}
	      if (this._fulfilled) {
	        this._responseArgs.resp = success(this._responseArgs.resp)
	      } else if (this._erred) {
	        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._fulfillmentHandlers.push(success)
	        this._errorHandlers.push(fail)
	      }
	      return this
	    }

	    /**
	     * `always` will execute whether the request succeeds or fails
	     */
	  , always: function (fn) {
	      if (this._fulfilled || this._erred) {
	        fn(this._responseArgs.resp)
	      } else {
	        this._completeHandlers.push(fn)
	      }
	      return this
	    }

	    /**
	     * `fail` will execute when the request fails
	     */
	  , fail: function (fn) {
	      if (this._erred) {
	        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._errorHandlers.push(fn)
	      }
	      return this
	    }
	  , 'catch': function (fn) {
	      return this.fail(fn)
	    }
	  }

	  function reqwest(o, fn) {
	    return new Reqwest(o, fn)
	  }

	  // normalize newline variants according to spec -> CRLF
	  function normalize(s) {
	    return s ? s.replace(/\r?\n/g, '\r\n') : ''
	  }

	  function serial(el, cb) {
	    var n = el.name
	      , t = el.tagName.toLowerCase()
	      , optCb = function (o) {
	          // IE gives value="" even where there is no value attribute
	          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273
	          if (o && !o['disabled'])
	            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))
	        }
	      , ch, ra, val, i

	    // don't serialize elements that are disabled or without a name
	    if (el.disabled || !n) return

	    switch (t) {
	    case 'input':
	      if (!/reset|button|image|file/i.test(el.type)) {
	        ch = /checkbox/i.test(el.type)
	        ra = /radio/i.test(el.type)
	        val = el.value
	        // WebKit gives us "" instead of "on" if a checkbox has no value, so correct it here
	        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))
	      }
	      break
	    case 'textarea':
	      cb(n, normalize(el.value))
	      break
	    case 'select':
	      if (el.type.toLowerCase() === 'select-one') {
	        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)
	      } else {
	        for (i = 0; el.length && i < el.length; i++) {
	          el.options[i].selected && optCb(el.options[i])
	        }
	      }
	      break
	    }
	  }

	  // collect up all form elements found from the passed argument elements all
	  // the way down to child elements; pass a '<form>' or form fields.
	  // called with 'this'=callback to use for serial() on each element
	  function eachFormElement() {
	    var cb = this
	      , e, i
	      , serializeSubtags = function (e, tags) {
	          var i, j, fa
	          for (i = 0; i < tags.length; i++) {
	            fa = e[byTag](tags[i])
	            for (j = 0; j < fa.length; j++) serial(fa[j], cb)
	          }
	        }

	    for (i = 0; i < arguments.length; i++) {
	      e = arguments[i]
	      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)
	      serializeSubtags(e, [ 'input', 'select', 'textarea' ])
	    }
	  }

	  // standard query string style serialization
	  function serializeQueryString() {
	    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))
	  }

	  // { 'name': 'value', ... } style serialization
	  function serializeHash() {
	    var hash = {}
	    eachFormElement.apply(function (name, value) {
	      if (name in hash) {
	        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])
	        hash[name].push(value)
	      } else hash[name] = value
	    }, arguments)
	    return hash
	  }

	  // [ { name: 'name', value: 'value' }, ... ] style serialization
	  reqwest.serializeArray = function () {
	    var arr = []
	    eachFormElement.apply(function (name, value) {
	      arr.push({name: name, value: value})
	    }, arguments)
	    return arr
	  }

	  reqwest.serialize = function () {
	    if (arguments.length === 0) return ''
	    var opt, fn
	      , args = Array.prototype.slice.call(arguments, 0)

	    opt = args.pop()
	    opt && opt.nodeType && args.push(opt) && (opt = null)
	    opt && (opt = opt.type)

	    if (opt == 'map') fn = serializeHash
	    else if (opt == 'array') fn = reqwest.serializeArray
	    else fn = serializeQueryString

	    return fn.apply(null, args)
	  }

	  reqwest.toQueryString = function (o, trad) {
	    var prefix, i
	      , traditional = trad || false
	      , s = []
	      , enc = encodeURIComponent
	      , add = function (key, value) {
	          // If value is a function, invoke it and return its value
	          value = ('function' === typeof value) ? value() : (value == null ? '' : value)
	          s[s.length] = enc(key) + '=' + enc(value)
	        }
	    // If an array was passed in, assume that it is an array of form elements.
	    if (isArray(o)) {
	      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])
	    } else {
	      // If traditional, encode the "old" way (the way 1.3.2 or older
	      // did it), otherwise encode params recursively.
	      for (prefix in o) {
	        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)
	      }
	    }

	    // spaces should be + according to spec
	    return s.join('&').replace(/%20/g, '+')
	  }

	  function buildParams(prefix, obj, traditional, add) {
	    var name, i, v
	      , rbracket = /\[\]$/

	    if (isArray(obj)) {
	      // Serialize array item.
	      for (i = 0; obj && i < obj.length; i++) {
	        v = obj[i]
	        if (traditional || rbracket.test(prefix)) {
	          // Treat each array item as a scalar.
	          add(prefix, v)
	        } else {
	          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)
	        }
	      }
	    } else if (obj && obj.toString() === '[object Object]') {
	      // Serialize object item.
	      for (name in obj) {
	        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
	      }

	    } else {
	      // Serialize scalar item.
	      add(prefix, obj)
	    }
	  }

	  reqwest.getcallbackPrefix = function () {
	    return callbackPrefix
	  }

	  // jQuery and Zepto compatibility, differences can be remapped here so you can call
	  // .ajax.compat(options, callback)
	  reqwest.compat = function (o, fn) {
	    if (o) {
	      o['type'] && (o['method'] = o['type']) && delete o['type']
	      o['dataType'] && (o['type'] = o['dataType'])
	      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']
	      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])
	    }
	    return new Reqwest(o, fn)
	  }

	  reqwest.ajaxSetup = function (options) {
	    options = options || {}
	    for (var k in options) {
	      globalSetupOptions[k] = options[k]
	    }
	  }

	  return reqwest
	});


/***/ },
/* 182 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1), __webpack_require__(32));
		else if(typeof define === 'function' && define.amd)
			define(["react", "react-dom"], factory);
		else if(typeof exports === 'object')
			exports["ReactDraggable"] = factory(require("react"), require("react-dom"));
		else
			root["ReactDraggable"] = factory(root["React"], root["ReactDOM"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_11__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		module.exports = __webpack_require__(1).default;
		module.exports.DraggableCore = __webpack_require__(17).default;

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _react = __webpack_require__(2);
		
		var _react2 = _interopRequireDefault(_react);
		
		var _propTypes = __webpack_require__(3);
		
		var _propTypes2 = _interopRequireDefault(_propTypes);
		
		var _reactDom = __webpack_require__(11);
		
		var _reactDom2 = _interopRequireDefault(_reactDom);
		
		var _classnames = __webpack_require__(12);
		
		var _classnames2 = _interopRequireDefault(_classnames);
		
		var _domFns = __webpack_require__(13);
		
		var _positionFns = __webpack_require__(16);
		
		var _shims = __webpack_require__(14);
		
		var _DraggableCore = __webpack_require__(17);
		
		var _DraggableCore2 = _interopRequireDefault(_DraggableCore);
		
		var _log = __webpack_require__(19);
		
		var _log2 = _interopRequireDefault(_log);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		// $FlowIgnore
		
		
		/*:: import type {DraggableEventHandler} from './utils/types';*/
		/*:: type DraggableState = {
		  dragging: boolean,
		  dragged: boolean,
		  x: number, y: number,
		  slackX: number, slackY: number,
		  isElementSVG: boolean
		};*/
		
		
		//
		// Define <Draggable>
		//
		
		/*:: type ConstructorProps = {
		  position: { x: number, y: number },
		  defaultPosition: { x: number, y: number }
		};*/
		
		var Draggable = function (_React$Component) {
		  _inherits(Draggable, _React$Component);
		
		  function Draggable(props /*: ConstructorProps*/) {
		    _classCallCheck(this, Draggable);
		
		    var _this = _possibleConstructorReturn(this, (Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call(this, props));
		
		    _this.onDragStart = function (e, coreData) {
		      (0, _log2.default)('Draggable: onDragStart: %j', coreData);
		
		      // Short-circuit if user's callback killed it.
		      var shouldStart = _this.props.onStart(e, (0, _positionFns.createDraggableData)(_this, coreData));
		      // Kills start event on core as well, so move handlers are never bound.
		      if (shouldStart === false) return false;
		
		      _this.setState({ dragging: true, dragged: true });
		    };
		
		    _this.onDrag = function (e, coreData) {
		      if (!_this.state.dragging) return false;
		      (0, _log2.default)('Draggable: onDrag: %j', coreData);
		
		      var uiData = (0, _positionFns.createDraggableData)(_this, coreData);
		
		      var newState /*: $Shape<DraggableState>*/ = {
		        x: uiData.x,
		        y: uiData.y
		      };
		
		      // Keep within bounds.
		      if (_this.props.bounds) {
		        // Save original x and y.
		        var _x = newState.x,
		            _y = newState.y;
		
		        // Add slack to the values used to calculate bound position. This will ensure that if
		        // we start removing slack, the element won't react to it right away until it's been
		        // completely removed.
		
		        newState.x += _this.state.slackX;
		        newState.y += _this.state.slackY;
		
		        // Get bound position. This will ceil/floor the x and y within the boundaries.
		        // $FlowBug
		
		        // Recalculate slack by noting how much was shaved by the boundPosition handler.
		        var _getBoundPosition = (0, _positionFns.getBoundPosition)(_this, newState.x, newState.y);
		
		        var _getBoundPosition2 = _slicedToArray(_getBoundPosition, 2);
		
		        newState.x = _getBoundPosition2[0];
		        newState.y = _getBoundPosition2[1];
		        newState.slackX = _this.state.slackX + (_x - newState.x);
		        newState.slackY = _this.state.slackY + (_y - newState.y);
		
		        // Update the event we fire to reflect what really happened after bounds took effect.
		        uiData.x = _x;
		        uiData.y = _y;
		        uiData.deltaX = newState.x - _this.state.x;
		        uiData.deltaY = newState.y - _this.state.y;
		      }
		
		      // Short-circuit if user's callback killed it.
		      var shouldUpdate = _this.props.onDrag(e, uiData);
		      if (shouldUpdate === false) return false;
		
		      _this.setState(newState);
		    };
		
		    _this.onDragStop = function (e, coreData) {
		      if (!_this.state.dragging) return false;
		
		      // Short-circuit if user's callback killed it.
		      var shouldStop = _this.props.onStop(e, (0, _positionFns.createDraggableData)(_this, coreData));
		      if (shouldStop === false) return false;
		
		      (0, _log2.default)('Draggable: onDragStop: %j', coreData);
		
		      var newState /*: $Shape<DraggableState>*/ = {
		        dragging: false,
		        slackX: 0,
		        slackY: 0
		      };
		
		      // If this is a controlled component, the result of this operation will be to
		      // revert back to the old position. We expect a handler on `onDragStop`, at the least.
		      var controlled = Boolean(_this.props.position);
		      if (controlled) {
		        var _this$props$position = _this.props.position,
		            _x2 = _this$props$position.x,
		            _y2 = _this$props$position.y;
		
		        newState.x = _x2;
		        newState.y = _y2;
		      }
		
		      _this.setState(newState);
		    };
		
		    _this.state = {
		      // Whether or not we are currently dragging.
		      dragging: false,
		
		      // Whether or not we have been dragged before.
		      dragged: false,
		
		      // Current transform x and y.
		      x: props.position ? props.position.x : props.defaultPosition.x,
		      y: props.position ? props.position.y : props.defaultPosition.y,
		
		      // Used for compensating for out-of-bounds drags
		      slackX: 0, slackY: 0,
		
		      // Can only determine if SVG after mounting
		      isElementSVG: false
		    };
		    return _this;
		  }
		
		  _createClass(Draggable, [{
		    key: 'componentWillMount',
		    value: function componentWillMount() {
		      if (this.props.position && !(this.props.onDrag || this.props.onStop)) {
		        // eslint-disable-next-line
		        console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');
		      }
		    }
		  }, {
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      // Check to see if the element passed is an instanceof SVGElement
		      if (typeof SVGElement !== 'undefined' && _reactDom2.default.findDOMNode(this) instanceof SVGElement) {
		        this.setState({ isElementSVG: true });
		      }
		    }
		  }, {
		    key: 'componentWillReceiveProps',
		    value: function componentWillReceiveProps(nextProps /*: Object*/) {
		      // Set x/y if position has changed
		      if (nextProps.position && (!this.props.position || nextProps.position.x !== this.props.position.x || nextProps.position.y !== this.props.position.y)) {
		        this.setState({ x: nextProps.position.x, y: nextProps.position.y });
		      }
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      this.setState({ dragging: false }); // prevents invariant if unmounted while dragging
		    }
		  }, {
		    key: 'render',
		    value: function render() /*: React.Element<any>*/ {
		      var _classNames;
		
		      var style = {},
		          svgTransform = null;
		
		      // If this is controlled, we don't want to move it - unless it's dragging.
		      var controlled = Boolean(this.props.position);
		      var draggable = !controlled || this.state.dragging;
		
		      var position = this.props.position || this.props.defaultPosition;
		      var transformOpts = {
		        // Set left if horizontal drag is enabled
		        x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : position.x,
		
		        // Set top if vertical drag is enabled
		        y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : position.y
		      };
		
		      // If this element was SVG, we use the `transform` attribute.
		      if (this.state.isElementSVG) {
		        svgTransform = (0, _domFns.createSVGTransform)(transformOpts);
		      } else {
		        // Add a CSS transform to move the element around. This allows us to move the element around
		        // without worrying about whether or not it is relatively or absolutely positioned.
		        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
		        // has a clean slate.
		        style = (0, _domFns.createCSSTransform)(transformOpts);
		      }
		
		      var _props = this.props,
		          defaultClassName = _props.defaultClassName,
		          defaultClassNameDragging = _props.defaultClassNameDragging,
		          defaultClassNameDragged = _props.defaultClassNameDragged;
		
		      // Mark with class while dragging
		
		      var className = (0, _classnames2.default)(this.props.children.props.className || '', defaultClassName, (_classNames = {}, _defineProperty(_classNames, defaultClassNameDragging, this.state.dragging), _defineProperty(_classNames, defaultClassNameDragged, this.state.dragged), _classNames));
		
		      // Reuse the child provided
		      // This makes it flexible to use whatever element is wanted (div, ul, etc)
		      return _react2.default.createElement(
		        _DraggableCore2.default,
		        _extends({}, this.props, { onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop }),
		        _react2.default.cloneElement(_react2.default.Children.only(this.props.children), {
		          className: className,
		          style: _extends({}, this.props.children.props.style, style),
		          transform: svgTransform
		        })
		      );
		    }
		  }]);
		
		  return Draggable;
		}(_react2.default.Component);
		
		Draggable.displayName = 'Draggable';
		Draggable.propTypes = _extends({}, _DraggableCore2.default.propTypes, {
		
		  /**
		   * `axis` determines which axis the draggable can move.
		   *
		   *  Note that all callbacks will still return data as normal. This only
		   *  controls flushing to the DOM.
		   *
		   * 'both' allows movement horizontally and vertically.
		   * 'x' limits movement to horizontal axis.
		   * 'y' limits movement to vertical axis.
		   * 'none' limits all movement.
		   *
		   * Defaults to 'both'.
		   */
		  axis: _propTypes2.default.oneOf(['both', 'x', 'y', 'none']),
		
		  /**
		   * `bounds` determines the range of movement available to the element.
		   * Available values are:
		   *
		   * 'parent' restricts movement within the Draggable's parent node.
		   *
		   * Alternatively, pass an object with the following properties, all of which are optional:
		   *
		   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
		   *
		   * All values are in px.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *         return (
		   *            <Draggable bounds={{right: 300, bottom: 300}}>
		   *              <div>Content</div>
		   *           </Draggable>
		   *         );
		   *       }
		   *   });
		   * ```
		   */
		  bounds: _propTypes2.default.oneOfType([_propTypes2.default.shape({
		    left: _propTypes2.default.number,
		    right: _propTypes2.default.number,
		    top: _propTypes2.default.number,
		    bottom: _propTypes2.default.number
		  }), _propTypes2.default.string, _propTypes2.default.oneOf([false])]),
		
		  defaultClassName: _propTypes2.default.string,
		  defaultClassNameDragging: _propTypes2.default.string,
		  defaultClassNameDragged: _propTypes2.default.string,
		
		  /**
		   * `defaultPosition` specifies the x and y that the dragged item should start at
		   *
		   * Example:
		   *
		   * ```jsx
		   *      let App = React.createClass({
		   *          render: function () {
		   *              return (
		   *                  <Draggable defaultPosition={{x: 25, y: 25}}>
		   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
		   *                  </Draggable>
		   *              );
		   *          }
		   *      });
		   * ```
		   */
		  defaultPosition: _propTypes2.default.shape({
		    x: _propTypes2.default.number,
		    y: _propTypes2.default.number
		  }),
		
		  /**
		   * `position`, if present, defines the current position of the element.
		   *
		   *  This is similar to how form elements in React work - if no `position` is supplied, the component
		   *  is uncontrolled.
		   *
		   * Example:
		   *
		   * ```jsx
		   *      let App = React.createClass({
		   *          render: function () {
		   *              return (
		   *                  <Draggable position={{x: 25, y: 25}}>
		   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
		   *                  </Draggable>
		   *              );
		   *          }
		   *      });
		   * ```
		   */
		  position: _propTypes2.default.shape({
		    x: _propTypes2.default.number,
		    y: _propTypes2.default.number
		  }),
		
		  /**
		   * These properties should be defined on the child, not here.
		   */
		  className: _shims.dontSetMe,
		  style: _shims.dontSetMe,
		  transform: _shims.dontSetMe
		});
		Draggable.defaultProps = _extends({}, _DraggableCore2.default.defaultProps, {
		  axis: 'both',
		  bounds: false,
		  defaultClassName: 'react-draggable',
		  defaultClassNameDragging: 'react-draggable-dragging',
		  defaultClassNameDragged: 'react-draggable-dragged',
		  defaultPosition: { x: 0, y: 0 },
		  position: null
		});
		exports.default = Draggable;

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */
		
		if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production') {
		  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
		    Symbol.for &&
		    Symbol.for('react.element')) ||
		    0xeac7;
		
		  var isValidElement = function(object) {
		    return typeof object === 'object' &&
		      object !== null &&
		      object.$$typeof === REACT_ELEMENT_TYPE;
		  };
		
		  // By explicitly using `prop-types` you are opting into new development behavior.
		  // http://fb.me/prop-types-in-prod
		  var throwOnDirectAccess = true;
		  module.exports = __webpack_require__(4)(isValidElement, throwOnDirectAccess);
		} else {
		  // By explicitly using `prop-types` you are opting into new production behavior.
		  // http://fb.me/prop-types-in-prod
		  module.exports = __webpack_require__(10)();
		}


	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */
		
		'use strict';
		
		var emptyFunction = __webpack_require__(5);
		var invariant = __webpack_require__(6);
		var warning = __webpack_require__(7);
		
		var ReactPropTypesSecret = __webpack_require__(8);
		var checkPropTypes = __webpack_require__(9);
		
		module.exports = function(isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
		
		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }
		
		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */
		
		  var ANONYMOUS = '<<anonymous>>';
		
		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),
		
		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker
		  };
		
		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/
		
		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message) {
		    this.message = message;
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;
		
		  function createChainableTypeChecker(validate) {
		    if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production') {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;
		
		      if (secret !== ReactPropTypesSecret) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          invariant(
		            false,
		            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		            'Use `PropTypes.checkPropTypes()` to call them. ' +
		            'Read more at http://fb.me/use-check-prop-types'
		          );
		        } else if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production' && typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (
		            !manualPropTypeCallCache[cacheKey] &&
		            // Avoid spamming the console because they are often not actionable except for lib authors
		            manualPropTypeWarningCount < 3
		          ) {
		            warning(
		              false,
		              'You are manually calling a React.PropTypes validation ' +
		              'function for the `%s` prop on `%s`. This is deprecated ' +
		              'and will throw in the standalone `prop-types` package. ' +
		              'You may be seeing this warning due to a third-party PropTypes ' +
		              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
		              propFullName,
		              componentName
		            );
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }
		
		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);
		
		    return chainedCheckType;
		  }
		
		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);
		
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
		  }
		
		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      ({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
		      return emptyFunction.thatReturnsNull;
		    }
		
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }
		
		      var valuesString = JSON.stringify(expectedValues);
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (propValue.hasOwnProperty(key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      ({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
		      return emptyFunction.thatReturnsNull;
		    }
		
		    function validate(props, propName, componentName, location, propFullName) {
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
		          return null;
		        }
		      }
		
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (!checker) {
		          continue;
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }
		
		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }
		
		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }
		
		        return true;
		      default:
		        return false;
		    }
		  }
		
		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }
		
		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }
		
		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }
		
		    return false;
		  }
		
		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }
		
		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }
		
		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }
		
		  ReactPropTypes.checkPropTypes = checkPropTypes;
		  ReactPropTypes.PropTypes = ReactPropTypes;
		
		  return ReactPropTypes;
		};


	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		"use strict";
		
		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * 
		 */
		
		function makeEmptyFunction(arg) {
		  return function () {
		    return arg;
		  };
		}
		
		/**
		 * This function accepts and discards inputs; it has no side effects. This is
		 * primarily useful idiomatically for overridable function endpoints which
		 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
		 */
		var emptyFunction = function emptyFunction() {};
		
		emptyFunction.thatReturns = makeEmptyFunction;
		emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
		emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
		emptyFunction.thatReturnsNull = makeEmptyFunction(null);
		emptyFunction.thatReturnsThis = function () {
		  return this;
		};
		emptyFunction.thatReturnsArgument = function (arg) {
		  return arg;
		};
		
		module.exports = emptyFunction;

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 */
		
		'use strict';
		
		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */
		
		var validateFormat = function validateFormat(format) {};
		
		if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production') {
		  validateFormat = function validateFormat(format) {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  };
		}
		
		function invariant(condition, format, a, b, c, d, e, f) {
		  validateFormat(format);
		
		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(format.replace(/%s/g, function () {
		        return args[argIndex++];
		      }));
		      error.name = 'Invariant Violation';
		    }
		
		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		}
		
		module.exports = invariant;

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 */
		
		'use strict';
		
		var emptyFunction = __webpack_require__(5);
		
		/**
		 * Similar to invariant but only logs a warning if the condition is not met.
		 * This can be used to log issues in development environments in critical
		 * paths. Removing the logging code for production environments will keep the
		 * same logic and follow the same code paths.
		 */
		
		var warning = emptyFunction;
		
		if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production') {
		  (function () {
		    var printWarning = function printWarning(format) {
		      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }
		
		      var argIndex = 0;
		      var message = 'Warning: ' + format.replace(/%s/g, function () {
		        return args[argIndex++];
		      });
		      if (typeof console !== 'undefined') {
		        console.error(message);
		      }
		      try {
		        // --- Welcome to debugging React ---
		        // This error was thrown as a convenience so that you can use this stack
		        // to find the callsite that caused this warning to fire.
		        throw new Error(message);
		      } catch (x) {}
		    };
		
		    warning = function warning(condition, format) {
		      if (format === undefined) {
		        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
		      }
		
		      if (format.indexOf('Failed Composite propType: ') === 0) {
		        return; // Ignore CompositeComponent proptype check.
		      }
		
		      if (!condition) {
		        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		          args[_key2 - 2] = arguments[_key2];
		        }
		
		        printWarning.apply(undefined, [format].concat(args));
		      }
		    };
		  })();
		}
		
		module.exports = warning;

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		/**
		 * Copyright 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */
		
		'use strict';
		
		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
		
		module.exports = ReactPropTypesSecret;


	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */
		
		'use strict';
		
		if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production') {
		  var invariant = __webpack_require__(6);
		  var warning = __webpack_require__(7);
		  var ReactPropTypesSecret = __webpack_require__(8);
		  var loggedTypeFailures = {};
		}
		
		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  if (({"DRAGGABLE_DEBUG":undefined}).NODE_ENV !== 'production') {
		    for (var typeSpecName in typeSpecs) {
		      if (typeSpecs.hasOwnProperty(typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
		        } catch (ex) {
		          error = ex;
		        }
		        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;
		
		          var stack = getStack ? getStack() : '';
		
		          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
		        }
		      }
		    }
		  }
		}
		
		module.exports = checkPropTypes;


	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */
		
		'use strict';
		
		var emptyFunction = __webpack_require__(5);
		var invariant = __webpack_require__(6);
		
		module.exports = function() {
		  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  function shim() {
		    invariant(
		      false,
		      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		      'Use PropTypes.checkPropTypes() to call them. ' +
		      'Read more at http://fb.me/use-check-prop-types'
		    );
		  };
		  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  };
		  var ReactPropTypes = {
		    array: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,
		
		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim
		  };
		
		  ReactPropTypes.checkPropTypes = emptyFunction;
		  ReactPropTypes.PropTypes = ReactPropTypes;
		
		  return ReactPropTypes;
		};


	/***/ },
	/* 11 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_11__;

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		  Copyright (c) 2016 Jed Watson.
		  Licensed under the MIT License (MIT), see
		  http://jedwatson.github.io/classnames
		*/
		/* global define */
		
		(function () {
			'use strict';
		
			var hasOwn = {}.hasOwnProperty;
		
			function classNames () {
				var classes = [];
		
				for (var i = 0; i < arguments.length; i++) {
					var arg = arguments[i];
					if (!arg) continue;
		
					var argType = typeof arg;
		
					if (argType === 'string' || argType === 'number') {
						classes.push(arg);
					} else if (Array.isArray(arg)) {
						classes.push(classNames.apply(null, arg));
					} else if (argType === 'object') {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					}
				}
		
				return classes.join(' ');
			}
		
			if (typeof module !== 'undefined' && module.exports) {
				module.exports = classNames;
			} else if (true) {
				// register as 'classnames', consistent with npm package name
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return classNames;
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else {
				window.classNames = classNames;
			}
		}());


	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		exports.matchesSelector = matchesSelector;
		exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
		exports.addEvent = addEvent;
		exports.removeEvent = removeEvent;
		exports.outerHeight = outerHeight;
		exports.outerWidth = outerWidth;
		exports.innerHeight = innerHeight;
		exports.innerWidth = innerWidth;
		exports.offsetXYFromParent = offsetXYFromParent;
		exports.createCSSTransform = createCSSTransform;
		exports.createSVGTransform = createSVGTransform;
		exports.getTouch = getTouch;
		exports.getTouchIdentifier = getTouchIdentifier;
		exports.addUserSelectStyles = addUserSelectStyles;
		exports.removeUserSelectStyles = removeUserSelectStyles;
		exports.styleHacks = styleHacks;
		
		var _shims = __webpack_require__(14);
		
		var _getPrefix = __webpack_require__(15);
		
		var _getPrefix2 = _interopRequireDefault(_getPrefix);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
		
		/*:: import type {ControlPosition} from './types';*/
		
		
		var matchesSelectorFunc = '';
		function matchesSelector(el /*: Node*/, selector /*: string*/) /*: boolean*/ {
		  if (!matchesSelectorFunc) {
		    matchesSelectorFunc = (0, _shims.findInArray)(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {
		      // $FlowIgnore: Doesn't think elements are indexable
		      return (0, _shims.isFunction)(el[method]);
		    });
		  }
		
		  // $FlowIgnore: Doesn't think elements are indexable
		  return el[matchesSelectorFunc].call(el, selector);
		}
		
		// Works up the tree to the draggable itself attempting to match selector.
		function matchesSelectorAndParentsTo(el /*: Node*/, selector /*: string*/, baseNode /*: Node*/) /*: boolean*/ {
		  var node = el;
		  do {
		    if (matchesSelector(node, selector)) return true;
		    if (node === baseNode) return false;
		    node = node.parentNode;
		  } while (node);
		
		  return false;
		}
		
		function addEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {
		  if (!el) {
		    return;
		  }
		  if (el.attachEvent) {
		    el.attachEvent('on' + event, handler);
		  } else if (el.addEventListener) {
		    el.addEventListener(event, handler, true);
		  } else {
		    // $FlowIgnore: Doesn't think elements are indexable
		    el['on' + event] = handler;
		  }
		}
		
		function removeEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {
		  if (!el) {
		    return;
		  }
		  if (el.detachEvent) {
		    el.detachEvent('on' + event, handler);
		  } else if (el.removeEventListener) {
		    el.removeEventListener(event, handler, true);
		  } else {
		    // $FlowIgnore: Doesn't think elements are indexable
		    el['on' + event] = null;
		  }
		}
		
		function outerHeight(node /*: HTMLElement*/) /*: number*/ {
		  // This is deliberately excluding margin for our calculations, since we are using
		  // offsetTop which is including margin. See getBoundPosition
		  var height = node.clientHeight;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  height += (0, _shims.int)(computedStyle.borderTopWidth);
		  height += (0, _shims.int)(computedStyle.borderBottomWidth);
		  return height;
		}
		
		function outerWidth(node /*: HTMLElement*/) /*: number*/ {
		  // This is deliberately excluding margin for our calculations, since we are using
		  // offsetLeft which is including margin. See getBoundPosition
		  var width = node.clientWidth;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  width += (0, _shims.int)(computedStyle.borderLeftWidth);
		  width += (0, _shims.int)(computedStyle.borderRightWidth);
		  return width;
		}
		function innerHeight(node /*: HTMLElement*/) /*: number*/ {
		  var height = node.clientHeight;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  height -= (0, _shims.int)(computedStyle.paddingTop);
		  height -= (0, _shims.int)(computedStyle.paddingBottom);
		  return height;
		}
		
		function innerWidth(node /*: HTMLElement*/) /*: number*/ {
		  var width = node.clientWidth;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  width -= (0, _shims.int)(computedStyle.paddingLeft);
		  width -= (0, _shims.int)(computedStyle.paddingRight);
		  return width;
		}
		
		// Get from offsetParent
		function offsetXYFromParent(evt /*: {clientX: number, clientY: number}*/, offsetParent /*: HTMLElement*/) /*: ControlPosition*/ {
		  var isBody = offsetParent === offsetParent.ownerDocument.body;
		  var offsetParentRect = isBody ? { left: 0, top: 0 } : offsetParent.getBoundingClientRect();
		
		  var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;
		  var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;
		
		  return { x: x, y: y };
		}
		
		function createCSSTransform(_ref) /*: Object*/ {
		  var x = _ref.x,
		      y = _ref.y;
		
		  // Replace unitless items with px
		  return _defineProperty({}, (0, _getPrefix.browserPrefixToKey)('transform', _getPrefix2.default), 'translate(' + x + 'px,' + y + 'px)');
		}
		
		function createSVGTransform(_ref3) /*: string*/ {
		  var x = _ref3.x,
		      y = _ref3.y;
		
		  return 'translate(' + x + ',' + y + ')';
		}
		
		function getTouch(e /*: MouseTouchEvent*/, identifier /*: number*/) /*: ?{clientX: number, clientY: number}*/ {
		  return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, function (t) {
		    return identifier === t.identifier;
		  }) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, function (t) {
		    return identifier === t.identifier;
		  });
		}
		
		function getTouchIdentifier(e /*: MouseTouchEvent*/) /*: ?number*/ {
		  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
		  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
		}
		
		// User-select Hacks:
		//
		// Useful for preventing blue highlights all over everything when dragging.
		var userSelectPrefix = (0, _getPrefix.getPrefix)('user-select');
		var userSelect = (0, _getPrefix.browserPrefixToStyle)('user-select', userSelectPrefix);
		var userSelectStyle = ';' + userSelect + ': none;';
		var userSelectReplaceRegExp = new RegExp(';?' + userSelect + ': none;'); // leading ; not present on IE
		
		// Note we're passing `document` b/c we could be iframed
		function addUserSelectStyles(body /*: HTMLElement*/) {
		  var style = body.getAttribute('style') || '';
		  if (userSelectReplaceRegExp.test(style)) return; // don't add twice
		  body.setAttribute('style', style + userSelectStyle);
		}
		
		function removeUserSelectStyles(body /*: HTMLElement*/) {
		  var style = body.getAttribute('style') || '';
		  body.setAttribute('style', style.replace(userSelectReplaceRegExp, ''));
		}
		
		function styleHacks() /*: Object*/ {
		  var childStyle /*: Object*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		  // Workaround IE pointer events; see #51
		  // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278
		  return _extends({
		    touchAction: 'none'
		  }, childStyle);
		}

	/***/ },
	/* 14 */
	/***/ function(module, exports) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.findInArray = findInArray;
		exports.isFunction = isFunction;
		exports.isNum = isNum;
		exports.int = int;
		exports.dontSetMe = dontSetMe;
		
		// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
		function findInArray(array /*: Array<any> | TouchList*/, callback /*: Function*/) /*: any*/ {
		  for (var i = 0, length = array.length; i < length; i++) {
		    if (callback.apply(callback, [array[i], i, array])) return array[i];
		  }
		}
		
		function isFunction(func /*: any*/) /*: boolean*/ {
		  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
		}
		
		function isNum(num /*: any*/) /*: boolean*/ {
		  return typeof num === 'number' && !isNaN(num);
		}
		
		function int(a /*: string*/) /*: number*/ {
		  return parseInt(a, 10);
		}
		
		function dontSetMe(props /*: Object*/, propName /*: string*/, componentName /*: string*/) {
		  if (props[propName]) {
		    return new Error('Invalid prop ' + propName + ' passed to ' + componentName + ' - do not set this, set it on the child.');
		  }
		}

	/***/ },
	/* 15 */
	/***/ function(module, exports) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.getPrefix = getPrefix;
		exports.browserPrefixToKey = browserPrefixToKey;
		exports.browserPrefixToStyle = browserPrefixToStyle;
		var prefixes = ['Moz', 'Webkit', 'O', 'ms'];
		function getPrefix() /*: string*/ {
		  var prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';
		
		  // Checking specifically for 'window.document' is for pseudo-browser server-side
		  // environments that define 'window' as the global context.
		  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)
		  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';
		
		  var style = window.document.documentElement.style;
		
		  if (prop in style) return '';
		
		  for (var i = 0; i < prefixes.length; i++) {
		    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
		  }
		
		  return '';
		}
		
		function browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/ {
		  return prefix ? '' + prefix + kebabToTitleCase(prop) : prop;
		}
		
		function browserPrefixToStyle(prop /*: string*/, prefix /*: string*/) /*: string*/ {
		  return prefix ? '-' + prefix.toLowerCase() + '-' + prop : prop;
		}
		
		function kebabToTitleCase(str /*: string*/) /*: string*/ {
		  var out = '';
		  var shouldCapitalize = true;
		  for (var i = 0; i < str.length; i++) {
		    if (shouldCapitalize) {
		      out += str[i].toUpperCase();
		      shouldCapitalize = false;
		    } else if (str[i] === '-') {
		      shouldCapitalize = true;
		    } else {
		      out += str[i];
		    }
		  }
		  return out;
		}
		
		// Default export is the prefix itself, like 'Moz', 'Webkit', etc
		// Note that you may have to re-test for certain things; for instance, Chrome 50
		// can handle unprefixed `transform`, but not unprefixed `user-select`
		exports.default = getPrefix();

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.getBoundPosition = getBoundPosition;
		exports.snapToGrid = snapToGrid;
		exports.canDragX = canDragX;
		exports.canDragY = canDragY;
		exports.getControlPosition = getControlPosition;
		exports.createCoreData = createCoreData;
		exports.createDraggableData = createDraggableData;
		
		var _shims = __webpack_require__(14);
		
		var _reactDom = __webpack_require__(11);
		
		var _reactDom2 = _interopRequireDefault(_reactDom);
		
		var _domFns = __webpack_require__(13);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		/*:: import type Draggable from '../Draggable';*/
		/*:: import type {Bounds, ControlPosition, DraggableData} from './types';*/
		/*:: import type DraggableCore from '../DraggableCore';*/
		function getBoundPosition(draggable /*: Draggable*/, x /*: number*/, y /*: number*/) /*: [number, number]*/ {
		  // If no bounds, short-circuit and move on
		  if (!draggable.props.bounds) return [x, y];
		
		  // Clone new bounds
		  var bounds = draggable.props.bounds;
		
		  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);
		  var node = _reactDom2.default.findDOMNode(draggable);
		
		  if (typeof bounds === 'string') {
		    var ownerDocument = node.ownerDocument;
		
		    var ownerWindow = ownerDocument.defaultView;
		    var boundNode = void 0;
		    if (bounds === 'parent') {
		      boundNode = node.parentNode;
		    } else {
		      boundNode = ownerDocument.querySelector(bounds);
		      if (!boundNode) throw new Error('Bounds selector "' + bounds + '" could not find an element.');
		    }
		    var nodeStyle = ownerWindow.getComputedStyle(node);
		    var boundNodeStyle = ownerWindow.getComputedStyle(boundNode);
		    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.
		    bounds = {
		      left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
		      top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
		      right: (0, _domFns.innerWidth)(boundNode) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
		      bottom: (0, _domFns.innerHeight)(boundNode) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
		    };
		  }
		
		  // Keep x and y below right and bottom limits...
		  if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);
		  if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom);
		
		  // But above left and top limits.
		  if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);
		  if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);
		
		  return [x, y];
		}
		
		function snapToGrid(grid /*: [number, number]*/, pendingX /*: number*/, pendingY /*: number*/) /*: [number, number]*/ {
		  var x = Math.round(pendingX / grid[0]) * grid[0];
		  var y = Math.round(pendingY / grid[1]) * grid[1];
		  return [x, y];
		}
		
		function canDragX(draggable /*: Draggable*/) /*: boolean*/ {
		  return draggable.props.axis === 'both' || draggable.props.axis === 'x';
		}
		
		function canDragY(draggable /*: Draggable*/) /*: boolean*/ {
		  return draggable.props.axis === 'both' || draggable.props.axis === 'y';
		}
		
		// Get {x, y} positions from event.
		function getControlPosition(e /*: MouseTouchEvent*/, touchIdentifier /*: ?number*/, draggableCore /*: DraggableCore*/) /*: ?ControlPosition*/ {
		  var touchObj = typeof touchIdentifier === 'number' ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
		  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch
		  var node = _reactDom2.default.findDOMNode(draggableCore);
		  // User can provide an offsetParent if desired.
		  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
		  return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent);
		}
		
		// Create an data object exposed by <DraggableCore>'s events
		function createCoreData(draggable /*: DraggableCore*/, x /*: number*/, y /*: number*/) /*: DraggableData*/ {
		  var state = draggable.state;
		  var isStart = !(0, _shims.isNum)(state.lastX);
		
		  if (isStart) {
		    // If this is our first move, use the x and y as last coords.
		    return {
		      node: _reactDom2.default.findDOMNode(draggable),
		      deltaX: 0, deltaY: 0,
		      lastX: x, lastY: y,
		      x: x, y: y
		    };
		  } else {
		    // Otherwise calculate proper values.
		    return {
		      node: _reactDom2.default.findDOMNode(draggable),
		      deltaX: x - state.lastX, deltaY: y - state.lastY,
		      lastX: state.lastX, lastY: state.lastY,
		      x: x, y: y
		    };
		  }
		}
		
		// Create an data exposed by <Draggable>'s events
		function createDraggableData(draggable /*: Draggable*/, coreData /*: DraggableData*/) /*: DraggableData*/ {
		  return {
		    node: coreData.node,
		    x: draggable.state.x + coreData.deltaX,
		    y: draggable.state.y + coreData.deltaY,
		    deltaX: coreData.deltaX,
		    deltaY: coreData.deltaY,
		    lastX: draggable.state.x,
		    lastY: draggable.state.y
		  };
		}
		
		// A lot faster than stringify/parse
		function cloneBounds(bounds /*: Bounds*/) /*: Bounds*/ {
		  return {
		    left: bounds.left,
		    top: bounds.top,
		    right: bounds.right,
		    bottom: bounds.bottom
		  };
		}

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _react = __webpack_require__(2);
		
		var _react2 = _interopRequireDefault(_react);
		
		var _propTypes = __webpack_require__(3);
		
		var _propTypes2 = _interopRequireDefault(_propTypes);
		
		var _reactDom = __webpack_require__(11);
		
		var _reactDom2 = _interopRequireDefault(_reactDom);
		
		var _domFns = __webpack_require__(13);
		
		var _positionFns = __webpack_require__(16);
		
		var _shims = __webpack_require__(14);
		
		var _log = __webpack_require__(19);
		
		var _log2 = _interopRequireDefault(_log);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		// Simple abstraction for dragging events names.
		/*:: import type {EventHandler} from './utils/types';*/
		var eventsFor = {
		  touch: {
		    start: 'touchstart',
		    move: 'touchmove',
		    stop: 'touchend'
		  },
		  mouse: {
		    start: 'mousedown',
		    move: 'mousemove',
		    stop: 'mouseup'
		  }
		};
		
		// Default to mouse events.
		var dragEventFor = eventsFor.mouse;
		
		//
		// Define <DraggableCore>.
		//
		// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
		// work well with libraries that require more control over the element.
		//
		
		/*:: type CoreState = {
		  dragging: boolean,
		  lastX: number,
		  lastY: number,
		  touchIdentifier: ?number
		};*/
		
		var DraggableCore = function (_React$Component) {
		  _inherits(DraggableCore, _React$Component);
		
		  function DraggableCore() {
		    var _ref;
		
		    var _temp, _this, _ret;
		
		    _classCallCheck(this, DraggableCore);
		
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		
		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DraggableCore.__proto__ || Object.getPrototypeOf(DraggableCore)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      dragging: false,
		      // Used while dragging to determine deltas.
		      lastX: NaN, lastY: NaN,
		      touchIdentifier: null
		    }, _this.handleDragStart = function (e) {
		      // Make it possible to attach event handlers on top of this one.
		      _this.props.onMouseDown(e);
		
		      // Only accept left-clicks.
		      if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;
		
		      // Get nodes. Be sure to grab relative document (could be iframed)
		      var domNode = _reactDom2.default.findDOMNode(_this);
		      var ownerDocument = domNode.ownerDocument;
		
		      // Short circuit if handle or cancel prop was provided and selector doesn't match.
		
		      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.handle, domNode) || _this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, domNode)) {
		        return;
		      }
		
		      // Set touch identifier in component state if this is a touch event. This allows us to
		      // distinguish between individual touches on multitouch screens by identifying which
		      // touchpoint was set to this element.
		      var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
		      _this.setState({ touchIdentifier: touchIdentifier });
		
		      // Get the current drag point from the event. This is used as the offset.
		      var position = (0, _positionFns.getControlPosition)(e, touchIdentifier, _this);
		      if (position == null) return; // not possible but satisfies flow
		      var x = position.x,
		          y = position.y;
		
		      // Create an event object with all the data parents need to make a decision here.
		
		      var coreEvent = (0, _positionFns.createCoreData)(_this, x, y);
		
		      (0, _log2.default)('DraggableCore: handleDragStart: %j', coreEvent);
		
		      // Call event handler. If it returns explicit false, cancel.
		      (0, _log2.default)('calling', _this.props.onStart);
		      var shouldUpdate = _this.props.onStart(e, coreEvent);
		      if (shouldUpdate === false) return;
		
		      // Add a style to the body to disable user-select. This prevents text from
		      // being selected all over the page.
		      if (_this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument.body);
		
		      // Initiate dragging. Set the current x and y as offsets
		      // so we know how much we've moved during the drag. This allows us
		      // to drag elements around even if they have been moved, without issue.
		      _this.setState({
		        dragging: true,
		
		        lastX: x,
		        lastY: y
		      });
		
		      // Add events to the document directly so we catch when the user's mouse/touch moves outside of
		      // this element. We use different events depending on whether or not we have detected that this
		      // is a touch-capable device.
		      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
		      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
		    }, _this.handleDrag = function (e) {
		
		      // Prevent scrolling on mobile devices, like ipad/iphone.
		      if (e.type === 'touchmove') e.preventDefault();
		
		      // Get the current drag point from the event. This is used as the offset.
		      var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _this);
		      if (position == null) return;
		      var x = position.x,
		          y = position.y;
		
		      // Snap to grid if prop has been provided
		
		      if (Array.isArray(_this.props.grid)) {
		        var deltaX = x - _this.state.lastX,
		            deltaY = y - _this.state.lastY;
		
		        var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);
		
		        var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);
		
		        deltaX = _snapToGrid2[0];
		        deltaY = _snapToGrid2[1];
		
		        if (!deltaX && !deltaY) return; // skip useless drag
		        x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;
		      }
		
		      var coreEvent = (0, _positionFns.createCoreData)(_this, x, y);
		
		      (0, _log2.default)('DraggableCore: handleDrag: %j', coreEvent);
		
		      // Call event handler. If it returns explicit false, trigger end.
		      var shouldUpdate = _this.props.onDrag(e, coreEvent);
		      if (shouldUpdate === false) {
		        try {
		          // $FlowIgnore
		          _this.handleDragStop(new MouseEvent('mouseup'));
		        } catch (err) {
		          // Old browsers
		          var event = ((document.createEvent('MouseEvents') /*: any*/) /*: MouseTouchEvent*/);
		          // I see why this insanity was deprecated
		          // $FlowIgnore
		          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		          _this.handleDragStop(event);
		        }
		        return;
		      }
		
		      _this.setState({
		        lastX: x,
		        lastY: y
		      });
		    }, _this.handleDragStop = function (e) {
		      if (!_this.state.dragging) return;
		
		      var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _this);
		      if (position == null) return;
		      var x = position.x,
		          y = position.y;
		
		      var coreEvent = (0, _positionFns.createCoreData)(_this, x, y);
		
		      var _ReactDOM$findDOMNode = _reactDom2.default.findDOMNode(_this),
		          ownerDocument = _ReactDOM$findDOMNode.ownerDocument;
		
		      // Remove user-select hack
		
		
		      if (_this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(ownerDocument.body);
		
		      (0, _log2.default)('DraggableCore: handleDragStop: %j', coreEvent);
		
		      // Reset the el.
		      _this.setState({
		        dragging: false,
		        lastX: NaN,
		        lastY: NaN
		      });
		
		      // Call event handler
		      _this.props.onStop(e, coreEvent);
		
		      // Remove event handlers
		      (0, _log2.default)('DraggableCore: Removing handlers');
		      (0, _domFns.removeEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
		      (0, _domFns.removeEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
		    }, _this.onMouseDown = function (e) {
		      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse
		
		      return _this.handleDragStart(e);
		    }, _this.onMouseUp = function (e) {
		      dragEventFor = eventsFor.mouse;
		
		      return _this.handleDragStop(e);
		    }, _this.onTouchStart = function (e) {
		      // We're on a touch device now, so change the event handlers
		      dragEventFor = eventsFor.touch;
		
		      return _this.handleDragStart(e);
		    }, _this.onTouchEnd = function (e) {
		      // We're on a touch device now, so change the event handlers
		      dragEventFor = eventsFor.touch;
		
		      return _this.handleDragStop(e);
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }
		
		  _createClass(DraggableCore, [{
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      // Remove any leftover event handlers. Remove both touch and mouse handlers in case
		      // some browser quirk caused a touch event to fire during a mouse move, or vice versa.
		      var _ReactDOM$findDOMNode2 = _reactDom2.default.findDOMNode(this),
		          ownerDocument = _ReactDOM$findDOMNode2.ownerDocument;
		
		      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
		      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
		      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
		      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
		      if (this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(ownerDocument.body);
		    }
		
		    // Same as onMouseDown (start drag), but now consider this a touch device.
		
		  }, {
		    key: 'render',
		    value: function render() /*: React.Element<any>*/ {
		      // Reuse the child provided
		      // This makes it flexible to use whatever element is wanted (div, ul, etc)
		      return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), {
		        style: (0, _domFns.styleHacks)(this.props.children.props.style),
		
		        // Note: mouseMove handler is attached to document so it will still function
		        // when the user drags quickly and leaves the bounds of the element.
		        onMouseDown: this.onMouseDown,
		        onTouchStart: this.onTouchStart,
		        onMouseUp: this.onMouseUp,
		        onTouchEnd: this.onTouchEnd
		      });
		    }
		  }]);
		
		  return DraggableCore;
		}(_react2.default.Component);
		
		DraggableCore.displayName = 'DraggableCore';
		DraggableCore.propTypes = {
		  /**
		   * `allowAnyClick` allows dragging using any mouse button.
		   * By default, we only accept the left button.
		   *
		   * Defaults to `false`.
		   */
		  allowAnyClick: _propTypes2.default.bool,
		
		  /**
		   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
		   * with the exception of `onMouseDown`, will not fire.
		   */
		  disabled: _propTypes2.default.bool,
		
		  /**
		   * By default, we add 'user-select:none' attributes to the document body
		   * to prevent ugly text selection during drag. If this is causing problems
		   * for your app, set this to `false`.
		   */
		  enableUserSelectHack: _propTypes2.default.bool,
		
		  /**
		   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
		   * instead of using the parent node.
		   */
		  offsetParent: function offsetParent(props, propName) {
		    if (process.browser && props[propName] && props[propName].nodeType !== 1) {
		      throw new Error('Draggable\'s offsetParent must be a DOM Node.');
		    }
		  },
		
		  /**
		   * `grid` specifies the x and y that dragging should snap to.
		   */
		  grid: _propTypes2.default.arrayOf(_propTypes2.default.number),
		
		  /**
		   * `handle` specifies a selector to be used as the handle that initiates drag.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *         return (
		   *            <Draggable handle=".handle">
		   *              <div>
		   *                  <div className="handle">Click me to drag</div>
		   *                  <div>This is some other content</div>
		   *              </div>
		   *           </Draggable>
		   *         );
		   *       }
		   *   });
		   * ```
		   */
		  handle: _propTypes2.default.string,
		
		  /**
		   * `cancel` specifies a selector to be used to prevent drag initialization.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *           return(
		   *               <Draggable cancel=".cancel">
		   *                   <div>
		   *                     <div className="cancel">You can't drag from here</div>
		   *                     <div>Dragging here works fine</div>
		   *                   </div>
		   *               </Draggable>
		   *           );
		   *       }
		   *   });
		   * ```
		   */
		  cancel: _propTypes2.default.string,
		
		  /**
		   * Called when dragging starts.
		   * If this function returns the boolean false, dragging will be canceled.
		   */
		  onStart: _propTypes2.default.func,
		
		  /**
		   * Called while dragging.
		   * If this function returns the boolean false, dragging will be canceled.
		   */
		  onDrag: _propTypes2.default.func,
		
		  /**
		   * Called when dragging stops.
		   * If this function returns the boolean false, the drag will remain active.
		   */
		  onStop: _propTypes2.default.func,
		
		  /**
		   * A workaround option which can be passed if onMouseDown needs to be accessed,
		   * since it'll always be blocked (as there is internal use of onMouseDown)
		   */
		  onMouseDown: _propTypes2.default.func,
		
		  /**
		   * These properties should be defined on the child, not here.
		   */
		  className: _shims.dontSetMe,
		  style: _shims.dontSetMe,
		  transform: _shims.dontSetMe
		};
		DraggableCore.defaultProps = {
		  allowAnyClick: false, // by default only accept left click
		  cancel: null,
		  disabled: false,
		  enableUserSelectHack: true,
		  offsetParent: null,
		  handle: null,
		  grid: null,
		  transform: null,
		  onStart: function onStart() {},
		  onDrag: function onDrag() {},
		  onStop: function onStop() {},
		  onMouseDown: function onMouseDown() {}
		};
		exports.default = DraggableCore;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))

	/***/ },
	/* 18 */
	/***/ function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {};
		
		// cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.
		
		var cachedSetTimeout;
		var cachedClearTimeout;
		
		function defaultSetTimout() {
		    throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout () {
		    throw new Error('clearTimeout has not been defined');
		}
		(function () {
		    try {
		        if (typeof setTimeout === 'function') {
		            cachedSetTimeout = setTimeout;
		        } else {
		            cachedSetTimeout = defaultSetTimout;
		        }
		    } catch (e) {
		        cachedSetTimeout = defaultSetTimout;
		    }
		    try {
		        if (typeof clearTimeout === 'function') {
		            cachedClearTimeout = clearTimeout;
		        } else {
		            cachedClearTimeout = defaultClearTimeout;
		        }
		    } catch (e) {
		        cachedClearTimeout = defaultClearTimeout;
		    }
		} ())
		function runTimeout(fun) {
		    if (cachedSetTimeout === setTimeout) {
		        //normal enviroments in sane situations
		        return setTimeout(fun, 0);
		    }
		    // if setTimeout wasn't available but was latter defined
		    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		        cachedSetTimeout = setTimeout;
		        return setTimeout(fun, 0);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedSetTimeout(fun, 0);
		    } catch(e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		            return cachedSetTimeout.call(null, fun, 0);
		        } catch(e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		            return cachedSetTimeout.call(this, fun, 0);
		        }
		    }
		
		
		}
		function runClearTimeout(marker) {
		    if (cachedClearTimeout === clearTimeout) {
		        //normal enviroments in sane situations
		        return clearTimeout(marker);
		    }
		    // if clearTimeout wasn't available but was latter defined
		    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		        cachedClearTimeout = clearTimeout;
		        return clearTimeout(marker);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedClearTimeout(marker);
		    } catch (e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		            return cachedClearTimeout.call(null, marker);
		        } catch (e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		            return cachedClearTimeout.call(this, marker);
		        }
		    }
		
		
		
		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;
		
		function cleanUpNextTick() {
		    if (!draining || !currentQueue) {
		        return;
		    }
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}
		
		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = runTimeout(cleanUpNextTick);
		    draining = true;
		
		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    runClearTimeout(timeout);
		}
		
		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        runTimeout(drainQueue);
		    }
		};
		
		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};
		
		function noop() {}
		
		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;
		
		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};
		
		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = log;
		
		/*eslint no-console:0*/
		function log() {
		  var _console;
		
		  if ((undefined)) (_console = console).log.apply(_console, arguments);
		}

	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=react-draggable.js.map

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	__webpack_require__(185);
	__webpack_require__(186);
	PDFJS.workerSrc = __webpack_require__(187);

	PDFJS.disableWorker = true;

	var ReactPDF = function (_Component) {
	  _inherits(ReactPDF, _Component);

	  function ReactPDF() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, ReactPDF);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactPDF.__proto__ || Object.getPrototypeOf(ReactPDF)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(ReactPDF, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.handleFileLoad();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.isParameterObject(nextProps.file)) {
	        // File is a parameter object
	        if (nextProps.file && !this.props.file || nextProps.file.data !== this.props.file.data || nextProps.file.range !== this.props.file.range || nextProps.file.url !== this.props.file.url) {
	          this.handleFileLoad(nextProps);
	          return;
	        }
	      } else if (nextProps.file && nextProps.file !== this.props.file) {
	        // File is a normal object or not an object at all
	        this.handleFileLoad(nextProps);
	        return;
	      }

	      if (this.state.pdf && typeof nextProps.pageIndex !== 'undefined' && nextProps.pageIndex !== this.props.pageIndex) {
	        this.loadPage(nextProps.pageIndex);
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return nextState.pdf !== this.state.pdf || nextState.page !== this.state.page || nextProps.width !== this.props.width || nextProps.scale !== this.props.scale;
	    }

	    /**
	     * Called when a document is loaded successfully.
	     */


	    /**
	     * Called when a document fails to load.
	     */


	    /**
	     * Called when a page is loaded successfully.
	     */


	    /**
	     * Called when a page is rendered successfully.
	     */


	    /**
	     * Called when a page fails to load or render.
	     */

	  }, {
	    key: 'getPageScale',
	    value: function getPageScale() {
	      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.page;
	      var _props = this.props,
	          scale = _props.scale,
	          width = _props.width;

	      // Be default, we'll render page at 100% * scale width.

	      var pageScale = 1;

	      // If width is defined, calculate the scale of the page so it could be of desired width.
	      if (width) {
	        pageScale = width / page.getViewport(scale).width;
	      }

	      return scale * pageScale;
	    }
	  }, {
	    key: 'handleFileLoad',
	    value: function handleFileLoad() {
	      var _this2 = this;

	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var file = props.file;


	      if (!file || this.isParameterObject(file) && !file.data && !file.range && !file.url) {
	        return null;
	      }

	      this.setState({
	        page: null,
	        pdf: null
	      });

	      // File is a string
	      if (typeof file === 'string') {
	        // File is not data URI
	        if (!this.isDataURI(file)) {
	          if (window.location.protocol === 'file:') {
	            this.displayCORSWarning();
	          }

	          return this.loadDocument(file);
	        }

	        // File is data URI
	        file = this.dataURItoBlob(file);

	        // Fall through to "File is a blob"
	      }

	      // File is a Blob
	      if (file instanceof Blob) {
	        file = URL.createObjectURL(file);

	        return this.loadDocument(file);
	      }

	      // File is a File
	      if (file instanceof File) {
	        var _ret2 = function () {
	          var reader = new FileReader();

	          reader.onloadend = function () {
	            _this2.loadDocument(new Uint8Array(reader.result));
	          };

	          return {
	            v: reader.readAsArrayBuffer(file)
	          };
	        }();

	        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	      }

	      // File is an ArrayBuffer
	      if (file instanceof ArrayBuffer) {
	        return this.loadDocument(file);
	      }

	      // File is a parameter object
	      if (this.isParameterObject(file)) {
	        if (file.url && window.location.protocol === 'file:') {
	          this.displayCORSWarning();
	        }

	        // Prevent from modifying props
	        file = Object.assign({}, file);

	        // File is data URI
	        if (file.url && this.isDataURI(file.url)) {
	          file = URL.createObjectURL(this.dataURItoBlob(file.url));
	        }

	        return this.loadDocument(file);
	      }

	      throw new Error('Unrecognized input type.');
	    }
	  }, {
	    key: 'loadDocument',
	    value: function loadDocument() {
	      var _PDFJS;

	      (_PDFJS = PDFJS).getDocument.apply(_PDFJS, arguments).then(this.onDocumentLoad).catch(this.onDocumentError);
	    }
	  }, {
	    key: 'loadPage',
	    value: function loadPage(pageIndex) {
	      var pdf = this.state.pdf;


	      if (!pdf) {
	        throw new Error('Unexpected call to getPage() before the document has been loaded.');
	      }

	      var pageNumber = pageIndex + 1;

	      if (!pageIndex || pageNumber < 1) {
	        pageNumber = 1;
	      } else if (pageNumber >= pdf.numPages) {
	        pageNumber = pdf.numPages;
	      }

	      pdf.getPage(pageNumber).then(this.onPageLoad).catch(this.onPageError);
	    }
	  }, {
	    key: 'renderNoData',
	    value: function renderNoData() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        this.props.noData
	      );
	    }
	  }, {
	    key: 'renderError',
	    value: function renderError() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        this.props.error
	      );
	    }
	  }, {
	    key: 'renderLoader',
	    value: function renderLoader() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        this.props.loading
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      var file = this.props.file;
	      var _state = this.state,
	          pdf = _state.pdf,
	          page = _state.page;


	      if (!file) {
	        return this.renderNoData();
	      }

	      if (pdf === false || page === false) {
	        return this.renderError();
	      }

	      if (pdf === null || page === null) {
	        return this.renderLoader();
	      }

	      return _react2.default.createElement('canvas', {
	        ref: function ref(_ref2) {
	          if (!_ref2) return;

	          var canvas = _ref2;

	          var pixelRatio = window.devicePixelRatio || 1;
	          var viewport = page.getViewport(_this3.getPageScale() * pixelRatio);

	          canvas.height = viewport.height;
	          canvas.width = viewport.width;

	          canvas.style.height = viewport.height / pixelRatio + 'px';
	          canvas.style.width = viewport.width / pixelRatio + 'px';

	          var canvasContext = canvas.getContext('2d');

	          var renderContext = {
	            canvasContext: canvasContext,
	            viewport: viewport
	          };

	          // If another render is in progress, let's cancel it
	          /* eslint-disable no-underscore-dangle */
	          if (_this3.renderer && _this3.renderer._internalRenderTask.running) {
	            _this3.renderer._internalRenderTask.cancel();
	          }
	          /* eslint-enable no-underscore-dangle */

	          _this3.renderer = page.render(renderContext);

	          _this3.renderer.then(_this3.onPageRender).catch(function (dismiss) {
	            if (dismiss === 'cancelled') {
	              // Everything's alright
	              return;
	            }

	            _this3.onPageError(dismiss);
	          });
	        }
	      });
	    }
	  }]);

	  return ReactPDF;
	}(_react.Component);

	var _initialiseProps = function _initialiseProps() {
	  var _this4 = this;

	  this.state = {
	    pdf: null,
	    page: null
	  };

	  this.onDocumentLoad = function (pdf) {
	    _this4.callIfDefined(_this4.props.onDocumentLoad, {
	      total: pdf.numPages
	    });

	    _this4.setState({ pdf: pdf });

	    _this4.loadPage(_this4.props.pageIndex);
	  };

	  this.onDocumentError = function (error) {
	    _this4.callIfDefined(_this4.props.onDocumentError, error);

	    _this4.setState({ pdf: false });
	  };

	  this.onPageLoad = function (page) {
	    var scale = _this4.getPageScale(page);

	    _this4.callIfDefined(_this4.props.onPageLoad, {
	      pageIndex: page.pageIndex,
	      pageNumber: page.pageNumber,
	      get width() {
	        return page.view[2] * scale;
	      },
	      get height() {
	        return page.view[3] * scale;
	      },
	      scale: scale,
	      get originalWidth() {
	        return page.view[2];
	      },
	      get originalHeight() {
	        return page.view[3];
	      }
	    });

	    _this4.setState({ page: page });
	  };

	  this.onPageRender = function () {
	    _this4.renderer = null;

	    _this4.callIfDefined(_this4.props.onPageRender);
	  };

	  this.onPageError = function (error) {
	    _this4.callIfDefined(_this4.props.onPageError, error);

	    _this4.setState({ page: false });
	  };

	  this.callIfDefined = function (fn, args) {
	    if (fn && typeof fn === 'function') {
	      fn(args);
	    }
	  };

	  this.displayCORSWarning = function () {
	    // eslint-disable-next-line no-console
	    console.warn('Loading PDF as base64 strings/URLs might not work on protocols other than HTTP/HTTPS. On Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.');
	  };

	  this.isParameterObject = function (object) {
	    return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && ['file', 'range', 'url'].some(function (key) {
	      return Object.keys(object).includes(key);
	    });
	  };

	  this.isDataURI = function (str) {
	    return (/^data:/.test(str)
	    );
	  };

	  this.dataURItoBlob = function (dataURI) {
	    var byteString = void 0;
	    if (dataURI.split(',')[0].indexOf('base64') >= 0) {
	      byteString = atob(dataURI.split(',')[1]);
	    } else {
	      byteString = unescape(dataURI.split(',')[1]);
	    }

	    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

	    var ia = new Uint8Array(byteString.length);
	    for (var i = 0; i < byteString.length; i += 1) {
	      ia[i] = byteString.charCodeAt(i);
	    }

	    return new Blob([ia], { type: mimeString });
	  };
	};

	exports.default = ReactPDF;


	ReactPDF.defaultProps = {
	  pageIndex: 0,
	  scale: 1.0,
	  error: 'Failed to load PDF file.',
	  loading: 'Loading PDF…',
	  noData: 'No PDF file specified.'
	};

	ReactPDF.propTypes = {
	  error: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.node]),
	  file: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.instanceOf(File), _react.PropTypes.instanceOf(Blob), _react.PropTypes.shape({
	    data: _react.PropTypes.object,
	    httpHeaders: _react.PropTypes.object,
	    range: _react.PropTypes.object,
	    url: _react.PropTypes.string
	  })]),
	  loading: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.node]),
	  noData: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.node]),
	  onDocumentError: _react.PropTypes.func,
	  onDocumentLoad: _react.PropTypes.func,
	  onPageError: _react.PropTypes.func,
	  onPageLoad: _react.PropTypes.func,
	  onPageRender: _react.PropTypes.func,
	  pageIndex: _react.PropTypes.number,
	  scale: _react.PropTypes.number,
	  width: _react.PropTypes.number
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright 2017 Mozilla Foundation
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("pdfjs-dist/web/compatibility", [], factory);
		else if(typeof exports === 'object')
			exports["pdfjs-dist/web/compatibility"] = factory();
		else
			root["pdfjs-dist/web/compatibility"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 2);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(global) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	if (typeof PDFJS === 'undefined' || !PDFJS.compatibilityChecked) {
	  var globalScope = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : undefined;
	  var userAgent = typeof navigator !== 'undefined' && navigator.userAgent || '';
	  var isAndroid = /Android/.test(userAgent);
	  var isAndroidPre3 = /Android\s[0-2][^\d]/.test(userAgent);
	  var isAndroidPre5 = /Android\s[0-4][^\d]/.test(userAgent);
	  var isChrome = userAgent.indexOf('Chrom') >= 0;
	  var isChromeWithRangeBug = /Chrome\/(39|40)\./.test(userAgent);
	  var isIOSChrome = userAgent.indexOf('CriOS') >= 0;
	  var isIE = userAgent.indexOf('Trident') >= 0;
	  var isIOS = /\b(iPad|iPhone|iPod)(?=;)/.test(userAgent);
	  var isOpera = userAgent.indexOf('Opera') >= 0;
	  var isSafari = /Safari\//.test(userAgent) && !/(Chrome\/|Android\s)/.test(userAgent);
	  var hasDOM = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object';
	  if (typeof PDFJS === 'undefined') {
	    globalScope.PDFJS = {};
	  }
	  PDFJS.compatibilityChecked = true;
	  (function checkTypedArrayCompatibility() {
	    if (typeof Uint8Array !== 'undefined') {
	      if (typeof Uint8Array.prototype.subarray === 'undefined') {
	        Uint8Array.prototype.subarray = function subarray(start, end) {
	          return new Uint8Array(this.slice(start, end));
	        };
	        Float32Array.prototype.subarray = function subarray(start, end) {
	          return new Float32Array(this.slice(start, end));
	        };
	      }
	      if (typeof Float64Array === 'undefined') {
	        globalScope.Float64Array = Float32Array;
	      }
	      return;
	    }
	    function subarray(start, end) {
	      return new TypedArray(this.slice(start, end));
	    }
	    function setArrayOffset(array, offset) {
	      if (arguments.length < 2) {
	        offset = 0;
	      }
	      for (var i = 0, n = array.length; i < n; ++i, ++offset) {
	        this[offset] = array[i] & 0xFF;
	      }
	    }
	    function Uint32ArrayView(buffer, length) {
	      this.buffer = buffer;
	      this.byteLength = buffer.length;
	      this.length = length;
	      ensureUint32ArrayViewProps(this.length);
	    }
	    Uint32ArrayView.prototype = Object.create(null);
	    var uint32ArrayViewSetters = 0;
	    function createUint32ArrayProp(index) {
	      return {
	        get: function get() {
	          var buffer = this.buffer,
	              offset = index << 2;
	          return (buffer[offset] | buffer[offset + 1] << 8 | buffer[offset + 2] << 16 | buffer[offset + 3] << 24) >>> 0;
	        },
	        set: function set(value) {
	          var buffer = this.buffer,
	              offset = index << 2;
	          buffer[offset] = value & 255;
	          buffer[offset + 1] = value >> 8 & 255;
	          buffer[offset + 2] = value >> 16 & 255;
	          buffer[offset + 3] = value >>> 24 & 255;
	        }
	      };
	    }
	    function ensureUint32ArrayViewProps(length) {
	      while (uint32ArrayViewSetters < length) {
	        Object.defineProperty(Uint32ArrayView.prototype, uint32ArrayViewSetters, createUint32ArrayProp(uint32ArrayViewSetters));
	        uint32ArrayViewSetters++;
	      }
	    }
	    function TypedArray(arg1) {
	      var result, i, n;
	      if (typeof arg1 === 'number') {
	        result = [];
	        for (i = 0; i < arg1; ++i) {
	          result[i] = 0;
	        }
	      } else if ('slice' in arg1) {
	        result = arg1.slice(0);
	      } else {
	        result = [];
	        for (i = 0, n = arg1.length; i < n; ++i) {
	          result[i] = arg1[i];
	        }
	      }
	      result.subarray = subarray;
	      result.buffer = result;
	      result.byteLength = result.length;
	      result.set = setArrayOffset;
	      if ((typeof arg1 === 'undefined' ? 'undefined' : _typeof(arg1)) === 'object' && arg1.buffer) {
	        result.buffer = arg1.buffer;
	      }
	      return result;
	    }
	    globalScope.Uint8Array = TypedArray;
	    globalScope.Int8Array = TypedArray;
	    globalScope.Int32Array = TypedArray;
	    globalScope.Uint16Array = TypedArray;
	    globalScope.Float32Array = TypedArray;
	    globalScope.Float64Array = TypedArray;
	    globalScope.Uint32Array = function () {
	      if (arguments.length === 3) {
	        if (arguments[1] !== 0) {
	          throw new Error('offset !== 0 is not supported');
	        }
	        return new Uint32ArrayView(arguments[0], arguments[2]);
	      }
	      return TypedArray.apply(this, arguments);
	    };
	  })();
	  (function canvasPixelArrayBuffer() {
	    if (!hasDOM || !window.CanvasPixelArray) {
	      return;
	    }
	    var cpaProto = window.CanvasPixelArray.prototype;
	    if ('buffer' in cpaProto) {
	      return;
	    }
	    Object.defineProperty(cpaProto, 'buffer', {
	      get: function get() {
	        return this;
	      },

	      enumerable: false,
	      configurable: true
	    });
	    Object.defineProperty(cpaProto, 'byteLength', {
	      get: function get() {
	        return this.length;
	      },

	      enumerable: false,
	      configurable: true
	    });
	  })();
	  (function normalizeURLObject() {
	    if (!globalScope.URL) {
	      globalScope.URL = globalScope.webkitURL;
	    }
	  })();
	  (function checkObjectDefinePropertyCompatibility() {
	    if (typeof Object.defineProperty !== 'undefined') {
	      var definePropertyPossible = true;
	      try {
	        if (hasDOM) {
	          Object.defineProperty(new Image(), 'id', { value: 'test' });
	        }
	        var Test = function Test() {};
	        Test.prototype = {
	          get id() {}
	        };
	        Object.defineProperty(new Test(), 'id', {
	          value: '',
	          configurable: true,
	          enumerable: true,
	          writable: false
	        });
	      } catch (e) {
	        definePropertyPossible = false;
	      }
	      if (definePropertyPossible) {
	        return;
	      }
	    }
	    Object.defineProperty = function objectDefineProperty(obj, name, def) {
	      delete obj[name];
	      if ('get' in def) {
	        obj.__defineGetter__(name, def['get']);
	      }
	      if ('set' in def) {
	        obj.__defineSetter__(name, def['set']);
	      }
	      if ('value' in def) {
	        obj.__defineSetter__(name, function objectDefinePropertySetter(value) {
	          this.__defineGetter__(name, function objectDefinePropertyGetter() {
	            return value;
	          });
	          return value;
	        });
	        obj[name] = def.value;
	      }
	    };
	  })();
	  (function checkXMLHttpRequestResponseCompatibility() {
	    if (typeof XMLHttpRequest === 'undefined') {
	      return;
	    }
	    var xhrPrototype = XMLHttpRequest.prototype;
	    var xhr = new XMLHttpRequest();
	    if (!('overrideMimeType' in xhr)) {
	      Object.defineProperty(xhrPrototype, 'overrideMimeType', {
	        value: function xmlHttpRequestOverrideMimeType(mimeType) {}
	      });
	    }
	    if ('responseType' in xhr) {
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'responseType', {
	      get: function xmlHttpRequestGetResponseType() {
	        return this._responseType || 'text';
	      },
	      set: function xmlHttpRequestSetResponseType(value) {
	        if (value === 'text' || value === 'arraybuffer') {
	          this._responseType = value;
	          if (value === 'arraybuffer' && typeof this.overrideMimeType === 'function') {
	            this.overrideMimeType('text/plain; charset=x-user-defined');
	          }
	        }
	      }
	    });
	    if (typeof VBArray !== 'undefined') {
	      Object.defineProperty(xhrPrototype, 'response', {
	        get: function xmlHttpRequestResponseGet() {
	          if (this.responseType === 'arraybuffer') {
	            return new Uint8Array(new VBArray(this.responseBody).toArray());
	          }
	          return this.responseText;
	        }
	      });
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'response', {
	      get: function xmlHttpRequestResponseGet() {
	        if (this.responseType !== 'arraybuffer') {
	          return this.responseText;
	        }
	        var text = this.responseText;
	        var i,
	            n = text.length;
	        var result = new Uint8Array(n);
	        for (i = 0; i < n; ++i) {
	          result[i] = text.charCodeAt(i) & 0xFF;
	        }
	        return result.buffer;
	      }
	    });
	  })();
	  (function checkWindowBtoaCompatibility() {
	    if ('btoa' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.btoa = function (chars) {
	      var buffer = '';
	      var i, n;
	      for (i = 0, n = chars.length; i < n; i += 3) {
	        var b1 = chars.charCodeAt(i) & 0xFF;
	        var b2 = chars.charCodeAt(i + 1) & 0xFF;
	        var b3 = chars.charCodeAt(i + 2) & 0xFF;
	        var d1 = b1 >> 2,
	            d2 = (b1 & 3) << 4 | b2 >> 4;
	        var d3 = i + 1 < n ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	        var d4 = i + 2 < n ? b3 & 0x3F : 64;
	        buffer += digits.charAt(d1) + digits.charAt(d2) + digits.charAt(d3) + digits.charAt(d4);
	      }
	      return buffer;
	    };
	  })();
	  (function checkWindowAtobCompatibility() {
	    if ('atob' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.atob = function (input) {
	      input = input.replace(/=+$/, '');
	      if (input.length % 4 === 1) {
	        throw new Error('bad atob input');
	      }
	      for (var bc = 0, bs, buffer, idx = 0, output = ''; buffer = input.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
	        buffer = digits.indexOf(buffer);
	      }
	      return output;
	    };
	  })();
	  (function checkFunctionPrototypeBindCompatibility() {
	    if (typeof Function.prototype.bind !== 'undefined') {
	      return;
	    }
	    Function.prototype.bind = function functionPrototypeBind(obj) {
	      var fn = this,
	          headArgs = Array.prototype.slice.call(arguments, 1);
	      var bound = function functionPrototypeBindBound() {
	        var args = headArgs.concat(Array.prototype.slice.call(arguments));
	        return fn.apply(obj, args);
	      };
	      return bound;
	    };
	  })();
	  (function checkDatasetProperty() {
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('dataset' in div) {
	      return;
	    }
	    Object.defineProperty(HTMLElement.prototype, 'dataset', {
	      get: function get() {
	        if (this._dataset) {
	          return this._dataset;
	        }
	        var dataset = {};
	        for (var j = 0, jj = this.attributes.length; j < jj; j++) {
	          var attribute = this.attributes[j];
	          if (attribute.name.substring(0, 5) !== 'data-') {
	            continue;
	          }
	          var key = attribute.name.substring(5).replace(/\-([a-z])/g, function (all, ch) {
	            return ch.toUpperCase();
	          });
	          dataset[key] = attribute.value;
	        }
	        Object.defineProperty(this, '_dataset', {
	          value: dataset,
	          writable: false,
	          enumerable: false
	        });
	        return dataset;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkClassListProperty() {
	    function changeList(element, itemName, add, remove) {
	      var s = element.className || '';
	      var list = s.split(/\s+/g);
	      if (list[0] === '') {
	        list.shift();
	      }
	      var index = list.indexOf(itemName);
	      if (index < 0 && add) {
	        list.push(itemName);
	      }
	      if (index >= 0 && remove) {
	        list.splice(index, 1);
	      }
	      element.className = list.join(' ');
	      return index >= 0;
	    }
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('classList' in div) {
	      return;
	    }
	    var classListPrototype = {
	      add: function add(name) {
	        changeList(this.element, name, true, false);
	      },
	      contains: function contains(name) {
	        return changeList(this.element, name, false, false);
	      },
	      remove: function remove(name) {
	        changeList(this.element, name, false, true);
	      },
	      toggle: function toggle(name) {
	        changeList(this.element, name, true, true);
	      }
	    };
	    Object.defineProperty(HTMLElement.prototype, 'classList', {
	      get: function get() {
	        if (this._classList) {
	          return this._classList;
	        }
	        var classList = Object.create(classListPrototype, {
	          element: {
	            value: this,
	            writable: false,
	            enumerable: true
	          }
	        });
	        Object.defineProperty(this, '_classList', {
	          value: classList,
	          writable: false,
	          enumerable: false
	        });
	        return classList;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkWorkerConsoleCompatibility() {
	    if (typeof importScripts === 'undefined' || 'console' in globalScope) {
	      return;
	    }
	    var consoleTimer = {};
	    var workerConsole = {
	      log: function log() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_log',
	          data: args
	        });
	      },
	      error: function error() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_error',
	          data: args
	        });
	      },
	      time: function time(name) {
	        consoleTimer[name] = Date.now();
	      },
	      timeEnd: function timeEnd(name) {
	        var time = consoleTimer[name];
	        if (!time) {
	          throw new Error('Unknown timer name ' + name);
	        }
	        this.log('Timer:', name, Date.now() - time);
	      }
	    };
	    globalScope.console = workerConsole;
	  })();
	  (function checkConsoleCompatibility() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!('console' in window)) {
	      window.console = {
	        log: function log() {},
	        error: function error() {},
	        warn: function warn() {}
	      };
	      return;
	    }
	    if (!('bind' in console.log)) {
	      console.log = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.log);
	      console.error = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.error);
	      console.warn = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.warn);
	      return;
	    }
	  })();
	  (function checkOnClickCompatibility() {
	    function ignoreIfTargetDisabled(event) {
	      if (isDisabled(event.target)) {
	        event.stopPropagation();
	      }
	    }
	    function isDisabled(node) {
	      return node.disabled || node.parentNode && isDisabled(node.parentNode);
	    }
	    if (isOpera) {
	      document.addEventListener('click', ignoreIfTargetDisabled, true);
	    }
	  })();
	  (function checkOnBlobSupport() {
	    if (isIE || isIOSChrome) {
	      PDFJS.disableCreateObjectURL = true;
	    }
	  })();
	  (function checkNavigatorLanguage() {
	    if (typeof navigator === 'undefined') {
	      return;
	    }
	    if ('language' in navigator) {
	      return;
	    }
	    PDFJS.locale = navigator.userLanguage || 'en-US';
	  })();
	  (function checkRangeRequests() {
	    if (isSafari || isAndroidPre3 || isChromeWithRangeBug || isIOS) {
	      PDFJS.disableRange = true;
	      PDFJS.disableStream = true;
	    }
	  })();
	  (function checkHistoryManipulation() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!history.pushState || isAndroidPre3) {
	      PDFJS.disableHistory = true;
	    }
	  })();
	  (function checkSetPresenceInImageData() {
	    if (!hasDOM) {
	      return;
	    }
	    if (window.CanvasPixelArray) {
	      if (typeof window.CanvasPixelArray.prototype.set !== 'function') {
	        window.CanvasPixelArray.prototype.set = function (arr) {
	          for (var i = 0, ii = this.length; i < ii; i++) {
	            this[i] = arr[i];
	          }
	        };
	      }
	    } else {
	      var polyfill = false,
	          versionMatch;
	      if (isChrome) {
	        versionMatch = userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
	        polyfill = versionMatch && parseInt(versionMatch[2]) < 21;
	      } else if (isAndroid) {
	        polyfill = isAndroidPre5;
	      } else if (isSafari) {
	        versionMatch = userAgent.match(/Version\/([0-9]+)\.([0-9]+)\.([0-9]+) Safari\//);
	        polyfill = versionMatch && parseInt(versionMatch[1]) < 6;
	      }
	      if (polyfill) {
	        var contextPrototype = window.CanvasRenderingContext2D.prototype;
	        var createImageData = contextPrototype.createImageData;
	        contextPrototype.createImageData = function (w, h) {
	          var imageData = createImageData.call(this, w, h);
	          imageData.data.set = function (arr) {
	            for (var i = 0, ii = this.length; i < ii; i++) {
	              this[i] = arr[i];
	            }
	          };
	          return imageData;
	        };
	        contextPrototype = null;
	      }
	    }
	  })();
	  (function checkRequestAnimationFrame() {
	    function installFakeAnimationFrameFunctions() {
	      window.requestAnimationFrame = function (callback) {
	        return window.setTimeout(callback, 20);
	      };
	      window.cancelAnimationFrame = function (timeoutID) {
	        window.clearTimeout(timeoutID);
	      };
	    }
	    if (!hasDOM) {
	      return;
	    }
	    if (isIOS) {
	      installFakeAnimationFrameFunctions();
	      return;
	    }
	    if ('requestAnimationFrame' in window) {
	      return;
	    }
	    window.requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
	    if (window.requestAnimationFrame) {
	      return;
	    }
	    installFakeAnimationFrameFunctions();
	  })();
	  (function checkCanvasSizeLimitation() {
	    if (isIOS || isAndroid) {
	      PDFJS.maxCanvasPixels = 5242880;
	    }
	  })();
	  (function checkFullscreenSupport() {
	    if (!hasDOM) {
	      return;
	    }
	    if (isIE && window.parent !== window) {
	      PDFJS.disableFullscreen = true;
	    }
	  })();
	  (function checkCurrentScript() {
	    if (!hasDOM) {
	      return;
	    }
	    if ('currentScript' in document) {
	      return;
	    }
	    Object.defineProperty(document, 'currentScript', {
	      get: function get() {
	        var scripts = document.getElementsByTagName('script');
	        return scripts[scripts.length - 1];
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkInputTypeNumberAssign() {
	    if (!hasDOM) {
	      return;
	    }
	    var el = document.createElement('input');
	    try {
	      el.type = 'number';
	    } catch (ex) {
	      var inputProto = el.constructor.prototype;
	      var typeProperty = Object.getOwnPropertyDescriptor(inputProto, 'type');
	      Object.defineProperty(inputProto, 'type', {
	        get: function get() {
	          return typeProperty.get.call(this);
	        },
	        set: function set(value) {
	          typeProperty.set.call(this, value === 'number' ? 'text' : value);
	        },

	        enumerable: true,
	        configurable: true
	      });
	    }
	  })();
	  (function checkDocumentReadyState() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!document.attachEvent) {
	      return;
	    }
	    var documentProto = document.constructor.prototype;
	    var readyStateProto = Object.getOwnPropertyDescriptor(documentProto, 'readyState');
	    Object.defineProperty(documentProto, 'readyState', {
	      get: function get() {
	        var value = readyStateProto.get.call(this);
	        return value === 'interactive' ? 'loading' : value;
	      },
	      set: function set(value) {
	        readyStateProto.set.call(this, value);
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkChildNodeRemove() {
	    if (!hasDOM) {
	      return;
	    }
	    if (typeof Element.prototype.remove !== 'undefined') {
	      return;
	    }
	    Element.prototype.remove = function () {
	      if (this.parentNode) {
	        this.parentNode.removeChild(this);
	      }
	    };
	  })();
	  (function checkPromise() {
	    if (globalScope.Promise) {
	      if (typeof globalScope.Promise.all !== 'function') {
	        globalScope.Promise.all = function (iterable) {
	          var count = 0,
	              results = [],
	              resolve,
	              reject;
	          var promise = new globalScope.Promise(function (resolve_, reject_) {
	            resolve = resolve_;
	            reject = reject_;
	          });
	          iterable.forEach(function (p, i) {
	            count++;
	            p.then(function (result) {
	              results[i] = result;
	              count--;
	              if (count === 0) {
	                resolve(results);
	              }
	            }, reject);
	          });
	          if (count === 0) {
	            resolve(results);
	          }
	          return promise;
	        };
	      }
	      if (typeof globalScope.Promise.resolve !== 'function') {
	        globalScope.Promise.resolve = function (value) {
	          return new globalScope.Promise(function (resolve) {
	            resolve(value);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.reject !== 'function') {
	        globalScope.Promise.reject = function (reason) {
	          return new globalScope.Promise(function (resolve, reject) {
	            reject(reason);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.prototype.catch !== 'function') {
	        globalScope.Promise.prototype.catch = function (onReject) {
	          return globalScope.Promise.prototype.then(undefined, onReject);
	        };
	      }
	      return;
	    }
	    var STATUS_PENDING = 0;
	    var STATUS_RESOLVED = 1;
	    var STATUS_REJECTED = 2;
	    var REJECTION_TIMEOUT = 500;
	    var HandlerManager = {
	      handlers: [],
	      running: false,
	      unhandledRejections: [],
	      pendingRejectionCheck: false,
	      scheduleHandlers: function scheduleHandlers(promise) {
	        if (promise._status === STATUS_PENDING) {
	          return;
	        }
	        this.handlers = this.handlers.concat(promise._handlers);
	        promise._handlers = [];
	        if (this.running) {
	          return;
	        }
	        this.running = true;
	        setTimeout(this.runHandlers.bind(this), 0);
	      },
	      runHandlers: function runHandlers() {
	        var RUN_TIMEOUT = 1;
	        var timeoutAt = Date.now() + RUN_TIMEOUT;
	        while (this.handlers.length > 0) {
	          var handler = this.handlers.shift();
	          var nextStatus = handler.thisPromise._status;
	          var nextValue = handler.thisPromise._value;
	          try {
	            if (nextStatus === STATUS_RESOLVED) {
	              if (typeof handler.onResolve === 'function') {
	                nextValue = handler.onResolve(nextValue);
	              }
	            } else if (typeof handler.onReject === 'function') {
	              nextValue = handler.onReject(nextValue);
	              nextStatus = STATUS_RESOLVED;
	              if (handler.thisPromise._unhandledRejection) {
	                this.removeUnhandeledRejection(handler.thisPromise);
	              }
	            }
	          } catch (ex) {
	            nextStatus = STATUS_REJECTED;
	            nextValue = ex;
	          }
	          handler.nextPromise._updateStatus(nextStatus, nextValue);
	          if (Date.now() >= timeoutAt) {
	            break;
	          }
	        }
	        if (this.handlers.length > 0) {
	          setTimeout(this.runHandlers.bind(this), 0);
	          return;
	        }
	        this.running = false;
	      },
	      addUnhandledRejection: function addUnhandledRejection(promise) {
	        this.unhandledRejections.push({
	          promise: promise,
	          time: Date.now()
	        });
	        this.scheduleRejectionCheck();
	      },
	      removeUnhandeledRejection: function removeUnhandeledRejection(promise) {
	        promise._unhandledRejection = false;
	        for (var i = 0; i < this.unhandledRejections.length; i++) {
	          if (this.unhandledRejections[i].promise === promise) {
	            this.unhandledRejections.splice(i);
	            i--;
	          }
	        }
	      },
	      scheduleRejectionCheck: function scheduleRejectionCheck() {
	        var _this = this;

	        if (this.pendingRejectionCheck) {
	          return;
	        }
	        this.pendingRejectionCheck = true;
	        setTimeout(function () {
	          _this.pendingRejectionCheck = false;
	          var now = Date.now();
	          for (var i = 0; i < _this.unhandledRejections.length; i++) {
	            if (now - _this.unhandledRejections[i].time > REJECTION_TIMEOUT) {
	              var unhandled = _this.unhandledRejections[i].promise._value;
	              var msg = 'Unhandled rejection: ' + unhandled;
	              if (unhandled.stack) {
	                msg += '\n' + unhandled.stack;
	              }
	              try {
	                throw new Error(msg);
	              } catch (_) {
	                console.warn(msg);
	              }
	              _this.unhandledRejections.splice(i);
	              i--;
	            }
	          }
	          if (_this.unhandledRejections.length) {
	            _this.scheduleRejectionCheck();
	          }
	        }, REJECTION_TIMEOUT);
	      }
	    };
	    var Promise = function Promise(resolver) {
	      this._status = STATUS_PENDING;
	      this._handlers = [];
	      try {
	        resolver.call(this, this._resolve.bind(this), this._reject.bind(this));
	      } catch (e) {
	        this._reject(e);
	      }
	    };
	    Promise.all = function Promise_all(promises) {
	      var resolveAll, rejectAll;
	      var deferred = new Promise(function (resolve, reject) {
	        resolveAll = resolve;
	        rejectAll = reject;
	      });
	      var unresolved = promises.length;
	      var results = [];
	      if (unresolved === 0) {
	        resolveAll(results);
	        return deferred;
	      }
	      function reject(reason) {
	        if (deferred._status === STATUS_REJECTED) {
	          return;
	        }
	        results = [];
	        rejectAll(reason);
	      }
	      for (var i = 0, ii = promises.length; i < ii; ++i) {
	        var promise = promises[i];
	        var resolve = function (i) {
	          return function (value) {
	            if (deferred._status === STATUS_REJECTED) {
	              return;
	            }
	            results[i] = value;
	            unresolved--;
	            if (unresolved === 0) {
	              resolveAll(results);
	            }
	          };
	        }(i);
	        if (Promise.isPromise(promise)) {
	          promise.then(resolve, reject);
	        } else {
	          resolve(promise);
	        }
	      }
	      return deferred;
	    };
	    Promise.isPromise = function Promise_isPromise(value) {
	      return value && typeof value.then === 'function';
	    };
	    Promise.resolve = function Promise_resolve(value) {
	      return new Promise(function (resolve) {
	        resolve(value);
	      });
	    };
	    Promise.reject = function Promise_reject(reason) {
	      return new Promise(function (resolve, reject) {
	        reject(reason);
	      });
	    };
	    Promise.prototype = {
	      _status: null,
	      _value: null,
	      _handlers: null,
	      _unhandledRejection: null,
	      _updateStatus: function Promise__updateStatus(status, value) {
	        if (this._status === STATUS_RESOLVED || this._status === STATUS_REJECTED) {
	          return;
	        }
	        if (status === STATUS_RESOLVED && Promise.isPromise(value)) {
	          value.then(this._updateStatus.bind(this, STATUS_RESOLVED), this._updateStatus.bind(this, STATUS_REJECTED));
	          return;
	        }
	        this._status = status;
	        this._value = value;
	        if (status === STATUS_REJECTED && this._handlers.length === 0) {
	          this._unhandledRejection = true;
	          HandlerManager.addUnhandledRejection(this);
	        }
	        HandlerManager.scheduleHandlers(this);
	      },
	      _resolve: function Promise_resolve(value) {
	        this._updateStatus(STATUS_RESOLVED, value);
	      },
	      _reject: function Promise_reject(reason) {
	        this._updateStatus(STATUS_REJECTED, reason);
	      },
	      then: function Promise_then(onResolve, onReject) {
	        var nextPromise = new Promise(function (resolve, reject) {
	          this.resolve = resolve;
	          this.reject = reject;
	        });
	        this._handlers.push({
	          thisPromise: this,
	          onResolve: onResolve,
	          onReject: onReject,
	          nextPromise: nextPromise
	        });
	        HandlerManager.scheduleHandlers(this);
	        return nextPromise;
	      },
	      catch: function Promise_catch(onReject) {
	        return this.then(undefined, onReject);
	      }
	    };
	    globalScope.Promise = Promise;
	  })();
	  (function checkWeakMap() {
	    if (globalScope.WeakMap) {
	      return;
	    }
	    var id = 0;
	    function WeakMap() {
	      this.id = '$weakmap' + id++;
	    }
	    WeakMap.prototype = {
	      has: function has(obj) {
	        return !!Object.getOwnPropertyDescriptor(obj, this.id);
	      },
	      get: function get(obj, defaultValue) {
	        return this.has(obj) ? obj[this.id] : defaultValue;
	      },
	      set: function set(obj, value) {
	        Object.defineProperty(obj, this.id, {
	          value: value,
	          enumerable: false,
	          configurable: true
	        });
	      },
	      delete: function _delete(obj) {
	        delete obj[this.id];
	      }
	    };
	    globalScope.WeakMap = WeakMap;
	  })();
	  (function checkURLConstructor() {
	    var hasWorkingUrl = false;
	    try {
	      if (typeof URL === 'function' && _typeof(URL.prototype) === 'object' && 'origin' in URL.prototype) {
	        var u = new URL('b', 'http://a');
	        u.pathname = 'c%20d';
	        hasWorkingUrl = u.href === 'http://a/c%20d';
	      }
	    } catch (e) {}
	    if (hasWorkingUrl) {
	      return;
	    }
	    var relative = Object.create(null);
	    relative['ftp'] = 21;
	    relative['file'] = 0;
	    relative['gopher'] = 70;
	    relative['http'] = 80;
	    relative['https'] = 443;
	    relative['ws'] = 80;
	    relative['wss'] = 443;
	    var relativePathDotMapping = Object.create(null);
	    relativePathDotMapping['%2e'] = '.';
	    relativePathDotMapping['.%2e'] = '..';
	    relativePathDotMapping['%2e.'] = '..';
	    relativePathDotMapping['%2e%2e'] = '..';
	    function isRelativeScheme(scheme) {
	      return relative[scheme] !== undefined;
	    }
	    function invalid() {
	      clear.call(this);
	      this._isInvalid = true;
	    }
	    function IDNAToASCII(h) {
	      if (h === '') {
	        invalid.call(this);
	      }
	      return h.toLowerCase();
	    }
	    function percentEscape(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    function percentEscapeQuery(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    var EOF,
	        ALPHA = /[a-zA-Z]/,
	        ALPHANUMERIC = /[a-zA-Z0-9\+\-\.]/;
	    function parse(input, stateOverride, base) {
	      function err(message) {
	        errors.push(message);
	      }
	      var state = stateOverride || 'scheme start',
	          cursor = 0,
	          buffer = '',
	          seenAt = false,
	          seenBracket = false,
	          errors = [];
	      loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {
	        var c = input[cursor];
	        switch (state) {
	          case 'scheme start':
	            if (c && ALPHA.test(c)) {
	              buffer += c.toLowerCase();
	              state = 'scheme';
	            } else if (!stateOverride) {
	              buffer = '';
	              state = 'no scheme';
	              continue;
	            } else {
	              err('Invalid scheme.');
	              break loop;
	            }
	            break;
	          case 'scheme':
	            if (c && ALPHANUMERIC.test(c)) {
	              buffer += c.toLowerCase();
	            } else if (c === ':') {
	              this._scheme = buffer;
	              buffer = '';
	              if (stateOverride) {
	                break loop;
	              }
	              if (isRelativeScheme(this._scheme)) {
	                this._isRelative = true;
	              }
	              if (this._scheme === 'file') {
	                state = 'relative';
	              } else if (this._isRelative && base && base._scheme === this._scheme) {
	                state = 'relative or authority';
	              } else if (this._isRelative) {
	                state = 'authority first slash';
	              } else {
	                state = 'scheme data';
	              }
	            } else if (!stateOverride) {
	              buffer = '';
	              cursor = 0;
	              state = 'no scheme';
	              continue;
	            } else if (c === EOF) {
	              break loop;
	            } else {
	              err('Code point not allowed in scheme: ' + c);
	              break loop;
	            }
	            break;
	          case 'scheme data':
	            if (c === '?') {
	              this._query = '?';
	              state = 'query';
	            } else if (c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else {
	              if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	                this._schemeData += percentEscape(c);
	              }
	            }
	            break;
	          case 'no scheme':
	            if (!base || !isRelativeScheme(base._scheme)) {
	              err('Missing scheme.');
	              invalid.call(this);
	            } else {
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative or authority':
	            if (c === '/' && input[cursor + 1] === '/') {
	              state = 'authority ignore slashes';
	            } else {
	              err('Expected /, got: ' + c);
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative':
	            this._isRelative = true;
	            if (this._scheme !== 'file') {
	              this._scheme = base._scheme;
	            }
	            if (c === EOF) {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._username = base._username;
	              this._password = base._password;
	              break loop;
	            } else if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              state = 'relative slash';
	            } else if (c === '?') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = '?';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'query';
	            } else if (c === '#') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._fragment = '#';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'fragment';
	            } else {
	              var nextC = input[cursor + 1];
	              var nextNextC = input[cursor + 2];
	              if (this._scheme !== 'file' || !ALPHA.test(c) || nextC !== ':' && nextC !== '|' || nextNextC !== EOF && nextNextC !== '/' && nextNextC !== '\\' && nextNextC !== '?' && nextNextC !== '#') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	                this._path = base._path.slice();
	                this._path.pop();
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'relative slash':
	            if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              if (this._scheme === 'file') {
	                state = 'file host';
	              } else {
	                state = 'authority ignore slashes';
	              }
	            } else {
	              if (this._scheme !== 'file') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'authority first slash':
	            if (c === '/') {
	              state = 'authority second slash';
	            } else {
	              err('Expected \'/\', got: ' + c);
	              state = 'authority ignore slashes';
	              continue;
	            }
	            break;
	          case 'authority second slash':
	            state = 'authority ignore slashes';
	            if (c !== '/') {
	              err('Expected \'/\', got: ' + c);
	              continue;
	            }
	            break;
	          case 'authority ignore slashes':
	            if (c !== '/' && c !== '\\') {
	              state = 'authority';
	              continue;
	            } else {
	              err('Expected authority, got: ' + c);
	            }
	            break;
	          case 'authority':
	            if (c === '@') {
	              if (seenAt) {
	                err('@ already seen.');
	                buffer += '%40';
	              }
	              seenAt = true;
	              for (var i = 0; i < buffer.length; i++) {
	                var cp = buffer[i];
	                if (cp === '\t' || cp === '\n' || cp === '\r') {
	                  err('Invalid whitespace in authority.');
	                  continue;
	                }
	                if (cp === ':' && this._password === null) {
	                  this._password = '';
	                  continue;
	                }
	                var tempC = percentEscape(cp);
	                if (this._password !== null) {
	                  this._password += tempC;
	                } else {
	                  this._username += tempC;
	                }
	              }
	              buffer = '';
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              cursor -= buffer.length;
	              buffer = '';
	              state = 'host';
	              continue;
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'file host':
	            if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              if (buffer.length === 2 && ALPHA.test(buffer[0]) && (buffer[1] === ':' || buffer[1] === '|')) {
	                state = 'relative path';
	              } else if (buffer.length === 0) {
	                state = 'relative path start';
	              } else {
	                this._host = IDNAToASCII.call(this, buffer);
	                buffer = '';
	                state = 'relative path start';
	              }
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid whitespace in file host.');
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'host':
	          case 'hostname':
	            if (c === ':' && !seenBracket) {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'port';
	              if (stateOverride === 'hostname') {
	                break loop;
	              }
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'relative path start';
	              if (stateOverride) {
	                break loop;
	              }
	              continue;
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              if (c === '[') {
	                seenBracket = true;
	              } else if (c === ']') {
	                seenBracket = false;
	              }
	              buffer += c;
	            } else {
	              err('Invalid code point in host/hostname: ' + c);
	            }
	            break;
	          case 'port':
	            if (/[0-9]/.test(c)) {
	              buffer += c;
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#' || stateOverride) {
	              if (buffer !== '') {
	                var temp = parseInt(buffer, 10);
	                if (temp !== relative[this._scheme]) {
	                  this._port = temp + '';
	                }
	                buffer = '';
	              }
	              if (stateOverride) {
	                break loop;
	              }
	              state = 'relative path start';
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid code point in port: ' + c);
	            } else {
	              invalid.call(this);
	            }
	            break;
	          case 'relative path start':
	            if (c === '\\') {
	              err('\'\\\' not allowed in path.');
	            }
	            state = 'relative path';
	            if (c !== '/' && c !== '\\') {
	              continue;
	            }
	            break;
	          case 'relative path':
	            if (c === EOF || c === '/' || c === '\\' || !stateOverride && (c === '?' || c === '#')) {
	              if (c === '\\') {
	                err('\\ not allowed in relative path.');
	              }
	              var tmp;
	              if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {
	                buffer = tmp;
	              }
	              if (buffer === '..') {
	                this._path.pop();
	                if (c !== '/' && c !== '\\') {
	                  this._path.push('');
	                }
	              } else if (buffer === '.' && c !== '/' && c !== '\\') {
	                this._path.push('');
	              } else if (buffer !== '.') {
	                if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 && ALPHA.test(buffer[0]) && buffer[1] === '|') {
	                  buffer = buffer[0] + ':';
	                }
	                this._path.push(buffer);
	              }
	              buffer = '';
	              if (c === '?') {
	                this._query = '?';
	                state = 'query';
	              } else if (c === '#') {
	                this._fragment = '#';
	                state = 'fragment';
	              }
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              buffer += percentEscape(c);
	            }
	            break;
	          case 'query':
	            if (!stateOverride && c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._query += percentEscapeQuery(c);
	            }
	            break;
	          case 'fragment':
	            if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._fragment += c;
	            }
	            break;
	        }
	        cursor++;
	      }
	    }
	    function clear() {
	      this._scheme = '';
	      this._schemeData = '';
	      this._username = '';
	      this._password = null;
	      this._host = '';
	      this._port = '';
	      this._path = [];
	      this._query = '';
	      this._fragment = '';
	      this._isInvalid = false;
	      this._isRelative = false;
	    }
	    function JURL(url, base) {
	      if (base !== undefined && !(base instanceof JURL)) {
	        base = new JURL(String(base));
	      }
	      this._url = url;
	      clear.call(this);
	      var input = url.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, '');
	      parse.call(this, input, null, base);
	    }
	    JURL.prototype = {
	      toString: function toString() {
	        return this.href;
	      },

	      get href() {
	        if (this._isInvalid) {
	          return this._url;
	        }
	        var authority = '';
	        if (this._username !== '' || this._password !== null) {
	          authority = this._username + (this._password !== null ? ':' + this._password : '') + '@';
	        }
	        return this.protocol + (this._isRelative ? '//' + authority + this.host : '') + this.pathname + this._query + this._fragment;
	      },
	      set href(href) {
	        clear.call(this);
	        parse.call(this, href);
	      },
	      get protocol() {
	        return this._scheme + ':';
	      },
	      set protocol(protocol) {
	        if (this._isInvalid) {
	          return;
	        }
	        parse.call(this, protocol + ':', 'scheme start');
	      },
	      get host() {
	        return this._isInvalid ? '' : this._port ? this._host + ':' + this._port : this._host;
	      },
	      set host(host) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, host, 'host');
	      },
	      get hostname() {
	        return this._host;
	      },
	      set hostname(hostname) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, hostname, 'hostname');
	      },
	      get port() {
	        return this._port;
	      },
	      set port(port) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, port, 'port');
	      },
	      get pathname() {
	        return this._isInvalid ? '' : this._isRelative ? '/' + this._path.join('/') : this._schemeData;
	      },
	      set pathname(pathname) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._path = [];
	        parse.call(this, pathname, 'relative path start');
	      },
	      get search() {
	        return this._isInvalid || !this._query || this._query === '?' ? '' : this._query;
	      },
	      set search(search) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._query = '?';
	        if (search[0] === '?') {
	          search = search.slice(1);
	        }
	        parse.call(this, search, 'query');
	      },
	      get hash() {
	        return this._isInvalid || !this._fragment || this._fragment === '#' ? '' : this._fragment;
	      },
	      set hash(hash) {
	        if (this._isInvalid) {
	          return;
	        }
	        this._fragment = '#';
	        if (hash[0] === '#') {
	          hash = hash.slice(1);
	        }
	        parse.call(this, hash, 'fragment');
	      },
	      get origin() {
	        var host;
	        if (this._isInvalid || !this._scheme) {
	          return '';
	        }
	        switch (this._scheme) {
	          case 'data':
	          case 'file':
	          case 'javascript':
	          case 'mailto':
	            return 'null';
	        }
	        host = this.host;
	        if (!host) {
	          return '';
	        }
	        return this._scheme + '://' + host;
	      }
	    };
	    var OriginalURL = globalScope.URL;
	    if (OriginalURL) {
	      JURL.createObjectURL = function (blob) {
	        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);
	      };
	      JURL.revokeObjectURL = function (url) {
	        OriginalURL.revokeObjectURL(url);
	      };
	    }
	    globalScope.URL = JURL;
	  })();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var g;
	g = function () {
	  return this;
	}();
	try {
	  g = g || Function("return this")() || (1, eval)("this");
	} catch (e) {
	  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	}
	module.exports = g;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	__webpack_require__(0);

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=compatibility.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright 2017 Mozilla Foundation
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("pdfjs-dist/build/pdf", [], factory);
		else if(typeof exports === 'object')
			exports["pdfjs-dist/build/pdf"] = factory();
		else
			root["pdfjs-dist/build/pdf"] = root.pdfjsDistBuildPdf = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __w_pdfjs_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__w_pdfjs_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__w_pdfjs_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__w_pdfjs_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__w_pdfjs_require__.d = function(exports, name, getter) {
	/******/ 		if(!__w_pdfjs_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__w_pdfjs_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__w_pdfjs_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__w_pdfjs_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__w_pdfjs_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __w_pdfjs_require__(__w_pdfjs_require__.s = 13);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(global) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.warn = exports.utf8StringToString = exports.stringToUTF8String = exports.stringToPDFString = exports.stringToBytes = exports.string32 = exports.shadow = exports.setVerbosityLevel = exports.removeNullCharacters = exports.readUint32 = exports.readUint16 = exports.readInt8 = exports.log2 = exports.loadJpegStream = exports.isEvalSupported = exports.isLittleEndian = exports.createValidAbsoluteUrl = exports.isSameOrigin = exports.isNodeJS = exports.isSpace = exports.isString = exports.isNum = exports.isInt = exports.isEmptyObj = exports.isBool = exports.isArrayBuffer = exports.isArray = exports.info = exports.globalScope = exports.getVerbosityLevel = exports.getLookupTableFactory = exports.error = exports.deprecated = exports.createObjectURL = exports.createPromiseCapability = exports.createBlob = exports.bytesToString = exports.assert = exports.arraysToBytes = exports.arrayByteLength = exports.XRefParseException = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.StatTimer = exports.PasswordResponses = exports.PasswordException = exports.PageViewport = exports.NotImplementedException = exports.NativeImageDecoding = exports.MissingPDFException = exports.MissingDataException = exports.MessageHandler = exports.InvalidPDFException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VERBOSITY_LEVELS = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	__w_pdfjs_require__(14);

	var globalScope = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : undefined;
	var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
	var NativeImageDecoding = {
	  NONE: 'none',
	  DECODE: 'decode',
	  DISPLAY: 'display'
	};
	var TextRenderingMode = {
	  FILL: 0,
	  STROKE: 1,
	  FILL_STROKE: 2,
	  INVISIBLE: 3,
	  FILL_ADD_TO_PATH: 4,
	  STROKE_ADD_TO_PATH: 5,
	  FILL_STROKE_ADD_TO_PATH: 6,
	  ADD_TO_PATH: 7,
	  FILL_STROKE_MASK: 3,
	  ADD_TO_PATH_FLAG: 4
	};
	var ImageKind = {
	  GRAYSCALE_1BPP: 1,
	  RGB_24BPP: 2,
	  RGBA_32BPP: 3
	};
	var AnnotationType = {
	  TEXT: 1,
	  LINK: 2,
	  FREETEXT: 3,
	  LINE: 4,
	  SQUARE: 5,
	  CIRCLE: 6,
	  POLYGON: 7,
	  POLYLINE: 8,
	  HIGHLIGHT: 9,
	  UNDERLINE: 10,
	  SQUIGGLY: 11,
	  STRIKEOUT: 12,
	  STAMP: 13,
	  CARET: 14,
	  INK: 15,
	  POPUP: 16,
	  FILEATTACHMENT: 17,
	  SOUND: 18,
	  MOVIE: 19,
	  WIDGET: 20,
	  SCREEN: 21,
	  PRINTERMARK: 22,
	  TRAPNET: 23,
	  WATERMARK: 24,
	  THREED: 25,
	  REDACT: 26
	};
	var AnnotationFlag = {
	  INVISIBLE: 0x01,
	  HIDDEN: 0x02,
	  PRINT: 0x04,
	  NOZOOM: 0x08,
	  NOROTATE: 0x10,
	  NOVIEW: 0x20,
	  READONLY: 0x40,
	  LOCKED: 0x80,
	  TOGGLENOVIEW: 0x100,
	  LOCKEDCONTENTS: 0x200
	};
	var AnnotationFieldFlag = {
	  READONLY: 0x0000001,
	  REQUIRED: 0x0000002,
	  NOEXPORT: 0x0000004,
	  MULTILINE: 0x0001000,
	  PASSWORD: 0x0002000,
	  NOTOGGLETOOFF: 0x0004000,
	  RADIO: 0x0008000,
	  PUSHBUTTON: 0x0010000,
	  COMBO: 0x0020000,
	  EDIT: 0x0040000,
	  SORT: 0x0080000,
	  FILESELECT: 0x0100000,
	  MULTISELECT: 0x0200000,
	  DONOTSPELLCHECK: 0x0400000,
	  DONOTSCROLL: 0x0800000,
	  COMB: 0x1000000,
	  RICHTEXT: 0x2000000,
	  RADIOSINUNISON: 0x2000000,
	  COMMITONSELCHANGE: 0x4000000
	};
	var AnnotationBorderStyleType = {
	  SOLID: 1,
	  DASHED: 2,
	  BEVELED: 3,
	  INSET: 4,
	  UNDERLINE: 5
	};
	var StreamType = {
	  UNKNOWN: 0,
	  FLATE: 1,
	  LZW: 2,
	  DCT: 3,
	  JPX: 4,
	  JBIG: 5,
	  A85: 6,
	  AHX: 7,
	  CCF: 8,
	  RL: 9
	};
	var FontType = {
	  UNKNOWN: 0,
	  TYPE1: 1,
	  TYPE1C: 2,
	  CIDFONTTYPE0: 3,
	  CIDFONTTYPE0C: 4,
	  TRUETYPE: 5,
	  CIDFONTTYPE2: 6,
	  TYPE3: 7,
	  OPENTYPE: 8,
	  TYPE0: 9,
	  MMTYPE1: 10
	};
	var VERBOSITY_LEVELS = {
	  errors: 0,
	  warnings: 1,
	  infos: 5
	};
	var CMapCompressionType = {
	  NONE: 0,
	  BINARY: 1,
	  STREAM: 2
	};
	var OPS = {
	  dependency: 1,
	  setLineWidth: 2,
	  setLineCap: 3,
	  setLineJoin: 4,
	  setMiterLimit: 5,
	  setDash: 6,
	  setRenderingIntent: 7,
	  setFlatness: 8,
	  setGState: 9,
	  save: 10,
	  restore: 11,
	  transform: 12,
	  moveTo: 13,
	  lineTo: 14,
	  curveTo: 15,
	  curveTo2: 16,
	  curveTo3: 17,
	  closePath: 18,
	  rectangle: 19,
	  stroke: 20,
	  closeStroke: 21,
	  fill: 22,
	  eoFill: 23,
	  fillStroke: 24,
	  eoFillStroke: 25,
	  closeFillStroke: 26,
	  closeEOFillStroke: 27,
	  endPath: 28,
	  clip: 29,
	  eoClip: 30,
	  beginText: 31,
	  endText: 32,
	  setCharSpacing: 33,
	  setWordSpacing: 34,
	  setHScale: 35,
	  setLeading: 36,
	  setFont: 37,
	  setTextRenderingMode: 38,
	  setTextRise: 39,
	  moveText: 40,
	  setLeadingMoveText: 41,
	  setTextMatrix: 42,
	  nextLine: 43,
	  showText: 44,
	  showSpacedText: 45,
	  nextLineShowText: 46,
	  nextLineSetSpacingShowText: 47,
	  setCharWidth: 48,
	  setCharWidthAndBounds: 49,
	  setStrokeColorSpace: 50,
	  setFillColorSpace: 51,
	  setStrokeColor: 52,
	  setStrokeColorN: 53,
	  setFillColor: 54,
	  setFillColorN: 55,
	  setStrokeGray: 56,
	  setFillGray: 57,
	  setStrokeRGBColor: 58,
	  setFillRGBColor: 59,
	  setStrokeCMYKColor: 60,
	  setFillCMYKColor: 61,
	  shadingFill: 62,
	  beginInlineImage: 63,
	  beginImageData: 64,
	  endInlineImage: 65,
	  paintXObject: 66,
	  markPoint: 67,
	  markPointProps: 68,
	  beginMarkedContent: 69,
	  beginMarkedContentProps: 70,
	  endMarkedContent: 71,
	  beginCompat: 72,
	  endCompat: 73,
	  paintFormXObjectBegin: 74,
	  paintFormXObjectEnd: 75,
	  beginGroup: 76,
	  endGroup: 77,
	  beginAnnotations: 78,
	  endAnnotations: 79,
	  beginAnnotation: 80,
	  endAnnotation: 81,
	  paintJpegXObject: 82,
	  paintImageMaskXObject: 83,
	  paintImageMaskXObjectGroup: 84,
	  paintImageXObject: 85,
	  paintInlineImageXObject: 86,
	  paintInlineImageXObjectGroup: 87,
	  paintImageXObjectRepeat: 88,
	  paintImageMaskXObjectRepeat: 89,
	  paintSolidColorImageMask: 90,
	  constructPath: 91
	};
	var verbosity = VERBOSITY_LEVELS.warnings;
	function setVerbosityLevel(level) {
	  verbosity = level;
	}
	function getVerbosityLevel() {
	  return verbosity;
	}
	function info(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.infos) {
	    console.log('Info: ' + msg);
	  }
	}
	function warn(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.warnings) {
	    console.log('Warning: ' + msg);
	  }
	}
	function deprecated(details) {
	  console.log('Deprecated API usage: ' + details);
	}
	function error(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.errors) {
	    console.log('Error: ' + msg);
	    console.log(backtrace());
	  }
	  throw new Error(msg);
	}
	function backtrace() {
	  try {
	    throw new Error();
	  } catch (e) {
	    return e.stack ? e.stack.split('\n').slice(2).join('\n') : '';
	  }
	}
	function assert(cond, msg) {
	  if (!cond) {
	    error(msg);
	  }
	}
	var UNSUPPORTED_FEATURES = {
	  unknown: 'unknown',
	  forms: 'forms',
	  javaScript: 'javaScript',
	  smask: 'smask',
	  shadingPattern: 'shadingPattern',
	  font: 'font'
	};
	function isSameOrigin(baseUrl, otherUrl) {
	  try {
	    var base = new URL(baseUrl);
	    if (!base.origin || base.origin === 'null') {
	      return false;
	    }
	  } catch (e) {
	    return false;
	  }
	  var other = new URL(otherUrl, base);
	  return base.origin === other.origin;
	}
	function isValidProtocol(url) {
	  if (!url) {
	    return false;
	  }
	  switch (url.protocol) {
	    case 'http:':
	    case 'https:':
	    case 'ftp:':
	    case 'mailto:':
	    case 'tel:':
	      return true;
	    default:
	      return false;
	  }
	}
	function createValidAbsoluteUrl(url, baseUrl) {
	  if (!url) {
	    return null;
	  }
	  try {
	    var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
	    if (isValidProtocol(absoluteUrl)) {
	      return absoluteUrl;
	    }
	  } catch (ex) {}
	  return null;
	}
	function shadow(obj, prop, value) {
	  Object.defineProperty(obj, prop, {
	    value: value,
	    enumerable: true,
	    configurable: true,
	    writable: false
	  });
	  return value;
	}
	function getLookupTableFactory(initializer) {
	  var lookup;
	  return function () {
	    if (initializer) {
	      lookup = Object.create(null);
	      initializer(lookup);
	      initializer = null;
	    }
	    return lookup;
	  };
	}
	var PasswordResponses = {
	  NEED_PASSWORD: 1,
	  INCORRECT_PASSWORD: 2
	};
	var PasswordException = function PasswordExceptionClosure() {
	  function PasswordException(msg, code) {
	    this.name = 'PasswordException';
	    this.message = msg;
	    this.code = code;
	  }
	  PasswordException.prototype = new Error();
	  PasswordException.constructor = PasswordException;
	  return PasswordException;
	}();
	var UnknownErrorException = function UnknownErrorExceptionClosure() {
	  function UnknownErrorException(msg, details) {
	    this.name = 'UnknownErrorException';
	    this.message = msg;
	    this.details = details;
	  }
	  UnknownErrorException.prototype = new Error();
	  UnknownErrorException.constructor = UnknownErrorException;
	  return UnknownErrorException;
	}();
	var InvalidPDFException = function InvalidPDFExceptionClosure() {
	  function InvalidPDFException(msg) {
	    this.name = 'InvalidPDFException';
	    this.message = msg;
	  }
	  InvalidPDFException.prototype = new Error();
	  InvalidPDFException.constructor = InvalidPDFException;
	  return InvalidPDFException;
	}();
	var MissingPDFException = function MissingPDFExceptionClosure() {
	  function MissingPDFException(msg) {
	    this.name = 'MissingPDFException';
	    this.message = msg;
	  }
	  MissingPDFException.prototype = new Error();
	  MissingPDFException.constructor = MissingPDFException;
	  return MissingPDFException;
	}();
	var UnexpectedResponseException = function UnexpectedResponseExceptionClosure() {
	  function UnexpectedResponseException(msg, status) {
	    this.name = 'UnexpectedResponseException';
	    this.message = msg;
	    this.status = status;
	  }
	  UnexpectedResponseException.prototype = new Error();
	  UnexpectedResponseException.constructor = UnexpectedResponseException;
	  return UnexpectedResponseException;
	}();
	var NotImplementedException = function NotImplementedExceptionClosure() {
	  function NotImplementedException(msg) {
	    this.message = msg;
	  }
	  NotImplementedException.prototype = new Error();
	  NotImplementedException.prototype.name = 'NotImplementedException';
	  NotImplementedException.constructor = NotImplementedException;
	  return NotImplementedException;
	}();
	var MissingDataException = function MissingDataExceptionClosure() {
	  function MissingDataException(begin, end) {
	    this.begin = begin;
	    this.end = end;
	    this.message = 'Missing data [' + begin + ', ' + end + ')';
	  }
	  MissingDataException.prototype = new Error();
	  MissingDataException.prototype.name = 'MissingDataException';
	  MissingDataException.constructor = MissingDataException;
	  return MissingDataException;
	}();
	var XRefParseException = function XRefParseExceptionClosure() {
	  function XRefParseException(msg) {
	    this.message = msg;
	  }
	  XRefParseException.prototype = new Error();
	  XRefParseException.prototype.name = 'XRefParseException';
	  XRefParseException.constructor = XRefParseException;
	  return XRefParseException;
	}();
	var NullCharactersRegExp = /\x00/g;
	function removeNullCharacters(str) {
	  if (typeof str !== 'string') {
	    warn('The argument for removeNullCharacters must be a string.');
	    return str;
	  }
	  return str.replace(NullCharactersRegExp, '');
	}
	function bytesToString(bytes) {
	  assert(bytes !== null && (typeof bytes === 'undefined' ? 'undefined' : _typeof(bytes)) === 'object' && bytes.length !== undefined, 'Invalid argument for bytesToString');
	  var length = bytes.length;
	  var MAX_ARGUMENT_COUNT = 8192;
	  if (length < MAX_ARGUMENT_COUNT) {
	    return String.fromCharCode.apply(null, bytes);
	  }
	  var strBuf = [];
	  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
	    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
	    var chunk = bytes.subarray(i, chunkEnd);
	    strBuf.push(String.fromCharCode.apply(null, chunk));
	  }
	  return strBuf.join('');
	}
	function stringToBytes(str) {
	  assert(typeof str === 'string', 'Invalid argument for stringToBytes');
	  var length = str.length;
	  var bytes = new Uint8Array(length);
	  for (var i = 0; i < length; ++i) {
	    bytes[i] = str.charCodeAt(i) & 0xFF;
	  }
	  return bytes;
	}
	function arrayByteLength(arr) {
	  if (arr.length !== undefined) {
	    return arr.length;
	  }
	  assert(arr.byteLength !== undefined);
	  return arr.byteLength;
	}
	function arraysToBytes(arr) {
	  if (arr.length === 1 && arr[0] instanceof Uint8Array) {
	    return arr[0];
	  }
	  var resultLength = 0;
	  var i,
	      ii = arr.length;
	  var item, itemLength;
	  for (i = 0; i < ii; i++) {
	    item = arr[i];
	    itemLength = arrayByteLength(item);
	    resultLength += itemLength;
	  }
	  var pos = 0;
	  var data = new Uint8Array(resultLength);
	  for (i = 0; i < ii; i++) {
	    item = arr[i];
	    if (!(item instanceof Uint8Array)) {
	      if (typeof item === 'string') {
	        item = stringToBytes(item);
	      } else {
	        item = new Uint8Array(item);
	      }
	    }
	    itemLength = item.byteLength;
	    data.set(item, pos);
	    pos += itemLength;
	  }
	  return data;
	}
	function string32(value) {
	  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
	}
	function log2(x) {
	  var n = 1,
	      i = 0;
	  while (x > n) {
	    n <<= 1;
	    i++;
	  }
	  return i;
	}
	function readInt8(data, start) {
	  return data[start] << 24 >> 24;
	}
	function readUint16(data, offset) {
	  return data[offset] << 8 | data[offset + 1];
	}
	function readUint32(data, offset) {
	  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
	}
	function isLittleEndian() {
	  var buffer8 = new Uint8Array(4);
	  buffer8[0] = 1;
	  var view32 = new Uint32Array(buffer8.buffer, 0, 1);
	  return view32[0] === 1;
	}
	function isEvalSupported() {
	  try {
	    new Function('');
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
	var Util = function UtilClosure() {
	  function Util() {}
	  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];
	  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {
	    rgbBuf[1] = r;
	    rgbBuf[3] = g;
	    rgbBuf[5] = b;
	    return rgbBuf.join('');
	  };
	  Util.transform = function Util_transform(m1, m2) {
	    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
	  };
	  Util.applyTransform = function Util_applyTransform(p, m) {
	    var xt = p[0] * m[0] + p[1] * m[2] + m[4];
	    var yt = p[0] * m[1] + p[1] * m[3] + m[5];
	    return [xt, yt];
	  };
	  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {
	    var d = m[0] * m[3] - m[1] * m[2];
	    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
	    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
	    return [xt, yt];
	  };
	  Util.getAxialAlignedBoundingBox = function Util_getAxialAlignedBoundingBox(r, m) {
	    var p1 = Util.applyTransform(r, m);
	    var p2 = Util.applyTransform(r.slice(2, 4), m);
	    var p3 = Util.applyTransform([r[0], r[3]], m);
	    var p4 = Util.applyTransform([r[2], r[1]], m);
	    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
	  };
	  Util.inverseTransform = function Util_inverseTransform(m) {
	    var d = m[0] * m[3] - m[1] * m[2];
	    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
	  };
	  Util.apply3dTransform = function Util_apply3dTransform(m, v) {
	    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
	  };
	  Util.singularValueDecompose2dScale = function Util_singularValueDecompose2dScale(m) {
	    var transpose = [m[0], m[2], m[1], m[3]];
	    var a = m[0] * transpose[0] + m[1] * transpose[2];
	    var b = m[0] * transpose[1] + m[1] * transpose[3];
	    var c = m[2] * transpose[0] + m[3] * transpose[2];
	    var d = m[2] * transpose[1] + m[3] * transpose[3];
	    var first = (a + d) / 2;
	    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;
	    var sx = first + second || 1;
	    var sy = first - second || 1;
	    return [Math.sqrt(sx), Math.sqrt(sy)];
	  };
	  Util.normalizeRect = function Util_normalizeRect(rect) {
	    var r = rect.slice(0);
	    if (rect[0] > rect[2]) {
	      r[0] = rect[2];
	      r[2] = rect[0];
	    }
	    if (rect[1] > rect[3]) {
	      r[1] = rect[3];
	      r[3] = rect[1];
	    }
	    return r;
	  };
	  Util.intersect = function Util_intersect(rect1, rect2) {
	    function compare(a, b) {
	      return a - b;
	    }
	    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),
	        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),
	        result = [];
	    rect1 = Util.normalizeRect(rect1);
	    rect2 = Util.normalizeRect(rect2);
	    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
	      result[0] = orderedX[1];
	      result[2] = orderedX[2];
	    } else {
	      return false;
	    }
	    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
	      result[1] = orderedY[1];
	      result[3] = orderedY[2];
	    } else {
	      return false;
	    }
	    return result;
	  };
	  Util.sign = function Util_sign(num) {
	    return num < 0 ? -1 : 1;
	  };
	  var ROMAN_NUMBER_MAP = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];
	  Util.toRoman = function Util_toRoman(number, lowerCase) {
	    assert(isInt(number) && number > 0, 'The number should be a positive integer.');
	    var pos,
	        romanBuf = [];
	    while (number >= 1000) {
	      number -= 1000;
	      romanBuf.push('M');
	    }
	    pos = number / 100 | 0;
	    number %= 100;
	    romanBuf.push(ROMAN_NUMBER_MAP[pos]);
	    pos = number / 10 | 0;
	    number %= 10;
	    romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);
	    romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);
	    var romanStr = romanBuf.join('');
	    return lowerCase ? romanStr.toLowerCase() : romanStr;
	  };
	  Util.appendToArray = function Util_appendToArray(arr1, arr2) {
	    Array.prototype.push.apply(arr1, arr2);
	  };
	  Util.prependToArray = function Util_prependToArray(arr1, arr2) {
	    Array.prototype.unshift.apply(arr1, arr2);
	  };
	  Util.extendObj = function extendObj(obj1, obj2) {
	    for (var key in obj2) {
	      obj1[key] = obj2[key];
	    }
	  };
	  Util.getInheritableProperty = function Util_getInheritableProperty(dict, name, getArray) {
	    while (dict && !dict.has(name)) {
	      dict = dict.get('Parent');
	    }
	    if (!dict) {
	      return null;
	    }
	    return getArray ? dict.getArray(name) : dict.get(name);
	  };
	  Util.inherit = function Util_inherit(sub, base, prototype) {
	    sub.prototype = Object.create(base.prototype);
	    sub.prototype.constructor = sub;
	    for (var prop in prototype) {
	      sub.prototype[prop] = prototype[prop];
	    }
	  };
	  Util.loadScript = function Util_loadScript(src, callback) {
	    var script = document.createElement('script');
	    var loaded = false;
	    script.setAttribute('src', src);
	    if (callback) {
	      script.onload = function () {
	        if (!loaded) {
	          callback();
	        }
	        loaded = true;
	      };
	    }
	    document.getElementsByTagName('head')[0].appendChild(script);
	  };
	  return Util;
	}();
	var PageViewport = function PageViewportClosure() {
	  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {
	    this.viewBox = viewBox;
	    this.scale = scale;
	    this.rotation = rotation;
	    this.offsetX = offsetX;
	    this.offsetY = offsetY;
	    var centerX = (viewBox[2] + viewBox[0]) / 2;
	    var centerY = (viewBox[3] + viewBox[1]) / 2;
	    var rotateA, rotateB, rotateC, rotateD;
	    rotation = rotation % 360;
	    rotation = rotation < 0 ? rotation + 360 : rotation;
	    switch (rotation) {
	      case 180:
	        rotateA = -1;
	        rotateB = 0;
	        rotateC = 0;
	        rotateD = 1;
	        break;
	      case 90:
	        rotateA = 0;
	        rotateB = 1;
	        rotateC = 1;
	        rotateD = 0;
	        break;
	      case 270:
	        rotateA = 0;
	        rotateB = -1;
	        rotateC = -1;
	        rotateD = 0;
	        break;
	      default:
	        rotateA = 1;
	        rotateB = 0;
	        rotateC = 0;
	        rotateD = -1;
	        break;
	    }
	    if (dontFlip) {
	      rotateC = -rotateC;
	      rotateD = -rotateD;
	    }
	    var offsetCanvasX, offsetCanvasY;
	    var width, height;
	    if (rotateA === 0) {
	      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
	      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
	      width = Math.abs(viewBox[3] - viewBox[1]) * scale;
	      height = Math.abs(viewBox[2] - viewBox[0]) * scale;
	    } else {
	      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
	      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
	      width = Math.abs(viewBox[2] - viewBox[0]) * scale;
	      height = Math.abs(viewBox[3] - viewBox[1]) * scale;
	    }
	    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
	    this.width = width;
	    this.height = height;
	    this.fontScale = scale;
	  }
	  PageViewport.prototype = {
	    clone: function PageViewPort_clone(args) {
	      args = args || {};
	      var scale = 'scale' in args ? args.scale : this.scale;
	      var rotation = 'rotation' in args ? args.rotation : this.rotation;
	      return new PageViewport(this.viewBox.slice(), scale, rotation, this.offsetX, this.offsetY, args.dontFlip);
	    },
	    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {
	      return Util.applyTransform([x, y], this.transform);
	    },
	    convertToViewportRectangle: function PageViewport_convertToViewportRectangle(rect) {
	      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);
	      var br = Util.applyTransform([rect[2], rect[3]], this.transform);
	      return [tl[0], tl[1], br[0], br[1]];
	    },
	    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {
	      return Util.applyInverseTransform([x, y], this.transform);
	    }
	  };
	  return PageViewport;
	}();
	var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];
	function stringToPDFString(str) {
	  var i,
	      n = str.length,
	      strBuf = [];
	  if (str[0] === '\xFE' && str[1] === '\xFF') {
	    for (i = 2; i < n; i += 2) {
	      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
	    }
	  } else {
	    for (i = 0; i < n; ++i) {
	      var code = PDFStringTranslateTable[str.charCodeAt(i)];
	      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
	    }
	  }
	  return strBuf.join('');
	}
	function stringToUTF8String(str) {
	  return decodeURIComponent(escape(str));
	}
	function utf8StringToString(str) {
	  return unescape(encodeURIComponent(str));
	}
	function isEmptyObj(obj) {
	  for (var key in obj) {
	    return false;
	  }
	  return true;
	}
	function isBool(v) {
	  return typeof v === 'boolean';
	}
	function isInt(v) {
	  return typeof v === 'number' && (v | 0) === v;
	}
	function isNum(v) {
	  return typeof v === 'number';
	}
	function isString(v) {
	  return typeof v === 'string';
	}
	function isArray(v) {
	  return v instanceof Array;
	}
	function isArrayBuffer(v) {
	  return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v !== null && v.byteLength !== undefined;
	}
	function isSpace(ch) {
	  return ch === 0x20 || ch === 0x09 || ch === 0x0D || ch === 0x0A;
	}
	function isNodeJS() {
	  if (typeof __pdfjsdev_webpack__ === 'undefined') {
	    return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process + '' === '[object process]';
	  }
	  return false;
	}
	function createPromiseCapability() {
	  var capability = {};
	  capability.promise = new Promise(function (resolve, reject) {
	    capability.resolve = resolve;
	    capability.reject = reject;
	  });
	  return capability;
	}
	var StatTimer = function StatTimerClosure() {
	  function rpad(str, pad, length) {
	    while (str.length < length) {
	      str += pad;
	    }
	    return str;
	  }
	  function StatTimer() {
	    this.started = Object.create(null);
	    this.times = [];
	    this.enabled = true;
	  }
	  StatTimer.prototype = {
	    time: function StatTimer_time(name) {
	      if (!this.enabled) {
	        return;
	      }
	      if (name in this.started) {
	        warn('Timer is already running for ' + name);
	      }
	      this.started[name] = Date.now();
	    },
	    timeEnd: function StatTimer_timeEnd(name) {
	      if (!this.enabled) {
	        return;
	      }
	      if (!(name in this.started)) {
	        warn('Timer has not been started for ' + name);
	      }
	      this.times.push({
	        'name': name,
	        'start': this.started[name],
	        'end': Date.now()
	      });
	      delete this.started[name];
	    },
	    toString: function StatTimer_toString() {
	      var i, ii;
	      var times = this.times;
	      var out = '';
	      var longest = 0;
	      for (i = 0, ii = times.length; i < ii; ++i) {
	        var name = times[i]['name'];
	        if (name.length > longest) {
	          longest = name.length;
	        }
	      }
	      for (i = 0, ii = times.length; i < ii; ++i) {
	        var span = times[i];
	        var duration = span.end - span.start;
	        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\n';
	      }
	      return out;
	    }
	  };
	  return StatTimer;
	}();
	var createBlob = function createBlob(data, contentType) {
	  if (typeof Blob !== 'undefined') {
	    return new Blob([data], { type: contentType });
	  }
	  throw new Error('The "Blob" constructor is not supported.');
	};
	var createObjectURL = function createObjectURLClosure() {
	  var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	  return function createObjectURL(data, contentType) {
	    var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    if (!forceDataSchema && URL.createObjectURL) {
	      var blob = createBlob(data, contentType);
	      return URL.createObjectURL(blob);
	    }
	    var buffer = 'data:' + contentType + ';base64,';
	    for (var i = 0, ii = data.length; i < ii; i += 3) {
	      var b1 = data[i] & 0xFF;
	      var b2 = data[i + 1] & 0xFF;
	      var b3 = data[i + 2] & 0xFF;
	      var d1 = b1 >> 2,
	          d2 = (b1 & 3) << 4 | b2 >> 4;
	      var d3 = i + 1 < ii ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	      var d4 = i + 2 < ii ? b3 & 0x3F : 64;
	      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
	    }
	    return buffer;
	  };
	}();
	function MessageHandler(sourceName, targetName, comObj) {
	  var _this = this;

	  this.sourceName = sourceName;
	  this.targetName = targetName;
	  this.comObj = comObj;
	  this.callbackIndex = 1;
	  this.postMessageTransfers = true;
	  var callbacksCapabilities = this.callbacksCapabilities = Object.create(null);
	  var ah = this.actionHandler = Object.create(null);
	  this._onComObjOnMessage = function (event) {
	    var data = event.data;
	    if (data.targetName !== _this.sourceName) {
	      return;
	    }
	    if (data.isReply) {
	      var callbackId = data.callbackId;
	      if (data.callbackId in callbacksCapabilities) {
	        var callback = callbacksCapabilities[callbackId];
	        delete callbacksCapabilities[callbackId];
	        if ('error' in data) {
	          callback.reject(data.error);
	        } else {
	          callback.resolve(data.data);
	        }
	      } else {
	        error('Cannot resolve callback ' + callbackId);
	      }
	    } else if (data.action in ah) {
	      var action = ah[data.action];
	      if (data.callbackId) {
	        var sourceName = _this.sourceName;
	        var targetName = data.sourceName;
	        Promise.resolve().then(function () {
	          return action[0].call(action[1], data.data);
	        }).then(function (result) {
	          comObj.postMessage({
	            sourceName: sourceName,
	            targetName: targetName,
	            isReply: true,
	            callbackId: data.callbackId,
	            data: result
	          });
	        }, function (reason) {
	          if (reason instanceof Error) {
	            reason = reason + '';
	          }
	          comObj.postMessage({
	            sourceName: sourceName,
	            targetName: targetName,
	            isReply: true,
	            callbackId: data.callbackId,
	            error: reason
	          });
	        });
	      } else {
	        action[0].call(action[1], data.data);
	      }
	    } else {
	      error('Unknown action from worker: ' + data.action);
	    }
	  };
	  comObj.addEventListener('message', this._onComObjOnMessage);
	}
	MessageHandler.prototype = {
	  on: function on(actionName, handler, scope) {
	    var ah = this.actionHandler;
	    if (ah[actionName]) {
	      error('There is already an actionName called "' + actionName + '"');
	    }
	    ah[actionName] = [handler, scope];
	  },
	  send: function send(actionName, data, transfers) {
	    var message = {
	      sourceName: this.sourceName,
	      targetName: this.targetName,
	      action: actionName,
	      data: data
	    };
	    this.postMessage(message, transfers);
	  },
	  sendWithPromise: function sendWithPromise(actionName, data, transfers) {
	    var callbackId = this.callbackIndex++;
	    var message = {
	      sourceName: this.sourceName,
	      targetName: this.targetName,
	      action: actionName,
	      data: data,
	      callbackId: callbackId
	    };
	    var capability = createPromiseCapability();
	    this.callbacksCapabilities[callbackId] = capability;
	    try {
	      this.postMessage(message, transfers);
	    } catch (e) {
	      capability.reject(e);
	    }
	    return capability.promise;
	  },
	  postMessage: function postMessage(message, transfers) {
	    if (transfers && this.postMessageTransfers) {
	      this.comObj.postMessage(message, transfers);
	    } else {
	      this.comObj.postMessage(message);
	    }
	  },
	  destroy: function destroy() {
	    this.comObj.removeEventListener('message', this._onComObjOnMessage);
	  }
	};
	function loadJpegStream(id, imageUrl, objs) {
	  var img = new Image();
	  img.onload = function loadJpegStream_onloadClosure() {
	    objs.resolve(id, img);
	  };
	  img.onerror = function loadJpegStream_onerrorClosure() {
	    objs.resolve(id, null);
	    warn('Error during JPEG image loading');
	  };
	  img.src = imageUrl;
	}
	exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
	exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
	exports.OPS = OPS;
	exports.VERBOSITY_LEVELS = VERBOSITY_LEVELS;
	exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
	exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
	exports.AnnotationFieldFlag = AnnotationFieldFlag;
	exports.AnnotationFlag = AnnotationFlag;
	exports.AnnotationType = AnnotationType;
	exports.FontType = FontType;
	exports.ImageKind = ImageKind;
	exports.CMapCompressionType = CMapCompressionType;
	exports.InvalidPDFException = InvalidPDFException;
	exports.MessageHandler = MessageHandler;
	exports.MissingDataException = MissingDataException;
	exports.MissingPDFException = MissingPDFException;
	exports.NativeImageDecoding = NativeImageDecoding;
	exports.NotImplementedException = NotImplementedException;
	exports.PageViewport = PageViewport;
	exports.PasswordException = PasswordException;
	exports.PasswordResponses = PasswordResponses;
	exports.StatTimer = StatTimer;
	exports.StreamType = StreamType;
	exports.TextRenderingMode = TextRenderingMode;
	exports.UnexpectedResponseException = UnexpectedResponseException;
	exports.UnknownErrorException = UnknownErrorException;
	exports.Util = Util;
	exports.XRefParseException = XRefParseException;
	exports.arrayByteLength = arrayByteLength;
	exports.arraysToBytes = arraysToBytes;
	exports.assert = assert;
	exports.bytesToString = bytesToString;
	exports.createBlob = createBlob;
	exports.createPromiseCapability = createPromiseCapability;
	exports.createObjectURL = createObjectURL;
	exports.deprecated = deprecated;
	exports.error = error;
	exports.getLookupTableFactory = getLookupTableFactory;
	exports.getVerbosityLevel = getVerbosityLevel;
	exports.globalScope = globalScope;
	exports.info = info;
	exports.isArray = isArray;
	exports.isArrayBuffer = isArrayBuffer;
	exports.isBool = isBool;
	exports.isEmptyObj = isEmptyObj;
	exports.isInt = isInt;
	exports.isNum = isNum;
	exports.isString = isString;
	exports.isSpace = isSpace;
	exports.isNodeJS = isNodeJS;
	exports.isSameOrigin = isSameOrigin;
	exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
	exports.isLittleEndian = isLittleEndian;
	exports.isEvalSupported = isEvalSupported;
	exports.loadJpegStream = loadJpegStream;
	exports.log2 = log2;
	exports.readInt8 = readInt8;
	exports.readUint16 = readUint16;
	exports.readUint32 = readUint32;
	exports.removeNullCharacters = removeNullCharacters;
	exports.setVerbosityLevel = setVerbosityLevel;
	exports.shadow = shadow;
	exports.string32 = string32;
	exports.stringToBytes = stringToBytes;
	exports.stringToPDFString = stringToPDFString;
	exports.stringToUTF8String = stringToUTF8String;
	exports.utf8StringToString = utf8StringToString;
	exports.warn = warn;
	/* WEBPACK VAR INJECTION */}.call(exports, __w_pdfjs_require__(6)))

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.getDefaultSetting = exports.LinkTarget = exports.getFilenameFromUrl = exports.isValidUrl = exports.isExternalLinkTargetSet = exports.addLinkAttributes = exports.RenderingCancelledException = exports.CustomStyle = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _util = __w_pdfjs_require__(0);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DEFAULT_LINK_REL = 'noopener noreferrer nofollow';

	var DOMCanvasFactory = function () {
	  function DOMCanvasFactory() {
	    _classCallCheck(this, DOMCanvasFactory);
	  }

	  _createClass(DOMCanvasFactory, [{
	    key: 'create',
	    value: function create(width, height) {
	      (0, _util.assert)(width > 0 && height > 0, 'invalid canvas size');
	      var canvas = document.createElement('canvas');
	      var context = canvas.getContext('2d');
	      canvas.width = width;
	      canvas.height = height;
	      return {
	        canvas: canvas,
	        context: context
	      };
	    }
	  }, {
	    key: 'reset',
	    value: function reset(canvasAndContext, width, height) {
	      (0, _util.assert)(canvasAndContext.canvas, 'canvas is not specified');
	      (0, _util.assert)(width > 0 && height > 0, 'invalid canvas size');
	      canvasAndContext.canvas.width = width;
	      canvasAndContext.canvas.height = height;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy(canvasAndContext) {
	      (0, _util.assert)(canvasAndContext.canvas, 'canvas is not specified');
	      canvasAndContext.canvas.width = 0;
	      canvasAndContext.canvas.height = 0;
	      canvasAndContext.canvas = null;
	      canvasAndContext.context = null;
	    }
	  }]);

	  return DOMCanvasFactory;
	}();

	var DOMCMapReaderFactory = function () {
	  function DOMCMapReaderFactory(_ref) {
	    var _ref$baseUrl = _ref.baseUrl,
	        baseUrl = _ref$baseUrl === undefined ? null : _ref$baseUrl,
	        _ref$isCompressed = _ref.isCompressed,
	        isCompressed = _ref$isCompressed === undefined ? false : _ref$isCompressed;

	    _classCallCheck(this, DOMCMapReaderFactory);

	    this.baseUrl = baseUrl;
	    this.isCompressed = isCompressed;
	  }

	  _createClass(DOMCMapReaderFactory, [{
	    key: 'fetch',
	    value: function fetch(_ref2) {
	      var _this = this;

	      var name = _ref2.name;

	      if (!name) {
	        return Promise.reject(new Error('CMap name must be specified.'));
	      }
	      return new Promise(function (resolve, reject) {
	        var url = _this.baseUrl + name + (_this.isCompressed ? '.bcmap' : '');
	        var request = new XMLHttpRequest();
	        request.open('GET', url, true);
	        if (_this.isCompressed) {
	          request.responseType = 'arraybuffer';
	        }
	        request.onreadystatechange = function () {
	          if (request.readyState !== XMLHttpRequest.DONE) {
	            return;
	          }
	          if (request.status === 200 || request.status === 0) {
	            var data = void 0;
	            if (_this.isCompressed && request.response) {
	              data = new Uint8Array(request.response);
	            } else if (!_this.isCompressed && request.responseText) {
	              data = (0, _util.stringToBytes)(request.responseText);
	            }
	            if (data) {
	              resolve({
	                cMapData: data,
	                compressionType: _this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE
	              });
	              return;
	            }
	          }
	          reject(new Error('Unable to load ' + (_this.isCompressed ? 'binary ' : '') + 'CMap at: ' + url));
	        };
	        request.send(null);
	      });
	    }
	  }]);

	  return DOMCMapReaderFactory;
	}();

	var CustomStyle = function CustomStyleClosure() {
	  var prefixes = ['ms', 'Moz', 'Webkit', 'O'];
	  var _cache = Object.create(null);
	  function CustomStyle() {}
	  CustomStyle.getProp = function get(propName, element) {
	    if (arguments.length === 1 && typeof _cache[propName] === 'string') {
	      return _cache[propName];
	    }
	    element = element || document.documentElement;
	    var style = element.style,
	        prefixed,
	        uPropName;
	    if (typeof style[propName] === 'string') {
	      return _cache[propName] = propName;
	    }
	    uPropName = propName.charAt(0).toUpperCase() + propName.slice(1);
	    for (var i = 0, l = prefixes.length; i < l; i++) {
	      prefixed = prefixes[i] + uPropName;
	      if (typeof style[prefixed] === 'string') {
	        return _cache[propName] = prefixed;
	      }
	    }
	    return _cache[propName] = 'undefined';
	  };
	  CustomStyle.setProp = function set(propName, element, str) {
	    var prop = this.getProp(propName);
	    if (prop !== 'undefined') {
	      element.style[prop] = str;
	    }
	  };
	  return CustomStyle;
	}();
	var RenderingCancelledException = function RenderingCancelledException() {
	  function RenderingCancelledException(msg, type) {
	    this.message = msg;
	    this.type = type;
	  }
	  RenderingCancelledException.prototype = new Error();
	  RenderingCancelledException.prototype.name = 'RenderingCancelledException';
	  RenderingCancelledException.constructor = RenderingCancelledException;
	  return RenderingCancelledException;
	}();
	var LinkTarget = {
	  NONE: 0,
	  SELF: 1,
	  BLANK: 2,
	  PARENT: 3,
	  TOP: 4
	};
	var LinkTargetStringMap = ['', '_self', '_blank', '_parent', '_top'];
	function addLinkAttributes(link, params) {
	  var url = params && params.url;
	  link.href = link.title = url ? (0, _util.removeNullCharacters)(url) : '';
	  if (url) {
	    var target = params.target;
	    if (typeof target === 'undefined') {
	      target = getDefaultSetting('externalLinkTarget');
	    }
	    link.target = LinkTargetStringMap[target];
	    var rel = params.rel;
	    if (typeof rel === 'undefined') {
	      rel = getDefaultSetting('externalLinkRel');
	    }
	    link.rel = rel;
	  }
	}
	function getFilenameFromUrl(url) {
	  var anchor = url.indexOf('#');
	  var query = url.indexOf('?');
	  var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
	  return url.substring(url.lastIndexOf('/', end) + 1, end);
	}
	function getDefaultSetting(id) {
	  var globalSettings = _util.globalScope.PDFJS;
	  switch (id) {
	    case 'pdfBug':
	      return globalSettings ? globalSettings.pdfBug : false;
	    case 'disableAutoFetch':
	      return globalSettings ? globalSettings.disableAutoFetch : false;
	    case 'disableStream':
	      return globalSettings ? globalSettings.disableStream : false;
	    case 'disableRange':
	      return globalSettings ? globalSettings.disableRange : false;
	    case 'disableFontFace':
	      return globalSettings ? globalSettings.disableFontFace : false;
	    case 'disableCreateObjectURL':
	      return globalSettings ? globalSettings.disableCreateObjectURL : false;
	    case 'disableWebGL':
	      return globalSettings ? globalSettings.disableWebGL : true;
	    case 'cMapUrl':
	      return globalSettings ? globalSettings.cMapUrl : null;
	    case 'cMapPacked':
	      return globalSettings ? globalSettings.cMapPacked : false;
	    case 'postMessageTransfers':
	      return globalSettings ? globalSettings.postMessageTransfers : true;
	    case 'workerPort':
	      return globalSettings ? globalSettings.workerPort : null;
	    case 'workerSrc':
	      return globalSettings ? globalSettings.workerSrc : null;
	    case 'disableWorker':
	      return globalSettings ? globalSettings.disableWorker : false;
	    case 'maxImageSize':
	      return globalSettings ? globalSettings.maxImageSize : -1;
	    case 'imageResourcesPath':
	      return globalSettings ? globalSettings.imageResourcesPath : '';
	    case 'isEvalSupported':
	      return globalSettings ? globalSettings.isEvalSupported : true;
	    case 'externalLinkTarget':
	      if (!globalSettings) {
	        return LinkTarget.NONE;
	      }
	      switch (globalSettings.externalLinkTarget) {
	        case LinkTarget.NONE:
	        case LinkTarget.SELF:
	        case LinkTarget.BLANK:
	        case LinkTarget.PARENT:
	        case LinkTarget.TOP:
	          return globalSettings.externalLinkTarget;
	      }
	      (0, _util.warn)('PDFJS.externalLinkTarget is invalid: ' + globalSettings.externalLinkTarget);
	      globalSettings.externalLinkTarget = LinkTarget.NONE;
	      return LinkTarget.NONE;
	    case 'externalLinkRel':
	      return globalSettings ? globalSettings.externalLinkRel : DEFAULT_LINK_REL;
	    case 'enableStats':
	      return !!(globalSettings && globalSettings.enableStats);
	    case 'pdfjsNext':
	      return !!(globalSettings && globalSettings.pdfjsNext);
	    default:
	      throw new Error('Unknown default setting: ' + id);
	  }
	}
	function isExternalLinkTargetSet() {
	  var externalLinkTarget = getDefaultSetting('externalLinkTarget');
	  switch (externalLinkTarget) {
	    case LinkTarget.NONE:
	      return false;
	    case LinkTarget.SELF:
	    case LinkTarget.BLANK:
	    case LinkTarget.PARENT:
	    case LinkTarget.TOP:
	      return true;
	  }
	}
	function isValidUrl(url, allowRelative) {
	  (0, _util.deprecated)('isValidUrl(), please use createValidAbsoluteUrl() instead.');
	  var baseUrl = allowRelative ? 'http://example.com' : null;
	  return (0, _util.createValidAbsoluteUrl)(url, baseUrl) !== null;
	}
	exports.CustomStyle = CustomStyle;
	exports.RenderingCancelledException = RenderingCancelledException;
	exports.addLinkAttributes = addLinkAttributes;
	exports.isExternalLinkTargetSet = isExternalLinkTargetSet;
	exports.isValidUrl = isValidUrl;
	exports.getFilenameFromUrl = getFilenameFromUrl;
	exports.LinkTarget = LinkTarget;
	exports.getDefaultSetting = getDefaultSetting;
	exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;
	exports.DOMCanvasFactory = DOMCanvasFactory;
	exports.DOMCMapReaderFactory = DOMCMapReaderFactory;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AnnotationLayer = undefined;

	var _dom_utils = __w_pdfjs_require__(1);

	var _util = __w_pdfjs_require__(0);

	function AnnotationElementFactory() {}
	AnnotationElementFactory.prototype = {
	  create: function AnnotationElementFactory_create(parameters) {
	    var subtype = parameters.data.annotationType;
	    switch (subtype) {
	      case _util.AnnotationType.LINK:
	        return new LinkAnnotationElement(parameters);
	      case _util.AnnotationType.TEXT:
	        return new TextAnnotationElement(parameters);
	      case _util.AnnotationType.WIDGET:
	        var fieldType = parameters.data.fieldType;
	        switch (fieldType) {
	          case 'Tx':
	            return new TextWidgetAnnotationElement(parameters);
	          case 'Btn':
	            if (parameters.data.radioButton) {
	              return new RadioButtonWidgetAnnotationElement(parameters);
	            } else if (parameters.data.checkBox) {
	              return new CheckboxWidgetAnnotationElement(parameters);
	            }
	            (0, _util.warn)('Unimplemented button widget annotation: pushbutton');
	            break;
	          case 'Ch':
	            return new ChoiceWidgetAnnotationElement(parameters);
	        }
	        return new WidgetAnnotationElement(parameters);
	      case _util.AnnotationType.POPUP:
	        return new PopupAnnotationElement(parameters);
	      case _util.AnnotationType.LINE:
	        return new LineAnnotationElement(parameters);
	      case _util.AnnotationType.HIGHLIGHT:
	        return new HighlightAnnotationElement(parameters);
	      case _util.AnnotationType.UNDERLINE:
	        return new UnderlineAnnotationElement(parameters);
	      case _util.AnnotationType.SQUIGGLY:
	        return new SquigglyAnnotationElement(parameters);
	      case _util.AnnotationType.STRIKEOUT:
	        return new StrikeOutAnnotationElement(parameters);
	      case _util.AnnotationType.FILEATTACHMENT:
	        return new FileAttachmentAnnotationElement(parameters);
	      default:
	        return new AnnotationElement(parameters);
	    }
	  }
	};
	var AnnotationElement = function AnnotationElementClosure() {
	  function AnnotationElement(parameters, isRenderable, ignoreBorder) {
	    this.isRenderable = isRenderable || false;
	    this.data = parameters.data;
	    this.layer = parameters.layer;
	    this.page = parameters.page;
	    this.viewport = parameters.viewport;
	    this.linkService = parameters.linkService;
	    this.downloadManager = parameters.downloadManager;
	    this.imageResourcesPath = parameters.imageResourcesPath;
	    this.renderInteractiveForms = parameters.renderInteractiveForms;
	    if (isRenderable) {
	      this.container = this._createContainer(ignoreBorder);
	    }
	  }
	  AnnotationElement.prototype = {
	    _createContainer: function AnnotationElement_createContainer(ignoreBorder) {
	      var data = this.data,
	          page = this.page,
	          viewport = this.viewport;
	      var container = document.createElement('section');
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      container.setAttribute('data-annotation-id', data.id);
	      var rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);
	      _dom_utils.CustomStyle.setProp('transform', container, 'matrix(' + viewport.transform.join(',') + ')');
	      _dom_utils.CustomStyle.setProp('transformOrigin', container, -rect[0] + 'px ' + -rect[1] + 'px');
	      if (!ignoreBorder && data.borderStyle.width > 0) {
	        container.style.borderWidth = data.borderStyle.width + 'px';
	        if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {
	          width = width - 2 * data.borderStyle.width;
	          height = height - 2 * data.borderStyle.width;
	        }
	        var horizontalRadius = data.borderStyle.horizontalCornerRadius;
	        var verticalRadius = data.borderStyle.verticalCornerRadius;
	        if (horizontalRadius > 0 || verticalRadius > 0) {
	          var radius = horizontalRadius + 'px / ' + verticalRadius + 'px';
	          _dom_utils.CustomStyle.setProp('borderRadius', container, radius);
	        }
	        switch (data.borderStyle.style) {
	          case _util.AnnotationBorderStyleType.SOLID:
	            container.style.borderStyle = 'solid';
	            break;
	          case _util.AnnotationBorderStyleType.DASHED:
	            container.style.borderStyle = 'dashed';
	            break;
	          case _util.AnnotationBorderStyleType.BEVELED:
	            (0, _util.warn)('Unimplemented border style: beveled');
	            break;
	          case _util.AnnotationBorderStyleType.INSET:
	            (0, _util.warn)('Unimplemented border style: inset');
	            break;
	          case _util.AnnotationBorderStyleType.UNDERLINE:
	            container.style.borderBottomStyle = 'solid';
	            break;
	          default:
	            break;
	        }
	        if (data.color) {
	          container.style.borderColor = _util.Util.makeCssRgb(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
	        } else {
	          container.style.borderWidth = 0;
	        }
	      }
	      container.style.left = rect[0] + 'px';
	      container.style.top = rect[1] + 'px';
	      container.style.width = width + 'px';
	      container.style.height = height + 'px';
	      return container;
	    },
	    _createPopup: function AnnotationElement_createPopup(container, trigger, data) {
	      if (!trigger) {
	        trigger = document.createElement('div');
	        trigger.style.height = container.style.height;
	        trigger.style.width = container.style.width;
	        container.appendChild(trigger);
	      }
	      var popupElement = new PopupElement({
	        container: container,
	        trigger: trigger,
	        color: data.color,
	        title: data.title,
	        contents: data.contents,
	        hideWrapper: true
	      });
	      var popup = popupElement.render();
	      popup.style.left = container.style.width;
	      container.appendChild(popup);
	    },
	    render: function AnnotationElement_render() {
	      throw new Error('Abstract method AnnotationElement.render called');
	    }
	  };
	  return AnnotationElement;
	}();
	var LinkAnnotationElement = function LinkAnnotationElementClosure() {
	  function LinkAnnotationElement(parameters) {
	    AnnotationElement.call(this, parameters, true);
	  }
	  _util.Util.inherit(LinkAnnotationElement, AnnotationElement, {
	    render: function LinkAnnotationElement_render() {
	      this.container.className = 'linkAnnotation';
	      var link = document.createElement('a');
	      (0, _dom_utils.addLinkAttributes)(link, {
	        url: this.data.url,
	        target: this.data.newWindow ? _dom_utils.LinkTarget.BLANK : undefined
	      });
	      if (!this.data.url) {
	        if (this.data.action) {
	          this._bindNamedAction(link, this.data.action);
	        } else {
	          this._bindLink(link, this.data.dest);
	        }
	      }
	      this.container.appendChild(link);
	      return this.container;
	    },
	    _bindLink: function _bindLink(link, destination) {
	      var _this = this;

	      link.href = this.linkService.getDestinationHash(destination);
	      link.onclick = function () {
	        if (destination) {
	          _this.linkService.navigateTo(destination);
	        }
	        return false;
	      };
	      if (destination) {
	        link.className = 'internalLink';
	      }
	    },
	    _bindNamedAction: function _bindNamedAction(link, action) {
	      var _this2 = this;

	      link.href = this.linkService.getAnchorUrl('');
	      link.onclick = function () {
	        _this2.linkService.executeNamedAction(action);
	        return false;
	      };
	      link.className = 'internalLink';
	    }
	  });
	  return LinkAnnotationElement;
	}();
	var TextAnnotationElement = function TextAnnotationElementClosure() {
	  function TextAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable);
	  }
	  _util.Util.inherit(TextAnnotationElement, AnnotationElement, {
	    render: function TextAnnotationElement_render() {
	      this.container.className = 'textAnnotation';
	      var image = document.createElement('img');
	      image.style.height = this.container.style.height;
	      image.style.width = this.container.style.width;
	      image.src = this.imageResourcesPath + 'annotation-' + this.data.name.toLowerCase() + '.svg';
	      image.alt = '[{{type}} Annotation]';
	      image.dataset.l10nId = 'text_annotation_type';
	      image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, image, this.data);
	      }
	      this.container.appendChild(image);
	      return this.container;
	    }
	  });
	  return TextAnnotationElement;
	}();
	var WidgetAnnotationElement = function WidgetAnnotationElementClosure() {
	  function WidgetAnnotationElement(parameters, isRenderable) {
	    AnnotationElement.call(this, parameters, isRenderable);
	  }
	  _util.Util.inherit(WidgetAnnotationElement, AnnotationElement, {
	    render: function WidgetAnnotationElement_render() {
	      return this.container;
	    }
	  });
	  return WidgetAnnotationElement;
	}();
	var TextWidgetAnnotationElement = function TextWidgetAnnotationElementClosure() {
	  var TEXT_ALIGNMENT = ['left', 'center', 'right'];
	  function TextWidgetAnnotationElement(parameters) {
	    var isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
	    WidgetAnnotationElement.call(this, parameters, isRenderable);
	  }
	  _util.Util.inherit(TextWidgetAnnotationElement, WidgetAnnotationElement, {
	    render: function TextWidgetAnnotationElement_render() {
	      this.container.className = 'textWidgetAnnotation';
	      var element = null;
	      if (this.renderInteractiveForms) {
	        if (this.data.multiLine) {
	          element = document.createElement('textarea');
	          element.textContent = this.data.fieldValue;
	        } else {
	          element = document.createElement('input');
	          element.type = 'text';
	          element.setAttribute('value', this.data.fieldValue);
	        }
	        element.disabled = this.data.readOnly;
	        if (this.data.maxLen !== null) {
	          element.maxLength = this.data.maxLen;
	        }
	        if (this.data.comb) {
	          var fieldWidth = this.data.rect[2] - this.data.rect[0];
	          var combWidth = fieldWidth / this.data.maxLen;
	          element.classList.add('comb');
	          element.style.letterSpacing = 'calc(' + combWidth + 'px - 1ch)';
	        }
	      } else {
	        element = document.createElement('div');
	        element.textContent = this.data.fieldValue;
	        element.style.verticalAlign = 'middle';
	        element.style.display = 'table-cell';
	        var font = null;
	        if (this.data.fontRefName) {
	          font = this.page.commonObjs.getData(this.data.fontRefName);
	        }
	        this._setTextStyle(element, font);
	      }
	      if (this.data.textAlignment !== null) {
	        element.style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
	      }
	      this.container.appendChild(element);
	      return this.container;
	    },
	    _setTextStyle: function TextWidgetAnnotationElement_setTextStyle(element, font) {
	      var style = element.style;
	      style.fontSize = this.data.fontSize + 'px';
	      style.direction = this.data.fontDirection < 0 ? 'rtl' : 'ltr';
	      if (!font) {
	        return;
	      }
	      style.fontWeight = font.black ? font.bold ? '900' : 'bold' : font.bold ? 'bold' : 'normal';
	      style.fontStyle = font.italic ? 'italic' : 'normal';
	      var fontFamily = font.loadedName ? '"' + font.loadedName + '", ' : '';
	      var fallbackName = font.fallbackName || 'Helvetica, sans-serif';
	      style.fontFamily = fontFamily + fallbackName;
	    }
	  });
	  return TextWidgetAnnotationElement;
	}();
	var CheckboxWidgetAnnotationElement = function CheckboxWidgetAnnotationElementClosure() {
	  function CheckboxWidgetAnnotationElement(parameters) {
	    WidgetAnnotationElement.call(this, parameters, parameters.renderInteractiveForms);
	  }
	  _util.Util.inherit(CheckboxWidgetAnnotationElement, WidgetAnnotationElement, {
	    render: function CheckboxWidgetAnnotationElement_render() {
	      this.container.className = 'buttonWidgetAnnotation checkBox';
	      var element = document.createElement('input');
	      element.disabled = this.data.readOnly;
	      element.type = 'checkbox';
	      if (this.data.fieldValue && this.data.fieldValue !== 'Off') {
	        element.setAttribute('checked', true);
	      }
	      this.container.appendChild(element);
	      return this.container;
	    }
	  });
	  return CheckboxWidgetAnnotationElement;
	}();
	var RadioButtonWidgetAnnotationElement = function RadioButtonWidgetAnnotationElementClosure() {
	  function RadioButtonWidgetAnnotationElement(parameters) {
	    WidgetAnnotationElement.call(this, parameters, parameters.renderInteractiveForms);
	  }
	  _util.Util.inherit(RadioButtonWidgetAnnotationElement, WidgetAnnotationElement, {
	    render: function RadioButtonWidgetAnnotationElement_render() {
	      this.container.className = 'buttonWidgetAnnotation radioButton';
	      var element = document.createElement('input');
	      element.disabled = this.data.readOnly;
	      element.type = 'radio';
	      element.name = this.data.fieldName;
	      if (this.data.fieldValue === this.data.buttonValue) {
	        element.setAttribute('checked', true);
	      }
	      this.container.appendChild(element);
	      return this.container;
	    }
	  });
	  return RadioButtonWidgetAnnotationElement;
	}();
	var ChoiceWidgetAnnotationElement = function ChoiceWidgetAnnotationElementClosure() {
	  function ChoiceWidgetAnnotationElement(parameters) {
	    WidgetAnnotationElement.call(this, parameters, parameters.renderInteractiveForms);
	  }
	  _util.Util.inherit(ChoiceWidgetAnnotationElement, WidgetAnnotationElement, {
	    render: function ChoiceWidgetAnnotationElement_render() {
	      this.container.className = 'choiceWidgetAnnotation';
	      var selectElement = document.createElement('select');
	      selectElement.disabled = this.data.readOnly;
	      if (!this.data.combo) {
	        selectElement.size = this.data.options.length;
	        if (this.data.multiSelect) {
	          selectElement.multiple = true;
	        }
	      }
	      for (var i = 0, ii = this.data.options.length; i < ii; i++) {
	        var option = this.data.options[i];
	        var optionElement = document.createElement('option');
	        optionElement.textContent = option.displayValue;
	        optionElement.value = option.exportValue;
	        if (this.data.fieldValue.indexOf(option.displayValue) >= 0) {
	          optionElement.setAttribute('selected', true);
	        }
	        selectElement.appendChild(optionElement);
	      }
	      this.container.appendChild(selectElement);
	      return this.container;
	    }
	  });
	  return ChoiceWidgetAnnotationElement;
	}();
	var PopupAnnotationElement = function PopupAnnotationElementClosure() {
	  var IGNORE_TYPES = ['Line'];
	  function PopupAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable);
	  }
	  _util.Util.inherit(PopupAnnotationElement, AnnotationElement, {
	    render: function PopupAnnotationElement_render() {
	      this.container.className = 'popupAnnotation';
	      if (IGNORE_TYPES.indexOf(this.data.parentType) >= 0) {
	        return this.container;
	      }
	      var selector = '[data-annotation-id="' + this.data.parentId + '"]';
	      var parentElement = this.layer.querySelector(selector);
	      if (!parentElement) {
	        return this.container;
	      }
	      var popup = new PopupElement({
	        container: this.container,
	        trigger: parentElement,
	        color: this.data.color,
	        title: this.data.title,
	        contents: this.data.contents
	      });
	      var parentLeft = parseFloat(parentElement.style.left);
	      var parentWidth = parseFloat(parentElement.style.width);
	      _dom_utils.CustomStyle.setProp('transformOrigin', this.container, -(parentLeft + parentWidth) + 'px -' + parentElement.style.top);
	      this.container.style.left = parentLeft + parentWidth + 'px';
	      this.container.appendChild(popup.render());
	      return this.container;
	    }
	  });
	  return PopupAnnotationElement;
	}();
	var PopupElement = function PopupElementClosure() {
	  var BACKGROUND_ENLIGHT = 0.7;
	  function PopupElement(parameters) {
	    this.container = parameters.container;
	    this.trigger = parameters.trigger;
	    this.color = parameters.color;
	    this.title = parameters.title;
	    this.contents = parameters.contents;
	    this.hideWrapper = parameters.hideWrapper || false;
	    this.pinned = false;
	  }
	  PopupElement.prototype = {
	    render: function PopupElement_render() {
	      var wrapper = document.createElement('div');
	      wrapper.className = 'popupWrapper';
	      this.hideElement = this.hideWrapper ? wrapper : this.container;
	      this.hideElement.setAttribute('hidden', true);
	      var popup = document.createElement('div');
	      popup.className = 'popup';
	      var color = this.color;
	      if (color) {
	        var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
	        var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
	        var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
	        popup.style.backgroundColor = _util.Util.makeCssRgb(r | 0, g | 0, b | 0);
	      }
	      var contents = this._formatContents(this.contents);
	      var title = document.createElement('h1');
	      title.textContent = this.title;
	      this.trigger.addEventListener('click', this._toggle.bind(this));
	      this.trigger.addEventListener('mouseover', this._show.bind(this, false));
	      this.trigger.addEventListener('mouseout', this._hide.bind(this, false));
	      popup.addEventListener('click', this._hide.bind(this, true));
	      popup.appendChild(title);
	      popup.appendChild(contents);
	      wrapper.appendChild(popup);
	      return wrapper;
	    },
	    _formatContents: function PopupElement_formatContents(contents) {
	      var p = document.createElement('p');
	      var lines = contents.split(/(?:\r\n?|\n)/);
	      for (var i = 0, ii = lines.length; i < ii; ++i) {
	        var line = lines[i];
	        p.appendChild(document.createTextNode(line));
	        if (i < ii - 1) {
	          p.appendChild(document.createElement('br'));
	        }
	      }
	      return p;
	    },
	    _toggle: function PopupElement_toggle() {
	      if (this.pinned) {
	        this._hide(true);
	      } else {
	        this._show(true);
	      }
	    },
	    _show: function PopupElement_show(pin) {
	      if (pin) {
	        this.pinned = true;
	      }
	      if (this.hideElement.hasAttribute('hidden')) {
	        this.hideElement.removeAttribute('hidden');
	        this.container.style.zIndex += 1;
	      }
	    },
	    _hide: function PopupElement_hide(unpin) {
	      if (unpin) {
	        this.pinned = false;
	      }
	      if (!this.hideElement.hasAttribute('hidden') && !this.pinned) {
	        this.hideElement.setAttribute('hidden', true);
	        this.container.style.zIndex -= 1;
	      }
	    }
	  };
	  return PopupElement;
	}();
	var LineAnnotationElement = function LineAnnotationElementClosure() {
	  var SVG_NS = 'http://www.w3.org/2000/svg';
	  function LineAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable, true);
	  }
	  _util.Util.inherit(LineAnnotationElement, AnnotationElement, {
	    render: function LineAnnotationElement_render() {
	      this.container.className = 'lineAnnotation';
	      var data = this.data;
	      var width = data.rect[2] - data.rect[0];
	      var height = data.rect[3] - data.rect[1];
	      var svg = document.createElementNS(SVG_NS, 'svg:svg');
	      svg.setAttributeNS(null, 'version', '1.1');
	      svg.setAttributeNS(null, 'width', width + 'px');
	      svg.setAttributeNS(null, 'height', height + 'px');
	      svg.setAttributeNS(null, 'preserveAspectRatio', 'none');
	      svg.setAttributeNS(null, 'viewBox', '0 0 ' + width + ' ' + height);
	      var line = document.createElementNS(SVG_NS, 'svg:line');
	      line.setAttributeNS(null, 'x1', data.rect[2] - data.lineCoordinates[0]);
	      line.setAttributeNS(null, 'y1', data.rect[3] - data.lineCoordinates[1]);
	      line.setAttributeNS(null, 'x2', data.rect[2] - data.lineCoordinates[2]);
	      line.setAttributeNS(null, 'y2', data.rect[3] - data.lineCoordinates[3]);
	      line.setAttributeNS(null, 'stroke-width', data.borderStyle.width);
	      line.setAttributeNS(null, 'stroke', 'transparent');
	      svg.appendChild(line);
	      this.container.append(svg);
	      this._createPopup(this.container, line, this.data);
	      return this.container;
	    }
	  });
	  return LineAnnotationElement;
	}();
	var HighlightAnnotationElement = function HighlightAnnotationElementClosure() {
	  function HighlightAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable, true);
	  }
	  _util.Util.inherit(HighlightAnnotationElement, AnnotationElement, {
	    render: function HighlightAnnotationElement_render() {
	      this.container.className = 'highlightAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  });
	  return HighlightAnnotationElement;
	}();
	var UnderlineAnnotationElement = function UnderlineAnnotationElementClosure() {
	  function UnderlineAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable, true);
	  }
	  _util.Util.inherit(UnderlineAnnotationElement, AnnotationElement, {
	    render: function UnderlineAnnotationElement_render() {
	      this.container.className = 'underlineAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  });
	  return UnderlineAnnotationElement;
	}();
	var SquigglyAnnotationElement = function SquigglyAnnotationElementClosure() {
	  function SquigglyAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable, true);
	  }
	  _util.Util.inherit(SquigglyAnnotationElement, AnnotationElement, {
	    render: function SquigglyAnnotationElement_render() {
	      this.container.className = 'squigglyAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  });
	  return SquigglyAnnotationElement;
	}();
	var StrikeOutAnnotationElement = function StrikeOutAnnotationElementClosure() {
	  function StrikeOutAnnotationElement(parameters) {
	    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
	    AnnotationElement.call(this, parameters, isRenderable, true);
	  }
	  _util.Util.inherit(StrikeOutAnnotationElement, AnnotationElement, {
	    render: function StrikeOutAnnotationElement_render() {
	      this.container.className = 'strikeoutAnnotation';
	      if (!this.data.hasPopup) {
	        this._createPopup(this.container, null, this.data);
	      }
	      return this.container;
	    }
	  });
	  return StrikeOutAnnotationElement;
	}();
	var FileAttachmentAnnotationElement = function FileAttachmentAnnotationElementClosure() {
	  function FileAttachmentAnnotationElement(parameters) {
	    AnnotationElement.call(this, parameters, true);
	    var file = this.data.file;
	    this.filename = (0, _dom_utils.getFilenameFromUrl)(file.filename);
	    this.content = file.content;
	    this.linkService.onFileAttachmentAnnotation({
	      id: (0, _util.stringToPDFString)(file.filename),
	      filename: file.filename,
	      content: file.content
	    });
	  }
	  _util.Util.inherit(FileAttachmentAnnotationElement, AnnotationElement, {
	    render: function FileAttachmentAnnotationElement_render() {
	      this.container.className = 'fileAttachmentAnnotation';
	      var trigger = document.createElement('div');
	      trigger.style.height = this.container.style.height;
	      trigger.style.width = this.container.style.width;
	      trigger.addEventListener('dblclick', this._download.bind(this));
	      if (!this.data.hasPopup && (this.data.title || this.data.contents)) {
	        this._createPopup(this.container, trigger, this.data);
	      }
	      this.container.appendChild(trigger);
	      return this.container;
	    },
	    _download: function FileAttachmentAnnotationElement_download() {
	      if (!this.downloadManager) {
	        (0, _util.warn)('Download cannot be started due to unavailable download manager');
	        return;
	      }
	      this.downloadManager.downloadData(this.content, this.filename, '');
	    }
	  });
	  return FileAttachmentAnnotationElement;
	}();
	var AnnotationLayer = function AnnotationLayerClosure() {
	  return {
	    render: function AnnotationLayer_render(parameters) {
	      var annotationElementFactory = new AnnotationElementFactory();
	      for (var i = 0, ii = parameters.annotations.length; i < ii; i++) {
	        var data = parameters.annotations[i];
	        if (!data) {
	          continue;
	        }
	        var element = annotationElementFactory.create({
	          data: data,
	          layer: parameters.div,
	          page: parameters.page,
	          viewport: parameters.viewport,
	          linkService: parameters.linkService,
	          downloadManager: parameters.downloadManager,
	          imageResourcesPath: parameters.imageResourcesPath || (0, _dom_utils.getDefaultSetting)('imageResourcesPath'),
	          renderInteractiveForms: parameters.renderInteractiveForms || false
	        });
	        if (element.isRenderable) {
	          parameters.div.appendChild(element.render());
	        }
	      }
	    },
	    update: function AnnotationLayer_update(parameters) {
	      for (var i = 0, ii = parameters.annotations.length; i < ii; i++) {
	        var data = parameters.annotations[i];
	        var element = parameters.div.querySelector('[data-annotation-id="' + data.id + '"]');
	        if (element) {
	          _dom_utils.CustomStyle.setProp('transform', element, 'matrix(' + parameters.viewport.transform.join(',') + ')');
	        }
	      }
	      parameters.div.removeAttribute('hidden');
	    }
	  };
	}();
	exports.AnnotationLayer = AnnotationLayer;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.build = exports.version = exports._UnsupportedManager = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFWorker = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.getDocument = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _util = __w_pdfjs_require__(0);

	var _dom_utils = __w_pdfjs_require__(1);

	var _font_loader = __w_pdfjs_require__(11);

	var _canvas = __w_pdfjs_require__(10);

	var _metadata = __w_pdfjs_require__(7);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DEFAULT_RANGE_CHUNK_SIZE = 65536;
	var isWorkerDisabled = false;
	var workerSrc;
	var isPostMessageTransfersDisabled = false;
	var pdfjsFilePath = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : null;
	var fakeWorkerFilesLoader = null;
	var useRequireEnsure = false;
	if (typeof __pdfjsdev_webpack__ === 'undefined') {
	  if (typeof window === 'undefined') {
	    isWorkerDisabled = true;
	    if (false) {
	      require.ensure = require('node-ensure');
	    }
	    useRequireEnsure = true;
	  } else if (true) {
	    useRequireEnsure = true;
	  }
	  if (typeof requirejs !== 'undefined' && requirejs.toUrl) {
	    workerSrc = requirejs.toUrl('pdfjs-dist/build/pdf.worker.js');
	  }
	  var dynamicLoaderSupported = typeof requirejs !== 'undefined' && requirejs.load;
	  fakeWorkerFilesLoader = useRequireEnsure ? function (callback) {
	    !/* require.ensure */(function () {
	      var worker;
	      worker = __webpack_require__(187);
	      callback(worker.WorkerMessageHandler);
	    }(__webpack_require__));
	  } : dynamicLoaderSupported ? function (callback) {
	    requirejs(['pdfjs-dist/build/pdf.worker'], function (worker) {
	      callback(worker.WorkerMessageHandler);
	    });
	  } : null;
	}
	function getDocument(src, pdfDataRangeTransport, passwordCallback, progressCallback) {
	  var task = new PDFDocumentLoadingTask();
	  if (arguments.length > 1) {
	    (0, _util.deprecated)('getDocument is called with pdfDataRangeTransport, ' + 'passwordCallback or progressCallback argument');
	  }
	  if (pdfDataRangeTransport) {
	    if (!(pdfDataRangeTransport instanceof PDFDataRangeTransport)) {
	      pdfDataRangeTransport = Object.create(pdfDataRangeTransport);
	      pdfDataRangeTransport.length = src.length;
	      pdfDataRangeTransport.initialData = src.initialData;
	      if (!pdfDataRangeTransport.abort) {
	        pdfDataRangeTransport.abort = function () {};
	      }
	    }
	    src = Object.create(src);
	    src.range = pdfDataRangeTransport;
	  }
	  task.onPassword = passwordCallback || null;
	  task.onProgress = progressCallback || null;
	  var source;
	  if (typeof src === 'string') {
	    source = { url: src };
	  } else if ((0, _util.isArrayBuffer)(src)) {
	    source = { data: src };
	  } else if (src instanceof PDFDataRangeTransport) {
	    source = { range: src };
	  } else {
	    if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) !== 'object') {
	      (0, _util.error)('Invalid parameter in getDocument, need either Uint8Array, ' + 'string or a parameter object');
	    }
	    if (!src.url && !src.data && !src.range) {
	      (0, _util.error)('Invalid parameter object: need either .data, .range or .url');
	    }
	    source = src;
	  }
	  var params = {};
	  var rangeTransport = null;
	  var worker = null;
	  for (var key in source) {
	    if (key === 'url' && typeof window !== 'undefined') {
	      params[key] = new URL(source[key], window.location).href;
	      continue;
	    } else if (key === 'range') {
	      rangeTransport = source[key];
	      continue;
	    } else if (key === 'worker') {
	      worker = source[key];
	      continue;
	    } else if (key === 'data' && !(source[key] instanceof Uint8Array)) {
	      var pdfBytes = source[key];
	      if (typeof pdfBytes === 'string') {
	        params[key] = (0, _util.stringToBytes)(pdfBytes);
	      } else if ((typeof pdfBytes === 'undefined' ? 'undefined' : _typeof(pdfBytes)) === 'object' && pdfBytes !== null && !isNaN(pdfBytes.length)) {
	        params[key] = new Uint8Array(pdfBytes);
	      } else if ((0, _util.isArrayBuffer)(pdfBytes)) {
	        params[key] = new Uint8Array(pdfBytes);
	      } else {
	        (0, _util.error)('Invalid PDF binary data: either typed array, string or ' + 'array-like object is expected in the data property.');
	      }
	      continue;
	    }
	    params[key] = source[key];
	  }
	  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;
	  params.ignoreErrors = params.stopAtErrors !== true;
	  var CMapReaderFactory = params.CMapReaderFactory || _dom_utils.DOMCMapReaderFactory;
	  if (params.disableNativeImageDecoder !== undefined) {
	    (0, _util.deprecated)('parameter disableNativeImageDecoder, ' + 'use nativeImageDecoderSupport instead');
	  }
	  params.nativeImageDecoderSupport = params.nativeImageDecoderSupport || (params.disableNativeImageDecoder === true ? _util.NativeImageDecoding.NONE : _util.NativeImageDecoding.DECODE);
	  if (params.nativeImageDecoderSupport !== _util.NativeImageDecoding.DECODE && params.nativeImageDecoderSupport !== _util.NativeImageDecoding.NONE && params.nativeImageDecoderSupport !== _util.NativeImageDecoding.DISPLAY) {
	    (0, _util.warn)('Invalid parameter nativeImageDecoderSupport: ' + 'need a state of enum {NativeImageDecoding}');
	    params.nativeImageDecoderSupport = _util.NativeImageDecoding.DECODE;
	  }
	  if (!worker) {
	    var workerPort = (0, _dom_utils.getDefaultSetting)('workerPort');
	    worker = workerPort ? new PDFWorker(null, workerPort) : new PDFWorker();
	    task._worker = worker;
	  }
	  var docId = task.docId;
	  worker.promise.then(function () {
	    if (task.destroyed) {
	      throw new Error('Loading aborted');
	    }
	    return _fetchDocument(worker, params, rangeTransport, docId).then(function (workerId) {
	      if (task.destroyed) {
	        throw new Error('Loading aborted');
	      }
	      var messageHandler = new _util.MessageHandler(docId, workerId, worker.port);
	      var transport = new WorkerTransport(messageHandler, task, rangeTransport, CMapReaderFactory);
	      task._transport = transport;
	      messageHandler.send('Ready', null);
	    });
	  }).catch(task._capability.reject);
	  return task;
	}
	function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {
	  if (worker.destroyed) {
	    return Promise.reject(new Error('Worker was destroyed'));
	  }
	  source.disableAutoFetch = (0, _dom_utils.getDefaultSetting)('disableAutoFetch');
	  source.disableStream = (0, _dom_utils.getDefaultSetting)('disableStream');
	  source.chunkedViewerLoading = !!pdfDataRangeTransport;
	  if (pdfDataRangeTransport) {
	    source.length = pdfDataRangeTransport.length;
	    source.initialData = pdfDataRangeTransport.initialData;
	  }
	  return worker.messageHandler.sendWithPromise('GetDocRequest', {
	    docId: docId,
	    source: source,
	    disableRange: (0, _dom_utils.getDefaultSetting)('disableRange'),
	    maxImageSize: (0, _dom_utils.getDefaultSetting)('maxImageSize'),
	    disableFontFace: (0, _dom_utils.getDefaultSetting)('disableFontFace'),
	    disableCreateObjectURL: (0, _dom_utils.getDefaultSetting)('disableCreateObjectURL'),
	    postMessageTransfers: (0, _dom_utils.getDefaultSetting)('postMessageTransfers') && !isPostMessageTransfersDisabled,
	    docBaseUrl: source.docBaseUrl,
	    nativeImageDecoderSupport: source.nativeImageDecoderSupport,
	    ignoreErrors: source.ignoreErrors
	  }).then(function (workerId) {
	    if (worker.destroyed) {
	      throw new Error('Worker was destroyed');
	    }
	    return workerId;
	  });
	}
	var PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {
	  var nextDocumentId = 0;
	  function PDFDocumentLoadingTask() {
	    this._capability = (0, _util.createPromiseCapability)();
	    this._transport = null;
	    this._worker = null;
	    this.docId = 'd' + nextDocumentId++;
	    this.destroyed = false;
	    this.onPassword = null;
	    this.onProgress = null;
	    this.onUnsupportedFeature = null;
	  }
	  PDFDocumentLoadingTask.prototype = {
	    get promise() {
	      return this._capability.promise;
	    },
	    destroy: function destroy() {
	      var _this = this;

	      this.destroyed = true;
	      var transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();
	      return transportDestroyed.then(function () {
	        _this._transport = null;
	        if (_this._worker) {
	          _this._worker.destroy();
	          _this._worker = null;
	        }
	      });
	    },

	    then: function PDFDocumentLoadingTask_then(onFulfilled, onRejected) {
	      return this.promise.then.apply(this.promise, arguments);
	    }
	  };
	  return PDFDocumentLoadingTask;
	}();
	var PDFDataRangeTransport = function pdfDataRangeTransportClosure() {
	  function PDFDataRangeTransport(length, initialData) {
	    this.length = length;
	    this.initialData = initialData;
	    this._rangeListeners = [];
	    this._progressListeners = [];
	    this._progressiveReadListeners = [];
	    this._readyCapability = (0, _util.createPromiseCapability)();
	  }
	  PDFDataRangeTransport.prototype = {
	    addRangeListener: function PDFDataRangeTransport_addRangeListener(listener) {
	      this._rangeListeners.push(listener);
	    },
	    addProgressListener: function PDFDataRangeTransport_addProgressListener(listener) {
	      this._progressListeners.push(listener);
	    },
	    addProgressiveReadListener: function PDFDataRangeTransport_addProgressiveReadListener(listener) {
	      this._progressiveReadListeners.push(listener);
	    },
	    onDataRange: function PDFDataRangeTransport_onDataRange(begin, chunk) {
	      var listeners = this._rangeListeners;
	      for (var i = 0, n = listeners.length; i < n; ++i) {
	        listeners[i](begin, chunk);
	      }
	    },
	    onDataProgress: function PDFDataRangeTransport_onDataProgress(loaded) {
	      var _this2 = this;

	      this._readyCapability.promise.then(function () {
	        var listeners = _this2._progressListeners;
	        for (var i = 0, n = listeners.length; i < n; ++i) {
	          listeners[i](loaded);
	        }
	      });
	    },
	    onDataProgressiveRead: function PDFDataRangeTransport_onDataProgress(chunk) {
	      var _this3 = this;

	      this._readyCapability.promise.then(function () {
	        var listeners = _this3._progressiveReadListeners;
	        for (var i = 0, n = listeners.length; i < n; ++i) {
	          listeners[i](chunk);
	        }
	      });
	    },
	    transportReady: function PDFDataRangeTransport_transportReady() {
	      this._readyCapability.resolve();
	    },
	    requestDataRange: function PDFDataRangeTransport_requestDataRange(begin, end) {
	      throw new Error('Abstract method PDFDataRangeTransport.requestDataRange');
	    },
	    abort: function PDFDataRangeTransport_abort() {}
	  };
	  return PDFDataRangeTransport;
	}();
	var PDFDocumentProxy = function PDFDocumentProxyClosure() {
	  function PDFDocumentProxy(pdfInfo, transport, loadingTask) {
	    this.pdfInfo = pdfInfo;
	    this.transport = transport;
	    this.loadingTask = loadingTask;
	  }
	  PDFDocumentProxy.prototype = {
	    get numPages() {
	      return this.pdfInfo.numPages;
	    },
	    get fingerprint() {
	      return this.pdfInfo.fingerprint;
	    },
	    getPage: function PDFDocumentProxy_getPage(pageNumber) {
	      return this.transport.getPage(pageNumber);
	    },
	    getPageIndex: function PDFDocumentProxy_getPageIndex(ref) {
	      return this.transport.getPageIndex(ref);
	    },
	    getDestinations: function PDFDocumentProxy_getDestinations() {
	      return this.transport.getDestinations();
	    },
	    getDestination: function PDFDocumentProxy_getDestination(id) {
	      return this.transport.getDestination(id);
	    },
	    getPageLabels: function PDFDocumentProxy_getPageLabels() {
	      return this.transport.getPageLabels();
	    },
	    getAttachments: function PDFDocumentProxy_getAttachments() {
	      return this.transport.getAttachments();
	    },
	    getJavaScript: function PDFDocumentProxy_getJavaScript() {
	      return this.transport.getJavaScript();
	    },
	    getOutline: function PDFDocumentProxy_getOutline() {
	      return this.transport.getOutline();
	    },
	    getMetadata: function PDFDocumentProxy_getMetadata() {
	      return this.transport.getMetadata();
	    },
	    getData: function PDFDocumentProxy_getData() {
	      return this.transport.getData();
	    },
	    getDownloadInfo: function PDFDocumentProxy_getDownloadInfo() {
	      return this.transport.downloadInfoCapability.promise;
	    },
	    getStats: function PDFDocumentProxy_getStats() {
	      return this.transport.getStats();
	    },
	    cleanup: function PDFDocumentProxy_cleanup() {
	      this.transport.startCleanup();
	    },
	    destroy: function PDFDocumentProxy_destroy() {
	      return this.loadingTask.destroy();
	    }
	  };
	  return PDFDocumentProxy;
	}();
	var PDFPageProxy = function PDFPageProxyClosure() {
	  function PDFPageProxy(pageIndex, pageInfo, transport) {
	    this.pageIndex = pageIndex;
	    this.pageInfo = pageInfo;
	    this.transport = transport;
	    this.stats = new _util.StatTimer();
	    this.stats.enabled = (0, _dom_utils.getDefaultSetting)('enableStats');
	    this.commonObjs = transport.commonObjs;
	    this.objs = new PDFObjects();
	    this.cleanupAfterRender = false;
	    this.pendingCleanup = false;
	    this.intentStates = Object.create(null);
	    this.destroyed = false;
	  }
	  PDFPageProxy.prototype = {
	    get pageNumber() {
	      return this.pageIndex + 1;
	    },
	    get rotate() {
	      return this.pageInfo.rotate;
	    },
	    get ref() {
	      return this.pageInfo.ref;
	    },
	    get userUnit() {
	      return this.pageInfo.userUnit;
	    },
	    get view() {
	      return this.pageInfo.view;
	    },
	    getViewport: function PDFPageProxy_getViewport(scale, rotate) {
	      if (arguments.length < 2) {
	        rotate = this.rotate;
	      }
	      return new _util.PageViewport(this.view, scale, rotate, 0, 0);
	    },
	    getAnnotations: function PDFPageProxy_getAnnotations(params) {
	      var intent = params && params.intent || null;
	      if (!this.annotationsPromise || this.annotationsIntent !== intent) {
	        this.annotationsPromise = this.transport.getAnnotations(this.pageIndex, intent);
	        this.annotationsIntent = intent;
	      }
	      return this.annotationsPromise;
	    },
	    render: function PDFPageProxy_render(params) {
	      var _this4 = this;

	      var stats = this.stats;
	      stats.time('Overall');
	      this.pendingCleanup = false;
	      var renderingIntent = params.intent === 'print' ? 'print' : 'display';
	      var canvasFactory = params.canvasFactory || new _dom_utils.DOMCanvasFactory();
	      if (!this.intentStates[renderingIntent]) {
	        this.intentStates[renderingIntent] = Object.create(null);
	      }
	      var intentState = this.intentStates[renderingIntent];
	      if (!intentState.displayReadyCapability) {
	        intentState.receivingOperatorList = true;
	        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
	        intentState.operatorList = {
	          fnArray: [],
	          argsArray: [],
	          lastChunk: false
	        };
	        this.stats.time('Page Request');
	        this.transport.messageHandler.send('RenderPageRequest', {
	          pageIndex: this.pageNumber - 1,
	          intent: renderingIntent,
	          renderInteractiveForms: params.renderInteractiveForms === true
	        });
	      }
	      var complete = function complete(error) {
	        var i = intentState.renderTasks.indexOf(internalRenderTask);
	        if (i >= 0) {
	          intentState.renderTasks.splice(i, 1);
	        }
	        if (_this4.cleanupAfterRender) {
	          _this4.pendingCleanup = true;
	        }
	        _this4._tryCleanup();
	        if (error) {
	          internalRenderTask.capability.reject(error);
	        } else {
	          internalRenderTask.capability.resolve();
	        }
	        stats.timeEnd('Rendering');
	        stats.timeEnd('Overall');
	      };
	      var internalRenderTask = new InternalRenderTask(complete, params, this.objs, this.commonObjs, intentState.operatorList, this.pageNumber, canvasFactory);
	      internalRenderTask.useRequestAnimationFrame = renderingIntent !== 'print';
	      if (!intentState.renderTasks) {
	        intentState.renderTasks = [];
	      }
	      intentState.renderTasks.push(internalRenderTask);
	      var renderTask = internalRenderTask.task;
	      if (params.continueCallback) {
	        (0, _util.deprecated)('render is used with continueCallback parameter');
	        renderTask.onContinue = params.continueCallback;
	      }
	      intentState.displayReadyCapability.promise.then(function (transparency) {
	        if (_this4.pendingCleanup) {
	          complete();
	          return;
	        }
	        stats.time('Rendering');
	        internalRenderTask.initializeGraphics(transparency);
	        internalRenderTask.operatorListChanged();
	      }, complete);
	      return renderTask;
	    },
	    getOperatorList: function PDFPageProxy_getOperatorList() {
	      function operatorListChanged() {
	        if (intentState.operatorList.lastChunk) {
	          intentState.opListReadCapability.resolve(intentState.operatorList);
	          var i = intentState.renderTasks.indexOf(opListTask);
	          if (i >= 0) {
	            intentState.renderTasks.splice(i, 1);
	          }
	        }
	      }
	      var renderingIntent = 'oplist';
	      if (!this.intentStates[renderingIntent]) {
	        this.intentStates[renderingIntent] = Object.create(null);
	      }
	      var intentState = this.intentStates[renderingIntent];
	      var opListTask;
	      if (!intentState.opListReadCapability) {
	        opListTask = {};
	        opListTask.operatorListChanged = operatorListChanged;
	        intentState.receivingOperatorList = true;
	        intentState.opListReadCapability = (0, _util.createPromiseCapability)();
	        intentState.renderTasks = [];
	        intentState.renderTasks.push(opListTask);
	        intentState.operatorList = {
	          fnArray: [],
	          argsArray: [],
	          lastChunk: false
	        };
	        this.transport.messageHandler.send('RenderPageRequest', {
	          pageIndex: this.pageIndex,
	          intent: renderingIntent
	        });
	      }
	      return intentState.opListReadCapability.promise;
	    },
	    getTextContent: function PDFPageProxy_getTextContent(params) {
	      params = params || {};
	      return this.transport.messageHandler.sendWithPromise('GetTextContent', {
	        pageIndex: this.pageNumber - 1,
	        normalizeWhitespace: params.normalizeWhitespace === true,
	        combineTextItems: params.disableCombineTextItems !== true
	      });
	    },
	    _destroy: function PDFPageProxy_destroy() {
	      this.destroyed = true;
	      this.transport.pageCache[this.pageIndex] = null;
	      var waitOn = [];
	      Object.keys(this.intentStates).forEach(function (intent) {
	        if (intent === 'oplist') {
	          return;
	        }
	        var intentState = this.intentStates[intent];
	        intentState.renderTasks.forEach(function (renderTask) {
	          var renderCompleted = renderTask.capability.promise.catch(function () {});
	          waitOn.push(renderCompleted);
	          renderTask.cancel();
	        });
	      }, this);
	      this.objs.clear();
	      this.annotationsPromise = null;
	      this.pendingCleanup = false;
	      return Promise.all(waitOn);
	    },
	    destroy: function destroy() {
	      (0, _util.deprecated)('page destroy method, use cleanup() instead');
	      this.cleanup();
	    },

	    cleanup: function PDFPageProxy_cleanup() {
	      this.pendingCleanup = true;
	      this._tryCleanup();
	    },
	    _tryCleanup: function PDFPageProxy_tryCleanup() {
	      if (!this.pendingCleanup || Object.keys(this.intentStates).some(function (intent) {
	        var intentState = this.intentStates[intent];
	        return intentState.renderTasks.length !== 0 || intentState.receivingOperatorList;
	      }, this)) {
	        return;
	      }
	      Object.keys(this.intentStates).forEach(function (intent) {
	        delete this.intentStates[intent];
	      }, this);
	      this.objs.clear();
	      this.annotationsPromise = null;
	      this.pendingCleanup = false;
	    },
	    _startRenderPage: function PDFPageProxy_startRenderPage(transparency, intent) {
	      var intentState = this.intentStates[intent];
	      if (intentState.displayReadyCapability) {
	        intentState.displayReadyCapability.resolve(transparency);
	      }
	    },
	    _renderPageChunk: function PDFPageProxy_renderPageChunk(operatorListChunk, intent) {
	      var intentState = this.intentStates[intent];
	      var i, ii;
	      for (i = 0, ii = operatorListChunk.length; i < ii; i++) {
	        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
	        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
	      }
	      intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
	      for (i = 0; i < intentState.renderTasks.length; i++) {
	        intentState.renderTasks[i].operatorListChanged();
	      }
	      if (operatorListChunk.lastChunk) {
	        intentState.receivingOperatorList = false;
	        this._tryCleanup();
	      }
	    }
	  };
	  return PDFPageProxy;
	}();

	var LoopbackPort = function () {
	  function LoopbackPort(defer) {
	    _classCallCheck(this, LoopbackPort);

	    this._listeners = [];
	    this._defer = defer;
	    this._deferred = Promise.resolve(undefined);
	  }

	  _createClass(LoopbackPort, [{
	    key: 'postMessage',
	    value: function postMessage(obj, transfers) {
	      var _this5 = this;

	      function cloneValue(value) {
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {
	          return value;
	        }
	        if (cloned.has(value)) {
	          return cloned.get(value);
	        }
	        var result;
	        var buffer;
	        if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {
	          var transferable = transfers && transfers.indexOf(buffer) >= 0;
	          if (value === buffer) {
	            result = value;
	          } else if (transferable) {
	            result = new value.constructor(buffer, value.byteOffset, value.byteLength);
	          } else {
	            result = new value.constructor(value);
	          }
	          cloned.set(value, result);
	          return result;
	        }
	        result = (0, _util.isArray)(value) ? [] : {};
	        cloned.set(value, result);
	        for (var i in value) {
	          var desc,
	              p = value;
	          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {
	            p = Object.getPrototypeOf(p);
	          }
	          if (typeof desc.value === 'undefined' || typeof desc.value === 'function') {
	            continue;
	          }
	          result[i] = cloneValue(desc.value);
	        }
	        return result;
	      }
	      if (!this._defer) {
	        this._listeners.forEach(function (listener) {
	          listener.call(this, { data: obj });
	        }, this);
	        return;
	      }
	      var cloned = new WeakMap();
	      var e = { data: cloneValue(obj) };
	      this._deferred.then(function () {
	        _this5._listeners.forEach(function (listener) {
	          listener.call(this, e);
	        }, _this5);
	      });
	    }
	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(name, listener) {
	      this._listeners.push(listener);
	    }
	  }, {
	    key: 'removeEventListener',
	    value: function removeEventListener(name, listener) {
	      var i = this._listeners.indexOf(listener);
	      this._listeners.splice(i, 1);
	    }
	  }, {
	    key: 'terminate',
	    value: function terminate() {
	      this._listeners = [];
	    }
	  }]);

	  return LoopbackPort;
	}();

	var PDFWorker = function PDFWorkerClosure() {
	  var nextFakeWorkerId = 0;
	  function getWorkerSrc() {
	    if (typeof workerSrc !== 'undefined') {
	      return workerSrc;
	    }
	    if ((0, _dom_utils.getDefaultSetting)('workerSrc')) {
	      return (0, _dom_utils.getDefaultSetting)('workerSrc');
	    }
	    if (pdfjsFilePath) {
	      return pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, '.worker$1$2');
	    }
	    (0, _util.error)('No PDFJS.workerSrc specified');
	  }
	  var fakeWorkerFilesLoadedCapability;
	  function setupFakeWorkerGlobal() {
	    var WorkerMessageHandler;
	    if (fakeWorkerFilesLoadedCapability) {
	      return fakeWorkerFilesLoadedCapability.promise;
	    }
	    fakeWorkerFilesLoadedCapability = (0, _util.createPromiseCapability)();
	    var loader = fakeWorkerFilesLoader || function (callback) {
	      _util.Util.loadScript(getWorkerSrc(), function () {
	        callback(window.pdfjsDistBuildPdfWorker.WorkerMessageHandler);
	      });
	    };
	    loader(fakeWorkerFilesLoadedCapability.resolve);
	    return fakeWorkerFilesLoadedCapability.promise;
	  }
	  function createCDNWrapper(url) {
	    var wrapper = 'importScripts(\'' + url + '\');';
	    return URL.createObjectURL(new Blob([wrapper]));
	  }
	  function PDFWorker(name, port) {
	    this.name = name;
	    this.destroyed = false;
	    this._readyCapability = (0, _util.createPromiseCapability)();
	    this._port = null;
	    this._webWorker = null;
	    this._messageHandler = null;
	    if (port) {
	      this._initializeFromPort(port);
	      return;
	    }
	    this._initialize();
	  }
	  PDFWorker.prototype = {
	    get promise() {
	      return this._readyCapability.promise;
	    },
	    get port() {
	      return this._port;
	    },
	    get messageHandler() {
	      return this._messageHandler;
	    },
	    _initializeFromPort: function PDFWorker_initializeFromPort(port) {
	      this._port = port;
	      this._messageHandler = new _util.MessageHandler('main', 'worker', port);
	      this._messageHandler.on('ready', function () {});
	      this._readyCapability.resolve();
	    },
	    _initialize: function PDFWorker_initialize() {
	      var _this6 = this;

	      if (!isWorkerDisabled && !(0, _dom_utils.getDefaultSetting)('disableWorker') && typeof Worker !== 'undefined') {
	        var workerSrc = getWorkerSrc();
	        try {
	          if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {
	            workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);
	          }
	          var worker = new Worker(workerSrc);
	          var messageHandler = new _util.MessageHandler('main', 'worker', worker);
	          var terminateEarly = function terminateEarly() {
	            worker.removeEventListener('error', onWorkerError);
	            messageHandler.destroy();
	            worker.terminate();
	            if (_this6.destroyed) {
	              _this6._readyCapability.reject(new Error('Worker was destroyed'));
	            } else {
	              _this6._setupFakeWorker();
	            }
	          };
	          var onWorkerError = function onWorkerError() {
	            if (!_this6._webWorker) {
	              terminateEarly();
	            }
	          };
	          worker.addEventListener('error', onWorkerError);
	          messageHandler.on('test', function (data) {
	            worker.removeEventListener('error', onWorkerError);
	            if (_this6.destroyed) {
	              terminateEarly();
	              return;
	            }
	            var supportTypedArray = data && data.supportTypedArray;
	            if (supportTypedArray) {
	              _this6._messageHandler = messageHandler;
	              _this6._port = worker;
	              _this6._webWorker = worker;
	              if (!data.supportTransfers) {
	                isPostMessageTransfersDisabled = true;
	              }
	              _this6._readyCapability.resolve();
	              messageHandler.send('configure', { verbosity: (0, _util.getVerbosityLevel)() });
	            } else {
	              _this6._setupFakeWorker();
	              messageHandler.destroy();
	              worker.terminate();
	            }
	          });
	          messageHandler.on('console_log', function (data) {
	            console.log.apply(console, data);
	          });
	          messageHandler.on('console_error', function (data) {
	            console.error.apply(console, data);
	          });
	          messageHandler.on('ready', function (data) {
	            worker.removeEventListener('error', onWorkerError);
	            if (_this6.destroyed) {
	              terminateEarly();
	              return;
	            }
	            try {
	              sendTest();
	            } catch (e) {
	              _this6._setupFakeWorker();
	            }
	          });
	          var sendTest = function sendTest() {
	            var postMessageTransfers = (0, _dom_utils.getDefaultSetting)('postMessageTransfers') && !isPostMessageTransfersDisabled;
	            var testObj = new Uint8Array([postMessageTransfers ? 255 : 0]);
	            try {
	              messageHandler.send('test', testObj, [testObj.buffer]);
	            } catch (ex) {
	              (0, _util.info)('Cannot use postMessage transfers');
	              testObj[0] = 0;
	              messageHandler.send('test', testObj);
	            }
	          };
	          sendTest();
	          return;
	        } catch (e) {
	          (0, _util.info)('The worker has been disabled.');
	        }
	      }
	      this._setupFakeWorker();
	    },
	    _setupFakeWorker: function PDFWorker_setupFakeWorker() {
	      var _this7 = this;

	      if (!isWorkerDisabled && !(0, _dom_utils.getDefaultSetting)('disableWorker')) {
	        (0, _util.warn)('Setting up fake worker.');
	        isWorkerDisabled = true;
	      }
	      setupFakeWorkerGlobal().then(function (WorkerMessageHandler) {
	        if (_this7.destroyed) {
	          _this7._readyCapability.reject(new Error('Worker was destroyed'));
	          return;
	        }
	        var isTypedArraysPresent = Uint8Array !== Float32Array;
	        var port = new LoopbackPort(isTypedArraysPresent);
	        _this7._port = port;
	        var id = 'fake' + nextFakeWorkerId++;
	        var workerHandler = new _util.MessageHandler(id + '_worker', id, port);
	        WorkerMessageHandler.setup(workerHandler, port);
	        var messageHandler = new _util.MessageHandler(id, id + '_worker', port);
	        _this7._messageHandler = messageHandler;
	        _this7._readyCapability.resolve();
	      });
	    },
	    destroy: function PDFWorker_destroy() {
	      this.destroyed = true;
	      if (this._webWorker) {
	        this._webWorker.terminate();
	        this._webWorker = null;
	      }
	      this._port = null;
	      if (this._messageHandler) {
	        this._messageHandler.destroy();
	        this._messageHandler = null;
	      }
	    }
	  };
	  return PDFWorker;
	}();
	var WorkerTransport = function WorkerTransportClosure() {
	  function WorkerTransport(messageHandler, loadingTask, pdfDataRangeTransport, CMapReaderFactory) {
	    this.messageHandler = messageHandler;
	    this.loadingTask = loadingTask;
	    this.pdfDataRangeTransport = pdfDataRangeTransport;
	    this.commonObjs = new PDFObjects();
	    this.fontLoader = new _font_loader.FontLoader(loadingTask.docId);
	    this.CMapReaderFactory = new CMapReaderFactory({
	      baseUrl: (0, _dom_utils.getDefaultSetting)('cMapUrl'),
	      isCompressed: (0, _dom_utils.getDefaultSetting)('cMapPacked')
	    });
	    this.destroyed = false;
	    this.destroyCapability = null;
	    this._passwordCapability = null;
	    this.pageCache = [];
	    this.pagePromises = [];
	    this.downloadInfoCapability = (0, _util.createPromiseCapability)();
	    this.setupMessageHandler();
	  }
	  WorkerTransport.prototype = {
	    destroy: function WorkerTransport_destroy() {
	      var _this8 = this;

	      if (this.destroyCapability) {
	        return this.destroyCapability.promise;
	      }
	      this.destroyed = true;
	      this.destroyCapability = (0, _util.createPromiseCapability)();
	      if (this._passwordCapability) {
	        this._passwordCapability.reject(new Error('Worker was destroyed during onPassword callback'));
	      }
	      var waitOn = [];
	      this.pageCache.forEach(function (page) {
	        if (page) {
	          waitOn.push(page._destroy());
	        }
	      });
	      this.pageCache = [];
	      this.pagePromises = [];
	      var terminated = this.messageHandler.sendWithPromise('Terminate', null);
	      waitOn.push(terminated);
	      Promise.all(waitOn).then(function () {
	        _this8.fontLoader.clear();
	        if (_this8.pdfDataRangeTransport) {
	          _this8.pdfDataRangeTransport.abort();
	          _this8.pdfDataRangeTransport = null;
	        }
	        if (_this8.messageHandler) {
	          _this8.messageHandler.destroy();
	          _this8.messageHandler = null;
	        }
	        _this8.destroyCapability.resolve();
	      }, this.destroyCapability.reject);
	      return this.destroyCapability.promise;
	    },
	    setupMessageHandler: function WorkerTransport_setupMessageHandler() {
	      var messageHandler = this.messageHandler;
	      var loadingTask = this.loadingTask;
	      var pdfDataRangeTransport = this.pdfDataRangeTransport;
	      if (pdfDataRangeTransport) {
	        pdfDataRangeTransport.addRangeListener(function (begin, chunk) {
	          messageHandler.send('OnDataRange', {
	            begin: begin,
	            chunk: chunk
	          });
	        });
	        pdfDataRangeTransport.addProgressListener(function (loaded) {
	          messageHandler.send('OnDataProgress', { loaded: loaded });
	        });
	        pdfDataRangeTransport.addProgressiveReadListener(function (chunk) {
	          messageHandler.send('OnDataRange', { chunk: chunk });
	        });
	        messageHandler.on('RequestDataRange', function transportDataRange(data) {
	          pdfDataRangeTransport.requestDataRange(data.begin, data.end);
	        }, this);
	      }
	      messageHandler.on('GetDoc', function transportDoc(data) {
	        var pdfInfo = data.pdfInfo;
	        this.numPages = data.pdfInfo.numPages;
	        var loadingTask = this.loadingTask;
	        var pdfDocument = new PDFDocumentProxy(pdfInfo, this, loadingTask);
	        this.pdfDocument = pdfDocument;
	        loadingTask._capability.resolve(pdfDocument);
	      }, this);
	      messageHandler.on('PasswordRequest', function transportPasswordRequest(exception) {
	        var _this9 = this;

	        this._passwordCapability = (0, _util.createPromiseCapability)();
	        if (loadingTask.onPassword) {
	          var updatePassword = function updatePassword(password) {
	            _this9._passwordCapability.resolve({ password: password });
	          };
	          loadingTask.onPassword(updatePassword, exception.code);
	        } else {
	          this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
	        }
	        return this._passwordCapability.promise;
	      }, this);
	      messageHandler.on('PasswordException', function transportPasswordException(exception) {
	        loadingTask._capability.reject(new _util.PasswordException(exception.message, exception.code));
	      }, this);
	      messageHandler.on('InvalidPDF', function transportInvalidPDF(exception) {
	        this.loadingTask._capability.reject(new _util.InvalidPDFException(exception.message));
	      }, this);
	      messageHandler.on('MissingPDF', function transportMissingPDF(exception) {
	        this.loadingTask._capability.reject(new _util.MissingPDFException(exception.message));
	      }, this);
	      messageHandler.on('UnexpectedResponse', function transportUnexpectedResponse(exception) {
	        this.loadingTask._capability.reject(new _util.UnexpectedResponseException(exception.message, exception.status));
	      }, this);
	      messageHandler.on('UnknownError', function transportUnknownError(exception) {
	        this.loadingTask._capability.reject(new _util.UnknownErrorException(exception.message, exception.details));
	      }, this);
	      messageHandler.on('DataLoaded', function transportPage(data) {
	        this.downloadInfoCapability.resolve(data);
	      }, this);
	      messageHandler.on('PDFManagerReady', function transportPage(data) {
	        if (this.pdfDataRangeTransport) {
	          this.pdfDataRangeTransport.transportReady();
	        }
	      }, this);
	      messageHandler.on('StartRenderPage', function transportRender(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var page = this.pageCache[data.pageIndex];
	        page.stats.timeEnd('Page Request');
	        page._startRenderPage(data.transparency, data.intent);
	      }, this);
	      messageHandler.on('RenderPageChunk', function transportRender(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var page = this.pageCache[data.pageIndex];
	        page._renderPageChunk(data.operatorList, data.intent);
	      }, this);
	      messageHandler.on('commonobj', function transportObj(data) {
	        var _this10 = this;

	        if (this.destroyed) {
	          return;
	        }
	        var id = data[0];
	        var type = data[1];
	        if (this.commonObjs.hasData(id)) {
	          return;
	        }
	        switch (type) {
	          case 'Font':
	            var exportedData = data[2];
	            if ('error' in exportedData) {
	              var exportedError = exportedData.error;
	              (0, _util.warn)('Error during font loading: ' + exportedError);
	              this.commonObjs.resolve(id, exportedError);
	              break;
	            }
	            var fontRegistry = null;
	            if ((0, _dom_utils.getDefaultSetting)('pdfBug') && _util.globalScope.FontInspector && _util.globalScope['FontInspector'].enabled) {
	              fontRegistry = {
	                registerFont: function registerFont(font, url) {
	                  _util.globalScope['FontInspector'].fontAdded(font, url);
	                }
	              };
	            }
	            var font = new _font_loader.FontFaceObject(exportedData, {
	              isEvalSuported: (0, _dom_utils.getDefaultSetting)('isEvalSupported'),
	              disableFontFace: (0, _dom_utils.getDefaultSetting)('disableFontFace'),
	              fontRegistry: fontRegistry
	            });
	            var fontReady = function fontReady(fontObjs) {
	              _this10.commonObjs.resolve(id, font);
	            };
	            this.fontLoader.bind([font], fontReady);
	            break;
	          case 'FontPath':
	            this.commonObjs.resolve(id, data[2]);
	            break;
	          default:
	            (0, _util.error)('Got unknown common object type ' + type);
	        }
	      }, this);
	      messageHandler.on('obj', function transportObj(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var id = data[0];
	        var pageIndex = data[1];
	        var type = data[2];
	        var pageProxy = this.pageCache[pageIndex];
	        var imageData;
	        if (pageProxy.objs.hasData(id)) {
	          return;
	        }
	        switch (type) {
	          case 'JpegStream':
	            imageData = data[3];
	            (0, _util.loadJpegStream)(id, imageData, pageProxy.objs);
	            break;
	          case 'Image':
	            imageData = data[3];
	            pageProxy.objs.resolve(id, imageData);
	            var MAX_IMAGE_SIZE_TO_STORE = 8000000;
	            if (imageData && 'data' in imageData && imageData.data.length > MAX_IMAGE_SIZE_TO_STORE) {
	              pageProxy.cleanupAfterRender = true;
	            }
	            break;
	          default:
	            (0, _util.error)('Got unknown object type ' + type);
	        }
	      }, this);
	      messageHandler.on('DocProgress', function transportDocProgress(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var loadingTask = this.loadingTask;
	        if (loadingTask.onProgress) {
	          loadingTask.onProgress({
	            loaded: data.loaded,
	            total: data.total
	          });
	        }
	      }, this);
	      messageHandler.on('PageError', function transportError(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var page = this.pageCache[data.pageNum - 1];
	        var intentState = page.intentStates[data.intent];
	        if (intentState.displayReadyCapability) {
	          intentState.displayReadyCapability.reject(data.error);
	        } else {
	          (0, _util.error)(data.error);
	        }
	        if (intentState.operatorList) {
	          intentState.operatorList.lastChunk = true;
	          for (var i = 0; i < intentState.renderTasks.length; i++) {
	            intentState.renderTasks[i].operatorListChanged();
	          }
	        }
	      }, this);
	      messageHandler.on('UnsupportedFeature', function transportUnsupportedFeature(data) {
	        if (this.destroyed) {
	          return;
	        }
	        var featureId = data.featureId;
	        var loadingTask = this.loadingTask;
	        if (loadingTask.onUnsupportedFeature) {
	          loadingTask.onUnsupportedFeature(featureId);
	        }
	        _UnsupportedManager.notify(featureId);
	      }, this);
	      messageHandler.on('JpegDecode', function (data) {
	        if (this.destroyed) {
	          return Promise.reject(new Error('Worker was destroyed'));
	        }
	        if (typeof document === 'undefined') {
	          return Promise.reject(new Error('"document" is not defined.'));
	        }
	        var imageUrl = data[0];
	        var components = data[1];
	        if (components !== 3 && components !== 1) {
	          return Promise.reject(new Error('Only 3 components or 1 component can be returned'));
	        }
	        return new Promise(function (resolve, reject) {
	          var img = new Image();
	          img.onload = function () {
	            var width = img.width;
	            var height = img.height;
	            var size = width * height;
	            var rgbaLength = size * 4;
	            var buf = new Uint8Array(size * components);
	            var tmpCanvas = document.createElement('canvas');
	            tmpCanvas.width = width;
	            tmpCanvas.height = height;
	            var tmpCtx = tmpCanvas.getContext('2d');
	            tmpCtx.drawImage(img, 0, 0);
	            var data = tmpCtx.getImageData(0, 0, width, height).data;
	            var i, j;
	            if (components === 3) {
	              for (i = 0, j = 0; i < rgbaLength; i += 4, j += 3) {
	                buf[j] = data[i];
	                buf[j + 1] = data[i + 1];
	                buf[j + 2] = data[i + 2];
	              }
	            } else if (components === 1) {
	              for (i = 0, j = 0; i < rgbaLength; i += 4, j++) {
	                buf[j] = data[i];
	              }
	            }
	            resolve({
	              data: buf,
	              width: width,
	              height: height
	            });
	          };
	          img.onerror = function () {
	            reject(new Error('JpegDecode failed to load image'));
	          };
	          img.src = imageUrl;
	        });
	      }, this);
	      messageHandler.on('FetchBuiltInCMap', function (data) {
	        if (this.destroyed) {
	          return Promise.reject(new Error('Worker was destroyed'));
	        }
	        return this.CMapReaderFactory.fetch({ name: data.name });
	      }, this);
	    },
	    getData: function WorkerTransport_getData() {
	      return this.messageHandler.sendWithPromise('GetData', null);
	    },
	    getPage: function WorkerTransport_getPage(pageNumber, capability) {
	      var _this11 = this;

	      if (!(0, _util.isInt)(pageNumber) || pageNumber <= 0 || pageNumber > this.numPages) {
	        return Promise.reject(new Error('Invalid page request'));
	      }
	      var pageIndex = pageNumber - 1;
	      if (pageIndex in this.pagePromises) {
	        return this.pagePromises[pageIndex];
	      }
	      var promise = this.messageHandler.sendWithPromise('GetPage', { pageIndex: pageIndex }).then(function (pageInfo) {
	        if (_this11.destroyed) {
	          throw new Error('Transport destroyed');
	        }
	        var page = new PDFPageProxy(pageIndex, pageInfo, _this11);
	        _this11.pageCache[pageIndex] = page;
	        return page;
	      });
	      this.pagePromises[pageIndex] = promise;
	      return promise;
	    },
	    getPageIndex: function WorkerTransport_getPageIndexByRef(ref) {
	      return this.messageHandler.sendWithPromise('GetPageIndex', { ref: ref }).catch(function (reason) {
	        return Promise.reject(new Error(reason));
	      });
	    },
	    getAnnotations: function WorkerTransport_getAnnotations(pageIndex, intent) {
	      return this.messageHandler.sendWithPromise('GetAnnotations', {
	        pageIndex: pageIndex,
	        intent: intent
	      });
	    },
	    getDestinations: function WorkerTransport_getDestinations() {
	      return this.messageHandler.sendWithPromise('GetDestinations', null);
	    },
	    getDestination: function WorkerTransport_getDestination(id) {
	      return this.messageHandler.sendWithPromise('GetDestination', { id: id });
	    },
	    getPageLabels: function WorkerTransport_getPageLabels() {
	      return this.messageHandler.sendWithPromise('GetPageLabels', null);
	    },
	    getAttachments: function WorkerTransport_getAttachments() {
	      return this.messageHandler.sendWithPromise('GetAttachments', null);
	    },
	    getJavaScript: function WorkerTransport_getJavaScript() {
	      return this.messageHandler.sendWithPromise('GetJavaScript', null);
	    },
	    getOutline: function WorkerTransport_getOutline() {
	      return this.messageHandler.sendWithPromise('GetOutline', null);
	    },
	    getMetadata: function WorkerTransport_getMetadata() {
	      return this.messageHandler.sendWithPromise('GetMetadata', null).then(function transportMetadata(results) {
	        return {
	          info: results[0],
	          metadata: results[1] ? new _metadata.Metadata(results[1]) : null
	        };
	      });
	    },
	    getStats: function WorkerTransport_getStats() {
	      return this.messageHandler.sendWithPromise('GetStats', null);
	    },
	    startCleanup: function WorkerTransport_startCleanup() {
	      var _this12 = this;

	      this.messageHandler.sendWithPromise('Cleanup', null).then(function () {
	        for (var i = 0, ii = _this12.pageCache.length; i < ii; i++) {
	          var page = _this12.pageCache[i];
	          if (page) {
	            page.cleanup();
	          }
	        }
	        _this12.commonObjs.clear();
	        _this12.fontLoader.clear();
	      });
	    }
	  };
	  return WorkerTransport;
	}();
	var PDFObjects = function PDFObjectsClosure() {
	  function PDFObjects() {
	    this.objs = Object.create(null);
	  }
	  PDFObjects.prototype = {
	    ensureObj: function PDFObjects_ensureObj(objId) {
	      if (this.objs[objId]) {
	        return this.objs[objId];
	      }
	      var obj = {
	        capability: (0, _util.createPromiseCapability)(),
	        data: null,
	        resolved: false
	      };
	      this.objs[objId] = obj;
	      return obj;
	    },
	    get: function PDFObjects_get(objId, callback) {
	      if (callback) {
	        this.ensureObj(objId).capability.promise.then(callback);
	        return null;
	      }
	      var obj = this.objs[objId];
	      if (!obj || !obj.resolved) {
	        (0, _util.error)('Requesting object that isn\'t resolved yet ' + objId);
	      }
	      return obj.data;
	    },
	    resolve: function PDFObjects_resolve(objId, data) {
	      var obj = this.ensureObj(objId);
	      obj.resolved = true;
	      obj.data = data;
	      obj.capability.resolve(data);
	    },
	    isResolved: function PDFObjects_isResolved(objId) {
	      var objs = this.objs;
	      if (!objs[objId]) {
	        return false;
	      }
	      return objs[objId].resolved;
	    },
	    hasData: function PDFObjects_hasData(objId) {
	      return this.isResolved(objId);
	    },
	    getData: function PDFObjects_getData(objId) {
	      var objs = this.objs;
	      if (!objs[objId] || !objs[objId].resolved) {
	        return null;
	      }
	      return objs[objId].data;
	    },
	    clear: function PDFObjects_clear() {
	      this.objs = Object.create(null);
	    }
	  };
	  return PDFObjects;
	}();
	var RenderTask = function RenderTaskClosure() {
	  function RenderTask(internalRenderTask) {
	    this._internalRenderTask = internalRenderTask;
	    this.onContinue = null;
	  }
	  RenderTask.prototype = {
	    get promise() {
	      return this._internalRenderTask.capability.promise;
	    },
	    cancel: function RenderTask_cancel() {
	      this._internalRenderTask.cancel();
	    },
	    then: function RenderTask_then(onFulfilled, onRejected) {
	      return this.promise.then.apply(this.promise, arguments);
	    }
	  };
	  return RenderTask;
	}();
	var InternalRenderTask = function InternalRenderTaskClosure() {
	  function InternalRenderTask(callback, params, objs, commonObjs, operatorList, pageNumber, canvasFactory) {
	    this.callback = callback;
	    this.params = params;
	    this.objs = objs;
	    this.commonObjs = commonObjs;
	    this.operatorListIdx = null;
	    this.operatorList = operatorList;
	    this.pageNumber = pageNumber;
	    this.canvasFactory = canvasFactory;
	    this.running = false;
	    this.graphicsReadyCallback = null;
	    this.graphicsReady = false;
	    this.useRequestAnimationFrame = false;
	    this.cancelled = false;
	    this.capability = (0, _util.createPromiseCapability)();
	    this.task = new RenderTask(this);
	    this._continueBound = this._continue.bind(this);
	    this._scheduleNextBound = this._scheduleNext.bind(this);
	    this._nextBound = this._next.bind(this);
	  }
	  InternalRenderTask.prototype = {
	    initializeGraphics: function InternalRenderTask_initializeGraphics(transparency) {
	      if (this.cancelled) {
	        return;
	      }
	      if ((0, _dom_utils.getDefaultSetting)('pdfBug') && _util.globalScope.StepperManager && _util.globalScope.StepperManager.enabled) {
	        this.stepper = _util.globalScope.StepperManager.create(this.pageNumber - 1);
	        this.stepper.init(this.operatorList);
	        this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
	      }
	      var params = this.params;
	      this.gfx = new _canvas.CanvasGraphics(params.canvasContext, this.commonObjs, this.objs, this.canvasFactory, params.imageLayer);
	      this.gfx.beginDrawing(params.transform, params.viewport, transparency);
	      this.operatorListIdx = 0;
	      this.graphicsReady = true;
	      if (this.graphicsReadyCallback) {
	        this.graphicsReadyCallback();
	      }
	    },
	    cancel: function InternalRenderTask_cancel() {
	      this.running = false;
	      this.cancelled = true;
	      if ((0, _dom_utils.getDefaultSetting)('pdfjsNext')) {
	        this.callback(new _dom_utils.RenderingCancelledException('Rendering cancelled, page ' + this.pageNumber, 'canvas'));
	      } else {
	        this.callback('cancelled');
	      }
	    },
	    operatorListChanged: function InternalRenderTask_operatorListChanged() {
	      if (!this.graphicsReady) {
	        if (!this.graphicsReadyCallback) {
	          this.graphicsReadyCallback = this._continueBound;
	        }
	        return;
	      }
	      if (this.stepper) {
	        this.stepper.updateOperatorList(this.operatorList);
	      }
	      if (this.running) {
	        return;
	      }
	      this._continue();
	    },
	    _continue: function InternalRenderTask__continue() {
	      this.running = true;
	      if (this.cancelled) {
	        return;
	      }
	      if (this.task.onContinue) {
	        this.task.onContinue(this._scheduleNextBound);
	      } else {
	        this._scheduleNext();
	      }
	    },
	    _scheduleNext: function InternalRenderTask__scheduleNext() {
	      if (this.useRequestAnimationFrame && typeof window !== 'undefined') {
	        window.requestAnimationFrame(this._nextBound);
	      } else {
	        Promise.resolve(undefined).then(this._nextBound);
	      }
	    },
	    _next: function InternalRenderTask__next() {
	      if (this.cancelled) {
	        return;
	      }
	      this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
	      if (this.operatorListIdx === this.operatorList.argsArray.length) {
	        this.running = false;
	        if (this.operatorList.lastChunk) {
	          this.gfx.endDrawing();
	          this.callback();
	        }
	      }
	    }
	  };
	  return InternalRenderTask;
	}();
	var _UnsupportedManager = function UnsupportedManagerClosure() {
	  var listeners = [];
	  return {
	    listen: function listen(cb) {
	      (0, _util.deprecated)('Global UnsupportedManager.listen is used: ' + ' use PDFDocumentLoadingTask.onUnsupportedFeature instead');
	      listeners.push(cb);
	    },
	    notify: function notify(featureId) {
	      for (var i = 0, ii = listeners.length; i < ii; i++) {
	        listeners[i](featureId);
	      }
	    }
	  };
	}();
	var version, build;
	{
	  exports.version = version = '1.8.355';
	  exports.build = build = 'e9cbfbcc';
	}
	exports.getDocument = getDocument;
	exports.LoopbackPort = LoopbackPort;
	exports.PDFDataRangeTransport = PDFDataRangeTransport;
	exports.PDFWorker = PDFWorker;
	exports.PDFDocumentProxy = PDFDocumentProxy;
	exports.PDFPageProxy = PDFPageProxy;
	exports._UnsupportedManager = _UnsupportedManager;
	exports.version = version;
	exports.build = build;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SVGGraphics = undefined;

	var _util = __w_pdfjs_require__(0);

	var SVGGraphics = function SVGGraphics() {
	  throw new Error('Not implemented: SVGGraphics');
	};
	{
	  var SVG_DEFAULTS = {
	    fontStyle: 'normal',
	    fontWeight: 'normal',
	    fillColor: '#000000'
	  };
	  var convertImgDataToPng = function convertImgDataToPngClosure() {
	    var PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);
	    var CHUNK_WRAPPER_SIZE = 12;
	    var crcTable = new Int32Array(256);
	    for (var i = 0; i < 256; i++) {
	      var c = i;
	      for (var h = 0; h < 8; h++) {
	        if (c & 1) {
	          c = 0xedB88320 ^ c >> 1 & 0x7fffffff;
	        } else {
	          c = c >> 1 & 0x7fffffff;
	        }
	      }
	      crcTable[i] = c;
	    }
	    function crc32(data, start, end) {
	      var crc = -1;
	      for (var i = start; i < end; i++) {
	        var a = (crc ^ data[i]) & 0xff;
	        var b = crcTable[a];
	        crc = crc >>> 8 ^ b;
	      }
	      return crc ^ -1;
	    }
	    function writePngChunk(type, body, data, offset) {
	      var p = offset;
	      var len = body.length;
	      data[p] = len >> 24 & 0xff;
	      data[p + 1] = len >> 16 & 0xff;
	      data[p + 2] = len >> 8 & 0xff;
	      data[p + 3] = len & 0xff;
	      p += 4;
	      data[p] = type.charCodeAt(0) & 0xff;
	      data[p + 1] = type.charCodeAt(1) & 0xff;
	      data[p + 2] = type.charCodeAt(2) & 0xff;
	      data[p + 3] = type.charCodeAt(3) & 0xff;
	      p += 4;
	      data.set(body, p);
	      p += body.length;
	      var crc = crc32(data, offset + 4, p);
	      data[p] = crc >> 24 & 0xff;
	      data[p + 1] = crc >> 16 & 0xff;
	      data[p + 2] = crc >> 8 & 0xff;
	      data[p + 3] = crc & 0xff;
	    }
	    function adler32(data, start, end) {
	      var a = 1;
	      var b = 0;
	      for (var i = start; i < end; ++i) {
	        a = (a + (data[i] & 0xff)) % 65521;
	        b = (b + a) % 65521;
	      }
	      return b << 16 | a;
	    }
	    function encode(imgData, kind, forceDataSchema) {
	      var width = imgData.width;
	      var height = imgData.height;
	      var bitDepth, colorType, lineSize;
	      var bytes = imgData.data;
	      switch (kind) {
	        case _util.ImageKind.GRAYSCALE_1BPP:
	          colorType = 0;
	          bitDepth = 1;
	          lineSize = width + 7 >> 3;
	          break;
	        case _util.ImageKind.RGB_24BPP:
	          colorType = 2;
	          bitDepth = 8;
	          lineSize = width * 3;
	          break;
	        case _util.ImageKind.RGBA_32BPP:
	          colorType = 6;
	          bitDepth = 8;
	          lineSize = width * 4;
	          break;
	        default:
	          throw new Error('invalid format');
	      }
	      var literals = new Uint8Array((1 + lineSize) * height);
	      var offsetLiterals = 0,
	          offsetBytes = 0;
	      var y, i;
	      for (y = 0; y < height; ++y) {
	        literals[offsetLiterals++] = 0;
	        literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
	        offsetBytes += lineSize;
	        offsetLiterals += lineSize;
	      }
	      if (kind === _util.ImageKind.GRAYSCALE_1BPP) {
	        offsetLiterals = 0;
	        for (y = 0; y < height; y++) {
	          offsetLiterals++;
	          for (i = 0; i < lineSize; i++) {
	            literals[offsetLiterals++] ^= 0xFF;
	          }
	        }
	      }
	      var ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);
	      var len = literals.length;
	      var maxBlockLength = 0xFFFF;
	      var deflateBlocks = Math.ceil(len / maxBlockLength);
	      var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
	      var pi = 0;
	      idat[pi++] = 0x78;
	      idat[pi++] = 0x9c;
	      var pos = 0;
	      while (len > maxBlockLength) {
	        idat[pi++] = 0x00;
	        idat[pi++] = 0xff;
	        idat[pi++] = 0xff;
	        idat[pi++] = 0x00;
	        idat[pi++] = 0x00;
	        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
	        pi += maxBlockLength;
	        pos += maxBlockLength;
	        len -= maxBlockLength;
	      }
	      idat[pi++] = 0x01;
	      idat[pi++] = len & 0xff;
	      idat[pi++] = len >> 8 & 0xff;
	      idat[pi++] = ~len & 0xffff & 0xff;
	      idat[pi++] = (~len & 0xffff) >> 8 & 0xff;
	      idat.set(literals.subarray(pos), pi);
	      pi += literals.length - pos;
	      var adler = adler32(literals, 0, literals.length);
	      idat[pi++] = adler >> 24 & 0xff;
	      idat[pi++] = adler >> 16 & 0xff;
	      idat[pi++] = adler >> 8 & 0xff;
	      idat[pi++] = adler & 0xff;
	      var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
	      var data = new Uint8Array(pngLength);
	      var offset = 0;
	      data.set(PNG_HEADER, offset);
	      offset += PNG_HEADER.length;
	      writePngChunk('IHDR', ihdr, data, offset);
	      offset += CHUNK_WRAPPER_SIZE + ihdr.length;
	      writePngChunk('IDATA', idat, data, offset);
	      offset += CHUNK_WRAPPER_SIZE + idat.length;
	      writePngChunk('IEND', new Uint8Array(0), data, offset);
	      return (0, _util.createObjectURL)(data, 'image/png', forceDataSchema);
	    }
	    return function convertImgDataToPng(imgData, forceDataSchema) {
	      var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
	      return encode(imgData, kind, forceDataSchema);
	    };
	  }();
	  var SVGExtraState = function SVGExtraStateClosure() {
	    function SVGExtraState() {
	      this.fontSizeScale = 1;
	      this.fontWeight = SVG_DEFAULTS.fontWeight;
	      this.fontSize = 0;
	      this.textMatrix = _util.IDENTITY_MATRIX;
	      this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
	      this.leading = 0;
	      this.x = 0;
	      this.y = 0;
	      this.lineX = 0;
	      this.lineY = 0;
	      this.charSpacing = 0;
	      this.wordSpacing = 0;
	      this.textHScale = 1;
	      this.textRise = 0;
	      this.fillColor = SVG_DEFAULTS.fillColor;
	      this.strokeColor = '#000000';
	      this.fillAlpha = 1;
	      this.strokeAlpha = 1;
	      this.lineWidth = 1;
	      this.lineJoin = '';
	      this.lineCap = '';
	      this.miterLimit = 0;
	      this.dashArray = [];
	      this.dashPhase = 0;
	      this.dependencies = [];
	      this.activeClipUrl = null;
	      this.clipGroup = null;
	      this.maskId = '';
	    }
	    SVGExtraState.prototype = {
	      clone: function SVGExtraState_clone() {
	        return Object.create(this);
	      },
	      setCurrentPoint: function SVGExtraState_setCurrentPoint(x, y) {
	        this.x = x;
	        this.y = y;
	      }
	    };
	    return SVGExtraState;
	  }();
	  exports.SVGGraphics = SVGGraphics = function SVGGraphicsClosure() {
	    function opListToTree(opList) {
	      var opTree = [];
	      var tmp = [];
	      var opListLen = opList.length;
	      for (var x = 0; x < opListLen; x++) {
	        if (opList[x].fn === 'save') {
	          opTree.push({
	            'fnId': 92,
	            'fn': 'group',
	            'items': []
	          });
	          tmp.push(opTree);
	          opTree = opTree[opTree.length - 1].items;
	          continue;
	        }
	        if (opList[x].fn === 'restore') {
	          opTree = tmp.pop();
	        } else {
	          opTree.push(opList[x]);
	        }
	      }
	      return opTree;
	    }
	    function pf(value) {
	      if (value === (value | 0)) {
	        return value.toString();
	      }
	      var s = value.toFixed(10);
	      var i = s.length - 1;
	      if (s[i] !== '0') {
	        return s;
	      }
	      do {
	        i--;
	      } while (s[i] === '0');
	      return s.substr(0, s[i] === '.' ? i : i + 1);
	    }
	    function pm(m) {
	      if (m[4] === 0 && m[5] === 0) {
	        if (m[1] === 0 && m[2] === 0) {
	          if (m[0] === 1 && m[3] === 1) {
	            return '';
	          }
	          return 'scale(' + pf(m[0]) + ' ' + pf(m[3]) + ')';
	        }
	        if (m[0] === m[3] && m[1] === -m[2]) {
	          var a = Math.acos(m[0]) * 180 / Math.PI;
	          return 'rotate(' + pf(a) + ')';
	        }
	      } else {
	        if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
	          return 'translate(' + pf(m[4]) + ' ' + pf(m[5]) + ')';
	        }
	      }
	      return 'matrix(' + pf(m[0]) + ' ' + pf(m[1]) + ' ' + pf(m[2]) + ' ' + pf(m[3]) + ' ' + pf(m[4]) + ' ' + pf(m[5]) + ')';
	    }
	    function SVGGraphics(commonObjs, objs, forceDataSchema) {
	      this.current = new SVGExtraState();
	      this.transformMatrix = _util.IDENTITY_MATRIX;
	      this.transformStack = [];
	      this.extraStack = [];
	      this.commonObjs = commonObjs;
	      this.objs = objs;
	      this.pendingEOFill = false;
	      this.embedFonts = false;
	      this.embeddedFonts = Object.create(null);
	      this.cssStyle = null;
	      this.forceDataSchema = !!forceDataSchema;
	    }
	    var NS = 'http://www.w3.org/2000/svg';
	    var XML_NS = 'http://www.w3.org/XML/1998/namespace';
	    var XLINK_NS = 'http://www.w3.org/1999/xlink';
	    var LINE_CAP_STYLES = ['butt', 'round', 'square'];
	    var LINE_JOIN_STYLES = ['miter', 'round', 'bevel'];
	    var clipCount = 0;
	    var maskCount = 0;
	    SVGGraphics.prototype = {
	      save: function SVGGraphics_save() {
	        this.transformStack.push(this.transformMatrix);
	        var old = this.current;
	        this.extraStack.push(old);
	        this.current = old.clone();
	      },
	      restore: function SVGGraphics_restore() {
	        this.transformMatrix = this.transformStack.pop();
	        this.current = this.extraStack.pop();
	        this.tgrp = null;
	      },
	      group: function SVGGraphics_group(items) {
	        this.save();
	        this.executeOpTree(items);
	        this.restore();
	      },
	      loadDependencies: function SVGGraphics_loadDependencies(operatorList) {
	        var _this = this;

	        var fnArray = operatorList.fnArray;
	        var fnArrayLen = fnArray.length;
	        var argsArray = operatorList.argsArray;
	        for (var i = 0; i < fnArrayLen; i++) {
	          if (_util.OPS.dependency === fnArray[i]) {
	            var deps = argsArray[i];
	            for (var n = 0, nn = deps.length; n < nn; n++) {
	              var obj = deps[n];
	              var common = obj.substring(0, 2) === 'g_';
	              var promise;
	              if (common) {
	                promise = new Promise(function (resolve) {
	                  _this.commonObjs.get(obj, resolve);
	                });
	              } else {
	                promise = new Promise(function (resolve) {
	                  _this.objs.get(obj, resolve);
	                });
	              }
	              this.current.dependencies.push(promise);
	            }
	          }
	        }
	        return Promise.all(this.current.dependencies);
	      },
	      transform: function SVGGraphics_transform(a, b, c, d, e, f) {
	        var transformMatrix = [a, b, c, d, e, f];
	        this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
	        this.tgrp = null;
	      },
	      getSVG: function SVGGraphics_getSVG(operatorList, viewport) {
	        var _this2 = this;

	        this.viewport = viewport;
	        var svgElement = this._initialize(viewport);
	        return this.loadDependencies(operatorList).then(function () {
	          _this2.transformMatrix = _util.IDENTITY_MATRIX;
	          var opTree = _this2.convertOpList(operatorList);
	          _this2.executeOpTree(opTree);
	          return svgElement;
	        });
	      },
	      convertOpList: function SVGGraphics_convertOpList(operatorList) {
	        var argsArray = operatorList.argsArray;
	        var fnArray = operatorList.fnArray;
	        var fnArrayLen = fnArray.length;
	        var REVOPS = [];
	        var opList = [];
	        for (var op in _util.OPS) {
	          REVOPS[_util.OPS[op]] = op;
	        }
	        for (var x = 0; x < fnArrayLen; x++) {
	          var fnId = fnArray[x];
	          opList.push({
	            'fnId': fnId,
	            'fn': REVOPS[fnId],
	            'args': argsArray[x]
	          });
	        }
	        return opListToTree(opList);
	      },
	      executeOpTree: function SVGGraphics_executeOpTree(opTree) {
	        var opTreeLen = opTree.length;
	        for (var x = 0; x < opTreeLen; x++) {
	          var fn = opTree[x].fn;
	          var fnId = opTree[x].fnId;
	          var args = opTree[x].args;
	          switch (fnId | 0) {
	            case _util.OPS.beginText:
	              this.beginText();
	              break;
	            case _util.OPS.setLeading:
	              this.setLeading(args);
	              break;
	            case _util.OPS.setLeadingMoveText:
	              this.setLeadingMoveText(args[0], args[1]);
	              break;
	            case _util.OPS.setFont:
	              this.setFont(args);
	              break;
	            case _util.OPS.showText:
	              this.showText(args[0]);
	              break;
	            case _util.OPS.showSpacedText:
	              this.showText(args[0]);
	              break;
	            case _util.OPS.endText:
	              this.endText();
	              break;
	            case _util.OPS.moveText:
	              this.moveText(args[0], args[1]);
	              break;
	            case _util.OPS.setCharSpacing:
	              this.setCharSpacing(args[0]);
	              break;
	            case _util.OPS.setWordSpacing:
	              this.setWordSpacing(args[0]);
	              break;
	            case _util.OPS.setHScale:
	              this.setHScale(args[0]);
	              break;
	            case _util.OPS.setTextMatrix:
	              this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
	              break;
	            case _util.OPS.setLineWidth:
	              this.setLineWidth(args[0]);
	              break;
	            case _util.OPS.setLineJoin:
	              this.setLineJoin(args[0]);
	              break;
	            case _util.OPS.setLineCap:
	              this.setLineCap(args[0]);
	              break;
	            case _util.OPS.setMiterLimit:
	              this.setMiterLimit(args[0]);
	              break;
	            case _util.OPS.setFillRGBColor:
	              this.setFillRGBColor(args[0], args[1], args[2]);
	              break;
	            case _util.OPS.setStrokeRGBColor:
	              this.setStrokeRGBColor(args[0], args[1], args[2]);
	              break;
	            case _util.OPS.setDash:
	              this.setDash(args[0], args[1]);
	              break;
	            case _util.OPS.setGState:
	              this.setGState(args[0]);
	              break;
	            case _util.OPS.fill:
	              this.fill();
	              break;
	            case _util.OPS.eoFill:
	              this.eoFill();
	              break;
	            case _util.OPS.stroke:
	              this.stroke();
	              break;
	            case _util.OPS.fillStroke:
	              this.fillStroke();
	              break;
	            case _util.OPS.eoFillStroke:
	              this.eoFillStroke();
	              break;
	            case _util.OPS.clip:
	              this.clip('nonzero');
	              break;
	            case _util.OPS.eoClip:
	              this.clip('evenodd');
	              break;
	            case _util.OPS.paintSolidColorImageMask:
	              this.paintSolidColorImageMask();
	              break;
	            case _util.OPS.paintJpegXObject:
	              this.paintJpegXObject(args[0], args[1], args[2]);
	              break;
	            case _util.OPS.paintImageXObject:
	              this.paintImageXObject(args[0]);
	              break;
	            case _util.OPS.paintInlineImageXObject:
	              this.paintInlineImageXObject(args[0]);
	              break;
	            case _util.OPS.paintImageMaskXObject:
	              this.paintImageMaskXObject(args[0]);
	              break;
	            case _util.OPS.paintFormXObjectBegin:
	              this.paintFormXObjectBegin(args[0], args[1]);
	              break;
	            case _util.OPS.paintFormXObjectEnd:
	              this.paintFormXObjectEnd();
	              break;
	            case _util.OPS.closePath:
	              this.closePath();
	              break;
	            case _util.OPS.closeStroke:
	              this.closeStroke();
	              break;
	            case _util.OPS.closeFillStroke:
	              this.closeFillStroke();
	              break;
	            case _util.OPS.nextLine:
	              this.nextLine();
	              break;
	            case _util.OPS.transform:
	              this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
	              break;
	            case _util.OPS.constructPath:
	              this.constructPath(args[0], args[1]);
	              break;
	            case _util.OPS.endPath:
	              this.endPath();
	              break;
	            case 92:
	              this.group(opTree[x].items);
	              break;
	            default:
	              (0, _util.warn)('Unimplemented operator ' + fn);
	              break;
	          }
	        }
	      },
	      setWordSpacing: function SVGGraphics_setWordSpacing(wordSpacing) {
	        this.current.wordSpacing = wordSpacing;
	      },
	      setCharSpacing: function SVGGraphics_setCharSpacing(charSpacing) {
	        this.current.charSpacing = charSpacing;
	      },
	      nextLine: function SVGGraphics_nextLine() {
	        this.moveText(0, this.current.leading);
	      },
	      setTextMatrix: function SVGGraphics_setTextMatrix(a, b, c, d, e, f) {
	        var current = this.current;
	        this.current.textMatrix = this.current.lineMatrix = [a, b, c, d, e, f];
	        this.current.x = this.current.lineX = 0;
	        this.current.y = this.current.lineY = 0;
	        current.xcoords = [];
	        current.tspan = document.createElementNS(NS, 'svg:tspan');
	        current.tspan.setAttributeNS(null, 'font-family', current.fontFamily);
	        current.tspan.setAttributeNS(null, 'font-size', pf(current.fontSize) + 'px');
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	        current.txtElement = document.createElementNS(NS, 'svg:text');
	        current.txtElement.appendChild(current.tspan);
	      },
	      beginText: function SVGGraphics_beginText() {
	        this.current.x = this.current.lineX = 0;
	        this.current.y = this.current.lineY = 0;
	        this.current.textMatrix = _util.IDENTITY_MATRIX;
	        this.current.lineMatrix = _util.IDENTITY_MATRIX;
	        this.current.tspan = document.createElementNS(NS, 'svg:tspan');
	        this.current.txtElement = document.createElementNS(NS, 'svg:text');
	        this.current.txtgrp = document.createElementNS(NS, 'svg:g');
	        this.current.xcoords = [];
	      },
	      moveText: function SVGGraphics_moveText(x, y) {
	        var current = this.current;
	        this.current.x = this.current.lineX += x;
	        this.current.y = this.current.lineY += y;
	        current.xcoords = [];
	        current.tspan = document.createElementNS(NS, 'svg:tspan');
	        current.tspan.setAttributeNS(null, 'font-family', current.fontFamily);
	        current.tspan.setAttributeNS(null, 'font-size', pf(current.fontSize) + 'px');
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	      },
	      showText: function SVGGraphics_showText(glyphs) {
	        var current = this.current;
	        var font = current.font;
	        var fontSize = current.fontSize;
	        if (fontSize === 0) {
	          return;
	        }
	        var charSpacing = current.charSpacing;
	        var wordSpacing = current.wordSpacing;
	        var fontDirection = current.fontDirection;
	        var textHScale = current.textHScale * fontDirection;
	        var glyphsLength = glyphs.length;
	        var vertical = font.vertical;
	        var widthAdvanceScale = fontSize * current.fontMatrix[0];
	        var x = 0,
	            i;
	        for (i = 0; i < glyphsLength; ++i) {
	          var glyph = glyphs[i];
	          if (glyph === null) {
	            x += fontDirection * wordSpacing;
	            continue;
	          } else if ((0, _util.isNum)(glyph)) {
	            x += -glyph * fontSize * 0.001;
	            continue;
	          }
	          current.xcoords.push(current.x + x * textHScale);
	          var width = glyph.width;
	          var character = glyph.fontChar;
	          var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
	          var charWidth = width * widthAdvanceScale + spacing * fontDirection;
	          x += charWidth;
	          current.tspan.textContent += character;
	        }
	        if (vertical) {
	          current.y -= x * textHScale;
	        } else {
	          current.x += x * textHScale;
	        }
	        current.tspan.setAttributeNS(null, 'x', current.xcoords.map(pf).join(' '));
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	        current.tspan.setAttributeNS(null, 'font-family', current.fontFamily);
	        current.tspan.setAttributeNS(null, 'font-size', pf(current.fontSize) + 'px');
	        if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
	          current.tspan.setAttributeNS(null, 'font-style', current.fontStyle);
	        }
	        if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
	          current.tspan.setAttributeNS(null, 'font-weight', current.fontWeight);
	        }
	        if (current.fillColor !== SVG_DEFAULTS.fillColor) {
	          current.tspan.setAttributeNS(null, 'fill', current.fillColor);
	        }
	        current.txtElement.setAttributeNS(null, 'transform', pm(current.textMatrix) + ' scale(1, -1)');
	        current.txtElement.setAttributeNS(XML_NS, 'xml:space', 'preserve');
	        current.txtElement.appendChild(current.tspan);
	        current.txtgrp.appendChild(current.txtElement);
	        this._ensureTransformGroup().appendChild(current.txtElement);
	      },
	      setLeadingMoveText: function SVGGraphics_setLeadingMoveText(x, y) {
	        this.setLeading(-y);
	        this.moveText(x, y);
	      },
	      addFontStyle: function SVGGraphics_addFontStyle(fontObj) {
	        if (!this.cssStyle) {
	          this.cssStyle = document.createElementNS(NS, 'svg:style');
	          this.cssStyle.setAttributeNS(null, 'type', 'text/css');
	          this.defs.appendChild(this.cssStyle);
	        }
	        var url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);
	        this.cssStyle.textContent += '@font-face { font-family: "' + fontObj.loadedName + '";' + ' src: url(' + url + '); }\n';
	      },
	      setFont: function SVGGraphics_setFont(details) {
	        var current = this.current;
	        var fontObj = this.commonObjs.get(details[0]);
	        var size = details[1];
	        this.current.font = fontObj;
	        if (this.embedFonts && fontObj.data && !this.embeddedFonts[fontObj.loadedName]) {
	          this.addFontStyle(fontObj);
	          this.embeddedFonts[fontObj.loadedName] = fontObj;
	        }
	        current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;
	        var bold = fontObj.black ? fontObj.bold ? 'bolder' : 'bold' : fontObj.bold ? 'bold' : 'normal';
	        var italic = fontObj.italic ? 'italic' : 'normal';
	        if (size < 0) {
	          size = -size;
	          current.fontDirection = -1;
	        } else {
	          current.fontDirection = 1;
	        }
	        current.fontSize = size;
	        current.fontFamily = fontObj.loadedName;
	        current.fontWeight = bold;
	        current.fontStyle = italic;
	        current.tspan = document.createElementNS(NS, 'svg:tspan');
	        current.tspan.setAttributeNS(null, 'y', pf(-current.y));
	        current.xcoords = [];
	      },
	      endText: function SVGGraphics_endText() {},
	      setLineWidth: function SVGGraphics_setLineWidth(width) {
	        this.current.lineWidth = width;
	      },
	      setLineCap: function SVGGraphics_setLineCap(style) {
	        this.current.lineCap = LINE_CAP_STYLES[style];
	      },
	      setLineJoin: function SVGGraphics_setLineJoin(style) {
	        this.current.lineJoin = LINE_JOIN_STYLES[style];
	      },
	      setMiterLimit: function SVGGraphics_setMiterLimit(limit) {
	        this.current.miterLimit = limit;
	      },
	      setStrokeRGBColor: function SVGGraphics_setStrokeRGBColor(r, g, b) {
	        var color = _util.Util.makeCssRgb(r, g, b);
	        this.current.strokeColor = color;
	      },
	      setFillRGBColor: function SVGGraphics_setFillRGBColor(r, g, b) {
	        var color = _util.Util.makeCssRgb(r, g, b);
	        this.current.fillColor = color;
	        this.current.tspan = document.createElementNS(NS, 'svg:tspan');
	        this.current.xcoords = [];
	      },
	      setDash: function SVGGraphics_setDash(dashArray, dashPhase) {
	        this.current.dashArray = dashArray;
	        this.current.dashPhase = dashPhase;
	      },
	      constructPath: function SVGGraphics_constructPath(ops, args) {
	        var current = this.current;
	        var x = current.x,
	            y = current.y;
	        current.path = document.createElementNS(NS, 'svg:path');
	        var d = [];
	        var opLength = ops.length;
	        for (var i = 0, j = 0; i < opLength; i++) {
	          switch (ops[i] | 0) {
	            case _util.OPS.rectangle:
	              x = args[j++];
	              y = args[j++];
	              var width = args[j++];
	              var height = args[j++];
	              var xw = x + width;
	              var yh = y + height;
	              d.push('M', pf(x), pf(y), 'L', pf(xw), pf(y), 'L', pf(xw), pf(yh), 'L', pf(x), pf(yh), 'Z');
	              break;
	            case _util.OPS.moveTo:
	              x = args[j++];
	              y = args[j++];
	              d.push('M', pf(x), pf(y));
	              break;
	            case _util.OPS.lineTo:
	              x = args[j++];
	              y = args[j++];
	              d.push('L', pf(x), pf(y));
	              break;
	            case _util.OPS.curveTo:
	              x = args[j + 4];
	              y = args[j + 5];
	              d.push('C', pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
	              j += 6;
	              break;
	            case _util.OPS.curveTo2:
	              x = args[j + 2];
	              y = args[j + 3];
	              d.push('C', pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
	              j += 4;
	              break;
	            case _util.OPS.curveTo3:
	              x = args[j + 2];
	              y = args[j + 3];
	              d.push('C', pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
	              j += 4;
	              break;
	            case _util.OPS.closePath:
	              d.push('Z');
	              break;
	          }
	        }
	        current.path.setAttributeNS(null, 'd', d.join(' '));
	        current.path.setAttributeNS(null, 'stroke-miterlimit', pf(current.miterLimit));
	        current.path.setAttributeNS(null, 'stroke-linecap', current.lineCap);
	        current.path.setAttributeNS(null, 'stroke-linejoin', current.lineJoin);
	        current.path.setAttributeNS(null, 'stroke-width', pf(current.lineWidth) + 'px');
	        current.path.setAttributeNS(null, 'stroke-dasharray', current.dashArray.map(pf).join(' '));
	        current.path.setAttributeNS(null, 'stroke-dashoffset', pf(current.dashPhase) + 'px');
	        current.path.setAttributeNS(null, 'fill', 'none');
	        this._ensureTransformGroup().appendChild(current.path);
	        current.element = current.path;
	        current.setCurrentPoint(x, y);
	      },
	      endPath: function SVGGraphics_endPath() {},
	      clip: function SVGGraphics_clip(type) {
	        var current = this.current;
	        var clipId = 'clippath' + clipCount;
	        clipCount++;
	        var clipPath = document.createElementNS(NS, 'svg:clipPath');
	        clipPath.setAttributeNS(null, 'id', clipId);
	        clipPath.setAttributeNS(null, 'transform', pm(this.transformMatrix));
	        var clipElement = current.element.cloneNode();
	        if (type === 'evenodd') {
	          clipElement.setAttributeNS(null, 'clip-rule', 'evenodd');
	        } else {
	          clipElement.setAttributeNS(null, 'clip-rule', 'nonzero');
	        }
	        clipPath.appendChild(clipElement);
	        this.defs.appendChild(clipPath);
	        if (current.activeClipUrl) {
	          current.clipGroup = null;
	          this.extraStack.forEach(function (prev) {
	            prev.clipGroup = null;
	          });
	        }
	        current.activeClipUrl = 'url(#' + clipId + ')';
	        this.tgrp = null;
	      },
	      closePath: function SVGGraphics_closePath() {
	        var current = this.current;
	        var d = current.path.getAttributeNS(null, 'd');
	        d += 'Z';
	        current.path.setAttributeNS(null, 'd', d);
	      },
	      setLeading: function SVGGraphics_setLeading(leading) {
	        this.current.leading = -leading;
	      },
	      setTextRise: function SVGGraphics_setTextRise(textRise) {
	        this.current.textRise = textRise;
	      },
	      setHScale: function SVGGraphics_setHScale(scale) {
	        this.current.textHScale = scale / 100;
	      },
	      setGState: function SVGGraphics_setGState(states) {
	        for (var i = 0, ii = states.length; i < ii; i++) {
	          var state = states[i];
	          var key = state[0];
	          var value = state[1];
	          switch (key) {
	            case 'LW':
	              this.setLineWidth(value);
	              break;
	            case 'LC':
	              this.setLineCap(value);
	              break;
	            case 'LJ':
	              this.setLineJoin(value);
	              break;
	            case 'ML':
	              this.setMiterLimit(value);
	              break;
	            case 'D':
	              this.setDash(value[0], value[1]);
	              break;
	            case 'Font':
	              this.setFont(value);
	              break;
	            default:
	              (0, _util.warn)('Unimplemented graphic state ' + key);
	              break;
	          }
	        }
	      },
	      fill: function SVGGraphics_fill() {
	        var current = this.current;
	        current.element.setAttributeNS(null, 'fill', current.fillColor);
	      },
	      stroke: function SVGGraphics_stroke() {
	        var current = this.current;
	        current.element.setAttributeNS(null, 'stroke', current.strokeColor);
	        current.element.setAttributeNS(null, 'fill', 'none');
	      },
	      eoFill: function SVGGraphics_eoFill() {
	        var current = this.current;
	        current.element.setAttributeNS(null, 'fill', current.fillColor);
	        current.element.setAttributeNS(null, 'fill-rule', 'evenodd');
	      },
	      fillStroke: function SVGGraphics_fillStroke() {
	        this.stroke();
	        this.fill();
	      },
	      eoFillStroke: function SVGGraphics_eoFillStroke() {
	        this.current.element.setAttributeNS(null, 'fill-rule', 'evenodd');
	        this.fillStroke();
	      },
	      closeStroke: function SVGGraphics_closeStroke() {
	        this.closePath();
	        this.stroke();
	      },
	      closeFillStroke: function SVGGraphics_closeFillStroke() {
	        this.closePath();
	        this.fillStroke();
	      },
	      paintSolidColorImageMask: function SVGGraphics_paintSolidColorImageMask() {
	        var current = this.current;
	        var rect = document.createElementNS(NS, 'svg:rect');
	        rect.setAttributeNS(null, 'x', '0');
	        rect.setAttributeNS(null, 'y', '0');
	        rect.setAttributeNS(null, 'width', '1px');
	        rect.setAttributeNS(null, 'height', '1px');
	        rect.setAttributeNS(null, 'fill', current.fillColor);
	        this._ensureTransformGroup().appendChild(rect);
	      },
	      paintJpegXObject: function SVGGraphics_paintJpegXObject(objId, w, h) {
	        var imgObj = this.objs.get(objId);
	        var imgEl = document.createElementNS(NS, 'svg:image');
	        imgEl.setAttributeNS(XLINK_NS, 'xlink:href', imgObj.src);
	        imgEl.setAttributeNS(null, 'width', pf(w));
	        imgEl.setAttributeNS(null, 'height', pf(h));
	        imgEl.setAttributeNS(null, 'x', '0');
	        imgEl.setAttributeNS(null, 'y', pf(-h));
	        imgEl.setAttributeNS(null, 'transform', 'scale(' + pf(1 / w) + ' ' + pf(-1 / h) + ')');
	        this._ensureTransformGroup().appendChild(imgEl);
	      },
	      paintImageXObject: function SVGGraphics_paintImageXObject(objId) {
	        var imgData = this.objs.get(objId);
	        if (!imgData) {
	          (0, _util.warn)('Dependent image isn\'t ready yet');
	          return;
	        }
	        this.paintInlineImageXObject(imgData);
	      },
	      paintInlineImageXObject: function SVGGraphics_paintInlineImageXObject(imgData, mask) {
	        var width = imgData.width;
	        var height = imgData.height;
	        var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema);
	        var cliprect = document.createElementNS(NS, 'svg:rect');
	        cliprect.setAttributeNS(null, 'x', '0');
	        cliprect.setAttributeNS(null, 'y', '0');
	        cliprect.setAttributeNS(null, 'width', pf(width));
	        cliprect.setAttributeNS(null, 'height', pf(height));
	        this.current.element = cliprect;
	        this.clip('nonzero');
	        var imgEl = document.createElementNS(NS, 'svg:image');
	        imgEl.setAttributeNS(XLINK_NS, 'xlink:href', imgSrc);
	        imgEl.setAttributeNS(null, 'x', '0');
	        imgEl.setAttributeNS(null, 'y', pf(-height));
	        imgEl.setAttributeNS(null, 'width', pf(width) + 'px');
	        imgEl.setAttributeNS(null, 'height', pf(height) + 'px');
	        imgEl.setAttributeNS(null, 'transform', 'scale(' + pf(1 / width) + ' ' + pf(-1 / height) + ')');
	        if (mask) {
	          mask.appendChild(imgEl);
	        } else {
	          this._ensureTransformGroup().appendChild(imgEl);
	        }
	      },
	      paintImageMaskXObject: function SVGGraphics_paintImageMaskXObject(imgData) {
	        var current = this.current;
	        var width = imgData.width;
	        var height = imgData.height;
	        var fillColor = current.fillColor;
	        current.maskId = 'mask' + maskCount++;
	        var mask = document.createElementNS(NS, 'svg:mask');
	        mask.setAttributeNS(null, 'id', current.maskId);
	        var rect = document.createElementNS(NS, 'svg:rect');
	        rect.setAttributeNS(null, 'x', '0');
	        rect.setAttributeNS(null, 'y', '0');
	        rect.setAttributeNS(null, 'width', pf(width));
	        rect.setAttributeNS(null, 'height', pf(height));
	        rect.setAttributeNS(null, 'fill', fillColor);
	        rect.setAttributeNS(null, 'mask', 'url(#' + current.maskId + ')');
	        this.defs.appendChild(mask);
	        this._ensureTransformGroup().appendChild(rect);
	        this.paintInlineImageXObject(imgData, mask);
	      },
	      paintFormXObjectBegin: function SVGGraphics_paintFormXObjectBegin(matrix, bbox) {
	        if ((0, _util.isArray)(matrix) && matrix.length === 6) {
	          this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
	        }
	        if ((0, _util.isArray)(bbox) && bbox.length === 4) {
	          var width = bbox[2] - bbox[0];
	          var height = bbox[3] - bbox[1];
	          var cliprect = document.createElementNS(NS, 'svg:rect');
	          cliprect.setAttributeNS(null, 'x', bbox[0]);
	          cliprect.setAttributeNS(null, 'y', bbox[1]);
	          cliprect.setAttributeNS(null, 'width', pf(width));
	          cliprect.setAttributeNS(null, 'height', pf(height));
	          this.current.element = cliprect;
	          this.clip('nonzero');
	          this.endPath();
	        }
	      },
	      paintFormXObjectEnd: function SVGGraphics_paintFormXObjectEnd() {},
	      _initialize: function SVGGraphics_initialize(viewport) {
	        var svg = document.createElementNS(NS, 'svg:svg');
	        svg.setAttributeNS(null, 'version', '1.1');
	        svg.setAttributeNS(null, 'width', viewport.width + 'px');
	        svg.setAttributeNS(null, 'height', viewport.height + 'px');
	        svg.setAttributeNS(null, 'preserveAspectRatio', 'none');
	        svg.setAttributeNS(null, 'viewBox', '0 0 ' + viewport.width + ' ' + viewport.height);
	        var definitions = document.createElementNS(NS, 'svg:defs');
	        svg.appendChild(definitions);
	        this.defs = definitions;
	        var rootGroup = document.createElementNS(NS, 'svg:g');
	        rootGroup.setAttributeNS(null, 'transform', pm(viewport.transform));
	        svg.appendChild(rootGroup);
	        this.svg = rootGroup;
	        return svg;
	      },
	      _ensureClipGroup: function SVGGraphics_ensureClipGroup() {
	        if (!this.current.clipGroup) {
	          var clipGroup = document.createElementNS(NS, 'svg:g');
	          clipGroup.setAttributeNS(null, 'clip-path', this.current.activeClipUrl);
	          this.svg.appendChild(clipGroup);
	          this.current.clipGroup = clipGroup;
	        }
	        return this.current.clipGroup;
	      },
	      _ensureTransformGroup: function SVGGraphics_ensureTransformGroup() {
	        if (!this.tgrp) {
	          this.tgrp = document.createElementNS(NS, 'svg:g');
	          this.tgrp.setAttributeNS(null, 'transform', pm(this.transformMatrix));
	          if (this.current.activeClipUrl) {
	            this._ensureClipGroup().appendChild(this.tgrp);
	          } else {
	            this.svg.appendChild(this.tgrp);
	          }
	        }
	        return this.tgrp;
	      }
	    };
	    return SVGGraphics;
	  }();
	}
	exports.SVGGraphics = SVGGraphics;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.renderTextLayer = undefined;

	var _util = __w_pdfjs_require__(0);

	var _dom_utils = __w_pdfjs_require__(1);

	var renderTextLayer = function renderTextLayerClosure() {
	  var MAX_TEXT_DIVS_TO_RENDER = 100000;
	  var NonWhitespaceRegexp = /\S/;
	  function isAllWhitespace(str) {
	    return !NonWhitespaceRegexp.test(str);
	  }
	  var styleBuf = ['left: ', 0, 'px; top: ', 0, 'px; font-size: ', 0, 'px; font-family: ', '', ';'];
	  function appendText(task, geom, styles) {
	    var textDiv = document.createElement('div');
	    var textDivProperties = {
	      style: null,
	      angle: 0,
	      canvasWidth: 0,
	      isWhitespace: false,
	      originalTransform: null,
	      paddingBottom: 0,
	      paddingLeft: 0,
	      paddingRight: 0,
	      paddingTop: 0,
	      scale: 1
	    };
	    task._textDivs.push(textDiv);
	    if (isAllWhitespace(geom.str)) {
	      textDivProperties.isWhitespace = true;
	      task._textDivProperties.set(textDiv, textDivProperties);
	      return;
	    }
	    var tx = _util.Util.transform(task._viewport.transform, geom.transform);
	    var angle = Math.atan2(tx[1], tx[0]);
	    var style = styles[geom.fontName];
	    if (style.vertical) {
	      angle += Math.PI / 2;
	    }
	    var fontHeight = Math.sqrt(tx[2] * tx[2] + tx[3] * tx[3]);
	    var fontAscent = fontHeight;
	    if (style.ascent) {
	      fontAscent = style.ascent * fontAscent;
	    } else if (style.descent) {
	      fontAscent = (1 + style.descent) * fontAscent;
	    }
	    var left;
	    var top;
	    if (angle === 0) {
	      left = tx[4];
	      top = tx[5] - fontAscent;
	    } else {
	      left = tx[4] + fontAscent * Math.sin(angle);
	      top = tx[5] - fontAscent * Math.cos(angle);
	    }
	    styleBuf[1] = left;
	    styleBuf[3] = top;
	    styleBuf[5] = fontHeight;
	    styleBuf[7] = style.fontFamily;
	    textDivProperties.style = styleBuf.join('');
	    textDiv.setAttribute('style', textDivProperties.style);
	    textDiv.textContent = geom.str;
	    if ((0, _dom_utils.getDefaultSetting)('pdfBug')) {
	      textDiv.dataset.fontName = geom.fontName;
	    }
	    if (angle !== 0) {
	      textDivProperties.angle = angle * (180 / Math.PI);
	    }
	    if (geom.str.length > 1) {
	      if (style.vertical) {
	        textDivProperties.canvasWidth = geom.height * task._viewport.scale;
	      } else {
	        textDivProperties.canvasWidth = geom.width * task._viewport.scale;
	      }
	    }
	    task._textDivProperties.set(textDiv, textDivProperties);
	    if (task._enhanceTextSelection) {
	      var angleCos = 1,
	          angleSin = 0;
	      if (angle !== 0) {
	        angleCos = Math.cos(angle);
	        angleSin = Math.sin(angle);
	      }
	      var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
	      var divHeight = fontHeight;
	      var m, b;
	      if (angle !== 0) {
	        m = [angleCos, angleSin, -angleSin, angleCos, left, top];
	        b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);
	      } else {
	        b = [left, top, left + divWidth, top + divHeight];
	      }
	      task._bounds.push({
	        left: b[0],
	        top: b[1],
	        right: b[2],
	        bottom: b[3],
	        div: textDiv,
	        size: [divWidth, divHeight],
	        m: m
	      });
	    }
	  }
	  function render(task) {
	    if (task._canceled) {
	      return;
	    }
	    var textLayerFrag = task._container;
	    var textDivs = task._textDivs;
	    var capability = task._capability;
	    var textDivsLength = textDivs.length;
	    if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
	      task._renderingDone = true;
	      capability.resolve();
	      return;
	    }
	    var canvas = document.createElement('canvas');
	    canvas.mozOpaque = true;
	    var ctx = canvas.getContext('2d', { alpha: false });
	    var lastFontSize;
	    var lastFontFamily;
	    for (var i = 0; i < textDivsLength; i++) {
	      var textDiv = textDivs[i];
	      var textDivProperties = task._textDivProperties.get(textDiv);
	      if (textDivProperties.isWhitespace) {
	        continue;
	      }
	      var fontSize = textDiv.style.fontSize;
	      var fontFamily = textDiv.style.fontFamily;
	      if (fontSize !== lastFontSize || fontFamily !== lastFontFamily) {
	        ctx.font = fontSize + ' ' + fontFamily;
	        lastFontSize = fontSize;
	        lastFontFamily = fontFamily;
	      }
	      var width = ctx.measureText(textDiv.textContent).width;
	      textLayerFrag.appendChild(textDiv);
	      var transform = '';
	      if (textDivProperties.canvasWidth !== 0 && width > 0) {
	        textDivProperties.scale = textDivProperties.canvasWidth / width;
	        transform = 'scaleX(' + textDivProperties.scale + ')';
	      }
	      if (textDivProperties.angle !== 0) {
	        transform = 'rotate(' + textDivProperties.angle + 'deg) ' + transform;
	      }
	      if (transform !== '') {
	        textDivProperties.originalTransform = transform;
	        _dom_utils.CustomStyle.setProp('transform', textDiv, transform);
	      }
	      task._textDivProperties.set(textDiv, textDivProperties);
	    }
	    task._renderingDone = true;
	    capability.resolve();
	  }
	  function expand(task) {
	    var bounds = task._bounds;
	    var viewport = task._viewport;
	    var expanded = expandBounds(viewport.width, viewport.height, bounds);
	    for (var i = 0; i < expanded.length; i++) {
	      var div = bounds[i].div;
	      var divProperties = task._textDivProperties.get(div);
	      if (divProperties.angle === 0) {
	        divProperties.paddingLeft = bounds[i].left - expanded[i].left;
	        divProperties.paddingTop = bounds[i].top - expanded[i].top;
	        divProperties.paddingRight = expanded[i].right - bounds[i].right;
	        divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;
	        task._textDivProperties.set(div, divProperties);
	        continue;
	      }
	      var e = expanded[i],
	          b = bounds[i];
	      var m = b.m,
	          c = m[0],
	          s = m[1];
	      var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];
	      var ts = new Float64Array(64);
	      points.forEach(function (p, i) {
	        var t = _util.Util.applyTransform(p, m);
	        ts[i + 0] = c && (e.left - t[0]) / c;
	        ts[i + 4] = s && (e.top - t[1]) / s;
	        ts[i + 8] = c && (e.right - t[0]) / c;
	        ts[i + 12] = s && (e.bottom - t[1]) / s;
	        ts[i + 16] = s && (e.left - t[0]) / -s;
	        ts[i + 20] = c && (e.top - t[1]) / c;
	        ts[i + 24] = s && (e.right - t[0]) / -s;
	        ts[i + 28] = c && (e.bottom - t[1]) / c;
	        ts[i + 32] = c && (e.left - t[0]) / -c;
	        ts[i + 36] = s && (e.top - t[1]) / -s;
	        ts[i + 40] = c && (e.right - t[0]) / -c;
	        ts[i + 44] = s && (e.bottom - t[1]) / -s;
	        ts[i + 48] = s && (e.left - t[0]) / s;
	        ts[i + 52] = c && (e.top - t[1]) / -c;
	        ts[i + 56] = s && (e.right - t[0]) / s;
	        ts[i + 60] = c && (e.bottom - t[1]) / -c;
	      });
	      var findPositiveMin = function findPositiveMin(ts, offset, count) {
	        var result = 0;
	        for (var i = 0; i < count; i++) {
	          var t = ts[offset++];
	          if (t > 0) {
	            result = result ? Math.min(t, result) : t;
	          }
	        }
	        return result;
	      };
	      var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
	      divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
	      divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
	      divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
	      divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;
	      task._textDivProperties.set(div, divProperties);
	    }
	  }
	  function expandBounds(width, height, boxes) {
	    var bounds = boxes.map(function (box, i) {
	      return {
	        x1: box.left,
	        y1: box.top,
	        x2: box.right,
	        y2: box.bottom,
	        index: i,
	        x1New: undefined,
	        x2New: undefined
	      };
	    });
	    expandBoundsLTR(width, bounds);
	    var expanded = new Array(boxes.length);
	    bounds.forEach(function (b) {
	      var i = b.index;
	      expanded[i] = {
	        left: b.x1New,
	        top: 0,
	        right: b.x2New,
	        bottom: 0
	      };
	    });
	    boxes.map(function (box, i) {
	      var e = expanded[i],
	          b = bounds[i];
	      b.x1 = box.top;
	      b.y1 = width - e.right;
	      b.x2 = box.bottom;
	      b.y2 = width - e.left;
	      b.index = i;
	      b.x1New = undefined;
	      b.x2New = undefined;
	    });
	    expandBoundsLTR(height, bounds);
	    bounds.forEach(function (b) {
	      var i = b.index;
	      expanded[i].top = b.x1New;
	      expanded[i].bottom = b.x2New;
	    });
	    return expanded;
	  }
	  function expandBoundsLTR(width, bounds) {
	    bounds.sort(function (a, b) {
	      return a.x1 - b.x1 || a.index - b.index;
	    });
	    var fakeBoundary = {
	      x1: -Infinity,
	      y1: -Infinity,
	      x2: 0,
	      y2: Infinity,
	      index: -1,
	      x1New: 0,
	      x2New: 0
	    };
	    var horizon = [{
	      start: -Infinity,
	      end: Infinity,
	      boundary: fakeBoundary
	    }];
	    bounds.forEach(function (boundary) {
	      var i = 0;
	      while (i < horizon.length && horizon[i].end <= boundary.y1) {
	        i++;
	      }
	      var j = horizon.length - 1;
	      while (j >= 0 && horizon[j].start >= boundary.y2) {
	        j--;
	      }
	      var horizonPart, affectedBoundary;
	      var q,
	          k,
	          maxXNew = -Infinity;
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        var xNew;
	        if (affectedBoundary.x2 > boundary.x1) {
	          xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;
	        } else if (affectedBoundary.x2New === undefined) {
	          xNew = (affectedBoundary.x2 + boundary.x1) / 2;
	        } else {
	          xNew = affectedBoundary.x2New;
	        }
	        if (xNew > maxXNew) {
	          maxXNew = xNew;
	        }
	      }
	      boundary.x1New = maxXNew;
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        if (affectedBoundary.x2New === undefined) {
	          if (affectedBoundary.x2 > boundary.x1) {
	            if (affectedBoundary.index > boundary.index) {
	              affectedBoundary.x2New = affectedBoundary.x2;
	            }
	          } else {
	            affectedBoundary.x2New = maxXNew;
	          }
	        } else if (affectedBoundary.x2New > maxXNew) {
	          affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);
	        }
	      }
	      var changedHorizon = [],
	          lastBoundary = null;
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;
	        if (lastBoundary === useBoundary) {
	          changedHorizon[changedHorizon.length - 1].end = horizonPart.end;
	        } else {
	          changedHorizon.push({
	            start: horizonPart.start,
	            end: horizonPart.end,
	            boundary: useBoundary
	          });
	          lastBoundary = useBoundary;
	        }
	      }
	      if (horizon[i].start < boundary.y1) {
	        changedHorizon[0].start = boundary.y1;
	        changedHorizon.unshift({
	          start: horizon[i].start,
	          end: boundary.y1,
	          boundary: horizon[i].boundary
	        });
	      }
	      if (boundary.y2 < horizon[j].end) {
	        changedHorizon[changedHorizon.length - 1].end = boundary.y2;
	        changedHorizon.push({
	          start: boundary.y2,
	          end: horizon[j].end,
	          boundary: horizon[j].boundary
	        });
	      }
	      for (q = i; q <= j; q++) {
	        horizonPart = horizon[q];
	        affectedBoundary = horizonPart.boundary;
	        if (affectedBoundary.x2New !== undefined) {
	          continue;
	        }
	        var used = false;
	        for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {
	          used = horizon[k].boundary === affectedBoundary;
	        }
	        for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {
	          used = horizon[k].boundary === affectedBoundary;
	        }
	        for (k = 0; !used && k < changedHorizon.length; k++) {
	          used = changedHorizon[k].boundary === affectedBoundary;
	        }
	        if (!used) {
	          affectedBoundary.x2New = maxXNew;
	        }
	      }
	      Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));
	    });
	    horizon.forEach(function (horizonPart) {
	      var affectedBoundary = horizonPart.boundary;
	      if (affectedBoundary.x2New === undefined) {
	        affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);
	      }
	    });
	  }
	  function TextLayerRenderTask(textContent, container, viewport, textDivs, enhanceTextSelection) {
	    this._textContent = textContent;
	    this._container = container;
	    this._viewport = viewport;
	    this._textDivs = textDivs || [];
	    this._textDivProperties = new WeakMap();
	    this._renderingDone = false;
	    this._canceled = false;
	    this._capability = (0, _util.createPromiseCapability)();
	    this._renderTimer = null;
	    this._bounds = [];
	    this._enhanceTextSelection = !!enhanceTextSelection;
	  }
	  TextLayerRenderTask.prototype = {
	    get promise() {
	      return this._capability.promise;
	    },
	    cancel: function TextLayer_cancel() {
	      this._canceled = true;
	      if (this._renderTimer !== null) {
	        clearTimeout(this._renderTimer);
	        this._renderTimer = null;
	      }
	      this._capability.reject('canceled');
	    },
	    _render: function TextLayer_render(timeout) {
	      var _this = this;

	      var textItems = this._textContent.items;
	      var textStyles = this._textContent.styles;
	      for (var i = 0, len = textItems.length; i < len; i++) {
	        appendText(this, textItems[i], textStyles);
	      }
	      if (!timeout) {
	        render(this);
	      } else {
	        this._renderTimer = setTimeout(function () {
	          render(_this);
	          _this._renderTimer = null;
	        }, timeout);
	      }
	    },
	    expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {
	      if (!this._enhanceTextSelection || !this._renderingDone) {
	        return;
	      }
	      if (this._bounds !== null) {
	        expand(this);
	        this._bounds = null;
	      }
	      for (var i = 0, ii = this._textDivs.length; i < ii; i++) {
	        var div = this._textDivs[i];
	        var divProperties = this._textDivProperties.get(div);
	        if (divProperties.isWhitespace) {
	          continue;
	        }
	        if (expandDivs) {
	          var transform = '',
	              padding = '';
	          if (divProperties.scale !== 1) {
	            transform = 'scaleX(' + divProperties.scale + ')';
	          }
	          if (divProperties.angle !== 0) {
	            transform = 'rotate(' + divProperties.angle + 'deg) ' + transform;
	          }
	          if (divProperties.paddingLeft !== 0) {
	            padding += ' padding-left: ' + divProperties.paddingLeft / divProperties.scale + 'px;';
	            transform += ' translateX(' + -divProperties.paddingLeft / divProperties.scale + 'px)';
	          }
	          if (divProperties.paddingTop !== 0) {
	            padding += ' padding-top: ' + divProperties.paddingTop + 'px;';
	            transform += ' translateY(' + -divProperties.paddingTop + 'px)';
	          }
	          if (divProperties.paddingRight !== 0) {
	            padding += ' padding-right: ' + divProperties.paddingRight / divProperties.scale + 'px;';
	          }
	          if (divProperties.paddingBottom !== 0) {
	            padding += ' padding-bottom: ' + divProperties.paddingBottom + 'px;';
	          }
	          if (padding !== '') {
	            div.setAttribute('style', divProperties.style + padding);
	          }
	          if (transform !== '') {
	            _dom_utils.CustomStyle.setProp('transform', div, transform);
	          }
	        } else {
	          div.style.padding = 0;
	          _dom_utils.CustomStyle.setProp('transform', div, divProperties.originalTransform || '');
	        }
	      }
	    }
	  };
	  function renderTextLayer(renderParameters) {
	    var task = new TextLayerRenderTask(renderParameters.textContent, renderParameters.container, renderParameters.viewport, renderParameters.textDivs, renderParameters.enhanceTextSelection);
	    task._render(renderParameters.timeout);
	    return task;
	  }
	  return renderTextLayer;
	}();
	exports.renderTextLayer = renderTextLayer;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var g;
	g = function () {
	  return this;
	}();
	try {
	  g = g || Function("return this")() || (1, eval)("this");
	} catch (e) {
	  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	}
	module.exports = g;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Metadata = undefined;

	var _util = __w_pdfjs_require__(0);

	function fixMetadata(meta) {
	  return meta.replace(/>\\376\\377([^<]+)/g, function (all, codes) {
	    var bytes = codes.replace(/\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {
	      return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);
	    });
	    var chars = '';
	    for (var i = 0; i < bytes.length; i += 2) {
	      var code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);
	      chars += code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38 ? String.fromCharCode(code) : '&#x' + (0x10000 + code).toString(16).substring(1) + ';';
	    }
	    return '>' + chars;
	  });
	}
	function Metadata(meta) {
	  if (typeof meta === 'string') {
	    meta = fixMetadata(meta);
	    var parser = new DOMParser();
	    meta = parser.parseFromString(meta, 'application/xml');
	  } else if (!(meta instanceof Document)) {
	    (0, _util.error)('Metadata: Invalid metadata object');
	  }
	  this.metaDocument = meta;
	  this.metadata = Object.create(null);
	  this.parse();
	}
	Metadata.prototype = {
	  parse: function Metadata_parse() {
	    var doc = this.metaDocument;
	    var rdf = doc.documentElement;
	    if (rdf.nodeName.toLowerCase() !== 'rdf:rdf') {
	      rdf = rdf.firstChild;
	      while (rdf && rdf.nodeName.toLowerCase() !== 'rdf:rdf') {
	        rdf = rdf.nextSibling;
	      }
	    }
	    var nodeName = rdf ? rdf.nodeName.toLowerCase() : null;
	    if (!rdf || nodeName !== 'rdf:rdf' || !rdf.hasChildNodes()) {
	      return;
	    }
	    var children = rdf.childNodes,
	        desc,
	        entry,
	        name,
	        i,
	        ii,
	        length,
	        iLength;
	    for (i = 0, length = children.length; i < length; i++) {
	      desc = children[i];
	      if (desc.nodeName.toLowerCase() !== 'rdf:description') {
	        continue;
	      }
	      for (ii = 0, iLength = desc.childNodes.length; ii < iLength; ii++) {
	        if (desc.childNodes[ii].nodeName.toLowerCase() !== '#text') {
	          entry = desc.childNodes[ii];
	          name = entry.nodeName.toLowerCase();
	          this.metadata[name] = entry.textContent.trim();
	        }
	      }
	    }
	  },
	  get: function Metadata_get(name) {
	    return this.metadata[name] || null;
	  },
	  has: function Metadata_has(name) {
	    return typeof this.metadata[name] !== 'undefined';
	  }
	};
	exports.Metadata = Metadata;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.WebGLUtils = undefined;

	var _dom_utils = __w_pdfjs_require__(1);

	var _util = __w_pdfjs_require__(0);

	var WebGLUtils = function WebGLUtilsClosure() {
	  function loadShader(gl, code, shaderType) {
	    var shader = gl.createShader(shaderType);
	    gl.shaderSource(shader, code);
	    gl.compileShader(shader);
	    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
	    if (!compiled) {
	      var errorMsg = gl.getShaderInfoLog(shader);
	      throw new Error('Error during shader compilation: ' + errorMsg);
	    }
	    return shader;
	  }
	  function createVertexShader(gl, code) {
	    return loadShader(gl, code, gl.VERTEX_SHADER);
	  }
	  function createFragmentShader(gl, code) {
	    return loadShader(gl, code, gl.FRAGMENT_SHADER);
	  }
	  function createProgram(gl, shaders) {
	    var program = gl.createProgram();
	    for (var i = 0, ii = shaders.length; i < ii; ++i) {
	      gl.attachShader(program, shaders[i]);
	    }
	    gl.linkProgram(program);
	    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
	    if (!linked) {
	      var errorMsg = gl.getProgramInfoLog(program);
	      throw new Error('Error during program linking: ' + errorMsg);
	    }
	    return program;
	  }
	  function createTexture(gl, image, textureId) {
	    gl.activeTexture(textureId);
	    var texture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, texture);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
	    return texture;
	  }
	  var currentGL, currentCanvas;
	  function generateGL() {
	    if (currentGL) {
	      return;
	    }
	    currentCanvas = document.createElement('canvas');
	    currentGL = currentCanvas.getContext('webgl', { premultipliedalpha: false });
	  }
	  var smaskVertexShaderCode = '\
	  attribute vec2 a_position;                                    \
	  attribute vec2 a_texCoord;                                    \
	                                                                \
	  uniform vec2 u_resolution;                                    \
	                                                                \
	  varying vec2 v_texCoord;                                      \
	                                                                \
	  void main() {                                                 \
	    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \
	    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \
	                                                                \
	    v_texCoord = a_texCoord;                                    \
	  }                                                             ';
	  var smaskFragmentShaderCode = '\
	  precision mediump float;                                      \
	                                                                \
	  uniform vec4 u_backdrop;                                      \
	  uniform int u_subtype;                                        \
	  uniform sampler2D u_image;                                    \
	  uniform sampler2D u_mask;                                     \
	                                                                \
	  varying vec2 v_texCoord;                                      \
	                                                                \
	  void main() {                                                 \
	    vec4 imageColor = texture2D(u_image, v_texCoord);           \
	    vec4 maskColor = texture2D(u_mask, v_texCoord);             \
	    if (u_backdrop.a > 0.0) {                                   \
	      maskColor.rgb = maskColor.rgb * maskColor.a +             \
	                      u_backdrop.rgb * (1.0 - maskColor.a);     \
	    }                                                           \
	    float lum;                                                  \
	    if (u_subtype == 0) {                                       \
	      lum = maskColor.a;                                        \
	    } else {                                                    \
	      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \
	            maskColor.b * 0.11;                                 \
	    }                                                           \
	    imageColor.a *= lum;                                        \
	    imageColor.rgb *= imageColor.a;                             \
	    gl_FragColor = imageColor;                                  \
	  }                                                             ';
	  var smaskCache = null;
	  function initSmaskGL() {
	    var canvas, gl;
	    generateGL();
	    canvas = currentCanvas;
	    currentCanvas = null;
	    gl = currentGL;
	    currentGL = null;
	    var vertexShader = createVertexShader(gl, smaskVertexShaderCode);
	    var fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);
	    var program = createProgram(gl, [vertexShader, fragmentShader]);
	    gl.useProgram(program);
	    var cache = {};
	    cache.gl = gl;
	    cache.canvas = canvas;
	    cache.resolutionLocation = gl.getUniformLocation(program, 'u_resolution');
	    cache.positionLocation = gl.getAttribLocation(program, 'a_position');
	    cache.backdropLocation = gl.getUniformLocation(program, 'u_backdrop');
	    cache.subtypeLocation = gl.getUniformLocation(program, 'u_subtype');
	    var texCoordLocation = gl.getAttribLocation(program, 'a_texCoord');
	    var texLayerLocation = gl.getUniformLocation(program, 'u_image');
	    var texMaskLocation = gl.getUniformLocation(program, 'u_mask');
	    var texCoordBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(texCoordLocation);
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.uniform1i(texLayerLocation, 0);
	    gl.uniform1i(texMaskLocation, 1);
	    smaskCache = cache;
	  }
	  function composeSMask(layer, mask, properties) {
	    var width = layer.width,
	        height = layer.height;
	    if (!smaskCache) {
	      initSmaskGL();
	    }
	    var cache = smaskCache,
	        canvas = cache.canvas,
	        gl = cache.gl;
	    canvas.width = width;
	    canvas.height = height;
	    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	    gl.uniform2f(cache.resolutionLocation, width, height);
	    if (properties.backdrop) {
	      gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);
	    } else {
	      gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);
	    }
	    gl.uniform1i(cache.subtypeLocation, properties.subtype === 'Luminosity' ? 1 : 0);
	    var texture = createTexture(gl, layer, gl.TEXTURE0);
	    var maskTexture = createTexture(gl, mask, gl.TEXTURE1);
	    var buffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(cache.positionLocation);
	    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.clearColor(0, 0, 0, 0);
	    gl.enable(gl.BLEND);
	    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
	    gl.clear(gl.COLOR_BUFFER_BIT);
	    gl.drawArrays(gl.TRIANGLES, 0, 6);
	    gl.flush();
	    gl.deleteTexture(texture);
	    gl.deleteTexture(maskTexture);
	    gl.deleteBuffer(buffer);
	    return canvas;
	  }
	  var figuresVertexShaderCode = '\
	  attribute vec2 a_position;                                    \
	  attribute vec3 a_color;                                       \
	                                                                \
	  uniform vec2 u_resolution;                                    \
	  uniform vec2 u_scale;                                         \
	  uniform vec2 u_offset;                                        \
	                                                                \
	  varying vec4 v_color;                                         \
	                                                                \
	  void main() {                                                 \
	    vec2 position = (a_position + u_offset) * u_scale;          \
	    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \
	    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \
	                                                                \
	    v_color = vec4(a_color / 255.0, 1.0);                       \
	  }                                                             ';
	  var figuresFragmentShaderCode = '\
	  precision mediump float;                                      \
	                                                                \
	  varying vec4 v_color;                                         \
	                                                                \
	  void main() {                                                 \
	    gl_FragColor = v_color;                                     \
	  }                                                             ';
	  var figuresCache = null;
	  function initFiguresGL() {
	    var canvas, gl;
	    generateGL();
	    canvas = currentCanvas;
	    currentCanvas = null;
	    gl = currentGL;
	    currentGL = null;
	    var vertexShader = createVertexShader(gl, figuresVertexShaderCode);
	    var fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);
	    var program = createProgram(gl, [vertexShader, fragmentShader]);
	    gl.useProgram(program);
	    var cache = {};
	    cache.gl = gl;
	    cache.canvas = canvas;
	    cache.resolutionLocation = gl.getUniformLocation(program, 'u_resolution');
	    cache.scaleLocation = gl.getUniformLocation(program, 'u_scale');
	    cache.offsetLocation = gl.getUniformLocation(program, 'u_offset');
	    cache.positionLocation = gl.getAttribLocation(program, 'a_position');
	    cache.colorLocation = gl.getAttribLocation(program, 'a_color');
	    figuresCache = cache;
	  }
	  function drawFigures(width, height, backgroundColor, figures, context) {
	    if (!figuresCache) {
	      initFiguresGL();
	    }
	    var cache = figuresCache,
	        canvas = cache.canvas,
	        gl = cache.gl;
	    canvas.width = width;
	    canvas.height = height;
	    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	    gl.uniform2f(cache.resolutionLocation, width, height);
	    var count = 0;
	    var i, ii, rows;
	    for (i = 0, ii = figures.length; i < ii; i++) {
	      switch (figures[i].type) {
	        case 'lattice':
	          rows = figures[i].coords.length / figures[i].verticesPerRow | 0;
	          count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;
	          break;
	        case 'triangles':
	          count += figures[i].coords.length;
	          break;
	      }
	    }
	    var coords = new Float32Array(count * 2);
	    var colors = new Uint8Array(count * 3);
	    var coordsMap = context.coords,
	        colorsMap = context.colors;
	    var pIndex = 0,
	        cIndex = 0;
	    for (i = 0, ii = figures.length; i < ii; i++) {
	      var figure = figures[i],
	          ps = figure.coords,
	          cs = figure.colors;
	      switch (figure.type) {
	        case 'lattice':
	          var cols = figure.verticesPerRow;
	          rows = ps.length / cols | 0;
	          for (var row = 1; row < rows; row++) {
	            var offset = row * cols + 1;
	            for (var col = 1; col < cols; col++, offset++) {
	              coords[pIndex] = coordsMap[ps[offset - cols - 1]];
	              coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];
	              coords[pIndex + 2] = coordsMap[ps[offset - cols]];
	              coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];
	              coords[pIndex + 4] = coordsMap[ps[offset - 1]];
	              coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];
	              colors[cIndex] = colorsMap[cs[offset - cols - 1]];
	              colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];
	              colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];
	              colors[cIndex + 3] = colorsMap[cs[offset - cols]];
	              colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];
	              colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];
	              colors[cIndex + 6] = colorsMap[cs[offset - 1]];
	              colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];
	              colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];
	              coords[pIndex + 6] = coords[pIndex + 2];
	              coords[pIndex + 7] = coords[pIndex + 3];
	              coords[pIndex + 8] = coords[pIndex + 4];
	              coords[pIndex + 9] = coords[pIndex + 5];
	              coords[pIndex + 10] = coordsMap[ps[offset]];
	              coords[pIndex + 11] = coordsMap[ps[offset] + 1];
	              colors[cIndex + 9] = colors[cIndex + 3];
	              colors[cIndex + 10] = colors[cIndex + 4];
	              colors[cIndex + 11] = colors[cIndex + 5];
	              colors[cIndex + 12] = colors[cIndex + 6];
	              colors[cIndex + 13] = colors[cIndex + 7];
	              colors[cIndex + 14] = colors[cIndex + 8];
	              colors[cIndex + 15] = colorsMap[cs[offset]];
	              colors[cIndex + 16] = colorsMap[cs[offset] + 1];
	              colors[cIndex + 17] = colorsMap[cs[offset] + 2];
	              pIndex += 12;
	              cIndex += 18;
	            }
	          }
	          break;
	        case 'triangles':
	          for (var j = 0, jj = ps.length; j < jj; j++) {
	            coords[pIndex] = coordsMap[ps[j]];
	            coords[pIndex + 1] = coordsMap[ps[j] + 1];
	            colors[cIndex] = colorsMap[cs[j]];
	            colors[cIndex + 1] = colorsMap[cs[j] + 1];
	            colors[cIndex + 2] = colorsMap[cs[j] + 2];
	            pIndex += 2;
	            cIndex += 3;
	          }
	          break;
	      }
	    }
	    if (backgroundColor) {
	      gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);
	    } else {
	      gl.clearColor(0, 0, 0, 0);
	    }
	    gl.clear(gl.COLOR_BUFFER_BIT);
	    var coordsBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(cache.positionLocation);
	    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
	    var colorsBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(cache.colorLocation);
	    gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);
	    gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);
	    gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);
	    gl.drawArrays(gl.TRIANGLES, 0, count);
	    gl.flush();
	    gl.deleteBuffer(coordsBuffer);
	    gl.deleteBuffer(colorsBuffer);
	    return canvas;
	  }
	  function cleanup() {
	    if (smaskCache && smaskCache.canvas) {
	      smaskCache.canvas.width = 0;
	      smaskCache.canvas.height = 0;
	    }
	    if (figuresCache && figuresCache.canvas) {
	      figuresCache.canvas.width = 0;
	      figuresCache.canvas.height = 0;
	    }
	    smaskCache = null;
	    figuresCache = null;
	  }
	  return {
	    get isEnabled() {
	      if ((0, _dom_utils.getDefaultSetting)('disableWebGL')) {
	        return false;
	      }
	      var enabled = false;
	      try {
	        generateGL();
	        enabled = !!currentGL;
	      } catch (e) {}
	      return (0, _util.shadow)(this, 'isEnabled', enabled);
	    },
	    composeSMask: composeSMask,
	    drawFigures: drawFigures,
	    clear: cleanup
	  };
	}();
	exports.WebGLUtils = WebGLUtils;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PDFJS = exports.isWorker = exports.globalScope = undefined;

	var _api = __w_pdfjs_require__(3);

	var _dom_utils = __w_pdfjs_require__(1);

	var _util = __w_pdfjs_require__(0);

	var _annotation_layer = __w_pdfjs_require__(2);

	var _metadata = __w_pdfjs_require__(7);

	var _text_layer = __w_pdfjs_require__(5);

	var _svg = __w_pdfjs_require__(4);

	var isWorker = typeof window === 'undefined';
	if (!_util.globalScope.PDFJS) {
	  _util.globalScope.PDFJS = {};
	}
	var PDFJS = _util.globalScope.PDFJS;
	{
	  PDFJS.version = '1.8.355';
	  PDFJS.build = 'e9cbfbcc';
	}
	PDFJS.pdfBug = false;
	if (PDFJS.verbosity !== undefined) {
	  (0, _util.setVerbosityLevel)(PDFJS.verbosity);
	}
	delete PDFJS.verbosity;
	Object.defineProperty(PDFJS, 'verbosity', {
	  get: function get() {
	    return (0, _util.getVerbosityLevel)();
	  },
	  set: function set(level) {
	    (0, _util.setVerbosityLevel)(level);
	  },

	  enumerable: true,
	  configurable: true
	});
	PDFJS.VERBOSITY_LEVELS = _util.VERBOSITY_LEVELS;
	PDFJS.OPS = _util.OPS;
	PDFJS.UNSUPPORTED_FEATURES = _util.UNSUPPORTED_FEATURES;
	PDFJS.isValidUrl = _dom_utils.isValidUrl;
	PDFJS.shadow = _util.shadow;
	PDFJS.createBlob = _util.createBlob;
	PDFJS.createObjectURL = function PDFJS_createObjectURL(data, contentType) {
	  return (0, _util.createObjectURL)(data, contentType, PDFJS.disableCreateObjectURL);
	};
	Object.defineProperty(PDFJS, 'isLittleEndian', {
	  configurable: true,
	  get: function PDFJS_isLittleEndian() {
	    return (0, _util.shadow)(PDFJS, 'isLittleEndian', (0, _util.isLittleEndian)());
	  }
	});
	PDFJS.removeNullCharacters = _util.removeNullCharacters;
	PDFJS.PasswordResponses = _util.PasswordResponses;
	PDFJS.PasswordException = _util.PasswordException;
	PDFJS.UnknownErrorException = _util.UnknownErrorException;
	PDFJS.InvalidPDFException = _util.InvalidPDFException;
	PDFJS.MissingPDFException = _util.MissingPDFException;
	PDFJS.UnexpectedResponseException = _util.UnexpectedResponseException;
	PDFJS.Util = _util.Util;
	PDFJS.PageViewport = _util.PageViewport;
	PDFJS.createPromiseCapability = _util.createPromiseCapability;
	PDFJS.maxImageSize = PDFJS.maxImageSize === undefined ? -1 : PDFJS.maxImageSize;
	PDFJS.cMapUrl = PDFJS.cMapUrl === undefined ? null : PDFJS.cMapUrl;
	PDFJS.cMapPacked = PDFJS.cMapPacked === undefined ? false : PDFJS.cMapPacked;
	PDFJS.disableFontFace = PDFJS.disableFontFace === undefined ? false : PDFJS.disableFontFace;
	PDFJS.imageResourcesPath = PDFJS.imageResourcesPath === undefined ? '' : PDFJS.imageResourcesPath;
	PDFJS.disableWorker = PDFJS.disableWorker === undefined ? false : PDFJS.disableWorker;
	PDFJS.workerSrc = PDFJS.workerSrc === undefined ? null : PDFJS.workerSrc;
	PDFJS.workerPort = PDFJS.workerPort === undefined ? null : PDFJS.workerPort;
	PDFJS.disableRange = PDFJS.disableRange === undefined ? false : PDFJS.disableRange;
	PDFJS.disableStream = PDFJS.disableStream === undefined ? false : PDFJS.disableStream;
	PDFJS.disableAutoFetch = PDFJS.disableAutoFetch === undefined ? false : PDFJS.disableAutoFetch;
	PDFJS.pdfBug = PDFJS.pdfBug === undefined ? false : PDFJS.pdfBug;
	PDFJS.postMessageTransfers = PDFJS.postMessageTransfers === undefined ? true : PDFJS.postMessageTransfers;
	PDFJS.disableCreateObjectURL = PDFJS.disableCreateObjectURL === undefined ? false : PDFJS.disableCreateObjectURL;
	PDFJS.disableWebGL = PDFJS.disableWebGL === undefined ? true : PDFJS.disableWebGL;
	PDFJS.externalLinkTarget = PDFJS.externalLinkTarget === undefined ? _dom_utils.LinkTarget.NONE : PDFJS.externalLinkTarget;
	PDFJS.externalLinkRel = PDFJS.externalLinkRel === undefined ? _dom_utils.DEFAULT_LINK_REL : PDFJS.externalLinkRel;
	PDFJS.isEvalSupported = PDFJS.isEvalSupported === undefined ? true : PDFJS.isEvalSupported;
	PDFJS.pdfjsNext = PDFJS.pdfjsNext === undefined ? false : PDFJS.pdfjsNext;
	{
	  var savedOpenExternalLinksInNewWindow = PDFJS.openExternalLinksInNewWindow;
	  delete PDFJS.openExternalLinksInNewWindow;
	  Object.defineProperty(PDFJS, 'openExternalLinksInNewWindow', {
	    get: function get() {
	      return PDFJS.externalLinkTarget === _dom_utils.LinkTarget.BLANK;
	    },
	    set: function set(value) {
	      if (value) {
	        (0, _util.deprecated)('PDFJS.openExternalLinksInNewWindow, please use ' + '"PDFJS.externalLinkTarget = PDFJS.LinkTarget.BLANK" instead.');
	      }
	      if (PDFJS.externalLinkTarget !== _dom_utils.LinkTarget.NONE) {
	        (0, _util.warn)('PDFJS.externalLinkTarget is already initialized');
	        return;
	      }
	      PDFJS.externalLinkTarget = value ? _dom_utils.LinkTarget.BLANK : _dom_utils.LinkTarget.NONE;
	    },

	    enumerable: true,
	    configurable: true
	  });
	  if (savedOpenExternalLinksInNewWindow) {
	    PDFJS.openExternalLinksInNewWindow = savedOpenExternalLinksInNewWindow;
	  }
	}
	PDFJS.getDocument = _api.getDocument;
	PDFJS.LoopbackPort = _api.LoopbackPort;
	PDFJS.PDFDataRangeTransport = _api.PDFDataRangeTransport;
	PDFJS.PDFWorker = _api.PDFWorker;
	PDFJS.hasCanvasTypedArrays = true;
	PDFJS.CustomStyle = _dom_utils.CustomStyle;
	PDFJS.LinkTarget = _dom_utils.LinkTarget;
	PDFJS.addLinkAttributes = _dom_utils.addLinkAttributes;
	PDFJS.getFilenameFromUrl = _dom_utils.getFilenameFromUrl;
	PDFJS.isExternalLinkTargetSet = _dom_utils.isExternalLinkTargetSet;
	PDFJS.AnnotationLayer = _annotation_layer.AnnotationLayer;
	PDFJS.renderTextLayer = _text_layer.renderTextLayer;
	PDFJS.Metadata = _metadata.Metadata;
	PDFJS.SVGGraphics = _svg.SVGGraphics;
	PDFJS.UnsupportedManager = _api._UnsupportedManager;
	exports.globalScope = _util.globalScope;
	exports.isWorker = isWorker;
	exports.PDFJS = PDFJS;

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CanvasGraphics = undefined;

	var _util = __w_pdfjs_require__(0);

	var _pattern_helper = __w_pdfjs_require__(12);

	var _webgl = __w_pdfjs_require__(8);

	var MIN_FONT_SIZE = 16;
	var MAX_FONT_SIZE = 100;
	var MAX_GROUP_SIZE = 4096;
	var MIN_WIDTH_FACTOR = 0.65;
	var COMPILE_TYPE3_GLYPHS = true;
	var MAX_SIZE_TO_COMPILE = 1000;
	var FULL_CHUNK_HEIGHT = 16;
	var IsLittleEndianCached = {
	  get value() {
	    return (0, _util.shadow)(IsLittleEndianCached, 'value', (0, _util.isLittleEndian)());
	  }
	};
	function addContextCurrentTransform(ctx) {
	  if (!ctx.mozCurrentTransform) {
	    ctx._originalSave = ctx.save;
	    ctx._originalRestore = ctx.restore;
	    ctx._originalRotate = ctx.rotate;
	    ctx._originalScale = ctx.scale;
	    ctx._originalTranslate = ctx.translate;
	    ctx._originalTransform = ctx.transform;
	    ctx._originalSetTransform = ctx.setTransform;
	    ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];
	    ctx._transformStack = [];
	    Object.defineProperty(ctx, 'mozCurrentTransform', {
	      get: function getCurrentTransform() {
	        return this._transformMatrix;
	      }
	    });
	    Object.defineProperty(ctx, 'mozCurrentTransformInverse', {
	      get: function getCurrentTransformInverse() {
	        var m = this._transformMatrix;
	        var a = m[0],
	            b = m[1],
	            c = m[2],
	            d = m[3],
	            e = m[4],
	            f = m[5];
	        var ad_bc = a * d - b * c;
	        var bc_ad = b * c - a * d;
	        return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];
	      }
	    });
	    ctx.save = function ctxSave() {
	      var old = this._transformMatrix;
	      this._transformStack.push(old);
	      this._transformMatrix = old.slice(0, 6);
	      this._originalSave();
	    };
	    ctx.restore = function ctxRestore() {
	      var prev = this._transformStack.pop();
	      if (prev) {
	        this._transformMatrix = prev;
	        this._originalRestore();
	      }
	    };
	    ctx.translate = function ctxTranslate(x, y) {
	      var m = this._transformMatrix;
	      m[4] = m[0] * x + m[2] * y + m[4];
	      m[5] = m[1] * x + m[3] * y + m[5];
	      this._originalTranslate(x, y);
	    };
	    ctx.scale = function ctxScale(x, y) {
	      var m = this._transformMatrix;
	      m[0] = m[0] * x;
	      m[1] = m[1] * x;
	      m[2] = m[2] * y;
	      m[3] = m[3] * y;
	      this._originalScale(x, y);
	    };
	    ctx.transform = function ctxTransform(a, b, c, d, e, f) {
	      var m = this._transformMatrix;
	      this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];
	      ctx._originalTransform(a, b, c, d, e, f);
	    };
	    ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
	      this._transformMatrix = [a, b, c, d, e, f];
	      ctx._originalSetTransform(a, b, c, d, e, f);
	    };
	    ctx.rotate = function ctxRotate(angle) {
	      var cosValue = Math.cos(angle);
	      var sinValue = Math.sin(angle);
	      var m = this._transformMatrix;
	      this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];
	      this._originalRotate(angle);
	    };
	  }
	}
	var CachedCanvases = function CachedCanvasesClosure() {
	  function CachedCanvases(canvasFactory) {
	    this.canvasFactory = canvasFactory;
	    this.cache = Object.create(null);
	  }
	  CachedCanvases.prototype = {
	    getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {
	      var canvasEntry;
	      if (this.cache[id] !== undefined) {
	        canvasEntry = this.cache[id];
	        this.canvasFactory.reset(canvasEntry, width, height);
	        canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
	      } else {
	        canvasEntry = this.canvasFactory.create(width, height);
	        this.cache[id] = canvasEntry;
	      }
	      if (trackTransform) {
	        addContextCurrentTransform(canvasEntry.context);
	      }
	      return canvasEntry;
	    },
	    clear: function clear() {
	      for (var id in this.cache) {
	        var canvasEntry = this.cache[id];
	        this.canvasFactory.destroy(canvasEntry);
	        delete this.cache[id];
	      }
	    }
	  };
	  return CachedCanvases;
	}();
	function compileType3Glyph(imgData) {
	  var POINT_TO_PROCESS_LIMIT = 1000;
	  var width = imgData.width,
	      height = imgData.height;
	  var i,
	      j,
	      j0,
	      width1 = width + 1;
	  var points = new Uint8Array(width1 * (height + 1));
	  var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
	  var lineSize = width + 7 & ~7,
	      data0 = imgData.data;
	  var data = new Uint8Array(lineSize * height),
	      pos = 0,
	      ii;
	  for (i = 0, ii = data0.length; i < ii; i++) {
	    var mask = 128,
	        elem = data0[i];
	    while (mask > 0) {
	      data[pos++] = elem & mask ? 0 : 255;
	      mask >>= 1;
	    }
	  }
	  var count = 0;
	  pos = 0;
	  if (data[pos] !== 0) {
	    points[0] = 1;
	    ++count;
	  }
	  for (j = 1; j < width; j++) {
	    if (data[pos] !== data[pos + 1]) {
	      points[j] = data[pos] ? 2 : 1;
	      ++count;
	    }
	    pos++;
	  }
	  if (data[pos] !== 0) {
	    points[j] = 2;
	    ++count;
	  }
	  for (i = 1; i < height; i++) {
	    pos = i * lineSize;
	    j0 = i * width1;
	    if (data[pos - lineSize] !== data[pos]) {
	      points[j0] = data[pos] ? 1 : 8;
	      ++count;
	    }
	    var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
	    for (j = 1; j < width; j++) {
	      sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);
	      if (POINT_TYPES[sum]) {
	        points[j0 + j] = POINT_TYPES[sum];
	        ++count;
	      }
	      pos++;
	    }
	    if (data[pos - lineSize] !== data[pos]) {
	      points[j0 + j] = data[pos] ? 2 : 4;
	      ++count;
	    }
	    if (count > POINT_TO_PROCESS_LIMIT) {
	      return null;
	    }
	  }
	  pos = lineSize * (height - 1);
	  j0 = i * width1;
	  if (data[pos] !== 0) {
	    points[j0] = 8;
	    ++count;
	  }
	  for (j = 1; j < width; j++) {
	    if (data[pos] !== data[pos + 1]) {
	      points[j0 + j] = data[pos] ? 4 : 8;
	      ++count;
	    }
	    pos++;
	  }
	  if (data[pos] !== 0) {
	    points[j0 + j] = 4;
	    ++count;
	  }
	  if (count > POINT_TO_PROCESS_LIMIT) {
	    return null;
	  }
	  var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
	  var outlines = [];
	  for (i = 0; count && i <= height; i++) {
	    var p = i * width1;
	    var end = p + width;
	    while (p < end && !points[p]) {
	      p++;
	    }
	    if (p === end) {
	      continue;
	    }
	    var coords = [p % width1, i];
	    var type = points[p],
	        p0 = p,
	        pp;
	    do {
	      var step = steps[type];
	      do {
	        p += step;
	      } while (!points[p]);
	      pp = points[p];
	      if (pp !== 5 && pp !== 10) {
	        type = pp;
	        points[p] = 0;
	      } else {
	        type = pp & 0x33 * type >> 4;
	        points[p] &= type >> 2 | type << 2;
	      }
	      coords.push(p % width1);
	      coords.push(p / width1 | 0);
	      --count;
	    } while (p0 !== p);
	    outlines.push(coords);
	    --i;
	  }
	  var drawOutline = function drawOutline(c) {
	    c.save();
	    c.scale(1 / width, -1 / height);
	    c.translate(0, -height);
	    c.beginPath();
	    for (var i = 0, ii = outlines.length; i < ii; i++) {
	      var o = outlines[i];
	      c.moveTo(o[0], o[1]);
	      for (var j = 2, jj = o.length; j < jj; j += 2) {
	        c.lineTo(o[j], o[j + 1]);
	      }
	    }
	    c.fill();
	    c.beginPath();
	    c.restore();
	  };
	  return drawOutline;
	}
	var CanvasExtraState = function CanvasExtraStateClosure() {
	  function CanvasExtraState(old) {
	    this.alphaIsShape = false;
	    this.fontSize = 0;
	    this.fontSizeScale = 1;
	    this.textMatrix = _util.IDENTITY_MATRIX;
	    this.textMatrixScale = 1;
	    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
	    this.leading = 0;
	    this.x = 0;
	    this.y = 0;
	    this.lineX = 0;
	    this.lineY = 0;
	    this.charSpacing = 0;
	    this.wordSpacing = 0;
	    this.textHScale = 1;
	    this.textRenderingMode = _util.TextRenderingMode.FILL;
	    this.textRise = 0;
	    this.fillColor = '#000000';
	    this.strokeColor = '#000000';
	    this.patternFill = false;
	    this.fillAlpha = 1;
	    this.strokeAlpha = 1;
	    this.lineWidth = 1;
	    this.activeSMask = null;
	    this.resumeSMaskCtx = null;
	    this.old = old;
	  }
	  CanvasExtraState.prototype = {
	    clone: function CanvasExtraState_clone() {
	      return Object.create(this);
	    },
	    setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {
	      this.x = x;
	      this.y = y;
	    }
	  };
	  return CanvasExtraState;
	}();
	var CanvasGraphics = function CanvasGraphicsClosure() {
	  var EXECUTION_TIME = 15;
	  var EXECUTION_STEPS = 10;
	  function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, imageLayer) {
	    this.ctx = canvasCtx;
	    this.current = new CanvasExtraState();
	    this.stateStack = [];
	    this.pendingClip = null;
	    this.pendingEOFill = false;
	    this.res = null;
	    this.xobjs = null;
	    this.commonObjs = commonObjs;
	    this.objs = objs;
	    this.canvasFactory = canvasFactory;
	    this.imageLayer = imageLayer;
	    this.groupStack = [];
	    this.processingType3 = null;
	    this.baseTransform = null;
	    this.baseTransformStack = [];
	    this.groupLevel = 0;
	    this.smaskStack = [];
	    this.smaskCounter = 0;
	    this.tempSMask = null;
	    this.cachedCanvases = new CachedCanvases(this.canvasFactory);
	    if (canvasCtx) {
	      addContextCurrentTransform(canvasCtx);
	    }
	    this.cachedGetSinglePixelWidth = null;
	  }
	  function putBinaryImageData(ctx, imgData) {
	    if (typeof ImageData !== 'undefined' && imgData instanceof ImageData) {
	      ctx.putImageData(imgData, 0, 0);
	      return;
	    }
	    var height = imgData.height,
	        width = imgData.width;
	    var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
	    var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
	    var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
	    var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
	    var srcPos = 0,
	        destPos;
	    var src = imgData.data;
	    var dest = chunkImgData.data;
	    var i, j, thisChunkHeight, elemsInThisChunk;
	    if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
	      var srcLength = src.byteLength;
	      var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
	      var dest32DataLength = dest32.length;
	      var fullSrcDiff = width + 7 >> 3;
	      var white = 0xFFFFFFFF;
	      var black = IsLittleEndianCached.value ? 0xFF000000 : 0x000000FF;
	      for (i = 0; i < totalChunks; i++) {
	        thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
	        destPos = 0;
	        for (j = 0; j < thisChunkHeight; j++) {
	          var srcDiff = srcLength - srcPos;
	          var k = 0;
	          var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
	          var kEndUnrolled = kEnd & ~7;
	          var mask = 0;
	          var srcByte = 0;
	          for (; k < kEndUnrolled; k += 8) {
	            srcByte = src[srcPos++];
	            dest32[destPos++] = srcByte & 128 ? white : black;
	            dest32[destPos++] = srcByte & 64 ? white : black;
	            dest32[destPos++] = srcByte & 32 ? white : black;
	            dest32[destPos++] = srcByte & 16 ? white : black;
	            dest32[destPos++] = srcByte & 8 ? white : black;
	            dest32[destPos++] = srcByte & 4 ? white : black;
	            dest32[destPos++] = srcByte & 2 ? white : black;
	            dest32[destPos++] = srcByte & 1 ? white : black;
	          }
	          for (; k < kEnd; k++) {
	            if (mask === 0) {
	              srcByte = src[srcPos++];
	              mask = 128;
	            }
	            dest32[destPos++] = srcByte & mask ? white : black;
	            mask >>= 1;
	          }
	        }
	        while (destPos < dest32DataLength) {
	          dest32[destPos++] = 0;
	        }
	        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
	      }
	    } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
	      j = 0;
	      elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
	      for (i = 0; i < fullChunks; i++) {
	        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
	        srcPos += elemsInThisChunk;
	        ctx.putImageData(chunkImgData, 0, j);
	        j += FULL_CHUNK_HEIGHT;
	      }
	      if (i < totalChunks) {
	        elemsInThisChunk = width * partialChunkHeight * 4;
	        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
	        ctx.putImageData(chunkImgData, 0, j);
	      }
	    } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
	      thisChunkHeight = FULL_CHUNK_HEIGHT;
	      elemsInThisChunk = width * thisChunkHeight;
	      for (i = 0; i < totalChunks; i++) {
	        if (i >= fullChunks) {
	          thisChunkHeight = partialChunkHeight;
	          elemsInThisChunk = width * thisChunkHeight;
	        }
	        destPos = 0;
	        for (j = elemsInThisChunk; j--;) {
	          dest[destPos++] = src[srcPos++];
	          dest[destPos++] = src[srcPos++];
	          dest[destPos++] = src[srcPos++];
	          dest[destPos++] = 255;
	        }
	        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
	      }
	    } else {
	      (0, _util.error)('bad image kind: ' + imgData.kind);
	    }
	  }
	  function putBinaryImageMask(ctx, imgData) {
	    var height = imgData.height,
	        width = imgData.width;
	    var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
	    var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
	    var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
	    var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
	    var srcPos = 0;
	    var src = imgData.data;
	    var dest = chunkImgData.data;
	    for (var i = 0; i < totalChunks; i++) {
	      var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
	      var destPos = 3;
	      for (var j = 0; j < thisChunkHeight; j++) {
	        var mask = 0;
	        for (var k = 0; k < width; k++) {
	          if (!mask) {
	            var elem = src[srcPos++];
	            mask = 128;
	          }
	          dest[destPos] = elem & mask ? 0 : 255;
	          destPos += 4;
	          mask >>= 1;
	        }
	      }
	      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
	    }
	  }
	  function copyCtxState(sourceCtx, destCtx) {
	    var properties = ['strokeStyle', 'fillStyle', 'fillRule', 'globalAlpha', 'lineWidth', 'lineCap', 'lineJoin', 'miterLimit', 'globalCompositeOperation', 'font'];
	    for (var i = 0, ii = properties.length; i < ii; i++) {
	      var property = properties[i];
	      if (sourceCtx[property] !== undefined) {
	        destCtx[property] = sourceCtx[property];
	      }
	    }
	    if (sourceCtx.setLineDash !== undefined) {
	      destCtx.setLineDash(sourceCtx.getLineDash());
	      destCtx.lineDashOffset = sourceCtx.lineDashOffset;
	    }
	  }
	  function composeSMaskBackdrop(bytes, r0, g0, b0) {
	    var length = bytes.length;
	    for (var i = 3; i < length; i += 4) {
	      var alpha = bytes[i];
	      if (alpha === 0) {
	        bytes[i - 3] = r0;
	        bytes[i - 2] = g0;
	        bytes[i - 1] = b0;
	      } else if (alpha < 255) {
	        var alpha_ = 255 - alpha;
	        bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
	        bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
	        bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
	      }
	    }
	  }
	  function composeSMaskAlpha(maskData, layerData, transferMap) {
	    var length = maskData.length;
	    var scale = 1 / 255;
	    for (var i = 3; i < length; i += 4) {
	      var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
	      layerData[i] = layerData[i] * alpha * scale | 0;
	    }
	  }
	  function composeSMaskLuminosity(maskData, layerData, transferMap) {
	    var length = maskData.length;
	    for (var i = 3; i < length; i += 4) {
	      var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
	      layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
	    }
	  }
	  function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {
	    var hasBackdrop = !!backdrop;
	    var r0 = hasBackdrop ? backdrop[0] : 0;
	    var g0 = hasBackdrop ? backdrop[1] : 0;
	    var b0 = hasBackdrop ? backdrop[2] : 0;
	    var composeFn;
	    if (subtype === 'Luminosity') {
	      composeFn = composeSMaskLuminosity;
	    } else {
	      composeFn = composeSMaskAlpha;
	    }
	    var PIXELS_TO_PROCESS = 1048576;
	    var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
	    for (var row = 0; row < height; row += chunkSize) {
	      var chunkHeight = Math.min(chunkSize, height - row);
	      var maskData = maskCtx.getImageData(0, row, width, chunkHeight);
	      var layerData = layerCtx.getImageData(0, row, width, chunkHeight);
	      if (hasBackdrop) {
	        composeSMaskBackdrop(maskData.data, r0, g0, b0);
	      }
	      composeFn(maskData.data, layerData.data, transferMap);
	      maskCtx.putImageData(layerData, 0, row);
	    }
	  }
	  function composeSMask(ctx, smask, layerCtx) {
	    var mask = smask.canvas;
	    var maskCtx = smask.context;
	    ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);
	    var backdrop = smask.backdrop || null;
	    if (!smask.transferMap && _webgl.WebGLUtils.isEnabled) {
	      var composed = _webgl.WebGLUtils.composeSMask(layerCtx.canvas, mask, {
	        subtype: smask.subtype,
	        backdrop: backdrop
	      });
	      ctx.setTransform(1, 0, 0, 1, 0, 0);
	      ctx.drawImage(composed, smask.offsetX, smask.offsetY);
	      return;
	    }
	    genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);
	    ctx.drawImage(mask, 0, 0);
	  }
	  var LINE_CAP_STYLES = ['butt', 'round', 'square'];
	  var LINE_JOIN_STYLES = ['miter', 'round', 'bevel'];
	  var NORMAL_CLIP = {};
	  var EO_CLIP = {};
	  CanvasGraphics.prototype = {
	    beginDrawing: function CanvasGraphics_beginDrawing(transform, viewport, transparency) {
	      var width = this.ctx.canvas.width;
	      var height = this.ctx.canvas.height;
	      this.ctx.save();
	      this.ctx.fillStyle = 'rgb(255, 255, 255)';
	      this.ctx.fillRect(0, 0, width, height);
	      this.ctx.restore();
	      if (transparency) {
	        var transparentCanvas = this.cachedCanvases.getCanvas('transparent', width, height, true);
	        this.compositeCtx = this.ctx;
	        this.transparentCanvas = transparentCanvas.canvas;
	        this.ctx = transparentCanvas.context;
	        this.ctx.save();
	        this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
	      }
	      this.ctx.save();
	      if (transform) {
	        this.ctx.transform.apply(this.ctx, transform);
	      }
	      this.ctx.transform.apply(this.ctx, viewport.transform);
	      this.baseTransform = this.ctx.mozCurrentTransform.slice();
	      if (this.imageLayer) {
	        this.imageLayer.beginLayout();
	      }
	    },
	    executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
	      var argsArray = operatorList.argsArray;
	      var fnArray = operatorList.fnArray;
	      var i = executionStartIdx || 0;
	      var argsArrayLen = argsArray.length;
	      if (argsArrayLen === i) {
	        return i;
	      }
	      var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === 'function';
	      var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
	      var steps = 0;
	      var commonObjs = this.commonObjs;
	      var objs = this.objs;
	      var fnId;
	      while (true) {
	        if (stepper !== undefined && i === stepper.nextBreakPoint) {
	          stepper.breakIt(i, continueCallback);
	          return i;
	        }
	        fnId = fnArray[i];
	        if (fnId !== _util.OPS.dependency) {
	          this[fnId].apply(this, argsArray[i]);
	        } else {
	          var deps = argsArray[i];
	          for (var n = 0, nn = deps.length; n < nn; n++) {
	            var depObjId = deps[n];
	            var common = depObjId[0] === 'g' && depObjId[1] === '_';
	            var objsPool = common ? commonObjs : objs;
	            if (!objsPool.isResolved(depObjId)) {
	              objsPool.get(depObjId, continueCallback);
	              return i;
	            }
	          }
	        }
	        i++;
	        if (i === argsArrayLen) {
	          return i;
	        }
	        if (chunkOperations && ++steps > EXECUTION_STEPS) {
	          if (Date.now() > endTime) {
	            continueCallback();
	            return i;
	          }
	          steps = 0;
	        }
	      }
	    },
	    endDrawing: function CanvasGraphics_endDrawing() {
	      if (this.current.activeSMask !== null) {
	        this.endSMaskGroup();
	      }
	      this.ctx.restore();
	      if (this.transparentCanvas) {
	        this.ctx = this.compositeCtx;
	        this.ctx.save();
	        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
	        this.ctx.drawImage(this.transparentCanvas, 0, 0);
	        this.ctx.restore();
	        this.transparentCanvas = null;
	      }
	      this.cachedCanvases.clear();
	      _webgl.WebGLUtils.clear();
	      if (this.imageLayer) {
	        this.imageLayer.endLayout();
	      }
	    },
	    setLineWidth: function CanvasGraphics_setLineWidth(width) {
	      this.current.lineWidth = width;
	      this.ctx.lineWidth = width;
	    },
	    setLineCap: function CanvasGraphics_setLineCap(style) {
	      this.ctx.lineCap = LINE_CAP_STYLES[style];
	    },
	    setLineJoin: function CanvasGraphics_setLineJoin(style) {
	      this.ctx.lineJoin = LINE_JOIN_STYLES[style];
	    },
	    setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {
	      this.ctx.miterLimit = limit;
	    },
	    setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {
	      var ctx = this.ctx;
	      if (ctx.setLineDash !== undefined) {
	        ctx.setLineDash(dashArray);
	        ctx.lineDashOffset = dashPhase;
	      }
	    },
	    setRenderingIntent: function CanvasGraphics_setRenderingIntent(intent) {},
	    setFlatness: function CanvasGraphics_setFlatness(flatness) {},
	    setGState: function CanvasGraphics_setGState(states) {
	      for (var i = 0, ii = states.length; i < ii; i++) {
	        var state = states[i];
	        var key = state[0];
	        var value = state[1];
	        switch (key) {
	          case 'LW':
	            this.setLineWidth(value);
	            break;
	          case 'LC':
	            this.setLineCap(value);
	            break;
	          case 'LJ':
	            this.setLineJoin(value);
	            break;
	          case 'ML':
	            this.setMiterLimit(value);
	            break;
	          case 'D':
	            this.setDash(value[0], value[1]);
	            break;
	          case 'RI':
	            this.setRenderingIntent(value);
	            break;
	          case 'FL':
	            this.setFlatness(value);
	            break;
	          case 'Font':
	            this.setFont(value[0], value[1]);
	            break;
	          case 'CA':
	            this.current.strokeAlpha = state[1];
	            break;
	          case 'ca':
	            this.current.fillAlpha = state[1];
	            this.ctx.globalAlpha = state[1];
	            break;
	          case 'BM':
	            this.ctx.globalCompositeOperation = value;
	            break;
	          case 'SMask':
	            if (this.current.activeSMask) {
	              if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {
	                this.suspendSMaskGroup();
	              } else {
	                this.endSMaskGroup();
	              }
	            }
	            this.current.activeSMask = value ? this.tempSMask : null;
	            if (this.current.activeSMask) {
	              this.beginSMaskGroup();
	            }
	            this.tempSMask = null;
	            break;
	        }
	      }
	    },
	    beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {
	      var activeSMask = this.current.activeSMask;
	      var drawnWidth = activeSMask.canvas.width;
	      var drawnHeight = activeSMask.canvas.height;
	      var cacheId = 'smaskGroupAt' + this.groupLevel;
	      var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
	      var currentCtx = this.ctx;
	      var currentTransform = currentCtx.mozCurrentTransform;
	      this.ctx.save();
	      var groupCtx = scratchCanvas.context;
	      groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);
	      groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);
	      groupCtx.transform.apply(groupCtx, currentTransform);
	      activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;
	      copyCtxState(currentCtx, groupCtx);
	      this.ctx = groupCtx;
	      this.setGState([['BM', 'source-over'], ['ca', 1], ['CA', 1]]);
	      this.groupStack.push(currentCtx);
	      this.groupLevel++;
	    },
	    suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {
	      var groupCtx = this.ctx;
	      this.groupLevel--;
	      this.ctx = this.groupStack.pop();
	      composeSMask(this.ctx, this.current.activeSMask, groupCtx);
	      this.ctx.restore();
	      this.ctx.save();
	      copyCtxState(groupCtx, this.ctx);
	      this.current.resumeSMaskCtx = groupCtx;
	      var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);
	      this.ctx.transform.apply(this.ctx, deltaTransform);
	      groupCtx.save();
	      groupCtx.setTransform(1, 0, 0, 1, 0, 0);
	      groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);
	      groupCtx.restore();
	    },
	    resumeSMaskGroup: function CanvasGraphics_endSMaskGroup() {
	      var groupCtx = this.current.resumeSMaskCtx;
	      var currentCtx = this.ctx;
	      this.ctx = groupCtx;
	      this.groupStack.push(currentCtx);
	      this.groupLevel++;
	    },
	    endSMaskGroup: function CanvasGraphics_endSMaskGroup() {
	      var groupCtx = this.ctx;
	      this.groupLevel--;
	      this.ctx = this.groupStack.pop();
	      composeSMask(this.ctx, this.current.activeSMask, groupCtx);
	      this.ctx.restore();
	      copyCtxState(groupCtx, this.ctx);
	      var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);
	      this.ctx.transform.apply(this.ctx, deltaTransform);
	    },
	    save: function CanvasGraphics_save() {
	      this.ctx.save();
	      var old = this.current;
	      this.stateStack.push(old);
	      this.current = old.clone();
	      this.current.resumeSMaskCtx = null;
	    },
	    restore: function CanvasGraphics_restore() {
	      if (this.current.resumeSMaskCtx) {
	        this.resumeSMaskGroup();
	      }
	      if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {
	        this.endSMaskGroup();
	      }
	      if (this.stateStack.length !== 0) {
	        this.current = this.stateStack.pop();
	        this.ctx.restore();
	        this.pendingClip = null;
	        this.cachedGetSinglePixelWidth = null;
	      }
	    },
	    transform: function CanvasGraphics_transform(a, b, c, d, e, f) {
	      this.ctx.transform(a, b, c, d, e, f);
	      this.cachedGetSinglePixelWidth = null;
	    },
	    constructPath: function CanvasGraphics_constructPath(ops, args) {
	      var ctx = this.ctx;
	      var current = this.current;
	      var x = current.x,
	          y = current.y;
	      for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
	        switch (ops[i] | 0) {
	          case _util.OPS.rectangle:
	            x = args[j++];
	            y = args[j++];
	            var width = args[j++];
	            var height = args[j++];
	            if (width === 0) {
	              width = this.getSinglePixelWidth();
	            }
	            if (height === 0) {
	              height = this.getSinglePixelWidth();
	            }
	            var xw = x + width;
	            var yh = y + height;
	            this.ctx.moveTo(x, y);
	            this.ctx.lineTo(xw, y);
	            this.ctx.lineTo(xw, yh);
	            this.ctx.lineTo(x, yh);
	            this.ctx.lineTo(x, y);
	            this.ctx.closePath();
	            break;
	          case _util.OPS.moveTo:
	            x = args[j++];
	            y = args[j++];
	            ctx.moveTo(x, y);
	            break;
	          case _util.OPS.lineTo:
	            x = args[j++];
	            y = args[j++];
	            ctx.lineTo(x, y);
	            break;
	          case _util.OPS.curveTo:
	            x = args[j + 4];
	            y = args[j + 5];
	            ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
	            j += 6;
	            break;
	          case _util.OPS.curveTo2:
	            ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
	            x = args[j + 2];
	            y = args[j + 3];
	            j += 4;
	            break;
	          case _util.OPS.curveTo3:
	            x = args[j + 2];
	            y = args[j + 3];
	            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
	            j += 4;
	            break;
	          case _util.OPS.closePath:
	            ctx.closePath();
	            break;
	        }
	      }
	      current.setCurrentPoint(x, y);
	    },
	    closePath: function CanvasGraphics_closePath() {
	      this.ctx.closePath();
	    },
	    stroke: function CanvasGraphics_stroke(consumePath) {
	      consumePath = typeof consumePath !== 'undefined' ? consumePath : true;
	      var ctx = this.ctx;
	      var strokeColor = this.current.strokeColor;
	      ctx.lineWidth = Math.max(this.getSinglePixelWidth() * MIN_WIDTH_FACTOR, this.current.lineWidth);
	      ctx.globalAlpha = this.current.strokeAlpha;
	      if (strokeColor && strokeColor.hasOwnProperty('type') && strokeColor.type === 'Pattern') {
	        ctx.save();
	        ctx.strokeStyle = strokeColor.getPattern(ctx, this);
	        ctx.stroke();
	        ctx.restore();
	      } else {
	        ctx.stroke();
	      }
	      if (consumePath) {
	        this.consumePath();
	      }
	      ctx.globalAlpha = this.current.fillAlpha;
	    },
	    closeStroke: function CanvasGraphics_closeStroke() {
	      this.closePath();
	      this.stroke();
	    },
	    fill: function CanvasGraphics_fill(consumePath) {
	      consumePath = typeof consumePath !== 'undefined' ? consumePath : true;
	      var ctx = this.ctx;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      var needRestore = false;
	      if (isPatternFill) {
	        ctx.save();
	        if (this.baseTransform) {
	          ctx.setTransform.apply(ctx, this.baseTransform);
	        }
	        ctx.fillStyle = fillColor.getPattern(ctx, this);
	        needRestore = true;
	      }
	      if (this.pendingEOFill) {
	        ctx.fill('evenodd');
	        this.pendingEOFill = false;
	      } else {
	        ctx.fill();
	      }
	      if (needRestore) {
	        ctx.restore();
	      }
	      if (consumePath) {
	        this.consumePath();
	      }
	    },
	    eoFill: function CanvasGraphics_eoFill() {
	      this.pendingEOFill = true;
	      this.fill();
	    },
	    fillStroke: function CanvasGraphics_fillStroke() {
	      this.fill(false);
	      this.stroke(false);
	      this.consumePath();
	    },
	    eoFillStroke: function CanvasGraphics_eoFillStroke() {
	      this.pendingEOFill = true;
	      this.fillStroke();
	    },
	    closeFillStroke: function CanvasGraphics_closeFillStroke() {
	      this.closePath();
	      this.fillStroke();
	    },
	    closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {
	      this.pendingEOFill = true;
	      this.closePath();
	      this.fillStroke();
	    },
	    endPath: function CanvasGraphics_endPath() {
	      this.consumePath();
	    },
	    clip: function CanvasGraphics_clip() {
	      this.pendingClip = NORMAL_CLIP;
	    },
	    eoClip: function CanvasGraphics_eoClip() {
	      this.pendingClip = EO_CLIP;
	    },
	    beginText: function CanvasGraphics_beginText() {
	      this.current.textMatrix = _util.IDENTITY_MATRIX;
	      this.current.textMatrixScale = 1;
	      this.current.x = this.current.lineX = 0;
	      this.current.y = this.current.lineY = 0;
	    },
	    endText: function CanvasGraphics_endText() {
	      var paths = this.pendingTextPaths;
	      var ctx = this.ctx;
	      if (paths === undefined) {
	        ctx.beginPath();
	        return;
	      }
	      ctx.save();
	      ctx.beginPath();
	      for (var i = 0; i < paths.length; i++) {
	        var path = paths[i];
	        ctx.setTransform.apply(ctx, path.transform);
	        ctx.translate(path.x, path.y);
	        path.addToPath(ctx, path.fontSize);
	      }
	      ctx.restore();
	      ctx.clip();
	      ctx.beginPath();
	      delete this.pendingTextPaths;
	    },
	    setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {
	      this.current.charSpacing = spacing;
	    },
	    setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {
	      this.current.wordSpacing = spacing;
	    },
	    setHScale: function CanvasGraphics_setHScale(scale) {
	      this.current.textHScale = scale / 100;
	    },
	    setLeading: function CanvasGraphics_setLeading(leading) {
	      this.current.leading = -leading;
	    },
	    setFont: function CanvasGraphics_setFont(fontRefName, size) {
	      var fontObj = this.commonObjs.get(fontRefName);
	      var current = this.current;
	      if (!fontObj) {
	        (0, _util.error)('Can\'t find font for ' + fontRefName);
	      }
	      current.fontMatrix = fontObj.fontMatrix ? fontObj.fontMatrix : _util.FONT_IDENTITY_MATRIX;
	      if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
	        (0, _util.warn)('Invalid font matrix for font ' + fontRefName);
	      }
	      if (size < 0) {
	        size = -size;
	        current.fontDirection = -1;
	      } else {
	        current.fontDirection = 1;
	      }
	      this.current.font = fontObj;
	      this.current.fontSize = size;
	      if (fontObj.isType3Font) {
	        return;
	      }
	      var name = fontObj.loadedName || 'sans-serif';
	      var bold = fontObj.black ? '900' : fontObj.bold ? 'bold' : 'normal';
	      var italic = fontObj.italic ? 'italic' : 'normal';
	      var typeface = '"' + name + '", ' + fontObj.fallbackName;
	      var browserFontSize = size < MIN_FONT_SIZE ? MIN_FONT_SIZE : size > MAX_FONT_SIZE ? MAX_FONT_SIZE : size;
	      this.current.fontSizeScale = size / browserFontSize;
	      var rule = italic + ' ' + bold + ' ' + browserFontSize + 'px ' + typeface;
	      this.ctx.font = rule;
	    },
	    setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {
	      this.current.textRenderingMode = mode;
	    },
	    setTextRise: function CanvasGraphics_setTextRise(rise) {
	      this.current.textRise = rise;
	    },
	    moveText: function CanvasGraphics_moveText(x, y) {
	      this.current.x = this.current.lineX += x;
	      this.current.y = this.current.lineY += y;
	    },
	    setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {
	      this.setLeading(-y);
	      this.moveText(x, y);
	    },
	    setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {
	      this.current.textMatrix = [a, b, c, d, e, f];
	      this.current.textMatrixScale = Math.sqrt(a * a + b * b);
	      this.current.x = this.current.lineX = 0;
	      this.current.y = this.current.lineY = 0;
	    },
	    nextLine: function CanvasGraphics_nextLine() {
	      this.moveText(0, this.current.leading);
	    },
	    paintChar: function CanvasGraphics_paintChar(character, x, y) {
	      var ctx = this.ctx;
	      var current = this.current;
	      var font = current.font;
	      var textRenderingMode = current.textRenderingMode;
	      var fontSize = current.fontSize / current.fontSizeScale;
	      var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
	      var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
	      var addToPath;
	      if (font.disableFontFace || isAddToPathSet) {
	        addToPath = font.getPathGenerator(this.commonObjs, character);
	      }
	      if (font.disableFontFace) {
	        ctx.save();
	        ctx.translate(x, y);
	        ctx.beginPath();
	        addToPath(ctx, fontSize);
	        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.fill();
	        }
	        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.stroke();
	        }
	        ctx.restore();
	      } else {
	        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.fillText(character, x, y);
	        }
	        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          ctx.strokeText(character, x, y);
	        }
	      }
	      if (isAddToPathSet) {
	        var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
	        paths.push({
	          transform: ctx.mozCurrentTransform,
	          x: x,
	          y: y,
	          fontSize: fontSize,
	          addToPath: addToPath
	        });
	      }
	    },
	    get isFontSubpixelAAEnabled() {
	      var ctx = this.canvasFactory.create(10, 10).context;
	      ctx.scale(1.5, 1);
	      ctx.fillText('I', 0, 10);
	      var data = ctx.getImageData(0, 0, 10, 10).data;
	      var enabled = false;
	      for (var i = 3; i < data.length; i += 4) {
	        if (data[i] > 0 && data[i] < 255) {
	          enabled = true;
	          break;
	        }
	      }
	      return (0, _util.shadow)(this, 'isFontSubpixelAAEnabled', enabled);
	    },
	    showText: function CanvasGraphics_showText(glyphs) {
	      var current = this.current;
	      var font = current.font;
	      if (font.isType3Font) {
	        return this.showType3Text(glyphs);
	      }
	      var fontSize = current.fontSize;
	      if (fontSize === 0) {
	        return;
	      }
	      var ctx = this.ctx;
	      var fontSizeScale = current.fontSizeScale;
	      var charSpacing = current.charSpacing;
	      var wordSpacing = current.wordSpacing;
	      var fontDirection = current.fontDirection;
	      var textHScale = current.textHScale * fontDirection;
	      var glyphsLength = glyphs.length;
	      var vertical = font.vertical;
	      var spacingDir = vertical ? 1 : -1;
	      var defaultVMetrics = font.defaultVMetrics;
	      var widthAdvanceScale = fontSize * current.fontMatrix[0];
	      var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace;
	      ctx.save();
	      ctx.transform.apply(ctx, current.textMatrix);
	      ctx.translate(current.x, current.y + current.textRise);
	      if (current.patternFill) {
	        ctx.fillStyle = current.fillColor.getPattern(ctx, this);
	      }
	      if (fontDirection > 0) {
	        ctx.scale(textHScale, -1);
	      } else {
	        ctx.scale(textHScale, 1);
	      }
	      var lineWidth = current.lineWidth;
	      var scale = current.textMatrixScale;
	      if (scale === 0 || lineWidth === 0) {
	        var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
	        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
	          this.cachedGetSinglePixelWidth = null;
	          lineWidth = this.getSinglePixelWidth() * MIN_WIDTH_FACTOR;
	        }
	      } else {
	        lineWidth /= scale;
	      }
	      if (fontSizeScale !== 1.0) {
	        ctx.scale(fontSizeScale, fontSizeScale);
	        lineWidth /= fontSizeScale;
	      }
	      ctx.lineWidth = lineWidth;
	      var x = 0,
	          i;
	      for (i = 0; i < glyphsLength; ++i) {
	        var glyph = glyphs[i];
	        if ((0, _util.isNum)(glyph)) {
	          x += spacingDir * glyph * fontSize / 1000;
	          continue;
	        }
	        var restoreNeeded = false;
	        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
	        var character = glyph.fontChar;
	        var accent = glyph.accent;
	        var scaledX, scaledY, scaledAccentX, scaledAccentY;
	        var width = glyph.width;
	        if (vertical) {
	          var vmetric, vx, vy;
	          vmetric = glyph.vmetric || defaultVMetrics;
	          vx = glyph.vmetric ? vmetric[1] : width * 0.5;
	          vx = -vx * widthAdvanceScale;
	          vy = vmetric[2] * widthAdvanceScale;
	          width = vmetric ? -vmetric[0] : width;
	          scaledX = vx / fontSizeScale;
	          scaledY = (x + vy) / fontSizeScale;
	        } else {
	          scaledX = x / fontSizeScale;
	          scaledY = 0;
	        }
	        if (font.remeasure && width > 0) {
	          var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;
	          if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
	            var characterScaleX = width / measuredWidth;
	            restoreNeeded = true;
	            ctx.save();
	            ctx.scale(characterScaleX, 1);
	            scaledX /= characterScaleX;
	          } else if (width !== measuredWidth) {
	            scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;
	          }
	        }
	        if (glyph.isInFont || font.missingFile) {
	          if (simpleFillText && !accent) {
	            ctx.fillText(character, scaledX, scaledY);
	          } else {
	            this.paintChar(character, scaledX, scaledY);
	            if (accent) {
	              scaledAccentX = scaledX + accent.offset.x / fontSizeScale;
	              scaledAccentY = scaledY - accent.offset.y / fontSizeScale;
	              this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY);
	            }
	          }
	        }
	        var charWidth = width * widthAdvanceScale + spacing * fontDirection;
	        x += charWidth;
	        if (restoreNeeded) {
	          ctx.restore();
	        }
	      }
	      if (vertical) {
	        current.y -= x * textHScale;
	      } else {
	        current.x += x * textHScale;
	      }
	      ctx.restore();
	    },
	    showType3Text: function CanvasGraphics_showType3Text(glyphs) {
	      var ctx = this.ctx;
	      var current = this.current;
	      var font = current.font;
	      var fontSize = current.fontSize;
	      var fontDirection = current.fontDirection;
	      var spacingDir = font.vertical ? 1 : -1;
	      var charSpacing = current.charSpacing;
	      var wordSpacing = current.wordSpacing;
	      var textHScale = current.textHScale * fontDirection;
	      var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
	      var glyphsLength = glyphs.length;
	      var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
	      var i, glyph, width, spacingLength;
	      if (isTextInvisible || fontSize === 0) {
	        return;
	      }
	      this.cachedGetSinglePixelWidth = null;
	      ctx.save();
	      ctx.transform.apply(ctx, current.textMatrix);
	      ctx.translate(current.x, current.y);
	      ctx.scale(textHScale, fontDirection);
	      for (i = 0; i < glyphsLength; ++i) {
	        glyph = glyphs[i];
	        if ((0, _util.isNum)(glyph)) {
	          spacingLength = spacingDir * glyph * fontSize / 1000;
	          this.ctx.translate(spacingLength, 0);
	          current.x += spacingLength * textHScale;
	          continue;
	        }
	        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
	        var operatorList = font.charProcOperatorList[glyph.operatorListId];
	        if (!operatorList) {
	          (0, _util.warn)('Type3 character "' + glyph.operatorListId + '" is not available.');
	          continue;
	        }
	        this.processingType3 = glyph;
	        this.save();
	        ctx.scale(fontSize, fontSize);
	        ctx.transform.apply(ctx, fontMatrix);
	        this.executeOperatorList(operatorList);
	        this.restore();
	        var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);
	        width = transformed[0] * fontSize + spacing;
	        ctx.translate(width, 0);
	        current.x += width * textHScale;
	      }
	      ctx.restore();
	      this.processingType3 = null;
	    },
	    setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},
	    setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
	      this.ctx.rect(llx, lly, urx - llx, ury - lly);
	      this.clip();
	      this.endPath();
	    },
	    getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {
	      var _this = this;

	      var pattern;
	      if (IR[0] === 'TilingPattern') {
	        var color = IR[1];
	        var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
	        var canvasGraphicsFactory = {
	          createCanvasGraphics: function createCanvasGraphics(ctx) {
	            return new CanvasGraphics(ctx, _this.commonObjs, _this.objs, _this.canvasFactory);
	          }
	        };
	        pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
	      } else {
	        pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);
	      }
	      return pattern;
	    },
	    setStrokeColorN: function CanvasGraphics_setStrokeColorN() {
	      this.current.strokeColor = this.getColorN_Pattern(arguments);
	    },
	    setFillColorN: function CanvasGraphics_setFillColorN() {
	      this.current.fillColor = this.getColorN_Pattern(arguments);
	      this.current.patternFill = true;
	    },
	    setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {
	      var color = _util.Util.makeCssRgb(r, g, b);
	      this.ctx.strokeStyle = color;
	      this.current.strokeColor = color;
	    },
	    setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {
	      var color = _util.Util.makeCssRgb(r, g, b);
	      this.ctx.fillStyle = color;
	      this.current.fillColor = color;
	      this.current.patternFill = false;
	    },
	    shadingFill: function CanvasGraphics_shadingFill(patternIR) {
	      var ctx = this.ctx;
	      this.save();
	      var pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);
	      ctx.fillStyle = pattern.getPattern(ctx, this, true);
	      var inv = ctx.mozCurrentTransformInverse;
	      if (inv) {
	        var canvas = ctx.canvas;
	        var width = canvas.width;
	        var height = canvas.height;
	        var bl = _util.Util.applyTransform([0, 0], inv);
	        var br = _util.Util.applyTransform([0, height], inv);
	        var ul = _util.Util.applyTransform([width, 0], inv);
	        var ur = _util.Util.applyTransform([width, height], inv);
	        var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
	        var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
	        var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
	        var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
	        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
	      } else {
	        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
	      }
	      this.restore();
	    },
	    beginInlineImage: function CanvasGraphics_beginInlineImage() {
	      (0, _util.error)('Should not call beginInlineImage');
	    },
	    beginImageData: function CanvasGraphics_beginImageData() {
	      (0, _util.error)('Should not call beginImageData');
	    },
	    paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {
	      this.save();
	      this.baseTransformStack.push(this.baseTransform);
	      if ((0, _util.isArray)(matrix) && matrix.length === 6) {
	        this.transform.apply(this, matrix);
	      }
	      this.baseTransform = this.ctx.mozCurrentTransform;
	      if ((0, _util.isArray)(bbox) && bbox.length === 4) {
	        var width = bbox[2] - bbox[0];
	        var height = bbox[3] - bbox[1];
	        this.ctx.rect(bbox[0], bbox[1], width, height);
	        this.clip();
	        this.endPath();
	      }
	    },
	    paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {
	      this.restore();
	      this.baseTransform = this.baseTransformStack.pop();
	    },
	    beginGroup: function CanvasGraphics_beginGroup(group) {
	      this.save();
	      var currentCtx = this.ctx;
	      if (!group.isolated) {
	        (0, _util.info)('TODO: Support non-isolated groups.');
	      }
	      if (group.knockout) {
	        (0, _util.warn)('Knockout groups not supported.');
	      }
	      var currentTransform = currentCtx.mozCurrentTransform;
	      if (group.matrix) {
	        currentCtx.transform.apply(currentCtx, group.matrix);
	      }
	      (0, _util.assert)(group.bbox, 'Bounding box is required.');
	      var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);
	      var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
	      bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
	      var offsetX = Math.floor(bounds[0]);
	      var offsetY = Math.floor(bounds[1]);
	      var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
	      var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
	      var scaleX = 1,
	          scaleY = 1;
	      if (drawnWidth > MAX_GROUP_SIZE) {
	        scaleX = drawnWidth / MAX_GROUP_SIZE;
	        drawnWidth = MAX_GROUP_SIZE;
	      }
	      if (drawnHeight > MAX_GROUP_SIZE) {
	        scaleY = drawnHeight / MAX_GROUP_SIZE;
	        drawnHeight = MAX_GROUP_SIZE;
	      }
	      var cacheId = 'groupAt' + this.groupLevel;
	      if (group.smask) {
	        cacheId += '_smask_' + this.smaskCounter++ % 2;
	      }
	      var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
	      var groupCtx = scratchCanvas.context;
	      groupCtx.scale(1 / scaleX, 1 / scaleY);
	      groupCtx.translate(-offsetX, -offsetY);
	      groupCtx.transform.apply(groupCtx, currentTransform);
	      if (group.smask) {
	        this.smaskStack.push({
	          canvas: scratchCanvas.canvas,
	          context: groupCtx,
	          offsetX: offsetX,
	          offsetY: offsetY,
	          scaleX: scaleX,
	          scaleY: scaleY,
	          subtype: group.smask.subtype,
	          backdrop: group.smask.backdrop,
	          transferMap: group.smask.transferMap || null,
	          startTransformInverse: null
	        });
	      } else {
	        currentCtx.setTransform(1, 0, 0, 1, 0, 0);
	        currentCtx.translate(offsetX, offsetY);
	        currentCtx.scale(scaleX, scaleY);
	      }
	      copyCtxState(currentCtx, groupCtx);
	      this.ctx = groupCtx;
	      this.setGState([['BM', 'source-over'], ['ca', 1], ['CA', 1]]);
	      this.groupStack.push(currentCtx);
	      this.groupLevel++;
	      this.current.activeSMask = null;
	    },
	    endGroup: function CanvasGraphics_endGroup(group) {
	      this.groupLevel--;
	      var groupCtx = this.ctx;
	      this.ctx = this.groupStack.pop();
	      if (this.ctx.imageSmoothingEnabled !== undefined) {
	        this.ctx.imageSmoothingEnabled = false;
	      } else {
	        this.ctx.mozImageSmoothingEnabled = false;
	      }
	      if (group.smask) {
	        this.tempSMask = this.smaskStack.pop();
	      } else {
	        this.ctx.drawImage(groupCtx.canvas, 0, 0);
	      }
	      this.restore();
	    },
	    beginAnnotations: function CanvasGraphics_beginAnnotations() {
	      this.save();
	      this.current = new CanvasExtraState();
	      if (this.baseTransform) {
	        this.ctx.setTransform.apply(this.ctx, this.baseTransform);
	      }
	    },
	    endAnnotations: function CanvasGraphics_endAnnotations() {
	      this.restore();
	    },
	    beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {
	      this.save();
	      if ((0, _util.isArray)(rect) && rect.length === 4) {
	        var width = rect[2] - rect[0];
	        var height = rect[3] - rect[1];
	        this.ctx.rect(rect[0], rect[1], width, height);
	        this.clip();
	        this.endPath();
	      }
	      this.transform.apply(this, transform);
	      this.transform.apply(this, matrix);
	    },
	    endAnnotation: function CanvasGraphics_endAnnotation() {
	      this.restore();
	    },
	    paintJpegXObject: function CanvasGraphics_paintJpegXObject(objId, w, h) {
	      var domImage = this.objs.get(objId);
	      if (!domImage) {
	        (0, _util.warn)('Dependent image isn\'t ready yet');
	        return;
	      }
	      this.save();
	      var ctx = this.ctx;
	      ctx.scale(1 / w, -1 / h);
	      ctx.drawImage(domImage, 0, 0, domImage.width, domImage.height, 0, -h, w, h);
	      if (this.imageLayer) {
	        var currentTransform = ctx.mozCurrentTransformInverse;
	        var position = this.getCanvasPosition(0, 0);
	        this.imageLayer.appendImage({
	          objId: objId,
	          left: position[0],
	          top: position[1],
	          width: w / currentTransform[0],
	          height: h / currentTransform[3]
	        });
	      }
	      this.restore();
	    },
	    paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {
	      var ctx = this.ctx;
	      var width = img.width,
	          height = img.height;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      var glyph = this.processingType3;
	      if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {
	        if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {
	          glyph.compiled = compileType3Glyph({
	            data: img.data,
	            width: width,
	            height: height
	          });
	        } else {
	          glyph.compiled = null;
	        }
	      }
	      if (glyph && glyph.compiled) {
	        glyph.compiled(ctx);
	        return;
	      }
	      var maskCanvas = this.cachedCanvases.getCanvas('maskCanvas', width, height);
	      var maskCtx = maskCanvas.context;
	      maskCtx.save();
	      putBinaryImageMask(maskCtx, img);
	      maskCtx.globalCompositeOperation = 'source-in';
	      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
	      maskCtx.fillRect(0, 0, width, height);
	      maskCtx.restore();
	      this.paintInlineImageXObject(maskCanvas.canvas);
	    },
	    paintImageMaskXObjectRepeat: function CanvasGraphics_paintImageMaskXObjectRepeat(imgData, scaleX, scaleY, positions) {
	      var width = imgData.width;
	      var height = imgData.height;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      var maskCanvas = this.cachedCanvases.getCanvas('maskCanvas', width, height);
	      var maskCtx = maskCanvas.context;
	      maskCtx.save();
	      putBinaryImageMask(maskCtx, imgData);
	      maskCtx.globalCompositeOperation = 'source-in';
	      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
	      maskCtx.fillRect(0, 0, width, height);
	      maskCtx.restore();
	      var ctx = this.ctx;
	      for (var i = 0, ii = positions.length; i < ii; i += 2) {
	        ctx.save();
	        ctx.transform(scaleX, 0, 0, scaleY, positions[i], positions[i + 1]);
	        ctx.scale(1, -1);
	        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
	        ctx.restore();
	      }
	    },
	    paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {
	      var ctx = this.ctx;
	      var fillColor = this.current.fillColor;
	      var isPatternFill = this.current.patternFill;
	      for (var i = 0, ii = images.length; i < ii; i++) {
	        var image = images[i];
	        var width = image.width,
	            height = image.height;
	        var maskCanvas = this.cachedCanvases.getCanvas('maskCanvas', width, height);
	        var maskCtx = maskCanvas.context;
	        maskCtx.save();
	        putBinaryImageMask(maskCtx, image);
	        maskCtx.globalCompositeOperation = 'source-in';
	        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
	        maskCtx.fillRect(0, 0, width, height);
	        maskCtx.restore();
	        ctx.save();
	        ctx.transform.apply(ctx, image.transform);
	        ctx.scale(1, -1);
	        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
	        ctx.restore();
	      }
	    },
	    paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {
	      var imgData = this.objs.get(objId);
	      if (!imgData) {
	        (0, _util.warn)('Dependent image isn\'t ready yet');
	        return;
	      }
	      this.paintInlineImageXObject(imgData);
	    },
	    paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
	      var imgData = this.objs.get(objId);
	      if (!imgData) {
	        (0, _util.warn)('Dependent image isn\'t ready yet');
	        return;
	      }
	      var width = imgData.width;
	      var height = imgData.height;
	      var map = [];
	      for (var i = 0, ii = positions.length; i < ii; i += 2) {
	        map.push({
	          transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
	          x: 0,
	          y: 0,
	          w: width,
	          h: height
	        });
	      }
	      this.paintInlineImageXObjectGroup(imgData, map);
	    },
	    paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {
	      var width = imgData.width;
	      var height = imgData.height;
	      var ctx = this.ctx;
	      this.save();
	      ctx.scale(1 / width, -1 / height);
	      var currentTransform = ctx.mozCurrentTransformInverse;
	      var a = currentTransform[0],
	          b = currentTransform[1];
	      var widthScale = Math.max(Math.sqrt(a * a + b * b), 1);
	      var c = currentTransform[2],
	          d = currentTransform[3];
	      var heightScale = Math.max(Math.sqrt(c * c + d * d), 1);
	      var imgToPaint, tmpCanvas;
	      if (imgData instanceof HTMLElement || !imgData.data) {
	        imgToPaint = imgData;
	      } else {
	        tmpCanvas = this.cachedCanvases.getCanvas('inlineImage', width, height);
	        var tmpCtx = tmpCanvas.context;
	        putBinaryImageData(tmpCtx, imgData);
	        imgToPaint = tmpCanvas.canvas;
	      }
	      var paintWidth = width,
	          paintHeight = height;
	      var tmpCanvasId = 'prescale1';
	      while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
	        var newWidth = paintWidth,
	            newHeight = paintHeight;
	        if (widthScale > 2 && paintWidth > 1) {
	          newWidth = Math.ceil(paintWidth / 2);
	          widthScale /= paintWidth / newWidth;
	        }
	        if (heightScale > 2 && paintHeight > 1) {
	          newHeight = Math.ceil(paintHeight / 2);
	          heightScale /= paintHeight / newHeight;
	        }
	        tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
	        tmpCtx = tmpCanvas.context;
	        tmpCtx.clearRect(0, 0, newWidth, newHeight);
	        tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
	        imgToPaint = tmpCanvas.canvas;
	        paintWidth = newWidth;
	        paintHeight = newHeight;
	        tmpCanvasId = tmpCanvasId === 'prescale1' ? 'prescale2' : 'prescale1';
	      }
	      ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);
	      if (this.imageLayer) {
	        var position = this.getCanvasPosition(0, -height);
	        this.imageLayer.appendImage({
	          imgData: imgData,
	          left: position[0],
	          top: position[1],
	          width: width / currentTransform[0],
	          height: height / currentTransform[3]
	        });
	      }
	      this.restore();
	    },
	    paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {
	      var ctx = this.ctx;
	      var w = imgData.width;
	      var h = imgData.height;
	      var tmpCanvas = this.cachedCanvases.getCanvas('inlineImage', w, h);
	      var tmpCtx = tmpCanvas.context;
	      putBinaryImageData(tmpCtx, imgData);
	      for (var i = 0, ii = map.length; i < ii; i++) {
	        var entry = map[i];
	        ctx.save();
	        ctx.transform.apply(ctx, entry.transform);
	        ctx.scale(1, -1);
	        ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
	        if (this.imageLayer) {
	          var position = this.getCanvasPosition(entry.x, entry.y);
	          this.imageLayer.appendImage({
	            imgData: imgData,
	            left: position[0],
	            top: position[1],
	            width: w,
	            height: h
	          });
	        }
	        ctx.restore();
	      }
	    },
	    paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {
	      this.ctx.fillRect(0, 0, 1, 1);
	    },
	    paintXObject: function CanvasGraphics_paintXObject() {
	      (0, _util.warn)('Unsupported \'paintXObject\' command.');
	    },
	    markPoint: function CanvasGraphics_markPoint(tag) {},
	    markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},
	    beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {},
	    beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {},
	    endMarkedContent: function CanvasGraphics_endMarkedContent() {},
	    beginCompat: function CanvasGraphics_beginCompat() {},
	    endCompat: function CanvasGraphics_endCompat() {},
	    consumePath: function CanvasGraphics_consumePath() {
	      var ctx = this.ctx;
	      if (this.pendingClip) {
	        if (this.pendingClip === EO_CLIP) {
	          ctx.clip('evenodd');
	        } else {
	          ctx.clip();
	        }
	        this.pendingClip = null;
	      }
	      ctx.beginPath();
	    },
	    getSinglePixelWidth: function CanvasGraphics_getSinglePixelWidth(scale) {
	      if (this.cachedGetSinglePixelWidth === null) {
	        this.ctx.save();
	        var inverse = this.ctx.mozCurrentTransformInverse;
	        this.ctx.restore();
	        this.cachedGetSinglePixelWidth = Math.sqrt(Math.max(inverse[0] * inverse[0] + inverse[1] * inverse[1], inverse[2] * inverse[2] + inverse[3] * inverse[3]));
	      }
	      return this.cachedGetSinglePixelWidth;
	    },
	    getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {
	      var transform = this.ctx.mozCurrentTransform;
	      return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];
	    }
	  };
	  for (var op in _util.OPS) {
	    CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
	  }
	  return CanvasGraphics;
	}();
	exports.CanvasGraphics = CanvasGraphics;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FontLoader = exports.FontFaceObject = undefined;

	var _util = __w_pdfjs_require__(0);

	function FontLoader(docId) {
	  this.docId = docId;
	  this.styleElement = null;
	  this.nativeFontFaces = [];
	  this.loadTestFontId = 0;
	  this.loadingContext = {
	    requests: [],
	    nextRequestId: 0
	  };
	}
	FontLoader.prototype = {
	  insertRule: function fontLoaderInsertRule(rule) {
	    var styleElement = this.styleElement;
	    if (!styleElement) {
	      styleElement = this.styleElement = document.createElement('style');
	      styleElement.id = 'PDFJS_FONT_STYLE_TAG_' + this.docId;
	      document.documentElement.getElementsByTagName('head')[0].appendChild(styleElement);
	    }
	    var styleSheet = styleElement.sheet;
	    styleSheet.insertRule(rule, styleSheet.cssRules.length);
	  },
	  clear: function fontLoaderClear() {
	    if (this.styleElement) {
	      this.styleElement.remove();
	      this.styleElement = null;
	    }
	    this.nativeFontFaces.forEach(function (nativeFontFace) {
	      document.fonts.delete(nativeFontFace);
	    });
	    this.nativeFontFaces.length = 0;
	  }
	};
	{
	  var getLoadTestFont = function getLoadTestFont() {
	    return atob('T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQ' + 'AABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwA' + 'AAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbm' + 'FtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAA' + 'AADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6A' + 'ABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAA' + 'MQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAA' + 'AAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAA' + 'AAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQ' + 'AAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMA' + 'AQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAA' + 'EAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAA' + 'AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' + 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAA' + 'AAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgc' + 'A/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWF' + 'hYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQA' + 'AAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAg' + 'ABAAAAAAAAAAAD6AAAAAAAAA==');
	  };
	  Object.defineProperty(FontLoader.prototype, 'loadTestFont', {
	    get: function get() {
	      return (0, _util.shadow)(this, 'loadTestFont', getLoadTestFont());
	    },

	    configurable: true
	  });
	  FontLoader.prototype.addNativeFontFace = function fontLoader_addNativeFontFace(nativeFontFace) {
	    this.nativeFontFaces.push(nativeFontFace);
	    document.fonts.add(nativeFontFace);
	  };
	  FontLoader.prototype.bind = function fontLoaderBind(fonts, callback) {
	    var rules = [];
	    var fontsToLoad = [];
	    var fontLoadPromises = [];
	    var getNativeFontPromise = function getNativeFontPromise(nativeFontFace) {
	      return nativeFontFace.loaded.catch(function (e) {
	        (0, _util.warn)('Failed to load font "' + nativeFontFace.family + '": ' + e);
	      });
	    };
	    var isFontLoadingAPISupported = FontLoader.isFontLoadingAPISupported && !FontLoader.isSyncFontLoadingSupported;
	    for (var i = 0, ii = fonts.length; i < ii; i++) {
	      var font = fonts[i];
	      if (font.attached || font.loading === false) {
	        continue;
	      }
	      font.attached = true;
	      if (isFontLoadingAPISupported) {
	        var nativeFontFace = font.createNativeFontFace();
	        if (nativeFontFace) {
	          this.addNativeFontFace(nativeFontFace);
	          fontLoadPromises.push(getNativeFontPromise(nativeFontFace));
	        }
	      } else {
	        var rule = font.createFontFaceRule();
	        if (rule) {
	          this.insertRule(rule);
	          rules.push(rule);
	          fontsToLoad.push(font);
	        }
	      }
	    }
	    var request = this.queueLoadingCallback(callback);
	    if (isFontLoadingAPISupported) {
	      Promise.all(fontLoadPromises).then(function () {
	        request.complete();
	      });
	    } else if (rules.length > 0 && !FontLoader.isSyncFontLoadingSupported) {
	      this.prepareFontLoadEvent(rules, fontsToLoad, request);
	    } else {
	      request.complete();
	    }
	  };
	  FontLoader.prototype.queueLoadingCallback = function FontLoader_queueLoadingCallback(callback) {
	    function LoadLoader_completeRequest() {
	      (0, _util.assert)(!request.end, 'completeRequest() cannot be called twice');
	      request.end = Date.now();
	      while (context.requests.length > 0 && context.requests[0].end) {
	        var otherRequest = context.requests.shift();
	        setTimeout(otherRequest.callback, 0);
	      }
	    }
	    var context = this.loadingContext;
	    var requestId = 'pdfjs-font-loading-' + context.nextRequestId++;
	    var request = {
	      id: requestId,
	      complete: LoadLoader_completeRequest,
	      callback: callback,
	      started: Date.now()
	    };
	    context.requests.push(request);
	    return request;
	  };
	  FontLoader.prototype.prepareFontLoadEvent = function fontLoaderPrepareFontLoadEvent(rules, fonts, request) {
	    function int32(data, offset) {
	      return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;
	    }
	    function spliceString(s, offset, remove, insert) {
	      var chunk1 = s.substr(0, offset);
	      var chunk2 = s.substr(offset + remove);
	      return chunk1 + insert + chunk2;
	    }
	    var i, ii;
	    var canvas = document.createElement('canvas');
	    canvas.width = 1;
	    canvas.height = 1;
	    var ctx = canvas.getContext('2d');
	    var called = 0;
	    function isFontReady(name, callback) {
	      called++;
	      if (called > 30) {
	        (0, _util.warn)('Load test font never loaded.');
	        callback();
	        return;
	      }
	      ctx.font = '30px ' + name;
	      ctx.fillText('.', 0, 20);
	      var imageData = ctx.getImageData(0, 0, 1, 1);
	      if (imageData.data[3] > 0) {
	        callback();
	        return;
	      }
	      setTimeout(isFontReady.bind(null, name, callback));
	    }
	    var loadTestFontId = 'lt' + Date.now() + this.loadTestFontId++;
	    var data = this.loadTestFont;
	    var COMMENT_OFFSET = 976;
	    data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
	    var CFF_CHECKSUM_OFFSET = 16;
	    var XXXX_VALUE = 0x58585858;
	    var checksum = int32(data, CFF_CHECKSUM_OFFSET);
	    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
	      checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
	    }
	    if (i < loadTestFontId.length) {
	      checksum = checksum - XXXX_VALUE + int32(loadTestFontId + 'XXX', i) | 0;
	    }
	    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
	    var url = 'url(data:font/opentype;base64,' + btoa(data) + ');';
	    var rule = '@font-face { font-family:"' + loadTestFontId + '";src:' + url + '}';
	    this.insertRule(rule);
	    var names = [];
	    for (i = 0, ii = fonts.length; i < ii; i++) {
	      names.push(fonts[i].loadedName);
	    }
	    names.push(loadTestFontId);
	    var div = document.createElement('div');
	    div.setAttribute('style', 'visibility: hidden;' + 'width: 10px; height: 10px;' + 'position: absolute; top: 0px; left: 0px;');
	    for (i = 0, ii = names.length; i < ii; ++i) {
	      var span = document.createElement('span');
	      span.textContent = 'Hi';
	      span.style.fontFamily = names[i];
	      div.appendChild(span);
	    }
	    document.body.appendChild(div);
	    isFontReady(loadTestFontId, function () {
	      document.body.removeChild(div);
	      request.complete();
	    });
	  };
	}
	{
	  FontLoader.isFontLoadingAPISupported = typeof document !== 'undefined' && !!document.fonts;
	}
	{
	  var isSyncFontLoadingSupported = function isSyncFontLoadingSupported() {
	    if (typeof navigator === 'undefined') {
	      return true;
	    }
	    var supported = false;
	    var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);
	    if (m && m[1] >= 14) {
	      supported = true;
	    }
	    return supported;
	  };
	  Object.defineProperty(FontLoader, 'isSyncFontLoadingSupported', {
	    get: function get() {
	      return (0, _util.shadow)(FontLoader, 'isSyncFontLoadingSupported', isSyncFontLoadingSupported());
	    },

	    enumerable: true,
	    configurable: true
	  });
	}
	var IsEvalSupportedCached = {
	  get value() {
	    return (0, _util.shadow)(this, 'value', (0, _util.isEvalSupported)());
	  }
	};
	var FontFaceObject = function FontFaceObjectClosure() {
	  function FontFaceObject(translatedData, options) {
	    this.compiledGlyphs = Object.create(null);
	    for (var i in translatedData) {
	      this[i] = translatedData[i];
	    }
	    this.options = options;
	  }
	  FontFaceObject.prototype = {
	    createNativeFontFace: function FontFaceObject_createNativeFontFace() {
	      if (!this.data) {
	        return null;
	      }
	      if (this.options.disableFontFace) {
	        this.disableFontFace = true;
	        return null;
	      }
	      var nativeFontFace = new FontFace(this.loadedName, this.data, {});
	      if (this.options.fontRegistry) {
	        this.options.fontRegistry.registerFont(this);
	      }
	      return nativeFontFace;
	    },
	    createFontFaceRule: function FontFaceObject_createFontFaceRule() {
	      if (!this.data) {
	        return null;
	      }
	      if (this.options.disableFontFace) {
	        this.disableFontFace = true;
	        return null;
	      }
	      var data = (0, _util.bytesToString)(new Uint8Array(this.data));
	      var fontName = this.loadedName;
	      var url = 'url(data:' + this.mimetype + ';base64,' + btoa(data) + ');';
	      var rule = '@font-face { font-family:"' + fontName + '";src:' + url + '}';
	      if (this.options.fontRegistry) {
	        this.options.fontRegistry.registerFont(this, url);
	      }
	      return rule;
	    },
	    getPathGenerator: function FontFaceObject_getPathGenerator(objs, character) {
	      if (!(character in this.compiledGlyphs)) {
	        var cmds = objs.get(this.loadedName + '_path_' + character);
	        var current, i, len;
	        if (this.options.isEvalSupported && IsEvalSupportedCached.value) {
	          var args,
	              js = '';
	          for (i = 0, len = cmds.length; i < len; i++) {
	            current = cmds[i];
	            if (current.args !== undefined) {
	              args = current.args.join(',');
	            } else {
	              args = '';
	            }
	            js += 'c.' + current.cmd + '(' + args + ');\n';
	          }
	          this.compiledGlyphs[character] = new Function('c', 'size', js);
	        } else {
	          this.compiledGlyphs[character] = function (c, size) {
	            for (i = 0, len = cmds.length; i < len; i++) {
	              current = cmds[i];
	              if (current.cmd === 'scale') {
	                current.args = [size, -size];
	              }
	              c[current.cmd].apply(c, current.args);
	            }
	          };
	        }
	      }
	      return this.compiledGlyphs[character];
	    }
	  };
	  return FontFaceObject;
	}();
	exports.FontFaceObject = FontFaceObject;
	exports.FontLoader = FontLoader;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TilingPattern = exports.getShadingPatternFromIR = undefined;

	var _util = __w_pdfjs_require__(0);

	var _webgl = __w_pdfjs_require__(8);

	var ShadingIRs = {};
	ShadingIRs.RadialAxial = {
	  fromIR: function RadialAxial_fromIR(raw) {
	    var type = raw[1];
	    var colorStops = raw[2];
	    var p0 = raw[3];
	    var p1 = raw[4];
	    var r0 = raw[5];
	    var r1 = raw[6];
	    return {
	      type: 'Pattern',
	      getPattern: function RadialAxial_getPattern(ctx) {
	        var grad;
	        if (type === 'axial') {
	          grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);
	        } else if (type === 'radial') {
	          grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);
	        }
	        for (var i = 0, ii = colorStops.length; i < ii; ++i) {
	          var c = colorStops[i];
	          grad.addColorStop(c[0], c[1]);
	        }
	        return grad;
	      }
	    };
	  }
	};
	var createMeshCanvas = function createMeshCanvasClosure() {
	  function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
	    var coords = context.coords,
	        colors = context.colors;
	    var bytes = data.data,
	        rowSize = data.width * 4;
	    var tmp;
	    if (coords[p1 + 1] > coords[p2 + 1]) {
	      tmp = p1;
	      p1 = p2;
	      p2 = tmp;
	      tmp = c1;
	      c1 = c2;
	      c2 = tmp;
	    }
	    if (coords[p2 + 1] > coords[p3 + 1]) {
	      tmp = p2;
	      p2 = p3;
	      p3 = tmp;
	      tmp = c2;
	      c2 = c3;
	      c3 = tmp;
	    }
	    if (coords[p1 + 1] > coords[p2 + 1]) {
	      tmp = p1;
	      p1 = p2;
	      p2 = tmp;
	      tmp = c1;
	      c1 = c2;
	      c2 = tmp;
	    }
	    var x1 = (coords[p1] + context.offsetX) * context.scaleX;
	    var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
	    var x2 = (coords[p2] + context.offsetX) * context.scaleX;
	    var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
	    var x3 = (coords[p3] + context.offsetX) * context.scaleX;
	    var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
	    if (y1 >= y3) {
	      return;
	    }
	    var c1r = colors[c1],
	        c1g = colors[c1 + 1],
	        c1b = colors[c1 + 2];
	    var c2r = colors[c2],
	        c2g = colors[c2 + 1],
	        c2b = colors[c2 + 2];
	    var c3r = colors[c3],
	        c3g = colors[c3 + 1],
	        c3b = colors[c3 + 2];
	    var minY = Math.round(y1),
	        maxY = Math.round(y3);
	    var xa, car, cag, cab;
	    var xb, cbr, cbg, cbb;
	    var k;
	    for (var y = minY; y <= maxY; y++) {
	      if (y < y2) {
	        k = y < y1 ? 0 : y1 === y2 ? 1 : (y1 - y) / (y1 - y2);
	        xa = x1 - (x1 - x2) * k;
	        car = c1r - (c1r - c2r) * k;
	        cag = c1g - (c1g - c2g) * k;
	        cab = c1b - (c1b - c2b) * k;
	      } else {
	        k = y > y3 ? 1 : y2 === y3 ? 0 : (y2 - y) / (y2 - y3);
	        xa = x2 - (x2 - x3) * k;
	        car = c2r - (c2r - c3r) * k;
	        cag = c2g - (c2g - c3g) * k;
	        cab = c2b - (c2b - c3b) * k;
	      }
	      k = y < y1 ? 0 : y > y3 ? 1 : (y1 - y) / (y1 - y3);
	      xb = x1 - (x1 - x3) * k;
	      cbr = c1r - (c1r - c3r) * k;
	      cbg = c1g - (c1g - c3g) * k;
	      cbb = c1b - (c1b - c3b) * k;
	      var x1_ = Math.round(Math.min(xa, xb));
	      var x2_ = Math.round(Math.max(xa, xb));
	      var j = rowSize * y + x1_ * 4;
	      for (var x = x1_; x <= x2_; x++) {
	        k = (xa - x) / (xa - xb);
	        k = k < 0 ? 0 : k > 1 ? 1 : k;
	        bytes[j++] = car - (car - cbr) * k | 0;
	        bytes[j++] = cag - (cag - cbg) * k | 0;
	        bytes[j++] = cab - (cab - cbb) * k | 0;
	        bytes[j++] = 255;
	      }
	    }
	  }
	  function drawFigure(data, figure, context) {
	    var ps = figure.coords;
	    var cs = figure.colors;
	    var i, ii;
	    switch (figure.type) {
	      case 'lattice':
	        var verticesPerRow = figure.verticesPerRow;
	        var rows = Math.floor(ps.length / verticesPerRow) - 1;
	        var cols = verticesPerRow - 1;
	        for (i = 0; i < rows; i++) {
	          var q = i * verticesPerRow;
	          for (var j = 0; j < cols; j++, q++) {
	            drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
	            drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
	          }
	        }
	        break;
	      case 'triangles':
	        for (i = 0, ii = ps.length; i < ii; i += 3) {
	          drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
	        }
	        break;
	      default:
	        (0, _util.error)('illigal figure');
	        break;
	    }
	  }
	  function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases) {
	    var EXPECTED_SCALE = 1.1;
	    var MAX_PATTERN_SIZE = 3000;
	    var BORDER_SIZE = 2;
	    var offsetX = Math.floor(bounds[0]);
	    var offsetY = Math.floor(bounds[1]);
	    var boundsWidth = Math.ceil(bounds[2]) - offsetX;
	    var boundsHeight = Math.ceil(bounds[3]) - offsetY;
	    var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
	    var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
	    var scaleX = boundsWidth / width;
	    var scaleY = boundsHeight / height;
	    var context = {
	      coords: coords,
	      colors: colors,
	      offsetX: -offsetX,
	      offsetY: -offsetY,
	      scaleX: 1 / scaleX,
	      scaleY: 1 / scaleY
	    };
	    var paddedWidth = width + BORDER_SIZE * 2;
	    var paddedHeight = height + BORDER_SIZE * 2;
	    var canvas, tmpCanvas, i, ii;
	    if (_webgl.WebGLUtils.isEnabled) {
	      canvas = _webgl.WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);
	      tmpCanvas = cachedCanvases.getCanvas('mesh', paddedWidth, paddedHeight, false);
	      tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);
	      canvas = tmpCanvas.canvas;
	    } else {
	      tmpCanvas = cachedCanvases.getCanvas('mesh', paddedWidth, paddedHeight, false);
	      var tmpCtx = tmpCanvas.context;
	      var data = tmpCtx.createImageData(width, height);
	      if (backgroundColor) {
	        var bytes = data.data;
	        for (i = 0, ii = bytes.length; i < ii; i += 4) {
	          bytes[i] = backgroundColor[0];
	          bytes[i + 1] = backgroundColor[1];
	          bytes[i + 2] = backgroundColor[2];
	          bytes[i + 3] = 255;
	        }
	      }
	      for (i = 0; i < figures.length; i++) {
	        drawFigure(data, figures[i], context);
	      }
	      tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
	      canvas = tmpCanvas.canvas;
	    }
	    return {
	      canvas: canvas,
	      offsetX: offsetX - BORDER_SIZE * scaleX,
	      offsetY: offsetY - BORDER_SIZE * scaleY,
	      scaleX: scaleX,
	      scaleY: scaleY
	    };
	  }
	  return createMeshCanvas;
	}();
	ShadingIRs.Mesh = {
	  fromIR: function Mesh_fromIR(raw) {
	    var coords = raw[2];
	    var colors = raw[3];
	    var figures = raw[4];
	    var bounds = raw[5];
	    var matrix = raw[6];
	    var background = raw[8];
	    return {
	      type: 'Pattern',
	      getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {
	        var scale;
	        if (shadingFill) {
	          scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
	        } else {
	          scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);
	          if (matrix) {
	            var matrixScale = _util.Util.singularValueDecompose2dScale(matrix);
	            scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
	          }
	        }
	        var temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases);
	        if (!shadingFill) {
	          ctx.setTransform.apply(ctx, owner.baseTransform);
	          if (matrix) {
	            ctx.transform.apply(ctx, matrix);
	          }
	        }
	        ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
	        ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
	        return ctx.createPattern(temporaryPatternCanvas.canvas, 'no-repeat');
	      }
	    };
	  }
	};
	ShadingIRs.Dummy = {
	  fromIR: function Dummy_fromIR() {
	    return {
	      type: 'Pattern',
	      getPattern: function Dummy_fromIR_getPattern() {
	        return 'hotpink';
	      }
	    };
	  }
	};
	function getShadingPatternFromIR(raw) {
	  var shadingIR = ShadingIRs[raw[0]];
	  if (!shadingIR) {
	    (0, _util.error)('Unknown IR type: ' + raw[0]);
	  }
	  return shadingIR.fromIR(raw);
	}
	var TilingPattern = function TilingPatternClosure() {
	  var PaintType = {
	    COLORED: 1,
	    UNCOLORED: 2
	  };
	  var MAX_PATTERN_SIZE = 3000;
	  function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
	    this.operatorList = IR[2];
	    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
	    this.bbox = _util.Util.normalizeRect(IR[4]);
	    this.xstep = IR[5];
	    this.ystep = IR[6];
	    this.paintType = IR[7];
	    this.tilingType = IR[8];
	    this.color = color;
	    this.canvasGraphicsFactory = canvasGraphicsFactory;
	    this.baseTransform = baseTransform;
	    this.type = 'Pattern';
	    this.ctx = ctx;
	  }
	  TilingPattern.prototype = {
	    createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {
	      var operatorList = this.operatorList;
	      var bbox = this.bbox;
	      var xstep = this.xstep;
	      var ystep = this.ystep;
	      var paintType = this.paintType;
	      var tilingType = this.tilingType;
	      var color = this.color;
	      var canvasGraphicsFactory = this.canvasGraphicsFactory;
	      (0, _util.info)('TilingType: ' + tilingType);
	      var x0 = bbox[0],
	          y0 = bbox[1],
	          x1 = bbox[2],
	          y1 = bbox[3];
	      var topLeft = [x0, y0];
	      var botRight = [x0 + xstep, y0 + ystep];
	      var width = botRight[0] - topLeft[0];
	      var height = botRight[1] - topLeft[1];
	      var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);
	      var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);
	      var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
	      width = Math.min(Math.ceil(Math.abs(width * combinedScale[0])), MAX_PATTERN_SIZE);
	      height = Math.min(Math.ceil(Math.abs(height * combinedScale[1])), MAX_PATTERN_SIZE);
	      var tmpCanvas = owner.cachedCanvases.getCanvas('pattern', width, height, true);
	      var tmpCtx = tmpCanvas.context;
	      var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
	      graphics.groupLevel = owner.groupLevel;
	      this.setFillAndStrokeStyleToContext(tmpCtx, paintType, color);
	      this.setScale(width, height, xstep, ystep);
	      this.transformToScale(graphics);
	      var tmpTranslate = [1, 0, 0, 1, -topLeft[0], -topLeft[1]];
	      graphics.transform.apply(graphics, tmpTranslate);
	      this.clipBbox(graphics, bbox, x0, y0, x1, y1);
	      graphics.executeOperatorList(operatorList);
	      return tmpCanvas.canvas;
	    },
	    setScale: function TilingPattern_setScale(width, height, xstep, ystep) {
	      this.scale = [width / xstep, height / ystep];
	    },
	    transformToScale: function TilingPattern_transformToScale(graphics) {
	      var scale = this.scale;
	      var tmpScale = [scale[0], 0, 0, scale[1], 0, 0];
	      graphics.transform.apply(graphics, tmpScale);
	    },
	    scaleToContext: function TilingPattern_scaleToContext() {
	      var scale = this.scale;
	      this.ctx.scale(1 / scale[0], 1 / scale[1]);
	    },
	    clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {
	      if ((0, _util.isArray)(bbox) && bbox.length === 4) {
	        var bboxWidth = x1 - x0;
	        var bboxHeight = y1 - y0;
	        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
	        graphics.clip();
	        graphics.endPath();
	      }
	    },
	    setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(context, paintType, color) {
	      switch (paintType) {
	        case PaintType.COLORED:
	          var ctx = this.ctx;
	          context.fillStyle = ctx.fillStyle;
	          context.strokeStyle = ctx.strokeStyle;
	          break;
	        case PaintType.UNCOLORED:
	          var cssColor = _util.Util.makeCssRgb(color[0], color[1], color[2]);
	          context.fillStyle = cssColor;
	          context.strokeStyle = cssColor;
	          break;
	        default:
	          (0, _util.error)('Unsupported paint type: ' + paintType);
	      }
	    },
	    getPattern: function TilingPattern_getPattern(ctx, owner) {
	      var temporaryPatternCanvas = this.createPatternCanvas(owner);
	      ctx = this.ctx;
	      ctx.setTransform.apply(ctx, this.baseTransform);
	      ctx.transform.apply(ctx, this.matrix);
	      this.scaleToContext();
	      return ctx.createPattern(temporaryPatternCanvas, 'repeat');
	    }
	  };
	  return TilingPattern;
	}();
	exports.getShadingPatternFromIR = getShadingPatternFromIR;
	exports.TilingPattern = TilingPattern;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var pdfjsVersion = '1.8.355';
	var pdfjsBuild = 'e9cbfbcc';
	var pdfjsSharedUtil = __w_pdfjs_require__(0);
	var pdfjsDisplayGlobal = __w_pdfjs_require__(9);
	var pdfjsDisplayAPI = __w_pdfjs_require__(3);
	var pdfjsDisplayTextLayer = __w_pdfjs_require__(5);
	var pdfjsDisplayAnnotationLayer = __w_pdfjs_require__(2);
	var pdfjsDisplayDOMUtils = __w_pdfjs_require__(1);
	var pdfjsDisplaySVG = __w_pdfjs_require__(4);
	exports.PDFJS = pdfjsDisplayGlobal.PDFJS;
	exports.build = pdfjsDisplayAPI.build;
	exports.version = pdfjsDisplayAPI.version;
	exports.getDocument = pdfjsDisplayAPI.getDocument;
	exports.LoopbackPort = pdfjsDisplayAPI.LoopbackPort;
	exports.PDFDataRangeTransport = pdfjsDisplayAPI.PDFDataRangeTransport;
	exports.PDFWorker = pdfjsDisplayAPI.PDFWorker;
	exports.renderTextLayer = pdfjsDisplayTextLayer.renderTextLayer;
	exports.AnnotationLayer = pdfjsDisplayAnnotationLayer.AnnotationLayer;
	exports.CustomStyle = pdfjsDisplayDOMUtils.CustomStyle;
	exports.createPromiseCapability = pdfjsSharedUtil.createPromiseCapability;
	exports.PasswordResponses = pdfjsSharedUtil.PasswordResponses;
	exports.InvalidPDFException = pdfjsSharedUtil.InvalidPDFException;
	exports.MissingPDFException = pdfjsSharedUtil.MissingPDFException;
	exports.SVGGraphics = pdfjsDisplaySVG.SVGGraphics;
	exports.NativeImageDecoding = pdfjsSharedUtil.NativeImageDecoding;
	exports.UnexpectedResponseException = pdfjsSharedUtil.UnexpectedResponseException;
	exports.OPS = pdfjsSharedUtil.OPS;
	exports.UNSUPPORTED_FEATURES = pdfjsSharedUtil.UNSUPPORTED_FEATURES;
	exports.isValidUrl = pdfjsDisplayDOMUtils.isValidUrl;
	exports.createValidAbsoluteUrl = pdfjsSharedUtil.createValidAbsoluteUrl;
	exports.createObjectURL = pdfjsSharedUtil.createObjectURL;
	exports.removeNullCharacters = pdfjsSharedUtil.removeNullCharacters;
	exports.shadow = pdfjsSharedUtil.shadow;
	exports.createBlob = pdfjsSharedUtil.createBlob;
	exports.RenderingCancelledException = pdfjsDisplayDOMUtils.RenderingCancelledException;
	exports.getFilenameFromUrl = pdfjsDisplayDOMUtils.getFilenameFromUrl;
	exports.addLinkAttributes = pdfjsDisplayDOMUtils.addLinkAttributes;

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(global) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	if (typeof PDFJS === 'undefined' || !PDFJS.compatibilityChecked) {
	  var globalScope = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : undefined;
	  var userAgent = typeof navigator !== 'undefined' && navigator.userAgent || '';
	  var isAndroid = /Android/.test(userAgent);
	  var isAndroidPre3 = /Android\s[0-2][^\d]/.test(userAgent);
	  var isAndroidPre5 = /Android\s[0-4][^\d]/.test(userAgent);
	  var isChrome = userAgent.indexOf('Chrom') >= 0;
	  var isChromeWithRangeBug = /Chrome\/(39|40)\./.test(userAgent);
	  var isIOSChrome = userAgent.indexOf('CriOS') >= 0;
	  var isIE = userAgent.indexOf('Trident') >= 0;
	  var isIOS = /\b(iPad|iPhone|iPod)(?=;)/.test(userAgent);
	  var isOpera = userAgent.indexOf('Opera') >= 0;
	  var isSafari = /Safari\//.test(userAgent) && !/(Chrome\/|Android\s)/.test(userAgent);
	  var hasDOM = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object';
	  if (typeof PDFJS === 'undefined') {
	    globalScope.PDFJS = {};
	  }
	  PDFJS.compatibilityChecked = true;
	  (function checkTypedArrayCompatibility() {
	    if (typeof Uint8Array !== 'undefined') {
	      if (typeof Uint8Array.prototype.subarray === 'undefined') {
	        Uint8Array.prototype.subarray = function subarray(start, end) {
	          return new Uint8Array(this.slice(start, end));
	        };
	        Float32Array.prototype.subarray = function subarray(start, end) {
	          return new Float32Array(this.slice(start, end));
	        };
	      }
	      if (typeof Float64Array === 'undefined') {
	        globalScope.Float64Array = Float32Array;
	      }
	      return;
	    }
	    function subarray(start, end) {
	      return new TypedArray(this.slice(start, end));
	    }
	    function setArrayOffset(array, offset) {
	      if (arguments.length < 2) {
	        offset = 0;
	      }
	      for (var i = 0, n = array.length; i < n; ++i, ++offset) {
	        this[offset] = array[i] & 0xFF;
	      }
	    }
	    function Uint32ArrayView(buffer, length) {
	      this.buffer = buffer;
	      this.byteLength = buffer.length;
	      this.length = length;
	      ensureUint32ArrayViewProps(this.length);
	    }
	    Uint32ArrayView.prototype = Object.create(null);
	    var uint32ArrayViewSetters = 0;
	    function createUint32ArrayProp(index) {
	      return {
	        get: function get() {
	          var buffer = this.buffer,
	              offset = index << 2;
	          return (buffer[offset] | buffer[offset + 1] << 8 | buffer[offset + 2] << 16 | buffer[offset + 3] << 24) >>> 0;
	        },
	        set: function set(value) {
	          var buffer = this.buffer,
	              offset = index << 2;
	          buffer[offset] = value & 255;
	          buffer[offset + 1] = value >> 8 & 255;
	          buffer[offset + 2] = value >> 16 & 255;
	          buffer[offset + 3] = value >>> 24 & 255;
	        }
	      };
	    }
	    function ensureUint32ArrayViewProps(length) {
	      while (uint32ArrayViewSetters < length) {
	        Object.defineProperty(Uint32ArrayView.prototype, uint32ArrayViewSetters, createUint32ArrayProp(uint32ArrayViewSetters));
	        uint32ArrayViewSetters++;
	      }
	    }
	    function TypedArray(arg1) {
	      var result, i, n;
	      if (typeof arg1 === 'number') {
	        result = [];
	        for (i = 0; i < arg1; ++i) {
	          result[i] = 0;
	        }
	      } else if ('slice' in arg1) {
	        result = arg1.slice(0);
	      } else {
	        result = [];
	        for (i = 0, n = arg1.length; i < n; ++i) {
	          result[i] = arg1[i];
	        }
	      }
	      result.subarray = subarray;
	      result.buffer = result;
	      result.byteLength = result.length;
	      result.set = setArrayOffset;
	      if ((typeof arg1 === 'undefined' ? 'undefined' : _typeof(arg1)) === 'object' && arg1.buffer) {
	        result.buffer = arg1.buffer;
	      }
	      return result;
	    }
	    globalScope.Uint8Array = TypedArray;
	    globalScope.Int8Array = TypedArray;
	    globalScope.Int32Array = TypedArray;
	    globalScope.Uint16Array = TypedArray;
	    globalScope.Float32Array = TypedArray;
	    globalScope.Float64Array = TypedArray;
	    globalScope.Uint32Array = function () {
	      if (arguments.length === 3) {
	        if (arguments[1] !== 0) {
	          throw new Error('offset !== 0 is not supported');
	        }
	        return new Uint32ArrayView(arguments[0], arguments[2]);
	      }
	      return TypedArray.apply(this, arguments);
	    };
	  })();
	  (function canvasPixelArrayBuffer() {
	    if (!hasDOM || !window.CanvasPixelArray) {
	      return;
	    }
	    var cpaProto = window.CanvasPixelArray.prototype;
	    if ('buffer' in cpaProto) {
	      return;
	    }
	    Object.defineProperty(cpaProto, 'buffer', {
	      get: function get() {
	        return this;
	      },

	      enumerable: false,
	      configurable: true
	    });
	    Object.defineProperty(cpaProto, 'byteLength', {
	      get: function get() {
	        return this.length;
	      },

	      enumerable: false,
	      configurable: true
	    });
	  })();
	  (function normalizeURLObject() {
	    if (!globalScope.URL) {
	      globalScope.URL = globalScope.webkitURL;
	    }
	  })();
	  (function checkObjectDefinePropertyCompatibility() {
	    if (typeof Object.defineProperty !== 'undefined') {
	      var definePropertyPossible = true;
	      try {
	        if (hasDOM) {
	          Object.defineProperty(new Image(), 'id', { value: 'test' });
	        }
	        var Test = function Test() {};
	        Test.prototype = {
	          get id() {}
	        };
	        Object.defineProperty(new Test(), 'id', {
	          value: '',
	          configurable: true,
	          enumerable: true,
	          writable: false
	        });
	      } catch (e) {
	        definePropertyPossible = false;
	      }
	      if (definePropertyPossible) {
	        return;
	      }
	    }
	    Object.defineProperty = function objectDefineProperty(obj, name, def) {
	      delete obj[name];
	      if ('get' in def) {
	        obj.__defineGetter__(name, def['get']);
	      }
	      if ('set' in def) {
	        obj.__defineSetter__(name, def['set']);
	      }
	      if ('value' in def) {
	        obj.__defineSetter__(name, function objectDefinePropertySetter(value) {
	          this.__defineGetter__(name, function objectDefinePropertyGetter() {
	            return value;
	          });
	          return value;
	        });
	        obj[name] = def.value;
	      }
	    };
	  })();
	  (function checkXMLHttpRequestResponseCompatibility() {
	    if (typeof XMLHttpRequest === 'undefined') {
	      return;
	    }
	    var xhrPrototype = XMLHttpRequest.prototype;
	    var xhr = new XMLHttpRequest();
	    if (!('overrideMimeType' in xhr)) {
	      Object.defineProperty(xhrPrototype, 'overrideMimeType', {
	        value: function xmlHttpRequestOverrideMimeType(mimeType) {}
	      });
	    }
	    if ('responseType' in xhr) {
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'responseType', {
	      get: function xmlHttpRequestGetResponseType() {
	        return this._responseType || 'text';
	      },
	      set: function xmlHttpRequestSetResponseType(value) {
	        if (value === 'text' || value === 'arraybuffer') {
	          this._responseType = value;
	          if (value === 'arraybuffer' && typeof this.overrideMimeType === 'function') {
	            this.overrideMimeType('text/plain; charset=x-user-defined');
	          }
	        }
	      }
	    });
	    if (typeof VBArray !== 'undefined') {
	      Object.defineProperty(xhrPrototype, 'response', {
	        get: function xmlHttpRequestResponseGet() {
	          if (this.responseType === 'arraybuffer') {
	            return new Uint8Array(new VBArray(this.responseBody).toArray());
	          }
	          return this.responseText;
	        }
	      });
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'response', {
	      get: function xmlHttpRequestResponseGet() {
	        if (this.responseType !== 'arraybuffer') {
	          return this.responseText;
	        }
	        var text = this.responseText;
	        var i,
	            n = text.length;
	        var result = new Uint8Array(n);
	        for (i = 0; i < n; ++i) {
	          result[i] = text.charCodeAt(i) & 0xFF;
	        }
	        return result.buffer;
	      }
	    });
	  })();
	  (function checkWindowBtoaCompatibility() {
	    if ('btoa' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.btoa = function (chars) {
	      var buffer = '';
	      var i, n;
	      for (i = 0, n = chars.length; i < n; i += 3) {
	        var b1 = chars.charCodeAt(i) & 0xFF;
	        var b2 = chars.charCodeAt(i + 1) & 0xFF;
	        var b3 = chars.charCodeAt(i + 2) & 0xFF;
	        var d1 = b1 >> 2,
	            d2 = (b1 & 3) << 4 | b2 >> 4;
	        var d3 = i + 1 < n ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	        var d4 = i + 2 < n ? b3 & 0x3F : 64;
	        buffer += digits.charAt(d1) + digits.charAt(d2) + digits.charAt(d3) + digits.charAt(d4);
	      }
	      return buffer;
	    };
	  })();
	  (function checkWindowAtobCompatibility() {
	    if ('atob' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.atob = function (input) {
	      input = input.replace(/=+$/, '');
	      if (input.length % 4 === 1) {
	        throw new Error('bad atob input');
	      }
	      for (var bc = 0, bs, buffer, idx = 0, output = ''; buffer = input.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
	        buffer = digits.indexOf(buffer);
	      }
	      return output;
	    };
	  })();
	  (function checkFunctionPrototypeBindCompatibility() {
	    if (typeof Function.prototype.bind !== 'undefined') {
	      return;
	    }
	    Function.prototype.bind = function functionPrototypeBind(obj) {
	      var fn = this,
	          headArgs = Array.prototype.slice.call(arguments, 1);
	      var bound = function functionPrototypeBindBound() {
	        var args = headArgs.concat(Array.prototype.slice.call(arguments));
	        return fn.apply(obj, args);
	      };
	      return bound;
	    };
	  })();
	  (function checkDatasetProperty() {
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('dataset' in div) {
	      return;
	    }
	    Object.defineProperty(HTMLElement.prototype, 'dataset', {
	      get: function get() {
	        if (this._dataset) {
	          return this._dataset;
	        }
	        var dataset = {};
	        for (var j = 0, jj = this.attributes.length; j < jj; j++) {
	          var attribute = this.attributes[j];
	          if (attribute.name.substring(0, 5) !== 'data-') {
	            continue;
	          }
	          var key = attribute.name.substring(5).replace(/\-([a-z])/g, function (all, ch) {
	            return ch.toUpperCase();
	          });
	          dataset[key] = attribute.value;
	        }
	        Object.defineProperty(this, '_dataset', {
	          value: dataset,
	          writable: false,
	          enumerable: false
	        });
	        return dataset;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkClassListProperty() {
	    function changeList(element, itemName, add, remove) {
	      var s = element.className || '';
	      var list = s.split(/\s+/g);
	      if (list[0] === '') {
	        list.shift();
	      }
	      var index = list.indexOf(itemName);
	      if (index < 0 && add) {
	        list.push(itemName);
	      }
	      if (index >= 0 && remove) {
	        list.splice(index, 1);
	      }
	      element.className = list.join(' ');
	      return index >= 0;
	    }
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('classList' in div) {
	      return;
	    }
	    var classListPrototype = {
	      add: function add(name) {
	        changeList(this.element, name, true, false);
	      },
	      contains: function contains(name) {
	        return changeList(this.element, name, false, false);
	      },
	      remove: function remove(name) {
	        changeList(this.element, name, false, true);
	      },
	      toggle: function toggle(name) {
	        changeList(this.element, name, true, true);
	      }
	    };
	    Object.defineProperty(HTMLElement.prototype, 'classList', {
	      get: function get() {
	        if (this._classList) {
	          return this._classList;
	        }
	        var classList = Object.create(classListPrototype, {
	          element: {
	            value: this,
	            writable: false,
	            enumerable: true
	          }
	        });
	        Object.defineProperty(this, '_classList', {
	          value: classList,
	          writable: false,
	          enumerable: false
	        });
	        return classList;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkWorkerConsoleCompatibility() {
	    if (typeof importScripts === 'undefined' || 'console' in globalScope) {
	      return;
	    }
	    var consoleTimer = {};
	    var workerConsole = {
	      log: function log() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_log',
	          data: args
	        });
	      },
	      error: function error() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_error',
	          data: args
	        });
	      },
	      time: function time(name) {
	        consoleTimer[name] = Date.now();
	      },
	      timeEnd: function timeEnd(name) {
	        var time = consoleTimer[name];
	        if (!time) {
	          throw new Error('Unknown timer name ' + name);
	        }
	        this.log('Timer:', name, Date.now() - time);
	      }
	    };
	    globalScope.console = workerConsole;
	  })();
	  (function checkConsoleCompatibility() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!('console' in window)) {
	      window.console = {
	        log: function log() {},
	        error: function error() {},
	        warn: function warn() {}
	      };
	      return;
	    }
	    if (!('bind' in console.log)) {
	      console.log = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.log);
	      console.error = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.error);
	      console.warn = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.warn);
	      return;
	    }
	  })();
	  (function checkOnClickCompatibility() {
	    function ignoreIfTargetDisabled(event) {
	      if (isDisabled(event.target)) {
	        event.stopPropagation();
	      }
	    }
	    function isDisabled(node) {
	      return node.disabled || node.parentNode && isDisabled(node.parentNode);
	    }
	    if (isOpera) {
	      document.addEventListener('click', ignoreIfTargetDisabled, true);
	    }
	  })();
	  (function checkOnBlobSupport() {
	    if (isIE || isIOSChrome) {
	      PDFJS.disableCreateObjectURL = true;
	    }
	  })();
	  (function checkNavigatorLanguage() {
	    if (typeof navigator === 'undefined') {
	      return;
	    }
	    if ('language' in navigator) {
	      return;
	    }
	    PDFJS.locale = navigator.userLanguage || 'en-US';
	  })();
	  (function checkRangeRequests() {
	    if (isSafari || isAndroidPre3 || isChromeWithRangeBug || isIOS) {
	      PDFJS.disableRange = true;
	      PDFJS.disableStream = true;
	    }
	  })();
	  (function checkHistoryManipulation() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!history.pushState || isAndroidPre3) {
	      PDFJS.disableHistory = true;
	    }
	  })();
	  (function checkSetPresenceInImageData() {
	    if (!hasDOM) {
	      return;
	    }
	    if (window.CanvasPixelArray) {
	      if (typeof window.CanvasPixelArray.prototype.set !== 'function') {
	        window.CanvasPixelArray.prototype.set = function (arr) {
	          for (var i = 0, ii = this.length; i < ii; i++) {
	            this[i] = arr[i];
	          }
	        };
	      }
	    } else {
	      var polyfill = false,
	          versionMatch;
	      if (isChrome) {
	        versionMatch = userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
	        polyfill = versionMatch && parseInt(versionMatch[2]) < 21;
	      } else if (isAndroid) {
	        polyfill = isAndroidPre5;
	      } else if (isSafari) {
	        versionMatch = userAgent.match(/Version\/([0-9]+)\.([0-9]+)\.([0-9]+) Safari\//);
	        polyfill = versionMatch && parseInt(versionMatch[1]) < 6;
	      }
	      if (polyfill) {
	        var contextPrototype = window.CanvasRenderingContext2D.prototype;
	        var createImageData = contextPrototype.createImageData;
	        contextPrototype.createImageData = function (w, h) {
	          var imageData = createImageData.call(this, w, h);
	          imageData.data.set = function (arr) {
	            for (var i = 0, ii = this.length; i < ii; i++) {
	              this[i] = arr[i];
	            }
	          };
	          return imageData;
	        };
	        contextPrototype = null;
	      }
	    }
	  })();
	  (function checkRequestAnimationFrame() {
	    function installFakeAnimationFrameFunctions() {
	      window.requestAnimationFrame = function (callback) {
	        return window.setTimeout(callback, 20);
	      };
	      window.cancelAnimationFrame = function (timeoutID) {
	        window.clearTimeout(timeoutID);
	      };
	    }
	    if (!hasDOM) {
	      return;
	    }
	    if (isIOS) {
	      installFakeAnimationFrameFunctions();
	      return;
	    }
	    if ('requestAnimationFrame' in window) {
	      return;
	    }
	    window.requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
	    if (window.requestAnimationFrame) {
	      return;
	    }
	    installFakeAnimationFrameFunctions();
	  })();
	  (function checkCanvasSizeLimitation() {
	    if (isIOS || isAndroid) {
	      PDFJS.maxCanvasPixels = 5242880;
	    }
	  })();
	  (function checkFullscreenSupport() {
	    if (!hasDOM) {
	      return;
	    }
	    if (isIE && window.parent !== window) {
	      PDFJS.disableFullscreen = true;
	    }
	  })();
	  (function checkCurrentScript() {
	    if (!hasDOM) {
	      return;
	    }
	    if ('currentScript' in document) {
	      return;
	    }
	    Object.defineProperty(document, 'currentScript', {
	      get: function get() {
	        var scripts = document.getElementsByTagName('script');
	        return scripts[scripts.length - 1];
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkInputTypeNumberAssign() {
	    if (!hasDOM) {
	      return;
	    }
	    var el = document.createElement('input');
	    try {
	      el.type = 'number';
	    } catch (ex) {
	      var inputProto = el.constructor.prototype;
	      var typeProperty = Object.getOwnPropertyDescriptor(inputProto, 'type');
	      Object.defineProperty(inputProto, 'type', {
	        get: function get() {
	          return typeProperty.get.call(this);
	        },
	        set: function set(value) {
	          typeProperty.set.call(this, value === 'number' ? 'text' : value);
	        },

	        enumerable: true,
	        configurable: true
	      });
	    }
	  })();
	  (function checkDocumentReadyState() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!document.attachEvent) {
	      return;
	    }
	    var documentProto = document.constructor.prototype;
	    var readyStateProto = Object.getOwnPropertyDescriptor(documentProto, 'readyState');
	    Object.defineProperty(documentProto, 'readyState', {
	      get: function get() {
	        var value = readyStateProto.get.call(this);
	        return value === 'interactive' ? 'loading' : value;
	      },
	      set: function set(value) {
	        readyStateProto.set.call(this, value);
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkChildNodeRemove() {
	    if (!hasDOM) {
	      return;
	    }
	    if (typeof Element.prototype.remove !== 'undefined') {
	      return;
	    }
	    Element.prototype.remove = function () {
	      if (this.parentNode) {
	        this.parentNode.removeChild(this);
	      }
	    };
	  })();
	  (function checkPromise() {
	    if (globalScope.Promise) {
	      if (typeof globalScope.Promise.all !== 'function') {
	        globalScope.Promise.all = function (iterable) {
	          var count = 0,
	              results = [],
	              resolve,
	              reject;
	          var promise = new globalScope.Promise(function (resolve_, reject_) {
	            resolve = resolve_;
	            reject = reject_;
	          });
	          iterable.forEach(function (p, i) {
	            count++;
	            p.then(function (result) {
	              results[i] = result;
	              count--;
	              if (count === 0) {
	                resolve(results);
	              }
	            }, reject);
	          });
	          if (count === 0) {
	            resolve(results);
	          }
	          return promise;
	        };
	      }
	      if (typeof globalScope.Promise.resolve !== 'function') {
	        globalScope.Promise.resolve = function (value) {
	          return new globalScope.Promise(function (resolve) {
	            resolve(value);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.reject !== 'function') {
	        globalScope.Promise.reject = function (reason) {
	          return new globalScope.Promise(function (resolve, reject) {
	            reject(reason);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.prototype.catch !== 'function') {
	        globalScope.Promise.prototype.catch = function (onReject) {
	          return globalScope.Promise.prototype.then(undefined, onReject);
	        };
	      }
	      return;
	    }
	    var STATUS_PENDING = 0;
	    var STATUS_RESOLVED = 1;
	    var STATUS_REJECTED = 2;
	    var REJECTION_TIMEOUT = 500;
	    var HandlerManager = {
	      handlers: [],
	      running: false,
	      unhandledRejections: [],
	      pendingRejectionCheck: false,
	      scheduleHandlers: function scheduleHandlers(promise) {
	        if (promise._status === STATUS_PENDING) {
	          return;
	        }
	        this.handlers = this.handlers.concat(promise._handlers);
	        promise._handlers = [];
	        if (this.running) {
	          return;
	        }
	        this.running = true;
	        setTimeout(this.runHandlers.bind(this), 0);
	      },
	      runHandlers: function runHandlers() {
	        var RUN_TIMEOUT = 1;
	        var timeoutAt = Date.now() + RUN_TIMEOUT;
	        while (this.handlers.length > 0) {
	          var handler = this.handlers.shift();
	          var nextStatus = handler.thisPromise._status;
	          var nextValue = handler.thisPromise._value;
	          try {
	            if (nextStatus === STATUS_RESOLVED) {
	              if (typeof handler.onResolve === 'function') {
	                nextValue = handler.onResolve(nextValue);
	              }
	            } else if (typeof handler.onReject === 'function') {
	              nextValue = handler.onReject(nextValue);
	              nextStatus = STATUS_RESOLVED;
	              if (handler.thisPromise._unhandledRejection) {
	                this.removeUnhandeledRejection(handler.thisPromise);
	              }
	            }
	          } catch (ex) {
	            nextStatus = STATUS_REJECTED;
	            nextValue = ex;
	          }
	          handler.nextPromise._updateStatus(nextStatus, nextValue);
	          if (Date.now() >= timeoutAt) {
	            break;
	          }
	        }
	        if (this.handlers.length > 0) {
	          setTimeout(this.runHandlers.bind(this), 0);
	          return;
	        }
	        this.running = false;
	      },
	      addUnhandledRejection: function addUnhandledRejection(promise) {
	        this.unhandledRejections.push({
	          promise: promise,
	          time: Date.now()
	        });
	        this.scheduleRejectionCheck();
	      },
	      removeUnhandeledRejection: function removeUnhandeledRejection(promise) {
	        promise._unhandledRejection = false;
	        for (var i = 0; i < this.unhandledRejections.length; i++) {
	          if (this.unhandledRejections[i].promise === promise) {
	            this.unhandledRejections.splice(i);
	            i--;
	          }
	        }
	      },
	      scheduleRejectionCheck: function scheduleRejectionCheck() {
	        var _this = this;

	        if (this.pendingRejectionCheck) {
	          return;
	        }
	        this.pendingRejectionCheck = true;
	        setTimeout(function () {
	          _this.pendingRejectionCheck = false;
	          var now = Date.now();
	          for (var i = 0; i < _this.unhandledRejections.length; i++) {
	            if (now - _this.unhandledRejections[i].time > REJECTION_TIMEOUT) {
	              var unhandled = _this.unhandledRejections[i].promise._value;
	              var msg = 'Unhandled rejection: ' + unhandled;
	              if (unhandled.stack) {
	                msg += '\n' + unhandled.stack;
	              }
	              try {
	                throw new Error(msg);
	              } catch (_) {
	                console.warn(msg);
	              }
	              _this.unhandledRejections.splice(i);
	              i--;
	            }
	          }
	          if (_this.unhandledRejections.length) {
	            _this.scheduleRejectionCheck();
	          }
	        }, REJECTION_TIMEOUT);
	      }
	    };
	    var Promise = function Promise(resolver) {
	      this._status = STATUS_PENDING;
	      this._handlers = [];
	      try {
	        resolver.call(this, this._resolve.bind(this), this._reject.bind(this));
	      } catch (e) {
	        this._reject(e);
	      }
	    };
	    Promise.all = function Promise_all(promises) {
	      var resolveAll, rejectAll;
	      var deferred = new Promise(function (resolve, reject) {
	        resolveAll = resolve;
	        rejectAll = reject;
	      });
	      var unresolved = promises.length;
	      var results = [];
	      if (unresolved === 0) {
	        resolveAll(results);
	        return deferred;
	      }
	      function reject(reason) {
	        if (deferred._status === STATUS_REJECTED) {
	          return;
	        }
	        results = [];
	        rejectAll(reason);
	      }
	      for (var i = 0, ii = promises.length; i < ii; ++i) {
	        var promise = promises[i];
	        var resolve = function (i) {
	          return function (value) {
	            if (deferred._status === STATUS_REJECTED) {
	              return;
	            }
	            results[i] = value;
	            unresolved--;
	            if (unresolved === 0) {
	              resolveAll(results);
	            }
	          };
	        }(i);
	        if (Promise.isPromise(promise)) {
	          promise.then(resolve, reject);
	        } else {
	          resolve(promise);
	        }
	      }
	      return deferred;
	    };
	    Promise.isPromise = function Promise_isPromise(value) {
	      return value && typeof value.then === 'function';
	    };
	    Promise.resolve = function Promise_resolve(value) {
	      return new Promise(function (resolve) {
	        resolve(value);
	      });
	    };
	    Promise.reject = function Promise_reject(reason) {
	      return new Promise(function (resolve, reject) {
	        reject(reason);
	      });
	    };
	    Promise.prototype = {
	      _status: null,
	      _value: null,
	      _handlers: null,
	      _unhandledRejection: null,
	      _updateStatus: function Promise__updateStatus(status, value) {
	        if (this._status === STATUS_RESOLVED || this._status === STATUS_REJECTED) {
	          return;
	        }
	        if (status === STATUS_RESOLVED && Promise.isPromise(value)) {
	          value.then(this._updateStatus.bind(this, STATUS_RESOLVED), this._updateStatus.bind(this, STATUS_REJECTED));
	          return;
	        }
	        this._status = status;
	        this._value = value;
	        if (status === STATUS_REJECTED && this._handlers.length === 0) {
	          this._unhandledRejection = true;
	          HandlerManager.addUnhandledRejection(this);
	        }
	        HandlerManager.scheduleHandlers(this);
	      },
	      _resolve: function Promise_resolve(value) {
	        this._updateStatus(STATUS_RESOLVED, value);
	      },
	      _reject: function Promise_reject(reason) {
	        this._updateStatus(STATUS_REJECTED, reason);
	      },
	      then: function Promise_then(onResolve, onReject) {
	        var nextPromise = new Promise(function (resolve, reject) {
	          this.resolve = resolve;
	          this.reject = reject;
	        });
	        this._handlers.push({
	          thisPromise: this,
	          onResolve: onResolve,
	          onReject: onReject,
	          nextPromise: nextPromise
	        });
	        HandlerManager.scheduleHandlers(this);
	        return nextPromise;
	      },
	      catch: function Promise_catch(onReject) {
	        return this.then(undefined, onReject);
	      }
	    };
	    globalScope.Promise = Promise;
	  })();
	  (function checkWeakMap() {
	    if (globalScope.WeakMap) {
	      return;
	    }
	    var id = 0;
	    function WeakMap() {
	      this.id = '$weakmap' + id++;
	    }
	    WeakMap.prototype = {
	      has: function has(obj) {
	        return !!Object.getOwnPropertyDescriptor(obj, this.id);
	      },
	      get: function get(obj, defaultValue) {
	        return this.has(obj) ? obj[this.id] : defaultValue;
	      },
	      set: function set(obj, value) {
	        Object.defineProperty(obj, this.id, {
	          value: value,
	          enumerable: false,
	          configurable: true
	        });
	      },
	      delete: function _delete(obj) {
	        delete obj[this.id];
	      }
	    };
	    globalScope.WeakMap = WeakMap;
	  })();
	  (function checkURLConstructor() {
	    var hasWorkingUrl = false;
	    try {
	      if (typeof URL === 'function' && _typeof(URL.prototype) === 'object' && 'origin' in URL.prototype) {
	        var u = new URL('b', 'http://a');
	        u.pathname = 'c%20d';
	        hasWorkingUrl = u.href === 'http://a/c%20d';
	      }
	    } catch (e) {}
	    if (hasWorkingUrl) {
	      return;
	    }
	    var relative = Object.create(null);
	    relative['ftp'] = 21;
	    relative['file'] = 0;
	    relative['gopher'] = 70;
	    relative['http'] = 80;
	    relative['https'] = 443;
	    relative['ws'] = 80;
	    relative['wss'] = 443;
	    var relativePathDotMapping = Object.create(null);
	    relativePathDotMapping['%2e'] = '.';
	    relativePathDotMapping['.%2e'] = '..';
	    relativePathDotMapping['%2e.'] = '..';
	    relativePathDotMapping['%2e%2e'] = '..';
	    function isRelativeScheme(scheme) {
	      return relative[scheme] !== undefined;
	    }
	    function invalid() {
	      clear.call(this);
	      this._isInvalid = true;
	    }
	    function IDNAToASCII(h) {
	      if (h === '') {
	        invalid.call(this);
	      }
	      return h.toLowerCase();
	    }
	    function percentEscape(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    function percentEscapeQuery(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    var EOF,
	        ALPHA = /[a-zA-Z]/,
	        ALPHANUMERIC = /[a-zA-Z0-9\+\-\.]/;
	    function parse(input, stateOverride, base) {
	      function err(message) {
	        errors.push(message);
	      }
	      var state = stateOverride || 'scheme start',
	          cursor = 0,
	          buffer = '',
	          seenAt = false,
	          seenBracket = false,
	          errors = [];
	      loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {
	        var c = input[cursor];
	        switch (state) {
	          case 'scheme start':
	            if (c && ALPHA.test(c)) {
	              buffer += c.toLowerCase();
	              state = 'scheme';
	            } else if (!stateOverride) {
	              buffer = '';
	              state = 'no scheme';
	              continue;
	            } else {
	              err('Invalid scheme.');
	              break loop;
	            }
	            break;
	          case 'scheme':
	            if (c && ALPHANUMERIC.test(c)) {
	              buffer += c.toLowerCase();
	            } else if (c === ':') {
	              this._scheme = buffer;
	              buffer = '';
	              if (stateOverride) {
	                break loop;
	              }
	              if (isRelativeScheme(this._scheme)) {
	                this._isRelative = true;
	              }
	              if (this._scheme === 'file') {
	                state = 'relative';
	              } else if (this._isRelative && base && base._scheme === this._scheme) {
	                state = 'relative or authority';
	              } else if (this._isRelative) {
	                state = 'authority first slash';
	              } else {
	                state = 'scheme data';
	              }
	            } else if (!stateOverride) {
	              buffer = '';
	              cursor = 0;
	              state = 'no scheme';
	              continue;
	            } else if (c === EOF) {
	              break loop;
	            } else {
	              err('Code point not allowed in scheme: ' + c);
	              break loop;
	            }
	            break;
	          case 'scheme data':
	            if (c === '?') {
	              this._query = '?';
	              state = 'query';
	            } else if (c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else {
	              if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	                this._schemeData += percentEscape(c);
	              }
	            }
	            break;
	          case 'no scheme':
	            if (!base || !isRelativeScheme(base._scheme)) {
	              err('Missing scheme.');
	              invalid.call(this);
	            } else {
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative or authority':
	            if (c === '/' && input[cursor + 1] === '/') {
	              state = 'authority ignore slashes';
	            } else {
	              err('Expected /, got: ' + c);
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative':
	            this._isRelative = true;
	            if (this._scheme !== 'file') {
	              this._scheme = base._scheme;
	            }
	            if (c === EOF) {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._username = base._username;
	              this._password = base._password;
	              break loop;
	            } else if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              state = 'relative slash';
	            } else if (c === '?') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = '?';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'query';
	            } else if (c === '#') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._fragment = '#';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'fragment';
	            } else {
	              var nextC = input[cursor + 1];
	              var nextNextC = input[cursor + 2];
	              if (this._scheme !== 'file' || !ALPHA.test(c) || nextC !== ':' && nextC !== '|' || nextNextC !== EOF && nextNextC !== '/' && nextNextC !== '\\' && nextNextC !== '?' && nextNextC !== '#') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	                this._path = base._path.slice();
	                this._path.pop();
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'relative slash':
	            if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              if (this._scheme === 'file') {
	                state = 'file host';
	              } else {
	                state = 'authority ignore slashes';
	              }
	            } else {
	              if (this._scheme !== 'file') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'authority first slash':
	            if (c === '/') {
	              state = 'authority second slash';
	            } else {
	              err('Expected \'/\', got: ' + c);
	              state = 'authority ignore slashes';
	              continue;
	            }
	            break;
	          case 'authority second slash':
	            state = 'authority ignore slashes';
	            if (c !== '/') {
	              err('Expected \'/\', got: ' + c);
	              continue;
	            }
	            break;
	          case 'authority ignore slashes':
	            if (c !== '/' && c !== '\\') {
	              state = 'authority';
	              continue;
	            } else {
	              err('Expected authority, got: ' + c);
	            }
	            break;
	          case 'authority':
	            if (c === '@') {
	              if (seenAt) {
	                err('@ already seen.');
	                buffer += '%40';
	              }
	              seenAt = true;
	              for (var i = 0; i < buffer.length; i++) {
	                var cp = buffer[i];
	                if (cp === '\t' || cp === '\n' || cp === '\r') {
	                  err('Invalid whitespace in authority.');
	                  continue;
	                }
	                if (cp === ':' && this._password === null) {
	                  this._password = '';
	                  continue;
	                }
	                var tempC = percentEscape(cp);
	                if (this._password !== null) {
	                  this._password += tempC;
	                } else {
	                  this._username += tempC;
	                }
	              }
	              buffer = '';
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              cursor -= buffer.length;
	              buffer = '';
	              state = 'host';
	              continue;
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'file host':
	            if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              if (buffer.length === 2 && ALPHA.test(buffer[0]) && (buffer[1] === ':' || buffer[1] === '|')) {
	                state = 'relative path';
	              } else if (buffer.length === 0) {
	                state = 'relative path start';
	              } else {
	                this._host = IDNAToASCII.call(this, buffer);
	                buffer = '';
	                state = 'relative path start';
	              }
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid whitespace in file host.');
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'host':
	          case 'hostname':
	            if (c === ':' && !seenBracket) {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'port';
	              if (stateOverride === 'hostname') {
	                break loop;
	              }
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'relative path start';
	              if (stateOverride) {
	                break loop;
	              }
	              continue;
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              if (c === '[') {
	                seenBracket = true;
	              } else if (c === ']') {
	                seenBracket = false;
	              }
	              buffer += c;
	            } else {
	              err('Invalid code point in host/hostname: ' + c);
	            }
	            break;
	          case 'port':
	            if (/[0-9]/.test(c)) {
	              buffer += c;
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#' || stateOverride) {
	              if (buffer !== '') {
	                var temp = parseInt(buffer, 10);
	                if (temp !== relative[this._scheme]) {
	                  this._port = temp + '';
	                }
	                buffer = '';
	              }
	              if (stateOverride) {
	                break loop;
	              }
	              state = 'relative path start';
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid code point in port: ' + c);
	            } else {
	              invalid.call(this);
	            }
	            break;
	          case 'relative path start':
	            if (c === '\\') {
	              err('\'\\\' not allowed in path.');
	            }
	            state = 'relative path';
	            if (c !== '/' && c !== '\\') {
	              continue;
	            }
	            break;
	          case 'relative path':
	            if (c === EOF || c === '/' || c === '\\' || !stateOverride && (c === '?' || c === '#')) {
	              if (c === '\\') {
	                err('\\ not allowed in relative path.');
	              }
	              var tmp;
	              if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {
	                buffer = tmp;
	              }
	              if (buffer === '..') {
	                this._path.pop();
	                if (c !== '/' && c !== '\\') {
	                  this._path.push('');
	                }
	              } else if (buffer === '.' && c !== '/' && c !== '\\') {
	                this._path.push('');
	              } else if (buffer !== '.') {
	                if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 && ALPHA.test(buffer[0]) && buffer[1] === '|') {
	                  buffer = buffer[0] + ':';
	                }
	                this._path.push(buffer);
	              }
	              buffer = '';
	              if (c === '?') {
	                this._query = '?';
	                state = 'query';
	              } else if (c === '#') {
	                this._fragment = '#';
	                state = 'fragment';
	              }
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              buffer += percentEscape(c);
	            }
	            break;
	          case 'query':
	            if (!stateOverride && c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._query += percentEscapeQuery(c);
	            }
	            break;
	          case 'fragment':
	            if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._fragment += c;
	            }
	            break;
	        }
	        cursor++;
	      }
	    }
	    function clear() {
	      this._scheme = '';
	      this._schemeData = '';
	      this._username = '';
	      this._password = null;
	      this._host = '';
	      this._port = '';
	      this._path = [];
	      this._query = '';
	      this._fragment = '';
	      this._isInvalid = false;
	      this._isRelative = false;
	    }
	    function JURL(url, base) {
	      if (base !== undefined && !(base instanceof JURL)) {
	        base = new JURL(String(base));
	      }
	      this._url = url;
	      clear.call(this);
	      var input = url.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, '');
	      parse.call(this, input, null, base);
	    }
	    JURL.prototype = {
	      toString: function toString() {
	        return this.href;
	      },

	      get href() {
	        if (this._isInvalid) {
	          return this._url;
	        }
	        var authority = '';
	        if (this._username !== '' || this._password !== null) {
	          authority = this._username + (this._password !== null ? ':' + this._password : '') + '@';
	        }
	        return this.protocol + (this._isRelative ? '//' + authority + this.host : '') + this.pathname + this._query + this._fragment;
	      },
	      set href(href) {
	        clear.call(this);
	        parse.call(this, href);
	      },
	      get protocol() {
	        return this._scheme + ':';
	      },
	      set protocol(protocol) {
	        if (this._isInvalid) {
	          return;
	        }
	        parse.call(this, protocol + ':', 'scheme start');
	      },
	      get host() {
	        return this._isInvalid ? '' : this._port ? this._host + ':' + this._port : this._host;
	      },
	      set host(host) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, host, 'host');
	      },
	      get hostname() {
	        return this._host;
	      },
	      set hostname(hostname) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, hostname, 'hostname');
	      },
	      get port() {
	        return this._port;
	      },
	      set port(port) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, port, 'port');
	      },
	      get pathname() {
	        return this._isInvalid ? '' : this._isRelative ? '/' + this._path.join('/') : this._schemeData;
	      },
	      set pathname(pathname) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._path = [];
	        parse.call(this, pathname, 'relative path start');
	      },
	      get search() {
	        return this._isInvalid || !this._query || this._query === '?' ? '' : this._query;
	      },
	      set search(search) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._query = '?';
	        if (search[0] === '?') {
	          search = search.slice(1);
	        }
	        parse.call(this, search, 'query');
	      },
	      get hash() {
	        return this._isInvalid || !this._fragment || this._fragment === '#' ? '' : this._fragment;
	      },
	      set hash(hash) {
	        if (this._isInvalid) {
	          return;
	        }
	        this._fragment = '#';
	        if (hash[0] === '#') {
	          hash = hash.slice(1);
	        }
	        parse.call(this, hash, 'fragment');
	      },
	      get origin() {
	        var host;
	        if (this._isInvalid || !this._scheme) {
	          return '';
	        }
	        switch (this._scheme) {
	          case 'data':
	          case 'file':
	          case 'javascript':
	          case 'mailto':
	            return 'null';
	        }
	        host = this.host;
	        if (!host) {
	          return '';
	        }
	        return this._scheme + '://' + host;
	      }
	    };
	    var OriginalURL = globalScope.URL;
	    if (OriginalURL) {
	      JURL.createObjectURL = function (blob) {
	        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);
	      };
	      JURL.revokeObjectURL = function (url) {
	        OriginalURL.revokeObjectURL(url);
	      };
	    }
	    globalScope.URL = JURL;
	  })();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __w_pdfjs_require__(6)))

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=pdf.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright 2017 Mozilla Foundation
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("pdfjs-dist/build/pdf.worker", [], factory);
		else if(typeof exports === 'object')
			exports["pdfjs-dist/build/pdf.worker"] = factory();
		else
			root["pdfjs-dist/build/pdf.worker"] = root.pdfjsDistBuildPdfWorker = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __w_pdfjs_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__w_pdfjs_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__w_pdfjs_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__w_pdfjs_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__w_pdfjs_require__.d = function(exports, name, getter) {
	/******/ 		if(!__w_pdfjs_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__w_pdfjs_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__w_pdfjs_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__w_pdfjs_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__w_pdfjs_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __w_pdfjs_require__(__w_pdfjs_require__.s = 36);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(global) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.warn = exports.utf8StringToString = exports.stringToUTF8String = exports.stringToPDFString = exports.stringToBytes = exports.string32 = exports.shadow = exports.setVerbosityLevel = exports.removeNullCharacters = exports.readUint32 = exports.readUint16 = exports.readInt8 = exports.log2 = exports.loadJpegStream = exports.isEvalSupported = exports.isLittleEndian = exports.createValidAbsoluteUrl = exports.isSameOrigin = exports.isNodeJS = exports.isSpace = exports.isString = exports.isNum = exports.isInt = exports.isEmptyObj = exports.isBool = exports.isArrayBuffer = exports.isArray = exports.info = exports.globalScope = exports.getVerbosityLevel = exports.getLookupTableFactory = exports.error = exports.deprecated = exports.createObjectURL = exports.createPromiseCapability = exports.createBlob = exports.bytesToString = exports.assert = exports.arraysToBytes = exports.arrayByteLength = exports.XRefParseException = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.StatTimer = exports.PasswordResponses = exports.PasswordException = exports.PageViewport = exports.NotImplementedException = exports.NativeImageDecoding = exports.MissingPDFException = exports.MissingDataException = exports.MessageHandler = exports.InvalidPDFException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VERBOSITY_LEVELS = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	__w_pdfjs_require__(37);

	var globalScope = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : undefined;
	var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
	var NativeImageDecoding = {
	  NONE: 'none',
	  DECODE: 'decode',
	  DISPLAY: 'display'
	};
	var TextRenderingMode = {
	  FILL: 0,
	  STROKE: 1,
	  FILL_STROKE: 2,
	  INVISIBLE: 3,
	  FILL_ADD_TO_PATH: 4,
	  STROKE_ADD_TO_PATH: 5,
	  FILL_STROKE_ADD_TO_PATH: 6,
	  ADD_TO_PATH: 7,
	  FILL_STROKE_MASK: 3,
	  ADD_TO_PATH_FLAG: 4
	};
	var ImageKind = {
	  GRAYSCALE_1BPP: 1,
	  RGB_24BPP: 2,
	  RGBA_32BPP: 3
	};
	var AnnotationType = {
	  TEXT: 1,
	  LINK: 2,
	  FREETEXT: 3,
	  LINE: 4,
	  SQUARE: 5,
	  CIRCLE: 6,
	  POLYGON: 7,
	  POLYLINE: 8,
	  HIGHLIGHT: 9,
	  UNDERLINE: 10,
	  SQUIGGLY: 11,
	  STRIKEOUT: 12,
	  STAMP: 13,
	  CARET: 14,
	  INK: 15,
	  POPUP: 16,
	  FILEATTACHMENT: 17,
	  SOUND: 18,
	  MOVIE: 19,
	  WIDGET: 20,
	  SCREEN: 21,
	  PRINTERMARK: 22,
	  TRAPNET: 23,
	  WATERMARK: 24,
	  THREED: 25,
	  REDACT: 26
	};
	var AnnotationFlag = {
	  INVISIBLE: 0x01,
	  HIDDEN: 0x02,
	  PRINT: 0x04,
	  NOZOOM: 0x08,
	  NOROTATE: 0x10,
	  NOVIEW: 0x20,
	  READONLY: 0x40,
	  LOCKED: 0x80,
	  TOGGLENOVIEW: 0x100,
	  LOCKEDCONTENTS: 0x200
	};
	var AnnotationFieldFlag = {
	  READONLY: 0x0000001,
	  REQUIRED: 0x0000002,
	  NOEXPORT: 0x0000004,
	  MULTILINE: 0x0001000,
	  PASSWORD: 0x0002000,
	  NOTOGGLETOOFF: 0x0004000,
	  RADIO: 0x0008000,
	  PUSHBUTTON: 0x0010000,
	  COMBO: 0x0020000,
	  EDIT: 0x0040000,
	  SORT: 0x0080000,
	  FILESELECT: 0x0100000,
	  MULTISELECT: 0x0200000,
	  DONOTSPELLCHECK: 0x0400000,
	  DONOTSCROLL: 0x0800000,
	  COMB: 0x1000000,
	  RICHTEXT: 0x2000000,
	  RADIOSINUNISON: 0x2000000,
	  COMMITONSELCHANGE: 0x4000000
	};
	var AnnotationBorderStyleType = {
	  SOLID: 1,
	  DASHED: 2,
	  BEVELED: 3,
	  INSET: 4,
	  UNDERLINE: 5
	};
	var StreamType = {
	  UNKNOWN: 0,
	  FLATE: 1,
	  LZW: 2,
	  DCT: 3,
	  JPX: 4,
	  JBIG: 5,
	  A85: 6,
	  AHX: 7,
	  CCF: 8,
	  RL: 9
	};
	var FontType = {
	  UNKNOWN: 0,
	  TYPE1: 1,
	  TYPE1C: 2,
	  CIDFONTTYPE0: 3,
	  CIDFONTTYPE0C: 4,
	  TRUETYPE: 5,
	  CIDFONTTYPE2: 6,
	  TYPE3: 7,
	  OPENTYPE: 8,
	  TYPE0: 9,
	  MMTYPE1: 10
	};
	var VERBOSITY_LEVELS = {
	  errors: 0,
	  warnings: 1,
	  infos: 5
	};
	var CMapCompressionType = {
	  NONE: 0,
	  BINARY: 1,
	  STREAM: 2
	};
	var OPS = {
	  dependency: 1,
	  setLineWidth: 2,
	  setLineCap: 3,
	  setLineJoin: 4,
	  setMiterLimit: 5,
	  setDash: 6,
	  setRenderingIntent: 7,
	  setFlatness: 8,
	  setGState: 9,
	  save: 10,
	  restore: 11,
	  transform: 12,
	  moveTo: 13,
	  lineTo: 14,
	  curveTo: 15,
	  curveTo2: 16,
	  curveTo3: 17,
	  closePath: 18,
	  rectangle: 19,
	  stroke: 20,
	  closeStroke: 21,
	  fill: 22,
	  eoFill: 23,
	  fillStroke: 24,
	  eoFillStroke: 25,
	  closeFillStroke: 26,
	  closeEOFillStroke: 27,
	  endPath: 28,
	  clip: 29,
	  eoClip: 30,
	  beginText: 31,
	  endText: 32,
	  setCharSpacing: 33,
	  setWordSpacing: 34,
	  setHScale: 35,
	  setLeading: 36,
	  setFont: 37,
	  setTextRenderingMode: 38,
	  setTextRise: 39,
	  moveText: 40,
	  setLeadingMoveText: 41,
	  setTextMatrix: 42,
	  nextLine: 43,
	  showText: 44,
	  showSpacedText: 45,
	  nextLineShowText: 46,
	  nextLineSetSpacingShowText: 47,
	  setCharWidth: 48,
	  setCharWidthAndBounds: 49,
	  setStrokeColorSpace: 50,
	  setFillColorSpace: 51,
	  setStrokeColor: 52,
	  setStrokeColorN: 53,
	  setFillColor: 54,
	  setFillColorN: 55,
	  setStrokeGray: 56,
	  setFillGray: 57,
	  setStrokeRGBColor: 58,
	  setFillRGBColor: 59,
	  setStrokeCMYKColor: 60,
	  setFillCMYKColor: 61,
	  shadingFill: 62,
	  beginInlineImage: 63,
	  beginImageData: 64,
	  endInlineImage: 65,
	  paintXObject: 66,
	  markPoint: 67,
	  markPointProps: 68,
	  beginMarkedContent: 69,
	  beginMarkedContentProps: 70,
	  endMarkedContent: 71,
	  beginCompat: 72,
	  endCompat: 73,
	  paintFormXObjectBegin: 74,
	  paintFormXObjectEnd: 75,
	  beginGroup: 76,
	  endGroup: 77,
	  beginAnnotations: 78,
	  endAnnotations: 79,
	  beginAnnotation: 80,
	  endAnnotation: 81,
	  paintJpegXObject: 82,
	  paintImageMaskXObject: 83,
	  paintImageMaskXObjectGroup: 84,
	  paintImageXObject: 85,
	  paintInlineImageXObject: 86,
	  paintInlineImageXObjectGroup: 87,
	  paintImageXObjectRepeat: 88,
	  paintImageMaskXObjectRepeat: 89,
	  paintSolidColorImageMask: 90,
	  constructPath: 91
	};
	var verbosity = VERBOSITY_LEVELS.warnings;
	function setVerbosityLevel(level) {
	  verbosity = level;
	}
	function getVerbosityLevel() {
	  return verbosity;
	}
	function info(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.infos) {
	    console.log('Info: ' + msg);
	  }
	}
	function warn(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.warnings) {
	    console.log('Warning: ' + msg);
	  }
	}
	function deprecated(details) {
	  console.log('Deprecated API usage: ' + details);
	}
	function error(msg) {
	  if (verbosity >= VERBOSITY_LEVELS.errors) {
	    console.log('Error: ' + msg);
	    console.log(backtrace());
	  }
	  throw new Error(msg);
	}
	function backtrace() {
	  try {
	    throw new Error();
	  } catch (e) {
	    return e.stack ? e.stack.split('\n').slice(2).join('\n') : '';
	  }
	}
	function assert(cond, msg) {
	  if (!cond) {
	    error(msg);
	  }
	}
	var UNSUPPORTED_FEATURES = {
	  unknown: 'unknown',
	  forms: 'forms',
	  javaScript: 'javaScript',
	  smask: 'smask',
	  shadingPattern: 'shadingPattern',
	  font: 'font'
	};
	function isSameOrigin(baseUrl, otherUrl) {
	  try {
	    var base = new URL(baseUrl);
	    if (!base.origin || base.origin === 'null') {
	      return false;
	    }
	  } catch (e) {
	    return false;
	  }
	  var other = new URL(otherUrl, base);
	  return base.origin === other.origin;
	}
	function isValidProtocol(url) {
	  if (!url) {
	    return false;
	  }
	  switch (url.protocol) {
	    case 'http:':
	    case 'https:':
	    case 'ftp:':
	    case 'mailto:':
	    case 'tel:':
	      return true;
	    default:
	      return false;
	  }
	}
	function createValidAbsoluteUrl(url, baseUrl) {
	  if (!url) {
	    return null;
	  }
	  try {
	    var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
	    if (isValidProtocol(absoluteUrl)) {
	      return absoluteUrl;
	    }
	  } catch (ex) {}
	  return null;
	}
	function shadow(obj, prop, value) {
	  Object.defineProperty(obj, prop, {
	    value: value,
	    enumerable: true,
	    configurable: true,
	    writable: false
	  });
	  return value;
	}
	function getLookupTableFactory(initializer) {
	  var lookup;
	  return function () {
	    if (initializer) {
	      lookup = Object.create(null);
	      initializer(lookup);
	      initializer = null;
	    }
	    return lookup;
	  };
	}
	var PasswordResponses = {
	  NEED_PASSWORD: 1,
	  INCORRECT_PASSWORD: 2
	};
	var PasswordException = function PasswordExceptionClosure() {
	  function PasswordException(msg, code) {
	    this.name = 'PasswordException';
	    this.message = msg;
	    this.code = code;
	  }
	  PasswordException.prototype = new Error();
	  PasswordException.constructor = PasswordException;
	  return PasswordException;
	}();
	var UnknownErrorException = function UnknownErrorExceptionClosure() {
	  function UnknownErrorException(msg, details) {
	    this.name = 'UnknownErrorException';
	    this.message = msg;
	    this.details = details;
	  }
	  UnknownErrorException.prototype = new Error();
	  UnknownErrorException.constructor = UnknownErrorException;
	  return UnknownErrorException;
	}();
	var InvalidPDFException = function InvalidPDFExceptionClosure() {
	  function InvalidPDFException(msg) {
	    this.name = 'InvalidPDFException';
	    this.message = msg;
	  }
	  InvalidPDFException.prototype = new Error();
	  InvalidPDFException.constructor = InvalidPDFException;
	  return InvalidPDFException;
	}();
	var MissingPDFException = function MissingPDFExceptionClosure() {
	  function MissingPDFException(msg) {
	    this.name = 'MissingPDFException';
	    this.message = msg;
	  }
	  MissingPDFException.prototype = new Error();
	  MissingPDFException.constructor = MissingPDFException;
	  return MissingPDFException;
	}();
	var UnexpectedResponseException = function UnexpectedResponseExceptionClosure() {
	  function UnexpectedResponseException(msg, status) {
	    this.name = 'UnexpectedResponseException';
	    this.message = msg;
	    this.status = status;
	  }
	  UnexpectedResponseException.prototype = new Error();
	  UnexpectedResponseException.constructor = UnexpectedResponseException;
	  return UnexpectedResponseException;
	}();
	var NotImplementedException = function NotImplementedExceptionClosure() {
	  function NotImplementedException(msg) {
	    this.message = msg;
	  }
	  NotImplementedException.prototype = new Error();
	  NotImplementedException.prototype.name = 'NotImplementedException';
	  NotImplementedException.constructor = NotImplementedException;
	  return NotImplementedException;
	}();
	var MissingDataException = function MissingDataExceptionClosure() {
	  function MissingDataException(begin, end) {
	    this.begin = begin;
	    this.end = end;
	    this.message = 'Missing data [' + begin + ', ' + end + ')';
	  }
	  MissingDataException.prototype = new Error();
	  MissingDataException.prototype.name = 'MissingDataException';
	  MissingDataException.constructor = MissingDataException;
	  return MissingDataException;
	}();
	var XRefParseException = function XRefParseExceptionClosure() {
	  function XRefParseException(msg) {
	    this.message = msg;
	  }
	  XRefParseException.prototype = new Error();
	  XRefParseException.prototype.name = 'XRefParseException';
	  XRefParseException.constructor = XRefParseException;
	  return XRefParseException;
	}();
	var NullCharactersRegExp = /\x00/g;
	function removeNullCharacters(str) {
	  if (typeof str !== 'string') {
	    warn('The argument for removeNullCharacters must be a string.');
	    return str;
	  }
	  return str.replace(NullCharactersRegExp, '');
	}
	function bytesToString(bytes) {
	  assert(bytes !== null && (typeof bytes === 'undefined' ? 'undefined' : _typeof(bytes)) === 'object' && bytes.length !== undefined, 'Invalid argument for bytesToString');
	  var length = bytes.length;
	  var MAX_ARGUMENT_COUNT = 8192;
	  if (length < MAX_ARGUMENT_COUNT) {
	    return String.fromCharCode.apply(null, bytes);
	  }
	  var strBuf = [];
	  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
	    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
	    var chunk = bytes.subarray(i, chunkEnd);
	    strBuf.push(String.fromCharCode.apply(null, chunk));
	  }
	  return strBuf.join('');
	}
	function stringToBytes(str) {
	  assert(typeof str === 'string', 'Invalid argument for stringToBytes');
	  var length = str.length;
	  var bytes = new Uint8Array(length);
	  for (var i = 0; i < length; ++i) {
	    bytes[i] = str.charCodeAt(i) & 0xFF;
	  }
	  return bytes;
	}
	function arrayByteLength(arr) {
	  if (arr.length !== undefined) {
	    return arr.length;
	  }
	  assert(arr.byteLength !== undefined);
	  return arr.byteLength;
	}
	function arraysToBytes(arr) {
	  if (arr.length === 1 && arr[0] instanceof Uint8Array) {
	    return arr[0];
	  }
	  var resultLength = 0;
	  var i,
	      ii = arr.length;
	  var item, itemLength;
	  for (i = 0; i < ii; i++) {
	    item = arr[i];
	    itemLength = arrayByteLength(item);
	    resultLength += itemLength;
	  }
	  var pos = 0;
	  var data = new Uint8Array(resultLength);
	  for (i = 0; i < ii; i++) {
	    item = arr[i];
	    if (!(item instanceof Uint8Array)) {
	      if (typeof item === 'string') {
	        item = stringToBytes(item);
	      } else {
	        item = new Uint8Array(item);
	      }
	    }
	    itemLength = item.byteLength;
	    data.set(item, pos);
	    pos += itemLength;
	  }
	  return data;
	}
	function string32(value) {
	  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
	}
	function log2(x) {
	  var n = 1,
	      i = 0;
	  while (x > n) {
	    n <<= 1;
	    i++;
	  }
	  return i;
	}
	function readInt8(data, start) {
	  return data[start] << 24 >> 24;
	}
	function readUint16(data, offset) {
	  return data[offset] << 8 | data[offset + 1];
	}
	function readUint32(data, offset) {
	  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
	}
	function isLittleEndian() {
	  var buffer8 = new Uint8Array(4);
	  buffer8[0] = 1;
	  var view32 = new Uint32Array(buffer8.buffer, 0, 1);
	  return view32[0] === 1;
	}
	function isEvalSupported() {
	  try {
	    new Function('');
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
	var Util = function UtilClosure() {
	  function Util() {}
	  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];
	  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {
	    rgbBuf[1] = r;
	    rgbBuf[3] = g;
	    rgbBuf[5] = b;
	    return rgbBuf.join('');
	  };
	  Util.transform = function Util_transform(m1, m2) {
	    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
	  };
	  Util.applyTransform = function Util_applyTransform(p, m) {
	    var xt = p[0] * m[0] + p[1] * m[2] + m[4];
	    var yt = p[0] * m[1] + p[1] * m[3] + m[5];
	    return [xt, yt];
	  };
	  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {
	    var d = m[0] * m[3] - m[1] * m[2];
	    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
	    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
	    return [xt, yt];
	  };
	  Util.getAxialAlignedBoundingBox = function Util_getAxialAlignedBoundingBox(r, m) {
	    var p1 = Util.applyTransform(r, m);
	    var p2 = Util.applyTransform(r.slice(2, 4), m);
	    var p3 = Util.applyTransform([r[0], r[3]], m);
	    var p4 = Util.applyTransform([r[2], r[1]], m);
	    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
	  };
	  Util.inverseTransform = function Util_inverseTransform(m) {
	    var d = m[0] * m[3] - m[1] * m[2];
	    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
	  };
	  Util.apply3dTransform = function Util_apply3dTransform(m, v) {
	    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
	  };
	  Util.singularValueDecompose2dScale = function Util_singularValueDecompose2dScale(m) {
	    var transpose = [m[0], m[2], m[1], m[3]];
	    var a = m[0] * transpose[0] + m[1] * transpose[2];
	    var b = m[0] * transpose[1] + m[1] * transpose[3];
	    var c = m[2] * transpose[0] + m[3] * transpose[2];
	    var d = m[2] * transpose[1] + m[3] * transpose[3];
	    var first = (a + d) / 2;
	    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;
	    var sx = first + second || 1;
	    var sy = first - second || 1;
	    return [Math.sqrt(sx), Math.sqrt(sy)];
	  };
	  Util.normalizeRect = function Util_normalizeRect(rect) {
	    var r = rect.slice(0);
	    if (rect[0] > rect[2]) {
	      r[0] = rect[2];
	      r[2] = rect[0];
	    }
	    if (rect[1] > rect[3]) {
	      r[1] = rect[3];
	      r[3] = rect[1];
	    }
	    return r;
	  };
	  Util.intersect = function Util_intersect(rect1, rect2) {
	    function compare(a, b) {
	      return a - b;
	    }
	    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),
	        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),
	        result = [];
	    rect1 = Util.normalizeRect(rect1);
	    rect2 = Util.normalizeRect(rect2);
	    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
	      result[0] = orderedX[1];
	      result[2] = orderedX[2];
	    } else {
	      return false;
	    }
	    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
	      result[1] = orderedY[1];
	      result[3] = orderedY[2];
	    } else {
	      return false;
	    }
	    return result;
	  };
	  Util.sign = function Util_sign(num) {
	    return num < 0 ? -1 : 1;
	  };
	  var ROMAN_NUMBER_MAP = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];
	  Util.toRoman = function Util_toRoman(number, lowerCase) {
	    assert(isInt(number) && number > 0, 'The number should be a positive integer.');
	    var pos,
	        romanBuf = [];
	    while (number >= 1000) {
	      number -= 1000;
	      romanBuf.push('M');
	    }
	    pos = number / 100 | 0;
	    number %= 100;
	    romanBuf.push(ROMAN_NUMBER_MAP[pos]);
	    pos = number / 10 | 0;
	    number %= 10;
	    romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);
	    romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);
	    var romanStr = romanBuf.join('');
	    return lowerCase ? romanStr.toLowerCase() : romanStr;
	  };
	  Util.appendToArray = function Util_appendToArray(arr1, arr2) {
	    Array.prototype.push.apply(arr1, arr2);
	  };
	  Util.prependToArray = function Util_prependToArray(arr1, arr2) {
	    Array.prototype.unshift.apply(arr1, arr2);
	  };
	  Util.extendObj = function extendObj(obj1, obj2) {
	    for (var key in obj2) {
	      obj1[key] = obj2[key];
	    }
	  };
	  Util.getInheritableProperty = function Util_getInheritableProperty(dict, name, getArray) {
	    while (dict && !dict.has(name)) {
	      dict = dict.get('Parent');
	    }
	    if (!dict) {
	      return null;
	    }
	    return getArray ? dict.getArray(name) : dict.get(name);
	  };
	  Util.inherit = function Util_inherit(sub, base, prototype) {
	    sub.prototype = Object.create(base.prototype);
	    sub.prototype.constructor = sub;
	    for (var prop in prototype) {
	      sub.prototype[prop] = prototype[prop];
	    }
	  };
	  Util.loadScript = function Util_loadScript(src, callback) {
	    var script = document.createElement('script');
	    var loaded = false;
	    script.setAttribute('src', src);
	    if (callback) {
	      script.onload = function () {
	        if (!loaded) {
	          callback();
	        }
	        loaded = true;
	      };
	    }
	    document.getElementsByTagName('head')[0].appendChild(script);
	  };
	  return Util;
	}();
	var PageViewport = function PageViewportClosure() {
	  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {
	    this.viewBox = viewBox;
	    this.scale = scale;
	    this.rotation = rotation;
	    this.offsetX = offsetX;
	    this.offsetY = offsetY;
	    var centerX = (viewBox[2] + viewBox[0]) / 2;
	    var centerY = (viewBox[3] + viewBox[1]) / 2;
	    var rotateA, rotateB, rotateC, rotateD;
	    rotation = rotation % 360;
	    rotation = rotation < 0 ? rotation + 360 : rotation;
	    switch (rotation) {
	      case 180:
	        rotateA = -1;
	        rotateB = 0;
	        rotateC = 0;
	        rotateD = 1;
	        break;
	      case 90:
	        rotateA = 0;
	        rotateB = 1;
	        rotateC = 1;
	        rotateD = 0;
	        break;
	      case 270:
	        rotateA = 0;
	        rotateB = -1;
	        rotateC = -1;
	        rotateD = 0;
	        break;
	      default:
	        rotateA = 1;
	        rotateB = 0;
	        rotateC = 0;
	        rotateD = -1;
	        break;
	    }
	    if (dontFlip) {
	      rotateC = -rotateC;
	      rotateD = -rotateD;
	    }
	    var offsetCanvasX, offsetCanvasY;
	    var width, height;
	    if (rotateA === 0) {
	      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
	      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
	      width = Math.abs(viewBox[3] - viewBox[1]) * scale;
	      height = Math.abs(viewBox[2] - viewBox[0]) * scale;
	    } else {
	      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
	      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
	      width = Math.abs(viewBox[2] - viewBox[0]) * scale;
	      height = Math.abs(viewBox[3] - viewBox[1]) * scale;
	    }
	    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
	    this.width = width;
	    this.height = height;
	    this.fontScale = scale;
	  }
	  PageViewport.prototype = {
	    clone: function PageViewPort_clone(args) {
	      args = args || {};
	      var scale = 'scale' in args ? args.scale : this.scale;
	      var rotation = 'rotation' in args ? args.rotation : this.rotation;
	      return new PageViewport(this.viewBox.slice(), scale, rotation, this.offsetX, this.offsetY, args.dontFlip);
	    },
	    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {
	      return Util.applyTransform([x, y], this.transform);
	    },
	    convertToViewportRectangle: function PageViewport_convertToViewportRectangle(rect) {
	      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);
	      var br = Util.applyTransform([rect[2], rect[3]], this.transform);
	      return [tl[0], tl[1], br[0], br[1]];
	    },
	    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {
	      return Util.applyInverseTransform([x, y], this.transform);
	    }
	  };
	  return PageViewport;
	}();
	var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];
	function stringToPDFString(str) {
	  var i,
	      n = str.length,
	      strBuf = [];
	  if (str[0] === '\xFE' && str[1] === '\xFF') {
	    for (i = 2; i < n; i += 2) {
	      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
	    }
	  } else {
	    for (i = 0; i < n; ++i) {
	      var code = PDFStringTranslateTable[str.charCodeAt(i)];
	      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
	    }
	  }
	  return strBuf.join('');
	}
	function stringToUTF8String(str) {
	  return decodeURIComponent(escape(str));
	}
	function utf8StringToString(str) {
	  return unescape(encodeURIComponent(str));
	}
	function isEmptyObj(obj) {
	  for (var key in obj) {
	    return false;
	  }
	  return true;
	}
	function isBool(v) {
	  return typeof v === 'boolean';
	}
	function isInt(v) {
	  return typeof v === 'number' && (v | 0) === v;
	}
	function isNum(v) {
	  return typeof v === 'number';
	}
	function isString(v) {
	  return typeof v === 'string';
	}
	function isArray(v) {
	  return v instanceof Array;
	}
	function isArrayBuffer(v) {
	  return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v !== null && v.byteLength !== undefined;
	}
	function isSpace(ch) {
	  return ch === 0x20 || ch === 0x09 || ch === 0x0D || ch === 0x0A;
	}
	function isNodeJS() {
	  if (typeof __pdfjsdev_webpack__ === 'undefined') {
	    return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process + '' === '[object process]';
	  }
	  return false;
	}
	function createPromiseCapability() {
	  var capability = {};
	  capability.promise = new Promise(function (resolve, reject) {
	    capability.resolve = resolve;
	    capability.reject = reject;
	  });
	  return capability;
	}
	var StatTimer = function StatTimerClosure() {
	  function rpad(str, pad, length) {
	    while (str.length < length) {
	      str += pad;
	    }
	    return str;
	  }
	  function StatTimer() {
	    this.started = Object.create(null);
	    this.times = [];
	    this.enabled = true;
	  }
	  StatTimer.prototype = {
	    time: function StatTimer_time(name) {
	      if (!this.enabled) {
	        return;
	      }
	      if (name in this.started) {
	        warn('Timer is already running for ' + name);
	      }
	      this.started[name] = Date.now();
	    },
	    timeEnd: function StatTimer_timeEnd(name) {
	      if (!this.enabled) {
	        return;
	      }
	      if (!(name in this.started)) {
	        warn('Timer has not been started for ' + name);
	      }
	      this.times.push({
	        'name': name,
	        'start': this.started[name],
	        'end': Date.now()
	      });
	      delete this.started[name];
	    },
	    toString: function StatTimer_toString() {
	      var i, ii;
	      var times = this.times;
	      var out = '';
	      var longest = 0;
	      for (i = 0, ii = times.length; i < ii; ++i) {
	        var name = times[i]['name'];
	        if (name.length > longest) {
	          longest = name.length;
	        }
	      }
	      for (i = 0, ii = times.length; i < ii; ++i) {
	        var span = times[i];
	        var duration = span.end - span.start;
	        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\n';
	      }
	      return out;
	    }
	  };
	  return StatTimer;
	}();
	var createBlob = function createBlob(data, contentType) {
	  if (typeof Blob !== 'undefined') {
	    return new Blob([data], { type: contentType });
	  }
	  throw new Error('The "Blob" constructor is not supported.');
	};
	var createObjectURL = function createObjectURLClosure() {
	  var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	  return function createObjectURL(data, contentType) {
	    var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    if (!forceDataSchema && URL.createObjectURL) {
	      var blob = createBlob(data, contentType);
	      return URL.createObjectURL(blob);
	    }
	    var buffer = 'data:' + contentType + ';base64,';
	    for (var i = 0, ii = data.length; i < ii; i += 3) {
	      var b1 = data[i] & 0xFF;
	      var b2 = data[i + 1] & 0xFF;
	      var b3 = data[i + 2] & 0xFF;
	      var d1 = b1 >> 2,
	          d2 = (b1 & 3) << 4 | b2 >> 4;
	      var d3 = i + 1 < ii ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	      var d4 = i + 2 < ii ? b3 & 0x3F : 64;
	      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
	    }
	    return buffer;
	  };
	}();
	function MessageHandler(sourceName, targetName, comObj) {
	  var _this = this;

	  this.sourceName = sourceName;
	  this.targetName = targetName;
	  this.comObj = comObj;
	  this.callbackIndex = 1;
	  this.postMessageTransfers = true;
	  var callbacksCapabilities = this.callbacksCapabilities = Object.create(null);
	  var ah = this.actionHandler = Object.create(null);
	  this._onComObjOnMessage = function (event) {
	    var data = event.data;
	    if (data.targetName !== _this.sourceName) {
	      return;
	    }
	    if (data.isReply) {
	      var callbackId = data.callbackId;
	      if (data.callbackId in callbacksCapabilities) {
	        var callback = callbacksCapabilities[callbackId];
	        delete callbacksCapabilities[callbackId];
	        if ('error' in data) {
	          callback.reject(data.error);
	        } else {
	          callback.resolve(data.data);
	        }
	      } else {
	        error('Cannot resolve callback ' + callbackId);
	      }
	    } else if (data.action in ah) {
	      var action = ah[data.action];
	      if (data.callbackId) {
	        var sourceName = _this.sourceName;
	        var targetName = data.sourceName;
	        Promise.resolve().then(function () {
	          return action[0].call(action[1], data.data);
	        }).then(function (result) {
	          comObj.postMessage({
	            sourceName: sourceName,
	            targetName: targetName,
	            isReply: true,
	            callbackId: data.callbackId,
	            data: result
	          });
	        }, function (reason) {
	          if (reason instanceof Error) {
	            reason = reason + '';
	          }
	          comObj.postMessage({
	            sourceName: sourceName,
	            targetName: targetName,
	            isReply: true,
	            callbackId: data.callbackId,
	            error: reason
	          });
	        });
	      } else {
	        action[0].call(action[1], data.data);
	      }
	    } else {
	      error('Unknown action from worker: ' + data.action);
	    }
	  };
	  comObj.addEventListener('message', this._onComObjOnMessage);
	}
	MessageHandler.prototype = {
	  on: function on(actionName, handler, scope) {
	    var ah = this.actionHandler;
	    if (ah[actionName]) {
	      error('There is already an actionName called "' + actionName + '"');
	    }
	    ah[actionName] = [handler, scope];
	  },
	  send: function send(actionName, data, transfers) {
	    var message = {
	      sourceName: this.sourceName,
	      targetName: this.targetName,
	      action: actionName,
	      data: data
	    };
	    this.postMessage(message, transfers);
	  },
	  sendWithPromise: function sendWithPromise(actionName, data, transfers) {
	    var callbackId = this.callbackIndex++;
	    var message = {
	      sourceName: this.sourceName,
	      targetName: this.targetName,
	      action: actionName,
	      data: data,
	      callbackId: callbackId
	    };
	    var capability = createPromiseCapability();
	    this.callbacksCapabilities[callbackId] = capability;
	    try {
	      this.postMessage(message, transfers);
	    } catch (e) {
	      capability.reject(e);
	    }
	    return capability.promise;
	  },
	  postMessage: function postMessage(message, transfers) {
	    if (transfers && this.postMessageTransfers) {
	      this.comObj.postMessage(message, transfers);
	    } else {
	      this.comObj.postMessage(message);
	    }
	  },
	  destroy: function destroy() {
	    this.comObj.removeEventListener('message', this._onComObjOnMessage);
	  }
	};
	function loadJpegStream(id, imageUrl, objs) {
	  var img = new Image();
	  img.onload = function loadJpegStream_onloadClosure() {
	    objs.resolve(id, img);
	  };
	  img.onerror = function loadJpegStream_onerrorClosure() {
	    objs.resolve(id, null);
	    warn('Error during JPEG image loading');
	  };
	  img.src = imageUrl;
	}
	exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
	exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
	exports.OPS = OPS;
	exports.VERBOSITY_LEVELS = VERBOSITY_LEVELS;
	exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
	exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
	exports.AnnotationFieldFlag = AnnotationFieldFlag;
	exports.AnnotationFlag = AnnotationFlag;
	exports.AnnotationType = AnnotationType;
	exports.FontType = FontType;
	exports.ImageKind = ImageKind;
	exports.CMapCompressionType = CMapCompressionType;
	exports.InvalidPDFException = InvalidPDFException;
	exports.MessageHandler = MessageHandler;
	exports.MissingDataException = MissingDataException;
	exports.MissingPDFException = MissingPDFException;
	exports.NativeImageDecoding = NativeImageDecoding;
	exports.NotImplementedException = NotImplementedException;
	exports.PageViewport = PageViewport;
	exports.PasswordException = PasswordException;
	exports.PasswordResponses = PasswordResponses;
	exports.StatTimer = StatTimer;
	exports.StreamType = StreamType;
	exports.TextRenderingMode = TextRenderingMode;
	exports.UnexpectedResponseException = UnexpectedResponseException;
	exports.UnknownErrorException = UnknownErrorException;
	exports.Util = Util;
	exports.XRefParseException = XRefParseException;
	exports.arrayByteLength = arrayByteLength;
	exports.arraysToBytes = arraysToBytes;
	exports.assert = assert;
	exports.bytesToString = bytesToString;
	exports.createBlob = createBlob;
	exports.createPromiseCapability = createPromiseCapability;
	exports.createObjectURL = createObjectURL;
	exports.deprecated = deprecated;
	exports.error = error;
	exports.getLookupTableFactory = getLookupTableFactory;
	exports.getVerbosityLevel = getVerbosityLevel;
	exports.globalScope = globalScope;
	exports.info = info;
	exports.isArray = isArray;
	exports.isArrayBuffer = isArrayBuffer;
	exports.isBool = isBool;
	exports.isEmptyObj = isEmptyObj;
	exports.isInt = isInt;
	exports.isNum = isNum;
	exports.isString = isString;
	exports.isSpace = isSpace;
	exports.isNodeJS = isNodeJS;
	exports.isSameOrigin = isSameOrigin;
	exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
	exports.isLittleEndian = isLittleEndian;
	exports.isEvalSupported = isEvalSupported;
	exports.loadJpegStream = loadJpegStream;
	exports.log2 = log2;
	exports.readInt8 = readInt8;
	exports.readUint16 = readUint16;
	exports.readUint32 = readUint32;
	exports.removeNullCharacters = removeNullCharacters;
	exports.setVerbosityLevel = setVerbosityLevel;
	exports.shadow = shadow;
	exports.string32 = string32;
	exports.stringToBytes = stringToBytes;
	exports.stringToPDFString = stringToPDFString;
	exports.stringToUTF8String = stringToUTF8String;
	exports.utf8StringToString = utf8StringToString;
	exports.warn = warn;
	/* WEBPACK VAR INJECTION */}.call(exports, __w_pdfjs_require__(9)))

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var sharedUtil = __w_pdfjs_require__(0);
	var isArray = sharedUtil.isArray;
	var EOF = {};
	var Name = function NameClosure() {
	  function Name(name) {
	    this.name = name;
	  }
	  Name.prototype = {};
	  var nameCache = Object.create(null);
	  Name.get = function Name_get(name) {
	    var nameValue = nameCache[name];
	    return nameValue ? nameValue : nameCache[name] = new Name(name);
	  };
	  return Name;
	}();
	var Cmd = function CmdClosure() {
	  function Cmd(cmd) {
	    this.cmd = cmd;
	  }
	  Cmd.prototype = {};
	  var cmdCache = Object.create(null);
	  Cmd.get = function Cmd_get(cmd) {
	    var cmdValue = cmdCache[cmd];
	    return cmdValue ? cmdValue : cmdCache[cmd] = new Cmd(cmd);
	  };
	  return Cmd;
	}();
	var Dict = function DictClosure() {
	  var nonSerializable = function nonSerializableClosure() {
	    return nonSerializable;
	  };
	  function Dict(xref) {
	    this.map = Object.create(null);
	    this.xref = xref;
	    this.objId = null;
	    this.suppressEncryption = false;
	    this.__nonSerializable__ = nonSerializable;
	  }
	  Dict.prototype = {
	    assignXref: function Dict_assignXref(newXref) {
	      this.xref = newXref;
	    },
	    get: function Dict_get(key1, key2, key3) {
	      var value;
	      var xref = this.xref,
	          suppressEncryption = this.suppressEncryption;
	      if (typeof (value = this.map[key1]) !== 'undefined' || key1 in this.map || typeof key2 === 'undefined') {
	        return xref ? xref.fetchIfRef(value, suppressEncryption) : value;
	      }
	      if (typeof (value = this.map[key2]) !== 'undefined' || key2 in this.map || typeof key3 === 'undefined') {
	        return xref ? xref.fetchIfRef(value, suppressEncryption) : value;
	      }
	      value = this.map[key3] || null;
	      return xref ? xref.fetchIfRef(value, suppressEncryption) : value;
	    },
	    getAsync: function Dict_getAsync(key1, key2, key3) {
	      var value;
	      var xref = this.xref,
	          suppressEncryption = this.suppressEncryption;
	      if (typeof (value = this.map[key1]) !== 'undefined' || key1 in this.map || typeof key2 === 'undefined') {
	        if (xref) {
	          return xref.fetchIfRefAsync(value, suppressEncryption);
	        }
	        return Promise.resolve(value);
	      }
	      if (typeof (value = this.map[key2]) !== 'undefined' || key2 in this.map || typeof key3 === 'undefined') {
	        if (xref) {
	          return xref.fetchIfRefAsync(value, suppressEncryption);
	        }
	        return Promise.resolve(value);
	      }
	      value = this.map[key3] || null;
	      if (xref) {
	        return xref.fetchIfRefAsync(value, suppressEncryption);
	      }
	      return Promise.resolve(value);
	    },
	    getArray: function Dict_getArray(key1, key2, key3) {
	      var value = this.get(key1, key2, key3);
	      var xref = this.xref,
	          suppressEncryption = this.suppressEncryption;
	      if (!isArray(value) || !xref) {
	        return value;
	      }
	      value = value.slice();
	      for (var i = 0, ii = value.length; i < ii; i++) {
	        if (!isRef(value[i])) {
	          continue;
	        }
	        value[i] = xref.fetch(value[i], suppressEncryption);
	      }
	      return value;
	    },
	    getRaw: function Dict_getRaw(key) {
	      return this.map[key];
	    },
	    getKeys: function Dict_getKeys() {
	      return Object.keys(this.map);
	    },
	    set: function Dict_set(key, value) {
	      this.map[key] = value;
	    },
	    has: function Dict_has(key) {
	      return key in this.map;
	    },
	    forEach: function Dict_forEach(callback) {
	      for (var key in this.map) {
	        callback(key, this.get(key));
	      }
	    }
	  };
	  Dict.empty = new Dict(null);
	  Dict.merge = function Dict_merge(xref, dictArray) {
	    var mergedDict = new Dict(xref);
	    for (var i = 0, ii = dictArray.length; i < ii; i++) {
	      var dict = dictArray[i];
	      if (!isDict(dict)) {
	        continue;
	      }
	      for (var keyName in dict.map) {
	        if (mergedDict.map[keyName]) {
	          continue;
	        }
	        mergedDict.map[keyName] = dict.map[keyName];
	      }
	    }
	    return mergedDict;
	  };
	  return Dict;
	}();
	var Ref = function RefClosure() {
	  function Ref(num, gen) {
	    this.num = num;
	    this.gen = gen;
	  }
	  Ref.prototype = {
	    toString: function Ref_toString() {
	      var str = this.num + 'R';
	      if (this.gen !== 0) {
	        str += this.gen;
	      }
	      return str;
	    }
	  };
	  return Ref;
	}();
	var RefSet = function RefSetClosure() {
	  function RefSet() {
	    this.dict = Object.create(null);
	  }
	  RefSet.prototype = {
	    has: function RefSet_has(ref) {
	      return ref.toString() in this.dict;
	    },
	    put: function RefSet_put(ref) {
	      this.dict[ref.toString()] = true;
	    },
	    remove: function RefSet_remove(ref) {
	      delete this.dict[ref.toString()];
	    }
	  };
	  return RefSet;
	}();
	var RefSetCache = function RefSetCacheClosure() {
	  function RefSetCache() {
	    this.dict = Object.create(null);
	  }
	  RefSetCache.prototype = {
	    get: function RefSetCache_get(ref) {
	      return this.dict[ref.toString()];
	    },
	    has: function RefSetCache_has(ref) {
	      return ref.toString() in this.dict;
	    },
	    put: function RefSetCache_put(ref, obj) {
	      this.dict[ref.toString()] = obj;
	    },
	    putAlias: function RefSetCache_putAlias(ref, aliasRef) {
	      this.dict[ref.toString()] = this.get(aliasRef);
	    },
	    forEach: function RefSetCache_forEach(fn, thisArg) {
	      for (var i in this.dict) {
	        fn.call(thisArg, this.dict[i]);
	      }
	    },
	    clear: function RefSetCache_clear() {
	      this.dict = Object.create(null);
	    }
	  };
	  return RefSetCache;
	}();
	function isEOF(v) {
	  return v === EOF;
	}
	function isName(v, name) {
	  return v instanceof Name && (name === undefined || v.name === name);
	}
	function isCmd(v, cmd) {
	  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);
	}
	function isDict(v, type) {
	  return v instanceof Dict && (type === undefined || isName(v.get('Type'), type));
	}
	function isRef(v) {
	  return v instanceof Ref;
	}
	function isRefsEqual(v1, v2) {
	  return v1.num === v2.num && v1.gen === v2.gen;
	}
	function isStream(v) {
	  return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v !== null && v.getBytes !== undefined;
	}
	exports.EOF = EOF;
	exports.Cmd = Cmd;
	exports.Dict = Dict;
	exports.Name = Name;
	exports.Ref = Ref;
	exports.RefSet = RefSet;
	exports.RefSetCache = RefSetCache;
	exports.isEOF = isEOF;
	exports.isCmd = isCmd;
	exports.isDict = isDict;
	exports.isName = isName;
	exports.isRef = isRef;
	exports.isRefsEqual = isRefsEqual;
	exports.isStream = isStream;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreJbig2 = __w_pdfjs_require__(28);
	var coreJpg = __w_pdfjs_require__(29);
	var coreJpx = __w_pdfjs_require__(15);
	var Util = sharedUtil.Util;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isInt = sharedUtil.isInt;
	var isArray = sharedUtil.isArray;
	var createObjectURL = sharedUtil.createObjectURL;
	var shadow = sharedUtil.shadow;
	var isSpace = sharedUtil.isSpace;
	var Dict = corePrimitives.Dict;
	var isDict = corePrimitives.isDict;
	var isStream = corePrimitives.isStream;
	var Jbig2Image = coreJbig2.Jbig2Image;
	var JpegImage = coreJpg.JpegImage;
	var JpxImage = coreJpx.JpxImage;
	var Stream = function StreamClosure() {
	  function Stream(arrayBuffer, start, length, dict) {
	    this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);
	    this.start = start || 0;
	    this.pos = this.start;
	    this.end = start + length || this.bytes.length;
	    this.dict = dict;
	  }
	  Stream.prototype = {
	    get length() {
	      return this.end - this.start;
	    },
	    get isEmpty() {
	      return this.length === 0;
	    },
	    getByte: function Stream_getByte() {
	      if (this.pos >= this.end) {
	        return -1;
	      }
	      return this.bytes[this.pos++];
	    },
	    getUint16: function Stream_getUint16() {
	      var b0 = this.getByte();
	      var b1 = this.getByte();
	      if (b0 === -1 || b1 === -1) {
	        return -1;
	      }
	      return (b0 << 8) + b1;
	    },
	    getInt32: function Stream_getInt32() {
	      var b0 = this.getByte();
	      var b1 = this.getByte();
	      var b2 = this.getByte();
	      var b3 = this.getByte();
	      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
	    },
	    getBytes: function Stream_getBytes(length) {
	      var bytes = this.bytes;
	      var pos = this.pos;
	      var strEnd = this.end;
	      if (!length) {
	        return bytes.subarray(pos, strEnd);
	      }
	      var end = pos + length;
	      if (end > strEnd) {
	        end = strEnd;
	      }
	      this.pos = end;
	      return bytes.subarray(pos, end);
	    },
	    peekByte: function Stream_peekByte() {
	      var peekedByte = this.getByte();
	      this.pos--;
	      return peekedByte;
	    },
	    peekBytes: function Stream_peekBytes(length) {
	      var bytes = this.getBytes(length);
	      this.pos -= bytes.length;
	      return bytes;
	    },
	    skip: function Stream_skip(n) {
	      if (!n) {
	        n = 1;
	      }
	      this.pos += n;
	    },
	    reset: function Stream_reset() {
	      this.pos = this.start;
	    },
	    moveStart: function Stream_moveStart() {
	      this.start = this.pos;
	    },
	    makeSubStream: function Stream_makeSubStream(start, length, dict) {
	      return new Stream(this.bytes.buffer, start, length, dict);
	    }
	  };
	  return Stream;
	}();
	var StringStream = function StringStreamClosure() {
	  function StringStream(str) {
	    var length = str.length;
	    var bytes = new Uint8Array(length);
	    for (var n = 0; n < length; ++n) {
	      bytes[n] = str.charCodeAt(n);
	    }
	    Stream.call(this, bytes);
	  }
	  StringStream.prototype = Stream.prototype;
	  return StringStream;
	}();
	var DecodeStream = function DecodeStreamClosure() {
	  var emptyBuffer = new Uint8Array(0);
	  function DecodeStream(maybeMinBufferLength) {
	    this.pos = 0;
	    this.bufferLength = 0;
	    this.eof = false;
	    this.buffer = emptyBuffer;
	    this.minBufferLength = 512;
	    if (maybeMinBufferLength) {
	      while (this.minBufferLength < maybeMinBufferLength) {
	        this.minBufferLength *= 2;
	      }
	    }
	  }
	  DecodeStream.prototype = {
	    get isEmpty() {
	      while (!this.eof && this.bufferLength === 0) {
	        this.readBlock();
	      }
	      return this.bufferLength === 0;
	    },
	    ensureBuffer: function DecodeStream_ensureBuffer(requested) {
	      var buffer = this.buffer;
	      if (requested <= buffer.byteLength) {
	        return buffer;
	      }
	      var size = this.minBufferLength;
	      while (size < requested) {
	        size *= 2;
	      }
	      var buffer2 = new Uint8Array(size);
	      buffer2.set(buffer);
	      return this.buffer = buffer2;
	    },
	    getByte: function DecodeStream_getByte() {
	      var pos = this.pos;
	      while (this.bufferLength <= pos) {
	        if (this.eof) {
	          return -1;
	        }
	        this.readBlock();
	      }
	      return this.buffer[this.pos++];
	    },
	    getUint16: function DecodeStream_getUint16() {
	      var b0 = this.getByte();
	      var b1 = this.getByte();
	      if (b0 === -1 || b1 === -1) {
	        return -1;
	      }
	      return (b0 << 8) + b1;
	    },
	    getInt32: function DecodeStream_getInt32() {
	      var b0 = this.getByte();
	      var b1 = this.getByte();
	      var b2 = this.getByte();
	      var b3 = this.getByte();
	      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
	    },
	    getBytes: function DecodeStream_getBytes(length) {
	      var end,
	          pos = this.pos;
	      if (length) {
	        this.ensureBuffer(pos + length);
	        end = pos + length;
	        while (!this.eof && this.bufferLength < end) {
	          this.readBlock();
	        }
	        var bufEnd = this.bufferLength;
	        if (end > bufEnd) {
	          end = bufEnd;
	        }
	      } else {
	        while (!this.eof) {
	          this.readBlock();
	        }
	        end = this.bufferLength;
	      }
	      this.pos = end;
	      return this.buffer.subarray(pos, end);
	    },
	    peekByte: function DecodeStream_peekByte() {
	      var peekedByte = this.getByte();
	      this.pos--;
	      return peekedByte;
	    },
	    peekBytes: function DecodeStream_peekBytes(length) {
	      var bytes = this.getBytes(length);
	      this.pos -= bytes.length;
	      return bytes;
	    },
	    makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {
	      var end = start + length;
	      while (this.bufferLength <= end && !this.eof) {
	        this.readBlock();
	      }
	      return new Stream(this.buffer, start, length, dict);
	    },
	    skip: function DecodeStream_skip(n) {
	      if (!n) {
	        n = 1;
	      }
	      this.pos += n;
	    },
	    reset: function DecodeStream_reset() {
	      this.pos = 0;
	    },
	    getBaseStreams: function DecodeStream_getBaseStreams() {
	      if (this.str && this.str.getBaseStreams) {
	        return this.str.getBaseStreams();
	      }
	      return [];
	    }
	  };
	  return DecodeStream;
	}();
	var StreamsSequenceStream = function StreamsSequenceStreamClosure() {
	  function StreamsSequenceStream(streams) {
	    this.streams = streams;
	    DecodeStream.call(this, null);
	  }
	  StreamsSequenceStream.prototype = Object.create(DecodeStream.prototype);
	  StreamsSequenceStream.prototype.readBlock = function streamSequenceStreamReadBlock() {
	    var streams = this.streams;
	    if (streams.length === 0) {
	      this.eof = true;
	      return;
	    }
	    var stream = streams.shift();
	    var chunk = stream.getBytes();
	    var bufferLength = this.bufferLength;
	    var newLength = bufferLength + chunk.length;
	    var buffer = this.ensureBuffer(newLength);
	    buffer.set(chunk, bufferLength);
	    this.bufferLength = newLength;
	  };
	  StreamsSequenceStream.prototype.getBaseStreams = function StreamsSequenceStream_getBaseStreams() {
	    var baseStreams = [];
	    for (var i = 0, ii = this.streams.length; i < ii; i++) {
	      var stream = this.streams[i];
	      if (stream.getBaseStreams) {
	        Util.appendToArray(baseStreams, stream.getBaseStreams());
	      }
	    }
	    return baseStreams;
	  };
	  return StreamsSequenceStream;
	}();
	var FlateStream = function FlateStreamClosure() {
	  var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
	  var lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);
	  var distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);
	  var fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];
	  var fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];
	  function FlateStream(str, maybeLength) {
	    this.str = str;
	    this.dict = str.dict;
	    var cmf = str.getByte();
	    var flg = str.getByte();
	    if (cmf === -1 || flg === -1) {
	      error('Invalid header in flate stream: ' + cmf + ', ' + flg);
	    }
	    if ((cmf & 0x0f) !== 0x08) {
	      error('Unknown compression method in flate stream: ' + cmf + ', ' + flg);
	    }
	    if (((cmf << 8) + flg) % 31 !== 0) {
	      error('Bad FCHECK in flate stream: ' + cmf + ', ' + flg);
	    }
	    if (flg & 0x20) {
	      error('FDICT bit set in flate stream: ' + cmf + ', ' + flg);
	    }
	    this.codeSize = 0;
	    this.codeBuf = 0;
	    DecodeStream.call(this, maybeLength);
	  }
	  FlateStream.prototype = Object.create(DecodeStream.prototype);
	  FlateStream.prototype.getBits = function FlateStream_getBits(bits) {
	    var str = this.str;
	    var codeSize = this.codeSize;
	    var codeBuf = this.codeBuf;
	    var b;
	    while (codeSize < bits) {
	      if ((b = str.getByte()) === -1) {
	        error('Bad encoding in flate stream');
	      }
	      codeBuf |= b << codeSize;
	      codeSize += 8;
	    }
	    b = codeBuf & (1 << bits) - 1;
	    this.codeBuf = codeBuf >> bits;
	    this.codeSize = codeSize -= bits;
	    return b;
	  };
	  FlateStream.prototype.getCode = function FlateStream_getCode(table) {
	    var str = this.str;
	    var codes = table[0];
	    var maxLen = table[1];
	    var codeSize = this.codeSize;
	    var codeBuf = this.codeBuf;
	    var b;
	    while (codeSize < maxLen) {
	      if ((b = str.getByte()) === -1) {
	        break;
	      }
	      codeBuf |= b << codeSize;
	      codeSize += 8;
	    }
	    var code = codes[codeBuf & (1 << maxLen) - 1];
	    var codeLen = code >> 16;
	    var codeVal = code & 0xffff;
	    if (codeLen < 1 || codeSize < codeLen) {
	      error('Bad encoding in flate stream');
	    }
	    this.codeBuf = codeBuf >> codeLen;
	    this.codeSize = codeSize - codeLen;
	    return codeVal;
	  };
	  FlateStream.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(lengths) {
	    var n = lengths.length;
	    var maxLen = 0;
	    var i;
	    for (i = 0; i < n; ++i) {
	      if (lengths[i] > maxLen) {
	        maxLen = lengths[i];
	      }
	    }
	    var size = 1 << maxLen;
	    var codes = new Int32Array(size);
	    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {
	      for (var val = 0; val < n; ++val) {
	        if (lengths[val] === len) {
	          var code2 = 0;
	          var t = code;
	          for (i = 0; i < len; ++i) {
	            code2 = code2 << 1 | t & 1;
	            t >>= 1;
	          }
	          for (i = code2; i < size; i += skip) {
	            codes[i] = len << 16 | val;
	          }
	          ++code;
	        }
	      }
	    }
	    return [codes, maxLen];
	  };
	  FlateStream.prototype.readBlock = function FlateStream_readBlock() {
	    var buffer, len;
	    var str = this.str;
	    var hdr = this.getBits(3);
	    if (hdr & 1) {
	      this.eof = true;
	    }
	    hdr >>= 1;
	    if (hdr === 0) {
	      var b;
	      if ((b = str.getByte()) === -1) {
	        error('Bad block header in flate stream');
	      }
	      var blockLen = b;
	      if ((b = str.getByte()) === -1) {
	        error('Bad block header in flate stream');
	      }
	      blockLen |= b << 8;
	      if ((b = str.getByte()) === -1) {
	        error('Bad block header in flate stream');
	      }
	      var check = b;
	      if ((b = str.getByte()) === -1) {
	        error('Bad block header in flate stream');
	      }
	      check |= b << 8;
	      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {
	        error('Bad uncompressed block length in flate stream');
	      }
	      this.codeBuf = 0;
	      this.codeSize = 0;
	      var bufferLength = this.bufferLength;
	      buffer = this.ensureBuffer(bufferLength + blockLen);
	      var end = bufferLength + blockLen;
	      this.bufferLength = end;
	      if (blockLen === 0) {
	        if (str.peekByte() === -1) {
	          this.eof = true;
	        }
	      } else {
	        for (var n = bufferLength; n < end; ++n) {
	          if ((b = str.getByte()) === -1) {
	            this.eof = true;
	            break;
	          }
	          buffer[n] = b;
	        }
	      }
	      return;
	    }
	    var litCodeTable;
	    var distCodeTable;
	    if (hdr === 1) {
	      litCodeTable = fixedLitCodeTab;
	      distCodeTable = fixedDistCodeTab;
	    } else if (hdr === 2) {
	      var numLitCodes = this.getBits(5) + 257;
	      var numDistCodes = this.getBits(5) + 1;
	      var numCodeLenCodes = this.getBits(4) + 4;
	      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);
	      var i;
	      for (i = 0; i < numCodeLenCodes; ++i) {
	        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);
	      }
	      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);
	      len = 0;
	      i = 0;
	      var codes = numLitCodes + numDistCodes;
	      var codeLengths = new Uint8Array(codes);
	      var bitsLength, bitsOffset, what;
	      while (i < codes) {
	        var code = this.getCode(codeLenCodeTab);
	        if (code === 16) {
	          bitsLength = 2;
	          bitsOffset = 3;
	          what = len;
	        } else if (code === 17) {
	          bitsLength = 3;
	          bitsOffset = 3;
	          what = len = 0;
	        } else if (code === 18) {
	          bitsLength = 7;
	          bitsOffset = 11;
	          what = len = 0;
	        } else {
	          codeLengths[i++] = len = code;
	          continue;
	        }
	        var repeatLength = this.getBits(bitsLength) + bitsOffset;
	        while (repeatLength-- > 0) {
	          codeLengths[i++] = what;
	        }
	      }
	      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));
	      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));
	    } else {
	      error('Unknown block type in flate stream');
	    }
	    buffer = this.buffer;
	    var limit = buffer ? buffer.length : 0;
	    var pos = this.bufferLength;
	    while (true) {
	      var code1 = this.getCode(litCodeTable);
	      if (code1 < 256) {
	        if (pos + 1 >= limit) {
	          buffer = this.ensureBuffer(pos + 1);
	          limit = buffer.length;
	        }
	        buffer[pos++] = code1;
	        continue;
	      }
	      if (code1 === 256) {
	        this.bufferLength = pos;
	        return;
	      }
	      code1 -= 257;
	      code1 = lengthDecode[code1];
	      var code2 = code1 >> 16;
	      if (code2 > 0) {
	        code2 = this.getBits(code2);
	      }
	      len = (code1 & 0xffff) + code2;
	      code1 = this.getCode(distCodeTable);
	      code1 = distDecode[code1];
	      code2 = code1 >> 16;
	      if (code2 > 0) {
	        code2 = this.getBits(code2);
	      }
	      var dist = (code1 & 0xffff) + code2;
	      if (pos + len >= limit) {
	        buffer = this.ensureBuffer(pos + len);
	        limit = buffer.length;
	      }
	      for (var k = 0; k < len; ++k, ++pos) {
	        buffer[pos] = buffer[pos - dist];
	      }
	    }
	  };
	  return FlateStream;
	}();
	var PredictorStream = function PredictorStreamClosure() {
	  function PredictorStream(str, maybeLength, params) {
	    if (!isDict(params)) {
	      return str;
	    }
	    var predictor = this.predictor = params.get('Predictor') || 1;
	    if (predictor <= 1) {
	      return str;
	    }
	    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {
	      error('Unsupported predictor: ' + predictor);
	    }
	    if (predictor === 2) {
	      this.readBlock = this.readBlockTiff;
	    } else {
	      this.readBlock = this.readBlockPng;
	    }
	    this.str = str;
	    this.dict = str.dict;
	    var colors = this.colors = params.get('Colors') || 1;
	    var bits = this.bits = params.get('BitsPerComponent') || 8;
	    var columns = this.columns = params.get('Columns') || 1;
	    this.pixBytes = colors * bits + 7 >> 3;
	    this.rowBytes = columns * colors * bits + 7 >> 3;
	    DecodeStream.call(this, maybeLength);
	    return this;
	  }
	  PredictorStream.prototype = Object.create(DecodeStream.prototype);
	  PredictorStream.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {
	    var rowBytes = this.rowBytes;
	    var bufferLength = this.bufferLength;
	    var buffer = this.ensureBuffer(bufferLength + rowBytes);
	    var bits = this.bits;
	    var colors = this.colors;
	    var rawBytes = this.str.getBytes(rowBytes);
	    this.eof = !rawBytes.length;
	    if (this.eof) {
	      return;
	    }
	    var inbuf = 0,
	        outbuf = 0;
	    var inbits = 0,
	        outbits = 0;
	    var pos = bufferLength;
	    var i;
	    if (bits === 1 && colors === 1) {
	      for (i = 0; i < rowBytes; ++i) {
	        var c = rawBytes[i] ^ inbuf;
	        c ^= c >> 1;
	        c ^= c >> 2;
	        c ^= c >> 4;
	        inbuf = (c & 1) << 7;
	        buffer[pos++] = c;
	      }
	    } else if (bits === 8) {
	      for (i = 0; i < colors; ++i) {
	        buffer[pos++] = rawBytes[i];
	      }
	      for (; i < rowBytes; ++i) {
	        buffer[pos] = buffer[pos - colors] + rawBytes[i];
	        pos++;
	      }
	    } else {
	      var compArray = new Uint8Array(colors + 1);
	      var bitMask = (1 << bits) - 1;
	      var j = 0,
	          k = bufferLength;
	      var columns = this.columns;
	      for (i = 0; i < columns; ++i) {
	        for (var kk = 0; kk < colors; ++kk) {
	          if (inbits < bits) {
	            inbuf = inbuf << 8 | rawBytes[j++] & 0xFF;
	            inbits += 8;
	          }
	          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;
	          inbits -= bits;
	          outbuf = outbuf << bits | compArray[kk];
	          outbits += bits;
	          if (outbits >= 8) {
	            buffer[k++] = outbuf >> outbits - 8 & 0xFF;
	            outbits -= 8;
	          }
	        }
	      }
	      if (outbits > 0) {
	        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);
	      }
	    }
	    this.bufferLength += rowBytes;
	  };
	  PredictorStream.prototype.readBlockPng = function predictorStreamReadBlockPng() {
	    var rowBytes = this.rowBytes;
	    var pixBytes = this.pixBytes;
	    var predictor = this.str.getByte();
	    var rawBytes = this.str.getBytes(rowBytes);
	    this.eof = !rawBytes.length;
	    if (this.eof) {
	      return;
	    }
	    var bufferLength = this.bufferLength;
	    var buffer = this.ensureBuffer(bufferLength + rowBytes);
	    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);
	    if (prevRow.length === 0) {
	      prevRow = new Uint8Array(rowBytes);
	    }
	    var i,
	        j = bufferLength,
	        up,
	        c;
	    switch (predictor) {
	      case 0:
	        for (i = 0; i < rowBytes; ++i) {
	          buffer[j++] = rawBytes[i];
	        }
	        break;
	      case 1:
	        for (i = 0; i < pixBytes; ++i) {
	          buffer[j++] = rawBytes[i];
	        }
	        for (; i < rowBytes; ++i) {
	          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xFF;
	          j++;
	        }
	        break;
	      case 2:
	        for (i = 0; i < rowBytes; ++i) {
	          buffer[j++] = prevRow[i] + rawBytes[i] & 0xFF;
	        }
	        break;
	      case 3:
	        for (i = 0; i < pixBytes; ++i) {
	          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];
	        }
	        for (; i < rowBytes; ++i) {
	          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xFF;
	          j++;
	        }
	        break;
	      case 4:
	        for (i = 0; i < pixBytes; ++i) {
	          up = prevRow[i];
	          c = rawBytes[i];
	          buffer[j++] = up + c;
	        }
	        for (; i < rowBytes; ++i) {
	          up = prevRow[i];
	          var upLeft = prevRow[i - pixBytes];
	          var left = buffer[j - pixBytes];
	          var p = left + up - upLeft;
	          var pa = p - left;
	          if (pa < 0) {
	            pa = -pa;
	          }
	          var pb = p - up;
	          if (pb < 0) {
	            pb = -pb;
	          }
	          var pc = p - upLeft;
	          if (pc < 0) {
	            pc = -pc;
	          }
	          c = rawBytes[i];
	          if (pa <= pb && pa <= pc) {
	            buffer[j++] = left + c;
	          } else if (pb <= pc) {
	            buffer[j++] = up + c;
	          } else {
	            buffer[j++] = upLeft + c;
	          }
	        }
	        break;
	      default:
	        error('Unsupported predictor: ' + predictor);
	    }
	    this.bufferLength += rowBytes;
	  };
	  return PredictorStream;
	}();
	var JpegStream = function JpegStreamClosure() {
	  function JpegStream(stream, maybeLength, dict, params) {
	    var ch;
	    while ((ch = stream.getByte()) !== -1) {
	      if (ch === 0xFF) {
	        stream.skip(-1);
	        break;
	      }
	    }
	    this.stream = stream;
	    this.maybeLength = maybeLength;
	    this.dict = dict;
	    this.params = params;
	    DecodeStream.call(this, maybeLength);
	  }
	  JpegStream.prototype = Object.create(DecodeStream.prototype);
	  Object.defineProperty(JpegStream.prototype, 'bytes', {
	    get: function JpegStream_bytes() {
	      return shadow(this, 'bytes', this.stream.getBytes(this.maybeLength));
	    },
	    configurable: true
	  });
	  JpegStream.prototype.ensureBuffer = function JpegStream_ensureBuffer(req) {
	    if (this.bufferLength) {
	      return;
	    }
	    var jpegImage = new JpegImage();
	    var decodeArr = this.dict.getArray('Decode', 'D');
	    if (this.forceRGB && isArray(decodeArr)) {
	      var bitsPerComponent = this.dict.get('BitsPerComponent') || 8;
	      var decodeArrLength = decodeArr.length;
	      var transform = new Int32Array(decodeArrLength);
	      var transformNeeded = false;
	      var maxValue = (1 << bitsPerComponent) - 1;
	      for (var i = 0; i < decodeArrLength; i += 2) {
	        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;
	        transform[i + 1] = decodeArr[i] * maxValue | 0;
	        if (transform[i] !== 256 || transform[i + 1] !== 0) {
	          transformNeeded = true;
	        }
	      }
	      if (transformNeeded) {
	        jpegImage.decodeTransform = transform;
	      }
	    }
	    if (isDict(this.params)) {
	      var colorTransform = this.params.get('ColorTransform');
	      if (isInt(colorTransform)) {
	        jpegImage.colorTransform = colorTransform;
	      }
	    }
	    jpegImage.parse(this.bytes);
	    var data = jpegImage.getData(this.drawWidth, this.drawHeight, this.forceRGB);
	    this.buffer = data;
	    this.bufferLength = data.length;
	    this.eof = true;
	  };
	  JpegStream.prototype.getBytes = function JpegStream_getBytes(length) {
	    this.ensureBuffer();
	    return this.buffer;
	  };
	  JpegStream.prototype.getIR = function JpegStream_getIR(forceDataSchema) {
	    return createObjectURL(this.bytes, 'image/jpeg', forceDataSchema);
	  };
	  return JpegStream;
	}();
	var JpxStream = function JpxStreamClosure() {
	  function JpxStream(stream, maybeLength, dict, params) {
	    this.stream = stream;
	    this.maybeLength = maybeLength;
	    this.dict = dict;
	    this.params = params;
	    DecodeStream.call(this, maybeLength);
	  }
	  JpxStream.prototype = Object.create(DecodeStream.prototype);
	  Object.defineProperty(JpxStream.prototype, 'bytes', {
	    get: function JpxStream_bytes() {
	      return shadow(this, 'bytes', this.stream.getBytes(this.maybeLength));
	    },
	    configurable: true
	  });
	  JpxStream.prototype.ensureBuffer = function JpxStream_ensureBuffer(req) {
	    if (this.bufferLength) {
	      return;
	    }
	    var jpxImage = new JpxImage();
	    jpxImage.parse(this.bytes);
	    var width = jpxImage.width;
	    var height = jpxImage.height;
	    var componentsCount = jpxImage.componentsCount;
	    var tileCount = jpxImage.tiles.length;
	    if (tileCount === 1) {
	      this.buffer = jpxImage.tiles[0].items;
	    } else {
	      var data = new Uint8Array(width * height * componentsCount);
	      for (var k = 0; k < tileCount; k++) {
	        var tileComponents = jpxImage.tiles[k];
	        var tileWidth = tileComponents.width;
	        var tileHeight = tileComponents.height;
	        var tileLeft = tileComponents.left;
	        var tileTop = tileComponents.top;
	        var src = tileComponents.items;
	        var srcPosition = 0;
	        var dataPosition = (width * tileTop + tileLeft) * componentsCount;
	        var imgRowSize = width * componentsCount;
	        var tileRowSize = tileWidth * componentsCount;
	        for (var j = 0; j < tileHeight; j++) {
	          var rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);
	          data.set(rowBytes, dataPosition);
	          srcPosition += tileRowSize;
	          dataPosition += imgRowSize;
	        }
	      }
	      this.buffer = data;
	    }
	    this.bufferLength = this.buffer.length;
	    this.eof = true;
	  };
	  return JpxStream;
	}();
	var Jbig2Stream = function Jbig2StreamClosure() {
	  function Jbig2Stream(stream, maybeLength, dict, params) {
	    this.stream = stream;
	    this.maybeLength = maybeLength;
	    this.dict = dict;
	    this.params = params;
	    DecodeStream.call(this, maybeLength);
	  }
	  Jbig2Stream.prototype = Object.create(DecodeStream.prototype);
	  Object.defineProperty(Jbig2Stream.prototype, 'bytes', {
	    get: function Jbig2Stream_bytes() {
	      return shadow(this, 'bytes', this.stream.getBytes(this.maybeLength));
	    },
	    configurable: true
	  });
	  Jbig2Stream.prototype.ensureBuffer = function Jbig2Stream_ensureBuffer(req) {
	    if (this.bufferLength) {
	      return;
	    }
	    var jbig2Image = new Jbig2Image();
	    var chunks = [];
	    if (isDict(this.params)) {
	      var globalsStream = this.params.get('JBIG2Globals');
	      if (isStream(globalsStream)) {
	        var globals = globalsStream.getBytes();
	        chunks.push({
	          data: globals,
	          start: 0,
	          end: globals.length
	        });
	      }
	    }
	    chunks.push({
	      data: this.bytes,
	      start: 0,
	      end: this.bytes.length
	    });
	    var data = jbig2Image.parseChunks(chunks);
	    var dataLength = data.length;
	    for (var i = 0; i < dataLength; i++) {
	      data[i] ^= 0xFF;
	    }
	    this.buffer = data;
	    this.bufferLength = dataLength;
	    this.eof = true;
	  };
	  return Jbig2Stream;
	}();
	var DecryptStream = function DecryptStreamClosure() {
	  function DecryptStream(str, maybeLength, decrypt) {
	    this.str = str;
	    this.dict = str.dict;
	    this.decrypt = decrypt;
	    this.nextChunk = null;
	    this.initialized = false;
	    DecodeStream.call(this, maybeLength);
	  }
	  var chunkSize = 512;
	  DecryptStream.prototype = Object.create(DecodeStream.prototype);
	  DecryptStream.prototype.readBlock = function DecryptStream_readBlock() {
	    var chunk;
	    if (this.initialized) {
	      chunk = this.nextChunk;
	    } else {
	      chunk = this.str.getBytes(chunkSize);
	      this.initialized = true;
	    }
	    if (!chunk || chunk.length === 0) {
	      this.eof = true;
	      return;
	    }
	    this.nextChunk = this.str.getBytes(chunkSize);
	    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;
	    var decrypt = this.decrypt;
	    chunk = decrypt(chunk, !hasMoreData);
	    var bufferLength = this.bufferLength;
	    var i,
	        n = chunk.length;
	    var buffer = this.ensureBuffer(bufferLength + n);
	    for (i = 0; i < n; i++) {
	      buffer[bufferLength++] = chunk[i];
	    }
	    this.bufferLength = bufferLength;
	  };
	  return DecryptStream;
	}();
	var Ascii85Stream = function Ascii85StreamClosure() {
	  function Ascii85Stream(str, maybeLength) {
	    this.str = str;
	    this.dict = str.dict;
	    this.input = new Uint8Array(5);
	    if (maybeLength) {
	      maybeLength = 0.8 * maybeLength;
	    }
	    DecodeStream.call(this, maybeLength);
	  }
	  Ascii85Stream.prototype = Object.create(DecodeStream.prototype);
	  Ascii85Stream.prototype.readBlock = function Ascii85Stream_readBlock() {
	    var TILDA_CHAR = 0x7E;
	    var Z_LOWER_CHAR = 0x7A;
	    var EOF = -1;
	    var str = this.str;
	    var c = str.getByte();
	    while (isSpace(c)) {
	      c = str.getByte();
	    }
	    if (c === EOF || c === TILDA_CHAR) {
	      this.eof = true;
	      return;
	    }
	    var bufferLength = this.bufferLength,
	        buffer;
	    var i;
	    if (c === Z_LOWER_CHAR) {
	      buffer = this.ensureBuffer(bufferLength + 4);
	      for (i = 0; i < 4; ++i) {
	        buffer[bufferLength + i] = 0;
	      }
	      this.bufferLength += 4;
	    } else {
	      var input = this.input;
	      input[0] = c;
	      for (i = 1; i < 5; ++i) {
	        c = str.getByte();
	        while (isSpace(c)) {
	          c = str.getByte();
	        }
	        input[i] = c;
	        if (c === EOF || c === TILDA_CHAR) {
	          break;
	        }
	      }
	      buffer = this.ensureBuffer(bufferLength + i - 1);
	      this.bufferLength += i - 1;
	      if (i < 5) {
	        for (; i < 5; ++i) {
	          input[i] = 0x21 + 84;
	        }
	        this.eof = true;
	      }
	      var t = 0;
	      for (i = 0; i < 5; ++i) {
	        t = t * 85 + (input[i] - 0x21);
	      }
	      for (i = 3; i >= 0; --i) {
	        buffer[bufferLength + i] = t & 0xFF;
	        t >>= 8;
	      }
	    }
	  };
	  return Ascii85Stream;
	}();
	var AsciiHexStream = function AsciiHexStreamClosure() {
	  function AsciiHexStream(str, maybeLength) {
	    this.str = str;
	    this.dict = str.dict;
	    this.firstDigit = -1;
	    if (maybeLength) {
	      maybeLength = 0.5 * maybeLength;
	    }
	    DecodeStream.call(this, maybeLength);
	  }
	  AsciiHexStream.prototype = Object.create(DecodeStream.prototype);
	  AsciiHexStream.prototype.readBlock = function AsciiHexStream_readBlock() {
	    var UPSTREAM_BLOCK_SIZE = 8000;
	    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);
	    if (!bytes.length) {
	      this.eof = true;
	      return;
	    }
	    var maxDecodeLength = bytes.length + 1 >> 1;
	    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);
	    var bufferLength = this.bufferLength;
	    var firstDigit = this.firstDigit;
	    for (var i = 0, ii = bytes.length; i < ii; i++) {
	      var ch = bytes[i],
	          digit;
	      if (ch >= 0x30 && ch <= 0x39) {
	        digit = ch & 0x0F;
	      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {
	        digit = (ch & 0x0F) + 9;
	      } else if (ch === 0x3E) {
	        this.eof = true;
	        break;
	      } else {
	        continue;
	      }
	      if (firstDigit < 0) {
	        firstDigit = digit;
	      } else {
	        buffer[bufferLength++] = firstDigit << 4 | digit;
	        firstDigit = -1;
	      }
	    }
	    if (firstDigit >= 0 && this.eof) {
	      buffer[bufferLength++] = firstDigit << 4;
	      firstDigit = -1;
	    }
	    this.firstDigit = firstDigit;
	    this.bufferLength = bufferLength;
	  };
	  return AsciiHexStream;
	}();
	var RunLengthStream = function RunLengthStreamClosure() {
	  function RunLengthStream(str, maybeLength) {
	    this.str = str;
	    this.dict = str.dict;
	    DecodeStream.call(this, maybeLength);
	  }
	  RunLengthStream.prototype = Object.create(DecodeStream.prototype);
	  RunLengthStream.prototype.readBlock = function RunLengthStream_readBlock() {
	    var repeatHeader = this.str.getBytes(2);
	    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {
	      this.eof = true;
	      return;
	    }
	    var buffer;
	    var bufferLength = this.bufferLength;
	    var n = repeatHeader[0];
	    if (n < 128) {
	      buffer = this.ensureBuffer(bufferLength + n + 1);
	      buffer[bufferLength++] = repeatHeader[1];
	      if (n > 0) {
	        var source = this.str.getBytes(n);
	        buffer.set(source, bufferLength);
	        bufferLength += n;
	      }
	    } else {
	      n = 257 - n;
	      var b = repeatHeader[1];
	      buffer = this.ensureBuffer(bufferLength + n + 1);
	      for (var i = 0; i < n; i++) {
	        buffer[bufferLength++] = b;
	      }
	    }
	    this.bufferLength = bufferLength;
	  };
	  return RunLengthStream;
	}();
	var CCITTFaxStream = function CCITTFaxStreamClosure() {
	  var ccittEOL = -2;
	  var ccittEOF = -1;
	  var twoDimPass = 0;
	  var twoDimHoriz = 1;
	  var twoDimVert0 = 2;
	  var twoDimVertR1 = 3;
	  var twoDimVertL1 = 4;
	  var twoDimVertR2 = 5;
	  var twoDimVertL2 = 6;
	  var twoDimVertR3 = 7;
	  var twoDimVertL3 = 8;
	  var twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];
	  var whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];
	  var whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];
	  var blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];
	  var blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];
	  var blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];
	  function CCITTFaxStream(str, maybeLength, params) {
	    this.str = str;
	    this.dict = str.dict;
	    params = params || Dict.empty;
	    this.encoding = params.get('K') || 0;
	    this.eoline = params.get('EndOfLine') || false;
	    this.byteAlign = params.get('EncodedByteAlign') || false;
	    this.columns = params.get('Columns') || 1728;
	    this.rows = params.get('Rows') || 0;
	    var eoblock = params.get('EndOfBlock');
	    if (eoblock === null || eoblock === undefined) {
	      eoblock = true;
	    }
	    this.eoblock = eoblock;
	    this.black = params.get('BlackIs1') || false;
	    this.codingLine = new Uint32Array(this.columns + 1);
	    this.refLine = new Uint32Array(this.columns + 2);
	    this.codingLine[0] = this.columns;
	    this.codingPos = 0;
	    this.row = 0;
	    this.nextLine2D = this.encoding < 0;
	    this.inputBits = 0;
	    this.inputBuf = 0;
	    this.outputBits = 0;
	    var code1;
	    while ((code1 = this.lookBits(12)) === 0) {
	      this.eatBits(1);
	    }
	    if (code1 === 1) {
	      this.eatBits(12);
	    }
	    if (this.encoding > 0) {
	      this.nextLine2D = !this.lookBits(1);
	      this.eatBits(1);
	    }
	    DecodeStream.call(this, maybeLength);
	  }
	  CCITTFaxStream.prototype = Object.create(DecodeStream.prototype);
	  CCITTFaxStream.prototype.readBlock = function CCITTFaxStream_readBlock() {
	    while (!this.eof) {
	      var c = this.lookChar();
	      this.ensureBuffer(this.bufferLength + 1);
	      this.buffer[this.bufferLength++] = c;
	    }
	  };
	  CCITTFaxStream.prototype.addPixels = function ccittFaxStreamAddPixels(a1, blackPixels) {
	    var codingLine = this.codingLine;
	    var codingPos = this.codingPos;
	    if (a1 > codingLine[codingPos]) {
	      if (a1 > this.columns) {
	        info('row is wrong length');
	        this.err = true;
	        a1 = this.columns;
	      }
	      if (codingPos & 1 ^ blackPixels) {
	        ++codingPos;
	      }
	      codingLine[codingPos] = a1;
	    }
	    this.codingPos = codingPos;
	  };
	  CCITTFaxStream.prototype.addPixelsNeg = function ccittFaxStreamAddPixelsNeg(a1, blackPixels) {
	    var codingLine = this.codingLine;
	    var codingPos = this.codingPos;
	    if (a1 > codingLine[codingPos]) {
	      if (a1 > this.columns) {
	        info('row is wrong length');
	        this.err = true;
	        a1 = this.columns;
	      }
	      if (codingPos & 1 ^ blackPixels) {
	        ++codingPos;
	      }
	      codingLine[codingPos] = a1;
	    } else if (a1 < codingLine[codingPos]) {
	      if (a1 < 0) {
	        info('invalid code');
	        this.err = true;
	        a1 = 0;
	      }
	      while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {
	        --codingPos;
	      }
	      codingLine[codingPos] = a1;
	    }
	    this.codingPos = codingPos;
	  };
	  CCITTFaxStream.prototype.lookChar = function CCITTFaxStream_lookChar() {
	    var refLine = this.refLine;
	    var codingLine = this.codingLine;
	    var columns = this.columns;
	    var refPos, blackPixels, bits, i;
	    if (this.outputBits === 0) {
	      if (this.eof) {
	        return null;
	      }
	      this.err = false;
	      var code1, code2, code3;
	      if (this.nextLine2D) {
	        for (i = 0; codingLine[i] < columns; ++i) {
	          refLine[i] = codingLine[i];
	        }
	        refLine[i++] = columns;
	        refLine[i] = columns;
	        codingLine[0] = 0;
	        this.codingPos = 0;
	        refPos = 0;
	        blackPixels = 0;
	        while (codingLine[this.codingPos] < columns) {
	          code1 = this.getTwoDimCode();
	          switch (code1) {
	            case twoDimPass:
	              this.addPixels(refLine[refPos + 1], blackPixels);
	              if (refLine[refPos + 1] < columns) {
	                refPos += 2;
	              }
	              break;
	            case twoDimHoriz:
	              code1 = code2 = 0;
	              if (blackPixels) {
	                do {
	                  code1 += code3 = this.getBlackCode();
	                } while (code3 >= 64);
	                do {
	                  code2 += code3 = this.getWhiteCode();
	                } while (code3 >= 64);
	              } else {
	                do {
	                  code1 += code3 = this.getWhiteCode();
	                } while (code3 >= 64);
	                do {
	                  code2 += code3 = this.getBlackCode();
	                } while (code3 >= 64);
	              }
	              this.addPixels(codingLine[this.codingPos] + code1, blackPixels);
	              if (codingLine[this.codingPos] < columns) {
	                this.addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);
	              }
	              while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                refPos += 2;
	              }
	              break;
	            case twoDimVertR3:
	              this.addPixels(refLine[refPos] + 3, blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                ++refPos;
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case twoDimVertR2:
	              this.addPixels(refLine[refPos] + 2, blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                ++refPos;
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case twoDimVertR1:
	              this.addPixels(refLine[refPos] + 1, blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                ++refPos;
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case twoDimVert0:
	              this.addPixels(refLine[refPos], blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                ++refPos;
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case twoDimVertL3:
	              this.addPixelsNeg(refLine[refPos] - 3, blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                if (refPos > 0) {
	                  --refPos;
	                } else {
	                  ++refPos;
	                }
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case twoDimVertL2:
	              this.addPixelsNeg(refLine[refPos] - 2, blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                if (refPos > 0) {
	                  --refPos;
	                } else {
	                  ++refPos;
	                }
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case twoDimVertL1:
	              this.addPixelsNeg(refLine[refPos] - 1, blackPixels);
	              blackPixels ^= 1;
	              if (codingLine[this.codingPos] < columns) {
	                if (refPos > 0) {
	                  --refPos;
	                } else {
	                  ++refPos;
	                }
	                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {
	                  refPos += 2;
	                }
	              }
	              break;
	            case ccittEOF:
	              this.addPixels(columns, 0);
	              this.eof = true;
	              break;
	            default:
	              info('bad 2d code');
	              this.addPixels(columns, 0);
	              this.err = true;
	          }
	        }
	      } else {
	        codingLine[0] = 0;
	        this.codingPos = 0;
	        blackPixels = 0;
	        while (codingLine[this.codingPos] < columns) {
	          code1 = 0;
	          if (blackPixels) {
	            do {
	              code1 += code3 = this.getBlackCode();
	            } while (code3 >= 64);
	          } else {
	            do {
	              code1 += code3 = this.getWhiteCode();
	            } while (code3 >= 64);
	          }
	          this.addPixels(codingLine[this.codingPos] + code1, blackPixels);
	          blackPixels ^= 1;
	        }
	      }
	      var gotEOL = false;
	      if (this.byteAlign) {
	        this.inputBits &= ~7;
	      }
	      if (!this.eoblock && this.row === this.rows - 1) {
	        this.eof = true;
	      } else {
	        code1 = this.lookBits(12);
	        if (this.eoline) {
	          while (code1 !== ccittEOF && code1 !== 1) {
	            this.eatBits(1);
	            code1 = this.lookBits(12);
	          }
	        } else {
	          while (code1 === 0) {
	            this.eatBits(1);
	            code1 = this.lookBits(12);
	          }
	        }
	        if (code1 === 1) {
	          this.eatBits(12);
	          gotEOL = true;
	        } else if (code1 === ccittEOF) {
	          this.eof = true;
	        }
	      }
	      if (!this.eof && this.encoding > 0) {
	        this.nextLine2D = !this.lookBits(1);
	        this.eatBits(1);
	      }
	      if (this.eoblock && gotEOL && this.byteAlign) {
	        code1 = this.lookBits(12);
	        if (code1 === 1) {
	          this.eatBits(12);
	          if (this.encoding > 0) {
	            this.lookBits(1);
	            this.eatBits(1);
	          }
	          if (this.encoding >= 0) {
	            for (i = 0; i < 4; ++i) {
	              code1 = this.lookBits(12);
	              if (code1 !== 1) {
	                info('bad rtc code: ' + code1);
	              }
	              this.eatBits(12);
	              if (this.encoding > 0) {
	                this.lookBits(1);
	                this.eatBits(1);
	              }
	            }
	          }
	          this.eof = true;
	        }
	      } else if (this.err && this.eoline) {
	        while (true) {
	          code1 = this.lookBits(13);
	          if (code1 === ccittEOF) {
	            this.eof = true;
	            return null;
	          }
	          if (code1 >> 1 === 1) {
	            break;
	          }
	          this.eatBits(1);
	        }
	        this.eatBits(12);
	        if (this.encoding > 0) {
	          this.eatBits(1);
	          this.nextLine2D = !(code1 & 1);
	        }
	      }
	      if (codingLine[0] > 0) {
	        this.outputBits = codingLine[this.codingPos = 0];
	      } else {
	        this.outputBits = codingLine[this.codingPos = 1];
	      }
	      this.row++;
	    }
	    var c;
	    if (this.outputBits >= 8) {
	      c = this.codingPos & 1 ? 0 : 0xFF;
	      this.outputBits -= 8;
	      if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {
	        this.codingPos++;
	        this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];
	      }
	    } else {
	      bits = 8;
	      c = 0;
	      do {
	        if (this.outputBits > bits) {
	          c <<= bits;
	          if (!(this.codingPos & 1)) {
	            c |= 0xFF >> 8 - bits;
	          }
	          this.outputBits -= bits;
	          bits = 0;
	        } else {
	          c <<= this.outputBits;
	          if (!(this.codingPos & 1)) {
	            c |= 0xFF >> 8 - this.outputBits;
	          }
	          bits -= this.outputBits;
	          this.outputBits = 0;
	          if (codingLine[this.codingPos] < columns) {
	            this.codingPos++;
	            this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];
	          } else if (bits > 0) {
	            c <<= bits;
	            bits = 0;
	          }
	        }
	      } while (bits);
	    }
	    if (this.black) {
	      c ^= 0xFF;
	    }
	    return c;
	  };
	  CCITTFaxStream.prototype.findTableCode = function ccittFaxStreamFindTableCode(start, end, table, limit) {
	    var limitValue = limit || 0;
	    for (var i = start; i <= end; ++i) {
	      var code = this.lookBits(i);
	      if (code === ccittEOF) {
	        return [true, 1, false];
	      }
	      if (i < end) {
	        code <<= end - i;
	      }
	      if (!limitValue || code >= limitValue) {
	        var p = table[code - limitValue];
	        if (p[0] === i) {
	          this.eatBits(i);
	          return [true, p[1], true];
	        }
	      }
	    }
	    return [false, 0, false];
	  };
	  CCITTFaxStream.prototype.getTwoDimCode = function ccittFaxStreamGetTwoDimCode() {
	    var code = 0;
	    var p;
	    if (this.eoblock) {
	      code = this.lookBits(7);
	      p = twoDimTable[code];
	      if (p && p[0] > 0) {
	        this.eatBits(p[0]);
	        return p[1];
	      }
	    } else {
	      var result = this.findTableCode(1, 7, twoDimTable);
	      if (result[0] && result[2]) {
	        return result[1];
	      }
	    }
	    info('Bad two dim code');
	    return ccittEOF;
	  };
	  CCITTFaxStream.prototype.getWhiteCode = function ccittFaxStreamGetWhiteCode() {
	    var code = 0;
	    var p;
	    if (this.eoblock) {
	      code = this.lookBits(12);
	      if (code === ccittEOF) {
	        return 1;
	      }
	      if (code >> 5 === 0) {
	        p = whiteTable1[code];
	      } else {
	        p = whiteTable2[code >> 3];
	      }
	      if (p[0] > 0) {
	        this.eatBits(p[0]);
	        return p[1];
	      }
	    } else {
	      var result = this.findTableCode(1, 9, whiteTable2);
	      if (result[0]) {
	        return result[1];
	      }
	      result = this.findTableCode(11, 12, whiteTable1);
	      if (result[0]) {
	        return result[1];
	      }
	    }
	    info('bad white code');
	    this.eatBits(1);
	    return 1;
	  };
	  CCITTFaxStream.prototype.getBlackCode = function ccittFaxStreamGetBlackCode() {
	    var code, p;
	    if (this.eoblock) {
	      code = this.lookBits(13);
	      if (code === ccittEOF) {
	        return 1;
	      }
	      if (code >> 7 === 0) {
	        p = blackTable1[code];
	      } else if (code >> 9 === 0 && code >> 7 !== 0) {
	        p = blackTable2[(code >> 1) - 64];
	      } else {
	        p = blackTable3[code >> 7];
	      }
	      if (p[0] > 0) {
	        this.eatBits(p[0]);
	        return p[1];
	      }
	    } else {
	      var result = this.findTableCode(2, 6, blackTable3);
	      if (result[0]) {
	        return result[1];
	      }
	      result = this.findTableCode(7, 12, blackTable2, 64);
	      if (result[0]) {
	        return result[1];
	      }
	      result = this.findTableCode(10, 13, blackTable1);
	      if (result[0]) {
	        return result[1];
	      }
	    }
	    info('bad black code');
	    this.eatBits(1);
	    return 1;
	  };
	  CCITTFaxStream.prototype.lookBits = function CCITTFaxStream_lookBits(n) {
	    var c;
	    while (this.inputBits < n) {
	      if ((c = this.str.getByte()) === -1) {
	        if (this.inputBits === 0) {
	          return ccittEOF;
	        }
	        return this.inputBuf << n - this.inputBits & 0xFFFF >> 16 - n;
	      }
	      this.inputBuf = this.inputBuf << 8 | c;
	      this.inputBits += 8;
	    }
	    return this.inputBuf >> this.inputBits - n & 0xFFFF >> 16 - n;
	  };
	  CCITTFaxStream.prototype.eatBits = function CCITTFaxStream_eatBits(n) {
	    if ((this.inputBits -= n) < 0) {
	      this.inputBits = 0;
	    }
	  };
	  return CCITTFaxStream;
	}();
	var LZWStream = function LZWStreamClosure() {
	  function LZWStream(str, maybeLength, earlyChange) {
	    this.str = str;
	    this.dict = str.dict;
	    this.cachedData = 0;
	    this.bitsCached = 0;
	    var maxLzwDictionarySize = 4096;
	    var lzwState = {
	      earlyChange: earlyChange,
	      codeLength: 9,
	      nextCode: 258,
	      dictionaryValues: new Uint8Array(maxLzwDictionarySize),
	      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),
	      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),
	      currentSequence: new Uint8Array(maxLzwDictionarySize),
	      currentSequenceLength: 0
	    };
	    for (var i = 0; i < 256; ++i) {
	      lzwState.dictionaryValues[i] = i;
	      lzwState.dictionaryLengths[i] = 1;
	    }
	    this.lzwState = lzwState;
	    DecodeStream.call(this, maybeLength);
	  }
	  LZWStream.prototype = Object.create(DecodeStream.prototype);
	  LZWStream.prototype.readBits = function LZWStream_readBits(n) {
	    var bitsCached = this.bitsCached;
	    var cachedData = this.cachedData;
	    while (bitsCached < n) {
	      var c = this.str.getByte();
	      if (c === -1) {
	        this.eof = true;
	        return null;
	      }
	      cachedData = cachedData << 8 | c;
	      bitsCached += 8;
	    }
	    this.bitsCached = bitsCached -= n;
	    this.cachedData = cachedData;
	    this.lastCode = null;
	    return cachedData >>> bitsCached & (1 << n) - 1;
	  };
	  LZWStream.prototype.readBlock = function LZWStream_readBlock() {
	    var blockSize = 512;
	    var estimatedDecodedSize = blockSize * 2,
	        decodedSizeDelta = blockSize;
	    var i, j, q;
	    var lzwState = this.lzwState;
	    if (!lzwState) {
	      return;
	    }
	    var earlyChange = lzwState.earlyChange;
	    var nextCode = lzwState.nextCode;
	    var dictionaryValues = lzwState.dictionaryValues;
	    var dictionaryLengths = lzwState.dictionaryLengths;
	    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;
	    var codeLength = lzwState.codeLength;
	    var prevCode = lzwState.prevCode;
	    var currentSequence = lzwState.currentSequence;
	    var currentSequenceLength = lzwState.currentSequenceLength;
	    var decodedLength = 0;
	    var currentBufferLength = this.bufferLength;
	    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
	    for (i = 0; i < blockSize; i++) {
	      var code = this.readBits(codeLength);
	      var hasPrev = currentSequenceLength > 0;
	      if (code < 256) {
	        currentSequence[0] = code;
	        currentSequenceLength = 1;
	      } else if (code >= 258) {
	        if (code < nextCode) {
	          currentSequenceLength = dictionaryLengths[code];
	          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {
	            currentSequence[j] = dictionaryValues[q];
	            q = dictionaryPrevCodes[q];
	          }
	        } else {
	          currentSequence[currentSequenceLength++] = currentSequence[0];
	        }
	      } else if (code === 256) {
	        codeLength = 9;
	        nextCode = 258;
	        currentSequenceLength = 0;
	        continue;
	      } else {
	        this.eof = true;
	        delete this.lzwState;
	        break;
	      }
	      if (hasPrev) {
	        dictionaryPrevCodes[nextCode] = prevCode;
	        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;
	        dictionaryValues[nextCode] = currentSequence[0];
	        nextCode++;
	        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;
	      }
	      prevCode = code;
	      decodedLength += currentSequenceLength;
	      if (estimatedDecodedSize < decodedLength) {
	        do {
	          estimatedDecodedSize += decodedSizeDelta;
	        } while (estimatedDecodedSize < decodedLength);
	        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);
	      }
	      for (j = 0; j < currentSequenceLength; j++) {
	        buffer[currentBufferLength++] = currentSequence[j];
	      }
	    }
	    lzwState.nextCode = nextCode;
	    lzwState.codeLength = codeLength;
	    lzwState.prevCode = prevCode;
	    lzwState.currentSequenceLength = currentSequenceLength;
	    this.bufferLength = currentBufferLength;
	  };
	  return LZWStream;
	}();
	var NullStream = function NullStreamClosure() {
	  function NullStream() {
	    Stream.call(this, new Uint8Array(0));
	  }
	  NullStream.prototype = Stream.prototype;
	  return NullStream;
	}();
	exports.Ascii85Stream = Ascii85Stream;
	exports.AsciiHexStream = AsciiHexStream;
	exports.CCITTFaxStream = CCITTFaxStream;
	exports.DecryptStream = DecryptStream;
	exports.DecodeStream = DecodeStream;
	exports.FlateStream = FlateStream;
	exports.Jbig2Stream = Jbig2Stream;
	exports.JpegStream = JpegStream;
	exports.JpxStream = JpxStream;
	exports.NullStream = NullStream;
	exports.PredictorStream = PredictorStream;
	exports.RunLengthStream = RunLengthStream;
	exports.Stream = Stream;
	exports.StreamsSequenceStream = StreamsSequenceStream;
	exports.StringStream = StringStream;
	exports.LZWStream = LZWStream;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreFunction = __w_pdfjs_require__(6);
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isString = sharedUtil.isString;
	var shadow = sharedUtil.shadow;
	var warn = sharedUtil.warn;
	var isDict = corePrimitives.isDict;
	var isName = corePrimitives.isName;
	var isStream = corePrimitives.isStream;
	var PDFFunction = coreFunction.PDFFunction;
	var ColorSpace = function ColorSpaceClosure() {
	  function resizeRgbImage(src, bpc, w1, h1, w2, h2, alpha01, dest) {
	    var COMPONENTS = 3;
	    alpha01 = alpha01 !== 1 ? 0 : alpha01;
	    var xRatio = w1 / w2;
	    var yRatio = h1 / h2;
	    var i,
	        j,
	        py,
	        newIndex = 0,
	        oldIndex;
	    var xScaled = new Uint16Array(w2);
	    var w1Scanline = w1 * COMPONENTS;
	    for (i = 0; i < w2; i++) {
	      xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;
	    }
	    for (i = 0; i < h2; i++) {
	      py = Math.floor(i * yRatio) * w1Scanline;
	      for (j = 0; j < w2; j++) {
	        oldIndex = py + xScaled[j];
	        dest[newIndex++] = src[oldIndex++];
	        dest[newIndex++] = src[oldIndex++];
	        dest[newIndex++] = src[oldIndex++];
	        newIndex += alpha01;
	      }
	    }
	  }
	  function ColorSpace() {
	    error('should not call ColorSpace constructor');
	  }
	  ColorSpace.prototype = {
	    getRgb: function ColorSpace_getRgb(src, srcOffset) {
	      var rgb = new Uint8Array(3);
	      this.getRgbItem(src, srcOffset, rgb, 0);
	      return rgb;
	    },
	    getRgbItem: function ColorSpace_getRgbItem(src, srcOffset, dest, destOffset) {
	      error('Should not call ColorSpace.getRgbItem');
	    },
	    getRgbBuffer: function ColorSpace_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      error('Should not call ColorSpace.getRgbBuffer');
	    },
	    getOutputLength: function ColorSpace_getOutputLength(inputLength, alpha01) {
	      error('Should not call ColorSpace.getOutputLength');
	    },
	    isPassthrough: function ColorSpace_isPassthrough(bits) {
	      return false;
	    },
	    fillRgb: function ColorSpace_fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {
	      var count = originalWidth * originalHeight;
	      var rgbBuf = null;
	      var numComponentColors = 1 << bpc;
	      var needsResizing = originalHeight !== height || originalWidth !== width;
	      var i, ii;
	      if (this.isPassthrough(bpc)) {
	        rgbBuf = comps;
	      } else if (this.numComps === 1 && count > numComponentColors && this.name !== 'DeviceGray' && this.name !== 'DeviceRGB') {
	        var allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);
	        var key;
	        for (i = 0; i < numComponentColors; i++) {
	          allColors[i] = i;
	        }
	        var colorMap = new Uint8Array(numComponentColors * 3);
	        this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);
	        var destPos, rgbPos;
	        if (!needsResizing) {
	          destPos = 0;
	          for (i = 0; i < count; ++i) {
	            key = comps[i] * 3;
	            dest[destPos++] = colorMap[key];
	            dest[destPos++] = colorMap[key + 1];
	            dest[destPos++] = colorMap[key + 2];
	            destPos += alpha01;
	          }
	        } else {
	          rgbBuf = new Uint8Array(count * 3);
	          rgbPos = 0;
	          for (i = 0; i < count; ++i) {
	            key = comps[i] * 3;
	            rgbBuf[rgbPos++] = colorMap[key];
	            rgbBuf[rgbPos++] = colorMap[key + 1];
	            rgbBuf[rgbPos++] = colorMap[key + 2];
	          }
	        }
	      } else {
	        if (!needsResizing) {
	          this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);
	        } else {
	          rgbBuf = new Uint8Array(count * 3);
	          this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);
	        }
	      }
	      if (rgbBuf) {
	        if (needsResizing) {
	          resizeRgbImage(rgbBuf, bpc, originalWidth, originalHeight, width, height, alpha01, dest);
	        } else {
	          rgbPos = 0;
	          destPos = 0;
	          for (i = 0, ii = width * actualHeight; i < ii; i++) {
	            dest[destPos++] = rgbBuf[rgbPos++];
	            dest[destPos++] = rgbBuf[rgbPos++];
	            dest[destPos++] = rgbBuf[rgbPos++];
	            destPos += alpha01;
	          }
	        }
	      }
	    },
	    usesZeroToOneRange: true
	  };
	  ColorSpace.parse = function ColorSpace_parse(cs, xref, res) {
	    var IR = ColorSpace.parseToIR(cs, xref, res);
	    if (IR instanceof AlternateCS) {
	      return IR;
	    }
	    return ColorSpace.fromIR(IR);
	  };
	  ColorSpace.fromIR = function ColorSpace_fromIR(IR) {
	    var name = isArray(IR) ? IR[0] : IR;
	    var whitePoint, blackPoint, gamma;
	    switch (name) {
	      case 'DeviceGrayCS':
	        return this.singletons.gray;
	      case 'DeviceRgbCS':
	        return this.singletons.rgb;
	      case 'DeviceCmykCS':
	        return this.singletons.cmyk;
	      case 'CalGrayCS':
	        whitePoint = IR[1];
	        blackPoint = IR[2];
	        gamma = IR[3];
	        return new CalGrayCS(whitePoint, blackPoint, gamma);
	      case 'CalRGBCS':
	        whitePoint = IR[1];
	        blackPoint = IR[2];
	        gamma = IR[3];
	        var matrix = IR[4];
	        return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);
	      case 'PatternCS':
	        var basePatternCS = IR[1];
	        if (basePatternCS) {
	          basePatternCS = ColorSpace.fromIR(basePatternCS);
	        }
	        return new PatternCS(basePatternCS);
	      case 'IndexedCS':
	        var baseIndexedCS = IR[1];
	        var hiVal = IR[2];
	        var lookup = IR[3];
	        return new IndexedCS(ColorSpace.fromIR(baseIndexedCS), hiVal, lookup);
	      case 'AlternateCS':
	        var numComps = IR[1];
	        var alt = IR[2];
	        var tintFnIR = IR[3];
	        return new AlternateCS(numComps, ColorSpace.fromIR(alt), PDFFunction.fromIR(tintFnIR));
	      case 'LabCS':
	        whitePoint = IR[1];
	        blackPoint = IR[2];
	        var range = IR[3];
	        return new LabCS(whitePoint, blackPoint, range);
	      default:
	        error('Unknown name ' + name);
	    }
	    return null;
	  };
	  ColorSpace.parseToIR = function ColorSpace_parseToIR(cs, xref, res) {
	    if (isName(cs)) {
	      var colorSpaces = res.get('ColorSpace');
	      if (isDict(colorSpaces)) {
	        var refcs = colorSpaces.get(cs.name);
	        if (refcs) {
	          cs = refcs;
	        }
	      }
	    }
	    cs = xref.fetchIfRef(cs);
	    if (isName(cs)) {
	      switch (cs.name) {
	        case 'DeviceGray':
	        case 'G':
	          return 'DeviceGrayCS';
	        case 'DeviceRGB':
	        case 'RGB':
	          return 'DeviceRgbCS';
	        case 'DeviceCMYK':
	        case 'CMYK':
	          return 'DeviceCmykCS';
	        case 'Pattern':
	          return ['PatternCS', null];
	        default:
	          error('unrecognized colorspace ' + cs.name);
	      }
	    } else if (isArray(cs)) {
	      var mode = xref.fetchIfRef(cs[0]).name;
	      var numComps, params, alt, whitePoint, blackPoint, gamma;
	      switch (mode) {
	        case 'DeviceGray':
	        case 'G':
	          return 'DeviceGrayCS';
	        case 'DeviceRGB':
	        case 'RGB':
	          return 'DeviceRgbCS';
	        case 'DeviceCMYK':
	        case 'CMYK':
	          return 'DeviceCmykCS';
	        case 'CalGray':
	          params = xref.fetchIfRef(cs[1]);
	          whitePoint = params.getArray('WhitePoint');
	          blackPoint = params.getArray('BlackPoint');
	          gamma = params.get('Gamma');
	          return ['CalGrayCS', whitePoint, blackPoint, gamma];
	        case 'CalRGB':
	          params = xref.fetchIfRef(cs[1]);
	          whitePoint = params.getArray('WhitePoint');
	          blackPoint = params.getArray('BlackPoint');
	          gamma = params.getArray('Gamma');
	          var matrix = params.getArray('Matrix');
	          return ['CalRGBCS', whitePoint, blackPoint, gamma, matrix];
	        case 'ICCBased':
	          var stream = xref.fetchIfRef(cs[1]);
	          var dict = stream.dict;
	          numComps = dict.get('N');
	          alt = dict.get('Alternate');
	          if (alt) {
	            var altIR = ColorSpace.parseToIR(alt, xref, res);
	            var altCS = ColorSpace.fromIR(altIR);
	            if (altCS.numComps === numComps) {
	              return altIR;
	            }
	            warn('ICCBased color space: Ignoring incorrect /Alternate entry.');
	          }
	          if (numComps === 1) {
	            return 'DeviceGrayCS';
	          } else if (numComps === 3) {
	            return 'DeviceRgbCS';
	          } else if (numComps === 4) {
	            return 'DeviceCmykCS';
	          }
	          break;
	        case 'Pattern':
	          var basePatternCS = cs[1] || null;
	          if (basePatternCS) {
	            basePatternCS = ColorSpace.parseToIR(basePatternCS, xref, res);
	          }
	          return ['PatternCS', basePatternCS];
	        case 'Indexed':
	        case 'I':
	          var baseIndexedCS = ColorSpace.parseToIR(cs[1], xref, res);
	          var hiVal = xref.fetchIfRef(cs[2]) + 1;
	          var lookup = xref.fetchIfRef(cs[3]);
	          if (isStream(lookup)) {
	            lookup = lookup.getBytes();
	          }
	          return ['IndexedCS', baseIndexedCS, hiVal, lookup];
	        case 'Separation':
	        case 'DeviceN':
	          var name = xref.fetchIfRef(cs[1]);
	          numComps = isArray(name) ? name.length : 1;
	          alt = ColorSpace.parseToIR(cs[2], xref, res);
	          var tintFnIR = PDFFunction.getIR(xref, xref.fetchIfRef(cs[3]));
	          return ['AlternateCS', numComps, alt, tintFnIR];
	        case 'Lab':
	          params = xref.fetchIfRef(cs[1]);
	          whitePoint = params.getArray('WhitePoint');
	          blackPoint = params.getArray('BlackPoint');
	          var range = params.getArray('Range');
	          return ['LabCS', whitePoint, blackPoint, range];
	        default:
	          error('unimplemented color space object "' + mode + '"');
	      }
	    } else {
	      error('unrecognized color space object: "' + cs + '"');
	    }
	    return null;
	  };
	  ColorSpace.isDefaultDecode = function ColorSpace_isDefaultDecode(decode, n) {
	    if (!isArray(decode)) {
	      return true;
	    }
	    if (n * 2 !== decode.length) {
	      warn('The decode map is not the correct length');
	      return true;
	    }
	    for (var i = 0, ii = decode.length; i < ii; i += 2) {
	      if (decode[i] !== 0 || decode[i + 1] !== 1) {
	        return false;
	      }
	    }
	    return true;
	  };
	  ColorSpace.singletons = {
	    get gray() {
	      return shadow(this, 'gray', new DeviceGrayCS());
	    },
	    get rgb() {
	      return shadow(this, 'rgb', new DeviceRgbCS());
	    },
	    get cmyk() {
	      return shadow(this, 'cmyk', new DeviceCmykCS());
	    }
	  };
	  return ColorSpace;
	}();
	var AlternateCS = function AlternateCSClosure() {
	  function AlternateCS(numComps, base, tintFn) {
	    this.name = 'Alternate';
	    this.numComps = numComps;
	    this.defaultColor = new Float32Array(numComps);
	    for (var i = 0; i < numComps; ++i) {
	      this.defaultColor[i] = 1;
	    }
	    this.base = base;
	    this.tintFn = tintFn;
	    this.tmpBuf = new Float32Array(base.numComps);
	  }
	  AlternateCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function AlternateCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      var tmpBuf = this.tmpBuf;
	      this.tintFn(src, srcOffset, tmpBuf, 0);
	      this.base.getRgbItem(tmpBuf, 0, dest, destOffset);
	    },
	    getRgbBuffer: function AlternateCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var tintFn = this.tintFn;
	      var base = this.base;
	      var scale = 1 / ((1 << bits) - 1);
	      var baseNumComps = base.numComps;
	      var usesZeroToOneRange = base.usesZeroToOneRange;
	      var isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;
	      var pos = isPassthrough ? destOffset : 0;
	      var baseBuf = isPassthrough ? dest : new Uint8Array(baseNumComps * count);
	      var numComps = this.numComps;
	      var scaled = new Float32Array(numComps);
	      var tinted = new Float32Array(baseNumComps);
	      var i, j;
	      for (i = 0; i < count; i++) {
	        for (j = 0; j < numComps; j++) {
	          scaled[j] = src[srcOffset++] * scale;
	        }
	        tintFn(scaled, 0, tinted, 0);
	        if (usesZeroToOneRange) {
	          for (j = 0; j < baseNumComps; j++) {
	            baseBuf[pos++] = tinted[j] * 255;
	          }
	        } else {
	          base.getRgbItem(tinted, 0, baseBuf, pos);
	          pos += baseNumComps;
	        }
	      }
	      if (!isPassthrough) {
	        base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);
	      }
	    },
	    getOutputLength: function AlternateCS_getOutputLength(inputLength, alpha01) {
	      return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function AlternateCS_isDefaultDecode(decodeMap) {
	      return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
	    },
	    usesZeroToOneRange: true
	  };
	  return AlternateCS;
	}();
	var PatternCS = function PatternCSClosure() {
	  function PatternCS(baseCS) {
	    this.name = 'Pattern';
	    this.base = baseCS;
	  }
	  PatternCS.prototype = {};
	  return PatternCS;
	}();
	var IndexedCS = function IndexedCSClosure() {
	  function IndexedCS(base, highVal, lookup) {
	    this.name = 'Indexed';
	    this.numComps = 1;
	    this.defaultColor = new Uint8Array(this.numComps);
	    this.base = base;
	    this.highVal = highVal;
	    var baseNumComps = base.numComps;
	    var length = baseNumComps * highVal;
	    if (isStream(lookup)) {
	      this.lookup = new Uint8Array(length);
	      var bytes = lookup.getBytes(length);
	      this.lookup.set(bytes);
	    } else if (isString(lookup)) {
	      this.lookup = new Uint8Array(length);
	      for (var i = 0; i < length; ++i) {
	        this.lookup[i] = lookup.charCodeAt(i);
	      }
	    } else if (lookup instanceof Uint8Array || lookup instanceof Array) {
	      this.lookup = lookup;
	    } else {
	      error('Unrecognized lookup table: ' + lookup);
	    }
	  }
	  IndexedCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function IndexedCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      var numComps = this.base.numComps;
	      var start = src[srcOffset] * numComps;
	      this.base.getRgbItem(this.lookup, start, dest, destOffset);
	    },
	    getRgbBuffer: function IndexedCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var base = this.base;
	      var numComps = base.numComps;
	      var outputDelta = base.getOutputLength(numComps, alpha01);
	      var lookup = this.lookup;
	      for (var i = 0; i < count; ++i) {
	        var lookupPos = src[srcOffset++] * numComps;
	        base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);
	        destOffset += outputDelta;
	      }
	    },
	    getOutputLength: function IndexedCS_getOutputLength(inputLength, alpha01) {
	      return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function IndexedCS_isDefaultDecode(decodeMap) {
	      return true;
	    },
	    usesZeroToOneRange: true
	  };
	  return IndexedCS;
	}();
	var DeviceGrayCS = function DeviceGrayCSClosure() {
	  function DeviceGrayCS() {
	    this.name = 'DeviceGray';
	    this.numComps = 1;
	    this.defaultColor = new Float32Array(this.numComps);
	  }
	  DeviceGrayCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function DeviceGrayCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      var c = src[srcOffset] * 255 | 0;
	      c = c < 0 ? 0 : c > 255 ? 255 : c;
	      dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;
	    },
	    getRgbBuffer: function DeviceGrayCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var scale = 255 / ((1 << bits) - 1);
	      var j = srcOffset,
	          q = destOffset;
	      for (var i = 0; i < count; ++i) {
	        var c = scale * src[j++] | 0;
	        dest[q++] = c;
	        dest[q++] = c;
	        dest[q++] = c;
	        q += alpha01;
	      }
	    },
	    getOutputLength: function DeviceGrayCS_getOutputLength(inputLength, alpha01) {
	      return inputLength * (3 + alpha01);
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function DeviceGrayCS_isDefaultDecode(decodeMap) {
	      return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
	    },
	    usesZeroToOneRange: true
	  };
	  return DeviceGrayCS;
	}();
	var DeviceRgbCS = function DeviceRgbCSClosure() {
	  function DeviceRgbCS() {
	    this.name = 'DeviceRGB';
	    this.numComps = 3;
	    this.defaultColor = new Float32Array(this.numComps);
	  }
	  DeviceRgbCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function DeviceRgbCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      var r = src[srcOffset] * 255 | 0;
	      var g = src[srcOffset + 1] * 255 | 0;
	      var b = src[srcOffset + 2] * 255 | 0;
	      dest[destOffset] = r < 0 ? 0 : r > 255 ? 255 : r;
	      dest[destOffset + 1] = g < 0 ? 0 : g > 255 ? 255 : g;
	      dest[destOffset + 2] = b < 0 ? 0 : b > 255 ? 255 : b;
	    },
	    getRgbBuffer: function DeviceRgbCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      if (bits === 8 && alpha01 === 0) {
	        dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);
	        return;
	      }
	      var scale = 255 / ((1 << bits) - 1);
	      var j = srcOffset,
	          q = destOffset;
	      for (var i = 0; i < count; ++i) {
	        dest[q++] = scale * src[j++] | 0;
	        dest[q++] = scale * src[j++] | 0;
	        dest[q++] = scale * src[j++] | 0;
	        q += alpha01;
	      }
	    },
	    getOutputLength: function DeviceRgbCS_getOutputLength(inputLength, alpha01) {
	      return inputLength * (3 + alpha01) / 3 | 0;
	    },
	    isPassthrough: function DeviceRgbCS_isPassthrough(bits) {
	      return bits === 8;
	    },
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function DeviceRgbCS_isDefaultDecode(decodeMap) {
	      return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
	    },
	    usesZeroToOneRange: true
	  };
	  return DeviceRgbCS;
	}();
	var DeviceCmykCS = function DeviceCmykCSClosure() {
	  function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {
	    var c = src[srcOffset + 0] * srcScale;
	    var m = src[srcOffset + 1] * srcScale;
	    var y = src[srcOffset + 2] * srcScale;
	    var k = src[srcOffset + 3] * srcScale;
	    var r = c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747) + 255 | 0;
	    var g = c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578) + 255 | 0;
	    var b = c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367) + 255 | 0;
	    dest[destOffset] = r > 255 ? 255 : r < 0 ? 0 : r;
	    dest[destOffset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;
	    dest[destOffset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;
	  }
	  function DeviceCmykCS() {
	    this.name = 'DeviceCMYK';
	    this.numComps = 4;
	    this.defaultColor = new Float32Array(this.numComps);
	    this.defaultColor[3] = 1;
	  }
	  DeviceCmykCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function DeviceCmykCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      convertToRgb(src, srcOffset, 1, dest, destOffset);
	    },
	    getRgbBuffer: function DeviceCmykCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var scale = 1 / ((1 << bits) - 1);
	      for (var i = 0; i < count; i++) {
	        convertToRgb(src, srcOffset, scale, dest, destOffset);
	        srcOffset += 4;
	        destOffset += 3 + alpha01;
	      }
	    },
	    getOutputLength: function DeviceCmykCS_getOutputLength(inputLength, alpha01) {
	      return inputLength / 4 * (3 + alpha01) | 0;
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function DeviceCmykCS_isDefaultDecode(decodeMap) {
	      return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
	    },
	    usesZeroToOneRange: true
	  };
	  return DeviceCmykCS;
	}();
	var CalGrayCS = function CalGrayCSClosure() {
	  function CalGrayCS(whitePoint, blackPoint, gamma) {
	    this.name = 'CalGray';
	    this.numComps = 1;
	    this.defaultColor = new Float32Array(this.numComps);
	    if (!whitePoint) {
	      error('WhitePoint missing - required for color space CalGray');
	    }
	    blackPoint = blackPoint || [0, 0, 0];
	    gamma = gamma || 1;
	    this.XW = whitePoint[0];
	    this.YW = whitePoint[1];
	    this.ZW = whitePoint[2];
	    this.XB = blackPoint[0];
	    this.YB = blackPoint[1];
	    this.ZB = blackPoint[2];
	    this.G = gamma;
	    if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
	      error('Invalid WhitePoint components for ' + this.name + ', no fallback available');
	    }
	    if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {
	      info('Invalid BlackPoint for ' + this.name + ', falling back to default');
	      this.XB = this.YB = this.ZB = 0;
	    }
	    if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {
	      warn(this.name + ', BlackPoint: XB: ' + this.XB + ', YB: ' + this.YB + ', ZB: ' + this.ZB + ', only default values are supported.');
	    }
	    if (this.G < 1) {
	      info('Invalid Gamma: ' + this.G + ' for ' + this.name + ', falling back to default');
	      this.G = 1;
	    }
	  }
	  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {
	    var A = src[srcOffset] * scale;
	    var AG = Math.pow(A, cs.G);
	    var L = cs.YW * AG;
	    var val = Math.max(295.8 * Math.pow(L, 0.333333333333333333) - 40.8, 0) | 0;
	    dest[destOffset] = val;
	    dest[destOffset + 1] = val;
	    dest[destOffset + 2] = val;
	  }
	  CalGrayCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function CalGrayCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      convertToRgb(this, src, srcOffset, dest, destOffset, 1);
	    },
	    getRgbBuffer: function CalGrayCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var scale = 1 / ((1 << bits) - 1);
	      for (var i = 0; i < count; ++i) {
	        convertToRgb(this, src, srcOffset, dest, destOffset, scale);
	        srcOffset += 1;
	        destOffset += 3 + alpha01;
	      }
	    },
	    getOutputLength: function CalGrayCS_getOutputLength(inputLength, alpha01) {
	      return inputLength * (3 + alpha01);
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function CalGrayCS_isDefaultDecode(decodeMap) {
	      return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
	    },
	    usesZeroToOneRange: true
	  };
	  return CalGrayCS;
	}();
	var CalRGBCS = function CalRGBCSClosure() {
	  var BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);
	  var BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);
	  var SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);
	  var FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);
	  var tempNormalizeMatrix = new Float32Array(3);
	  var tempConvertMatrix1 = new Float32Array(3);
	  var tempConvertMatrix2 = new Float32Array(3);
	  var DECODE_L_CONSTANT = Math.pow((8 + 16) / 116, 3) / 8.0;
	  function CalRGBCS(whitePoint, blackPoint, gamma, matrix) {
	    this.name = 'CalRGB';
	    this.numComps = 3;
	    this.defaultColor = new Float32Array(this.numComps);
	    if (!whitePoint) {
	      error('WhitePoint missing - required for color space CalRGB');
	    }
	    blackPoint = blackPoint || new Float32Array(3);
	    gamma = gamma || new Float32Array([1, 1, 1]);
	    matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
	    var XW = whitePoint[0];
	    var YW = whitePoint[1];
	    var ZW = whitePoint[2];
	    this.whitePoint = whitePoint;
	    var XB = blackPoint[0];
	    var YB = blackPoint[1];
	    var ZB = blackPoint[2];
	    this.blackPoint = blackPoint;
	    this.GR = gamma[0];
	    this.GG = gamma[1];
	    this.GB = gamma[2];
	    this.MXA = matrix[0];
	    this.MYA = matrix[1];
	    this.MZA = matrix[2];
	    this.MXB = matrix[3];
	    this.MYB = matrix[4];
	    this.MZB = matrix[5];
	    this.MXC = matrix[6];
	    this.MYC = matrix[7];
	    this.MZC = matrix[8];
	    if (XW < 0 || ZW < 0 || YW !== 1) {
	      error('Invalid WhitePoint components for ' + this.name + ', no fallback available');
	    }
	    if (XB < 0 || YB < 0 || ZB < 0) {
	      info('Invalid BlackPoint for ' + this.name + ' [' + XB + ', ' + YB + ', ' + ZB + '], falling back to default');
	      this.blackPoint = new Float32Array(3);
	    }
	    if (this.GR < 0 || this.GG < 0 || this.GB < 0) {
	      info('Invalid Gamma [' + this.GR + ', ' + this.GG + ', ' + this.GB + '] for ' + this.name + ', falling back to default');
	      this.GR = this.GG = this.GB = 1;
	    }
	    if (this.MXA < 0 || this.MYA < 0 || this.MZA < 0 || this.MXB < 0 || this.MYB < 0 || this.MZB < 0 || this.MXC < 0 || this.MYC < 0 || this.MZC < 0) {
	      info('Invalid Matrix for ' + this.name + ' [' + this.MXA + ', ' + this.MYA + ', ' + this.MZA + this.MXB + ', ' + this.MYB + ', ' + this.MZB + this.MXC + ', ' + this.MYC + ', ' + this.MZC + '], falling back to default');
	      this.MXA = this.MYB = this.MZC = 1;
	      this.MXB = this.MYA = this.MZA = this.MXC = this.MYC = this.MZB = 0;
	    }
	  }
	  function matrixProduct(a, b, result) {
	    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];
	    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];
	  }
	  function convertToFlat(sourceWhitePoint, LMS, result) {
	    result[0] = LMS[0] * 1 / sourceWhitePoint[0];
	    result[1] = LMS[1] * 1 / sourceWhitePoint[1];
	    result[2] = LMS[2] * 1 / sourceWhitePoint[2];
	  }
	  function convertToD65(sourceWhitePoint, LMS, result) {
	    var D65X = 0.95047;
	    var D65Y = 1;
	    var D65Z = 1.08883;
	    result[0] = LMS[0] * D65X / sourceWhitePoint[0];
	    result[1] = LMS[1] * D65Y / sourceWhitePoint[1];
	    result[2] = LMS[2] * D65Z / sourceWhitePoint[2];
	  }
	  function sRGBTransferFunction(color) {
	    if (color <= 0.0031308) {
	      return adjustToRange(0, 1, 12.92 * color);
	    }
	    return adjustToRange(0, 1, (1 + 0.055) * Math.pow(color, 1 / 2.4) - 0.055);
	  }
	  function adjustToRange(min, max, value) {
	    return Math.max(min, Math.min(max, value));
	  }
	  function decodeL(L) {
	    if (L < 0) {
	      return -decodeL(-L);
	    }
	    if (L > 8.0) {
	      return Math.pow((L + 16) / 116, 3);
	    }
	    return L * DECODE_L_CONSTANT;
	  }
	  function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {
	    if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {
	      result[0] = XYZ_Flat[0];
	      result[1] = XYZ_Flat[1];
	      result[2] = XYZ_Flat[2];
	      return;
	    }
	    var zeroDecodeL = decodeL(0);
	    var X_DST = zeroDecodeL;
	    var X_SRC = decodeL(sourceBlackPoint[0]);
	    var Y_DST = zeroDecodeL;
	    var Y_SRC = decodeL(sourceBlackPoint[1]);
	    var Z_DST = zeroDecodeL;
	    var Z_SRC = decodeL(sourceBlackPoint[2]);
	    var X_Scale = (1 - X_DST) / (1 - X_SRC);
	    var X_Offset = 1 - X_Scale;
	    var Y_Scale = (1 - Y_DST) / (1 - Y_SRC);
	    var Y_Offset = 1 - Y_Scale;
	    var Z_Scale = (1 - Z_DST) / (1 - Z_SRC);
	    var Z_Offset = 1 - Z_Scale;
	    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;
	    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;
	    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;
	  }
	  function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {
	    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {
	      result[0] = XYZ_In[0];
	      result[1] = XYZ_In[1];
	      result[2] = XYZ_In[2];
	      return;
	    }
	    var LMS = result;
	    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
	    var LMS_Flat = tempNormalizeMatrix;
	    convertToFlat(sourceWhitePoint, LMS, LMS_Flat);
	    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);
	  }
	  function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {
	    var LMS = result;
	    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
	    var LMS_D65 = tempNormalizeMatrix;
	    convertToD65(sourceWhitePoint, LMS, LMS_D65);
	    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);
	  }
	  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {
	    var A = adjustToRange(0, 1, src[srcOffset] * scale);
	    var B = adjustToRange(0, 1, src[srcOffset + 1] * scale);
	    var C = adjustToRange(0, 1, src[srcOffset + 2] * scale);
	    var AGR = Math.pow(A, cs.GR);
	    var BGG = Math.pow(B, cs.GG);
	    var CGB = Math.pow(C, cs.GB);
	    var X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;
	    var Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;
	    var Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;
	    var XYZ = tempConvertMatrix1;
	    XYZ[0] = X;
	    XYZ[1] = Y;
	    XYZ[2] = Z;
	    var XYZ_Flat = tempConvertMatrix2;
	    normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);
	    var XYZ_Black = tempConvertMatrix1;
	    compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);
	    var XYZ_D65 = tempConvertMatrix2;
	    normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);
	    var SRGB = tempConvertMatrix1;
	    matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);
	    var sR = sRGBTransferFunction(SRGB[0]);
	    var sG = sRGBTransferFunction(SRGB[1]);
	    var sB = sRGBTransferFunction(SRGB[2]);
	    dest[destOffset] = Math.round(sR * 255);
	    dest[destOffset + 1] = Math.round(sG * 255);
	    dest[destOffset + 2] = Math.round(sB * 255);
	  }
	  CalRGBCS.prototype = {
	    getRgb: function CalRGBCS_getRgb(src, srcOffset) {
	      var rgb = new Uint8Array(3);
	      this.getRgbItem(src, srcOffset, rgb, 0);
	      return rgb;
	    },
	    getRgbItem: function CalRGBCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      convertToRgb(this, src, srcOffset, dest, destOffset, 1);
	    },
	    getRgbBuffer: function CalRGBCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var scale = 1 / ((1 << bits) - 1);
	      for (var i = 0; i < count; ++i) {
	        convertToRgb(this, src, srcOffset, dest, destOffset, scale);
	        srcOffset += 3;
	        destOffset += 3 + alpha01;
	      }
	    },
	    getOutputLength: function CalRGBCS_getOutputLength(inputLength, alpha01) {
	      return inputLength * (3 + alpha01) / 3 | 0;
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function CalRGBCS_isDefaultDecode(decodeMap) {
	      return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
	    },
	    usesZeroToOneRange: true
	  };
	  return CalRGBCS;
	}();
	var LabCS = function LabCSClosure() {
	  function LabCS(whitePoint, blackPoint, range) {
	    this.name = 'Lab';
	    this.numComps = 3;
	    this.defaultColor = new Float32Array(this.numComps);
	    if (!whitePoint) {
	      error('WhitePoint missing - required for color space Lab');
	    }
	    blackPoint = blackPoint || [0, 0, 0];
	    range = range || [-100, 100, -100, 100];
	    this.XW = whitePoint[0];
	    this.YW = whitePoint[1];
	    this.ZW = whitePoint[2];
	    this.amin = range[0];
	    this.amax = range[1];
	    this.bmin = range[2];
	    this.bmax = range[3];
	    this.XB = blackPoint[0];
	    this.YB = blackPoint[1];
	    this.ZB = blackPoint[2];
	    if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
	      error('Invalid WhitePoint components, no fallback available');
	    }
	    if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {
	      info('Invalid BlackPoint, falling back to default');
	      this.XB = this.YB = this.ZB = 0;
	    }
	    if (this.amin > this.amax || this.bmin > this.bmax) {
	      info('Invalid Range, falling back to defaults');
	      this.amin = -100;
	      this.amax = 100;
	      this.bmin = -100;
	      this.bmax = 100;
	    }
	  }
	  function fn_g(x) {
	    var result;
	    if (x >= 6 / 29) {
	      result = x * x * x;
	    } else {
	      result = 108 / 841 * (x - 4 / 29);
	    }
	    return result;
	  }
	  function decode(value, high1, low2, high2) {
	    return low2 + value * (high2 - low2) / high1;
	  }
	  function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {
	    var Ls = src[srcOffset];
	    var as = src[srcOffset + 1];
	    var bs = src[srcOffset + 2];
	    if (maxVal !== false) {
	      Ls = decode(Ls, maxVal, 0, 100);
	      as = decode(as, maxVal, cs.amin, cs.amax);
	      bs = decode(bs, maxVal, cs.bmin, cs.bmax);
	    }
	    as = as > cs.amax ? cs.amax : as < cs.amin ? cs.amin : as;
	    bs = bs > cs.bmax ? cs.bmax : bs < cs.bmin ? cs.bmin : bs;
	    var M = (Ls + 16) / 116;
	    var L = M + as / 500;
	    var N = M - bs / 200;
	    var X = cs.XW * fn_g(L);
	    var Y = cs.YW * fn_g(M);
	    var Z = cs.ZW * fn_g(N);
	    var r, g, b;
	    if (cs.ZW < 1) {
	      r = X * 3.1339 + Y * -1.6170 + Z * -0.4906;
	      g = X * -0.9785 + Y * 1.9160 + Z * 0.0333;
	      b = X * 0.0720 + Y * -0.2290 + Z * 1.4057;
	    } else {
	      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
	      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
	      b = X * 0.0557 + Y * -0.2040 + Z * 1.0570;
	    }
	    dest[destOffset] = r <= 0 ? 0 : r >= 1 ? 255 : Math.sqrt(r) * 255 | 0;
	    dest[destOffset + 1] = g <= 0 ? 0 : g >= 1 ? 255 : Math.sqrt(g) * 255 | 0;
	    dest[destOffset + 2] = b <= 0 ? 0 : b >= 1 ? 255 : Math.sqrt(b) * 255 | 0;
	  }
	  LabCS.prototype = {
	    getRgb: ColorSpace.prototype.getRgb,
	    getRgbItem: function LabCS_getRgbItem(src, srcOffset, dest, destOffset) {
	      convertToRgb(this, src, srcOffset, false, dest, destOffset);
	    },
	    getRgbBuffer: function LabCS_getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
	      var maxVal = (1 << bits) - 1;
	      for (var i = 0; i < count; i++) {
	        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);
	        srcOffset += 3;
	        destOffset += 3 + alpha01;
	      }
	    },
	    getOutputLength: function LabCS_getOutputLength(inputLength, alpha01) {
	      return inputLength * (3 + alpha01) / 3 | 0;
	    },
	    isPassthrough: ColorSpace.prototype.isPassthrough,
	    fillRgb: ColorSpace.prototype.fillRgb,
	    isDefaultDecode: function LabCS_isDefaultDecode(decodeMap) {
	      return true;
	    },
	    usesZeroToOneRange: false
	  };
	  return LabCS;
	}();
	exports.ColorSpace = ColorSpace;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
	var MacExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', 'centoldstyle', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', '', 'threequartersemdash', '', 'questionsmall', '', '', '', '', 'Ethsmall', '', '', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', '', '', '', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hypheninferior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', 'asuperior', 'centsuperior', '', '', '', '', 'Aacutesmall', 'Agravesmall', 'Acircumflexsmall', 'Adieresissmall', 'Atildesmall', 'Aringsmall', 'Ccedillasmall', 'Eacutesmall', 'Egravesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Iacutesmall', 'Igravesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ntildesmall', 'Oacutesmall', 'Ogravesmall', 'Ocircumflexsmall', 'Odieresissmall', 'Otildesmall', 'Uacutesmall', 'Ugravesmall', 'Ucircumflexsmall', 'Udieresissmall', '', 'eightsuperior', 'fourinferior', 'threeinferior', 'sixinferior', 'eightinferior', 'seveninferior', 'Scaronsmall', '', 'centinferior', 'twoinferior', '', 'Dieresissmall', '', 'Caronsmall', 'osuperior', 'fiveinferior', '', 'commainferior', 'periodinferior', 'Yacutesmall', '', 'dollarinferior', '', 'Thornsmall', '', 'nineinferior', 'zeroinferior', 'Zcaronsmall', 'AEsmall', 'Oslashsmall', 'questiondownsmall', 'oneinferior', 'Lslashsmall', '', '', '', '', '', '', 'Cedillasmall', '', '', '', '', '', 'OEsmall', 'figuredash', 'hyphensuperior', '', '', '', '', 'exclamdownsmall', '', 'Ydieresissmall', '', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'ninesuperior', 'zerosuperior', '', 'esuperior', 'rsuperior', 'tsuperior', '', '', 'isuperior', 'ssuperior', 'dsuperior', '', '', '', '', '', 'lsuperior', 'Ogoneksmall', 'Brevesmall', 'Macronsmall', 'bsuperior', 'nsuperior', 'msuperior', 'commasuperior', 'periodsuperior', 'Dotaccentsmall', 'Ringsmall'];
	var MacRomanEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'space', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron'];
	var StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];
	var WinAnsiEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'bullet', 'Euro', 'bullet', 'quotesinglbase', 'florin', 'quotedblbase', 'ellipsis', 'dagger', 'daggerdbl', 'circumflex', 'perthousand', 'Scaron', 'guilsinglleft', 'OE', 'bullet', 'Zcaron', 'bullet', 'bullet', 'quoteleft', 'quoteright', 'quotedblleft', 'quotedblright', 'bullet', 'endash', 'emdash', 'tilde', 'trademark', 'scaron', 'guilsinglright', 'oe', 'bullet', 'zcaron', 'Ydieresis', 'space', 'exclamdown', 'cent', 'sterling', 'currency', 'yen', 'brokenbar', 'section', 'dieresis', 'copyright', 'ordfeminine', 'guillemotleft', 'logicalnot', 'hyphen', 'registered', 'macron', 'degree', 'plusminus', 'twosuperior', 'threesuperior', 'acute', 'mu', 'paragraph', 'periodcentered', 'cedilla', 'onesuperior', 'ordmasculine', 'guillemotright', 'onequarter', 'onehalf', 'threequarters', 'questiondown', 'Agrave', 'Aacute', 'Acircumflex', 'Atilde', 'Adieresis', 'Aring', 'AE', 'Ccedilla', 'Egrave', 'Eacute', 'Ecircumflex', 'Edieresis', 'Igrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Eth', 'Ntilde', 'Ograve', 'Oacute', 'Ocircumflex', 'Otilde', 'Odieresis', 'multiply', 'Oslash', 'Ugrave', 'Uacute', 'Ucircumflex', 'Udieresis', 'Yacute', 'Thorn', 'germandbls', 'agrave', 'aacute', 'acircumflex', 'atilde', 'adieresis', 'aring', 'ae', 'ccedilla', 'egrave', 'eacute', 'ecircumflex', 'edieresis', 'igrave', 'iacute', 'icircumflex', 'idieresis', 'eth', 'ntilde', 'ograve', 'oacute', 'ocircumflex', 'otilde', 'odieresis', 'divide', 'oslash', 'ugrave', 'uacute', 'ucircumflex', 'udieresis', 'yacute', 'thorn', 'ydieresis'];
	var SymbolSetEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'universal', 'numbersign', 'existential', 'percent', 'ampersand', 'suchthat', 'parenleft', 'parenright', 'asteriskmath', 'plus', 'comma', 'minus', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'congruent', 'Alpha', 'Beta', 'Chi', 'Delta', 'Epsilon', 'Phi', 'Gamma', 'Eta', 'Iota', 'theta1', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Omicron', 'Pi', 'Theta', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'sigma1', 'Omega', 'Xi', 'Psi', 'Zeta', 'bracketleft', 'therefore', 'bracketright', 'perpendicular', 'underscore', 'radicalex', 'alpha', 'beta', 'chi', 'delta', 'epsilon', 'phi', 'gamma', 'eta', 'iota', 'phi1', 'kappa', 'lambda', 'mu', 'nu', 'omicron', 'pi', 'theta', 'rho', 'sigma', 'tau', 'upsilon', 'omega1', 'omega', 'xi', 'psi', 'zeta', 'braceleft', 'bar', 'braceright', 'similar', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Euro', 'Upsilon1', 'minute', 'lessequal', 'fraction', 'infinity', 'florin', 'club', 'diamond', 'heart', 'spade', 'arrowboth', 'arrowleft', 'arrowup', 'arrowright', 'arrowdown', 'degree', 'plusminus', 'second', 'greaterequal', 'multiply', 'proportional', 'partialdiff', 'bullet', 'divide', 'notequal', 'equivalence', 'approxequal', 'ellipsis', 'arrowvertex', 'arrowhorizex', 'carriagereturn', 'aleph', 'Ifraktur', 'Rfraktur', 'weierstrass', 'circlemultiply', 'circleplus', 'emptyset', 'intersection', 'union', 'propersuperset', 'reflexsuperset', 'notsubset', 'propersubset', 'reflexsubset', 'element', 'notelement', 'angle', 'gradient', 'registerserif', 'copyrightserif', 'trademarkserif', 'product', 'radical', 'dotmath', 'logicalnot', 'logicaland', 'logicalor', 'arrowdblboth', 'arrowdblleft', 'arrowdblup', 'arrowdblright', 'arrowdbldown', 'lozenge', 'angleleft', 'registersans', 'copyrightsans', 'trademarksans', 'summation', 'parenlefttp', 'parenleftex', 'parenleftbt', 'bracketlefttp', 'bracketleftex', 'bracketleftbt', 'bracelefttp', 'braceleftmid', 'braceleftbt', 'braceex', '', 'angleright', 'integral', 'integraltp', 'integralex', 'integralbt', 'parenrighttp', 'parenrightex', 'parenrightbt', 'bracketrighttp', 'bracketrightex', 'bracketrightbt', 'bracerighttp', 'bracerightmid', 'bracerightbt'];
	var ZapfDingbatsEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'a1', 'a2', 'a202', 'a3', 'a4', 'a5', 'a119', 'a118', 'a117', 'a11', 'a12', 'a13', 'a14', 'a15', 'a16', 'a105', 'a17', 'a18', 'a19', 'a20', 'a21', 'a22', 'a23', 'a24', 'a25', 'a26', 'a27', 'a28', 'a6', 'a7', 'a8', 'a9', 'a10', 'a29', 'a30', 'a31', 'a32', 'a33', 'a34', 'a35', 'a36', 'a37', 'a38', 'a39', 'a40', 'a41', 'a42', 'a43', 'a44', 'a45', 'a46', 'a47', 'a48', 'a49', 'a50', 'a51', 'a52', 'a53', 'a54', 'a55', 'a56', 'a57', 'a58', 'a59', 'a60', 'a61', 'a62', 'a63', 'a64', 'a65', 'a66', 'a67', 'a68', 'a69', 'a70', 'a71', 'a72', 'a73', 'a74', 'a203', 'a75', 'a204', 'a76', 'a77', 'a78', 'a79', 'a81', 'a82', 'a83', 'a84', 'a97', 'a98', 'a99', 'a100', '', 'a89', 'a90', 'a93', 'a94', 'a91', 'a92', 'a205', 'a85', 'a206', 'a86', 'a87', 'a88', 'a95', 'a96', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'a101', 'a102', 'a103', 'a104', 'a106', 'a107', 'a108', 'a112', 'a111', 'a110', 'a109', 'a120', 'a121', 'a122', 'a123', 'a124', 'a125', 'a126', 'a127', 'a128', 'a129', 'a130', 'a131', 'a132', 'a133', 'a134', 'a135', 'a136', 'a137', 'a138', 'a139', 'a140', 'a141', 'a142', 'a143', 'a144', 'a145', 'a146', 'a147', 'a148', 'a149', 'a150', 'a151', 'a152', 'a153', 'a154', 'a155', 'a156', 'a157', 'a158', 'a159', 'a160', 'a161', 'a163', 'a164', 'a196', 'a165', 'a192', 'a166', 'a167', 'a168', 'a169', 'a170', 'a171', 'a172', 'a173', 'a162', 'a174', 'a175', 'a176', 'a177', 'a178', 'a179', 'a193', 'a180', 'a199', 'a181', 'a200', 'a182', '', 'a201', 'a183', 'a184', 'a197', 'a185', 'a194', 'a198', 'a186', 'a195', 'a187', 'a188', 'a189', 'a190', 'a191'];
	function getEncoding(encodingName) {
	  switch (encodingName) {
	    case 'WinAnsiEncoding':
	      return WinAnsiEncoding;
	    case 'StandardEncoding':
	      return StandardEncoding;
	    case 'MacRomanEncoding':
	      return MacRomanEncoding;
	    case 'SymbolSetEncoding':
	      return SymbolSetEncoding;
	    case 'ZapfDingbatsEncoding':
	      return ZapfDingbatsEncoding;
	    case 'ExpertEncoding':
	      return ExpertEncoding;
	    case 'MacExpertEncoding':
	      return MacExpertEncoding;
	    default:
	      return null;
	  }
	}
	exports.WinAnsiEncoding = WinAnsiEncoding;
	exports.StandardEncoding = StandardEncoding;
	exports.MacRomanEncoding = MacRomanEncoding;
	exports.SymbolSetEncoding = SymbolSetEncoding;
	exports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;
	exports.ExpertEncoding = ExpertEncoding;
	exports.getEncoding = getEncoding;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var MissingDataException = sharedUtil.MissingDataException;
	var StreamType = sharedUtil.StreamType;
	var assert = sharedUtil.assert;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isInt = sharedUtil.isInt;
	var isNum = sharedUtil.isNum;
	var isString = sharedUtil.isString;
	var warn = sharedUtil.warn;
	var EOF = corePrimitives.EOF;
	var Cmd = corePrimitives.Cmd;
	var Dict = corePrimitives.Dict;
	var Name = corePrimitives.Name;
	var Ref = corePrimitives.Ref;
	var isEOF = corePrimitives.isEOF;
	var isCmd = corePrimitives.isCmd;
	var isDict = corePrimitives.isDict;
	var isName = corePrimitives.isName;
	var Ascii85Stream = coreStream.Ascii85Stream;
	var AsciiHexStream = coreStream.AsciiHexStream;
	var CCITTFaxStream = coreStream.CCITTFaxStream;
	var FlateStream = coreStream.FlateStream;
	var Jbig2Stream = coreStream.Jbig2Stream;
	var JpegStream = coreStream.JpegStream;
	var JpxStream = coreStream.JpxStream;
	var LZWStream = coreStream.LZWStream;
	var NullStream = coreStream.NullStream;
	var PredictorStream = coreStream.PredictorStream;
	var RunLengthStream = coreStream.RunLengthStream;
	var MAX_LENGTH_TO_CACHE = 1000;
	var Parser = function ParserClosure() {
	  function Parser(lexer, allowStreams, xref, recoveryMode) {
	    this.lexer = lexer;
	    this.allowStreams = allowStreams;
	    this.xref = xref;
	    this.recoveryMode = recoveryMode || false;
	    this.imageCache = Object.create(null);
	    this.refill();
	  }
	  Parser.prototype = {
	    refill: function Parser_refill() {
	      this.buf1 = this.lexer.getObj();
	      this.buf2 = this.lexer.getObj();
	    },
	    shift: function Parser_shift() {
	      if (isCmd(this.buf2, 'ID')) {
	        this.buf1 = this.buf2;
	        this.buf2 = null;
	      } else {
	        this.buf1 = this.buf2;
	        this.buf2 = this.lexer.getObj();
	      }
	    },
	    tryShift: function Parser_tryShift() {
	      try {
	        this.shift();
	        return true;
	      } catch (e) {
	        if (e instanceof MissingDataException) {
	          throw e;
	        }
	        return false;
	      }
	    },
	    getObj: function Parser_getObj(cipherTransform) {
	      var buf1 = this.buf1;
	      this.shift();
	      if (buf1 instanceof Cmd) {
	        switch (buf1.cmd) {
	          case 'BI':
	            return this.makeInlineImage(cipherTransform);
	          case '[':
	            var array = [];
	            while (!isCmd(this.buf1, ']') && !isEOF(this.buf1)) {
	              array.push(this.getObj(cipherTransform));
	            }
	            if (isEOF(this.buf1)) {
	              if (!this.recoveryMode) {
	                error('End of file inside array');
	              }
	              return array;
	            }
	            this.shift();
	            return array;
	          case '<<':
	            var dict = new Dict(this.xref);
	            while (!isCmd(this.buf1, '>>') && !isEOF(this.buf1)) {
	              if (!isName(this.buf1)) {
	                info('Malformed dictionary: key must be a name object');
	                this.shift();
	                continue;
	              }
	              var key = this.buf1.name;
	              this.shift();
	              if (isEOF(this.buf1)) {
	                break;
	              }
	              dict.set(key, this.getObj(cipherTransform));
	            }
	            if (isEOF(this.buf1)) {
	              if (!this.recoveryMode) {
	                error('End of file inside dictionary');
	              }
	              return dict;
	            }
	            if (isCmd(this.buf2, 'stream')) {
	              return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;
	            }
	            this.shift();
	            return dict;
	          default:
	            return buf1;
	        }
	      }
	      if (isInt(buf1)) {
	        var num = buf1;
	        if (isInt(this.buf1) && isCmd(this.buf2, 'R')) {
	          var ref = new Ref(num, this.buf1);
	          this.shift();
	          this.shift();
	          return ref;
	        }
	        return num;
	      }
	      if (isString(buf1)) {
	        var str = buf1;
	        if (cipherTransform) {
	          str = cipherTransform.decryptString(str);
	        }
	        return str;
	      }
	      return buf1;
	    },
	    findDefaultInlineStreamEnd: function Parser_findDefaultInlineStreamEnd(stream) {
	      var E = 0x45,
	          I = 0x49,
	          SPACE = 0x20,
	          LF = 0xA,
	          CR = 0xD;
	      var startPos = stream.pos,
	          state = 0,
	          ch,
	          i,
	          n,
	          followingBytes;
	      while ((ch = stream.getByte()) !== -1) {
	        if (state === 0) {
	          state = ch === E ? 1 : 0;
	        } else if (state === 1) {
	          state = ch === I ? 2 : 0;
	        } else {
	          assert(state === 2);
	          if (ch === SPACE || ch === LF || ch === CR) {
	            n = 5;
	            followingBytes = stream.peekBytes(n);
	            for (i = 0; i < n; i++) {
	              ch = followingBytes[i];
	              if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7F)) {
	                state = 0;
	                break;
	              }
	            }
	            if (state === 2) {
	              break;
	            }
	          } else {
	            state = 0;
	          }
	        }
	      }
	      return stream.pos - 4 - startPos;
	    },
	    findDCTDecodeInlineStreamEnd: function Parser_findDCTDecodeInlineStreamEnd(stream) {
	      var startPos = stream.pos,
	          foundEOI = false,
	          b,
	          markerLength,
	          length;
	      while ((b = stream.getByte()) !== -1) {
	        if (b !== 0xFF) {
	          continue;
	        }
	        switch (stream.getByte()) {
	          case 0x00:
	            break;
	          case 0xFF:
	            stream.skip(-1);
	            break;
	          case 0xD9:
	            foundEOI = true;
	            break;
	          case 0xC0:
	          case 0xC1:
	          case 0xC2:
	          case 0xC3:
	          case 0xC5:
	          case 0xC6:
	          case 0xC7:
	          case 0xC9:
	          case 0xCA:
	          case 0xCB:
	          case 0xCD:
	          case 0xCE:
	          case 0xCF:
	          case 0xC4:
	          case 0xCC:
	          case 0xDA:
	          case 0xDB:
	          case 0xDC:
	          case 0xDD:
	          case 0xDE:
	          case 0xDF:
	          case 0xE0:
	          case 0xE1:
	          case 0xE2:
	          case 0xE3:
	          case 0xE4:
	          case 0xE5:
	          case 0xE6:
	          case 0xE7:
	          case 0xE8:
	          case 0xE9:
	          case 0xEA:
	          case 0xEB:
	          case 0xEC:
	          case 0xED:
	          case 0xEE:
	          case 0xEF:
	          case 0xFE:
	            markerLength = stream.getUint16();
	            if (markerLength > 2) {
	              stream.skip(markerLength - 2);
	            } else {
	              stream.skip(-2);
	            }
	            break;
	        }
	        if (foundEOI) {
	          break;
	        }
	      }
	      length = stream.pos - startPos;
	      if (b === -1) {
	        warn('Inline DCTDecode image stream: ' + 'EOI marker not found, searching for /EI/ instead.');
	        stream.skip(-length);
	        return this.findDefaultInlineStreamEnd(stream);
	      }
	      this.inlineStreamSkipEI(stream);
	      return length;
	    },
	    findASCII85DecodeInlineStreamEnd: function Parser_findASCII85DecodeInlineStreamEnd(stream) {
	      var TILDE = 0x7E,
	          GT = 0x3E;
	      var startPos = stream.pos,
	          ch,
	          length;
	      while ((ch = stream.getByte()) !== -1) {
	        if (ch === TILDE && stream.peekByte() === GT) {
	          stream.skip();
	          break;
	        }
	      }
	      length = stream.pos - startPos;
	      if (ch === -1) {
	        warn('Inline ASCII85Decode image stream: ' + 'EOD marker not found, searching for /EI/ instead.');
	        stream.skip(-length);
	        return this.findDefaultInlineStreamEnd(stream);
	      }
	      this.inlineStreamSkipEI(stream);
	      return length;
	    },
	    findASCIIHexDecodeInlineStreamEnd: function Parser_findASCIIHexDecodeInlineStreamEnd(stream) {
	      var GT = 0x3E;
	      var startPos = stream.pos,
	          ch,
	          length;
	      while ((ch = stream.getByte()) !== -1) {
	        if (ch === GT) {
	          break;
	        }
	      }
	      length = stream.pos - startPos;
	      if (ch === -1) {
	        warn('Inline ASCIIHexDecode image stream: ' + 'EOD marker not found, searching for /EI/ instead.');
	        stream.skip(-length);
	        return this.findDefaultInlineStreamEnd(stream);
	      }
	      this.inlineStreamSkipEI(stream);
	      return length;
	    },
	    inlineStreamSkipEI: function Parser_inlineStreamSkipEI(stream) {
	      var E = 0x45,
	          I = 0x49;
	      var state = 0,
	          ch;
	      while ((ch = stream.getByte()) !== -1) {
	        if (state === 0) {
	          state = ch === E ? 1 : 0;
	        } else if (state === 1) {
	          state = ch === I ? 2 : 0;
	        } else if (state === 2) {
	          break;
	        }
	      }
	    },
	    makeInlineImage: function Parser_makeInlineImage(cipherTransform) {
	      var lexer = this.lexer;
	      var stream = lexer.stream;
	      var dict = new Dict(this.xref);
	      while (!isCmd(this.buf1, 'ID') && !isEOF(this.buf1)) {
	        if (!isName(this.buf1)) {
	          error('Dictionary key must be a name object');
	        }
	        var key = this.buf1.name;
	        this.shift();
	        if (isEOF(this.buf1)) {
	          break;
	        }
	        dict.set(key, this.getObj(cipherTransform));
	      }
	      var filter = dict.get('Filter', 'F'),
	          filterName;
	      if (isName(filter)) {
	        filterName = filter.name;
	      } else if (isArray(filter)) {
	        var filterZero = this.xref.fetchIfRef(filter[0]);
	        if (isName(filterZero)) {
	          filterName = filterZero.name;
	        }
	      }
	      var startPos = stream.pos,
	          length,
	          i,
	          ii;
	      if (filterName === 'DCTDecode' || filterName === 'DCT') {
	        length = this.findDCTDecodeInlineStreamEnd(stream);
	      } else if (filterName === 'ASCII85Decide' || filterName === 'A85') {
	        length = this.findASCII85DecodeInlineStreamEnd(stream);
	      } else if (filterName === 'ASCIIHexDecode' || filterName === 'AHx') {
	        length = this.findASCIIHexDecodeInlineStreamEnd(stream);
	      } else {
	        length = this.findDefaultInlineStreamEnd(stream);
	      }
	      var imageStream = stream.makeSubStream(startPos, length, dict);
	      var adler32;
	      if (length < MAX_LENGTH_TO_CACHE) {
	        var imageBytes = imageStream.getBytes();
	        imageStream.reset();
	        var a = 1;
	        var b = 0;
	        for (i = 0, ii = imageBytes.length; i < ii; ++i) {
	          a += imageBytes[i] & 0xff;
	          b += a;
	        }
	        adler32 = b % 65521 << 16 | a % 65521;
	        if (this.imageCache.adler32 === adler32) {
	          this.buf2 = Cmd.get('EI');
	          this.shift();
	          this.imageCache[adler32].reset();
	          return this.imageCache[adler32];
	        }
	      }
	      if (cipherTransform) {
	        imageStream = cipherTransform.createStream(imageStream, length);
	      }
	      imageStream = this.filter(imageStream, dict, length);
	      imageStream.dict = dict;
	      if (adler32 !== undefined) {
	        imageStream.cacheKey = 'inline_' + length + '_' + adler32;
	        this.imageCache[adler32] = imageStream;
	      }
	      this.buf2 = Cmd.get('EI');
	      this.shift();
	      return imageStream;
	    },
	    makeStream: function Parser_makeStream(dict, cipherTransform) {
	      var lexer = this.lexer;
	      var stream = lexer.stream;
	      lexer.skipToNextLine();
	      var pos = stream.pos - 1;
	      var length = dict.get('Length');
	      if (!isInt(length)) {
	        info('Bad ' + length + ' attribute in stream');
	        length = 0;
	      }
	      stream.pos = pos + length;
	      lexer.nextChar();
	      if (this.tryShift() && isCmd(this.buf2, 'endstream')) {
	        this.shift();
	      } else {
	        stream.pos = pos;
	        var SCAN_BLOCK_SIZE = 2048;
	        var ENDSTREAM_SIGNATURE_LENGTH = 9;
	        var ENDSTREAM_SIGNATURE = [0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D];
	        var skipped = 0,
	            found = false,
	            i,
	            j;
	        while (stream.pos < stream.end) {
	          var scanBytes = stream.peekBytes(SCAN_BLOCK_SIZE);
	          var scanLength = scanBytes.length - ENDSTREAM_SIGNATURE_LENGTH;
	          if (scanLength <= 0) {
	            break;
	          }
	          found = false;
	          i = 0;
	          while (i < scanLength) {
	            j = 0;
	            while (j < ENDSTREAM_SIGNATURE_LENGTH && scanBytes[i + j] === ENDSTREAM_SIGNATURE[j]) {
	              j++;
	            }
	            if (j >= ENDSTREAM_SIGNATURE_LENGTH) {
	              found = true;
	              break;
	            }
	            i++;
	          }
	          if (found) {
	            skipped += i;
	            stream.pos += i;
	            break;
	          }
	          skipped += scanLength;
	          stream.pos += scanLength;
	        }
	        if (!found) {
	          error('Missing endstream');
	        }
	        length = skipped;
	        lexer.nextChar();
	        this.shift();
	        this.shift();
	      }
	      this.shift();
	      stream = stream.makeSubStream(pos, length, dict);
	      if (cipherTransform) {
	        stream = cipherTransform.createStream(stream, length);
	      }
	      stream = this.filter(stream, dict, length);
	      stream.dict = dict;
	      return stream;
	    },
	    filter: function Parser_filter(stream, dict, length) {
	      var filter = dict.get('Filter', 'F');
	      var params = dict.get('DecodeParms', 'DP');
	      if (isName(filter)) {
	        if (isArray(params)) {
	          params = this.xref.fetchIfRef(params[0]);
	        }
	        return this.makeFilter(stream, filter.name, length, params);
	      }
	      var maybeLength = length;
	      if (isArray(filter)) {
	        var filterArray = filter;
	        var paramsArray = params;
	        for (var i = 0, ii = filterArray.length; i < ii; ++i) {
	          filter = this.xref.fetchIfRef(filterArray[i]);
	          if (!isName(filter)) {
	            error('Bad filter name: ' + filter);
	          }
	          params = null;
	          if (isArray(paramsArray) && i in paramsArray) {
	            params = this.xref.fetchIfRef(paramsArray[i]);
	          }
	          stream = this.makeFilter(stream, filter.name, maybeLength, params);
	          maybeLength = null;
	        }
	      }
	      return stream;
	    },
	    makeFilter: function Parser_makeFilter(stream, name, maybeLength, params) {
	      if (maybeLength === 0) {
	        warn('Empty "' + name + '" stream.');
	        return new NullStream(stream);
	      }
	      try {
	        var xrefStreamStats = this.xref.stats.streamTypes;
	        if (name === 'FlateDecode' || name === 'Fl') {
	          xrefStreamStats[StreamType.FLATE] = true;
	          if (params) {
	            return new PredictorStream(new FlateStream(stream, maybeLength), maybeLength, params);
	          }
	          return new FlateStream(stream, maybeLength);
	        }
	        if (name === 'LZWDecode' || name === 'LZW') {
	          xrefStreamStats[StreamType.LZW] = true;
	          var earlyChange = 1;
	          if (params) {
	            if (params.has('EarlyChange')) {
	              earlyChange = params.get('EarlyChange');
	            }
	            return new PredictorStream(new LZWStream(stream, maybeLength, earlyChange), maybeLength, params);
	          }
	          return new LZWStream(stream, maybeLength, earlyChange);
	        }
	        if (name === 'DCTDecode' || name === 'DCT') {
	          xrefStreamStats[StreamType.DCT] = true;
	          return new JpegStream(stream, maybeLength, stream.dict, params);
	        }
	        if (name === 'JPXDecode' || name === 'JPX') {
	          xrefStreamStats[StreamType.JPX] = true;
	          return new JpxStream(stream, maybeLength, stream.dict, params);
	        }
	        if (name === 'ASCII85Decode' || name === 'A85') {
	          xrefStreamStats[StreamType.A85] = true;
	          return new Ascii85Stream(stream, maybeLength);
	        }
	        if (name === 'ASCIIHexDecode' || name === 'AHx') {
	          xrefStreamStats[StreamType.AHX] = true;
	          return new AsciiHexStream(stream, maybeLength);
	        }
	        if (name === 'CCITTFaxDecode' || name === 'CCF') {
	          xrefStreamStats[StreamType.CCF] = true;
	          return new CCITTFaxStream(stream, maybeLength, params);
	        }
	        if (name === 'RunLengthDecode' || name === 'RL') {
	          xrefStreamStats[StreamType.RL] = true;
	          return new RunLengthStream(stream, maybeLength);
	        }
	        if (name === 'JBIG2Decode') {
	          xrefStreamStats[StreamType.JBIG] = true;
	          return new Jbig2Stream(stream, maybeLength, stream.dict, params);
	        }
	        warn('filter "' + name + '" not supported yet');
	        return stream;
	      } catch (ex) {
	        if (ex instanceof MissingDataException) {
	          throw ex;
	        }
	        warn('Invalid stream: \"' + ex + '\"');
	        return new NullStream(stream);
	      }
	    }
	  };
	  return Parser;
	}();
	var Lexer = function LexerClosure() {
	  function Lexer(stream, knownCommands) {
	    this.stream = stream;
	    this.nextChar();
	    this.strBuf = [];
	    this.knownCommands = knownCommands;
	  }
	  var specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	  function toHexDigit(ch) {
	    if (ch >= 0x30 && ch <= 0x39) {
	      return ch & 0x0F;
	    }
	    if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {
	      return (ch & 0x0F) + 9;
	    }
	    return -1;
	  }
	  Lexer.prototype = {
	    nextChar: function Lexer_nextChar() {
	      return this.currentChar = this.stream.getByte();
	    },
	    peekChar: function Lexer_peekChar() {
	      return this.stream.peekByte();
	    },
	    getNumber: function Lexer_getNumber() {
	      var ch = this.currentChar;
	      var eNotation = false;
	      var divideBy = 0;
	      var sign = 1;
	      if (ch === 0x2D) {
	        sign = -1;
	        ch = this.nextChar();
	        if (ch === 0x2D) {
	          ch = this.nextChar();
	        }
	      } else if (ch === 0x2B) {
	        ch = this.nextChar();
	      }
	      if (ch === 0x2E) {
	        divideBy = 10;
	        ch = this.nextChar();
	      }
	      if (ch === 0x0A || ch === 0x0D) {
	        do {
	          ch = this.nextChar();
	        } while (ch === 0x0A || ch === 0x0D);
	      }
	      if (ch < 0x30 || ch > 0x39) {
	        error('Invalid number: ' + String.fromCharCode(ch) + ' (charCode ' + ch + ')');
	      }
	      var baseValue = ch - 0x30;
	      var powerValue = 0;
	      var powerValueSign = 1;
	      while ((ch = this.nextChar()) >= 0) {
	        if (0x30 <= ch && ch <= 0x39) {
	          var currentDigit = ch - 0x30;
	          if (eNotation) {
	            powerValue = powerValue * 10 + currentDigit;
	          } else {
	            if (divideBy !== 0) {
	              divideBy *= 10;
	            }
	            baseValue = baseValue * 10 + currentDigit;
	          }
	        } else if (ch === 0x2E) {
	          if (divideBy === 0) {
	            divideBy = 1;
	          } else {
	            break;
	          }
	        } else if (ch === 0x2D) {
	          warn('Badly formatted number');
	        } else if (ch === 0x45 || ch === 0x65) {
	          ch = this.peekChar();
	          if (ch === 0x2B || ch === 0x2D) {
	            powerValueSign = ch === 0x2D ? -1 : 1;
	            this.nextChar();
	          } else if (ch < 0x30 || ch > 0x39) {
	            break;
	          }
	          eNotation = true;
	        } else {
	          break;
	        }
	      }
	      if (divideBy !== 0) {
	        baseValue /= divideBy;
	      }
	      if (eNotation) {
	        baseValue *= Math.pow(10, powerValueSign * powerValue);
	      }
	      return sign * baseValue;
	    },
	    getString: function Lexer_getString() {
	      var numParen = 1;
	      var done = false;
	      var strBuf = this.strBuf;
	      strBuf.length = 0;
	      var ch = this.nextChar();
	      while (true) {
	        var charBuffered = false;
	        switch (ch | 0) {
	          case -1:
	            warn('Unterminated string');
	            done = true;
	            break;
	          case 0x28:
	            ++numParen;
	            strBuf.push('(');
	            break;
	          case 0x29:
	            if (--numParen === 0) {
	              this.nextChar();
	              done = true;
	            } else {
	              strBuf.push(')');
	            }
	            break;
	          case 0x5C:
	            ch = this.nextChar();
	            switch (ch) {
	              case -1:
	                warn('Unterminated string');
	                done = true;
	                break;
	              case 0x6E:
	                strBuf.push('\n');
	                break;
	              case 0x72:
	                strBuf.push('\r');
	                break;
	              case 0x74:
	                strBuf.push('\t');
	                break;
	              case 0x62:
	                strBuf.push('\b');
	                break;
	              case 0x66:
	                strBuf.push('\f');
	                break;
	              case 0x5C:
	              case 0x28:
	              case 0x29:
	                strBuf.push(String.fromCharCode(ch));
	                break;
	              case 0x30:
	              case 0x31:
	              case 0x32:
	              case 0x33:
	              case 0x34:
	              case 0x35:
	              case 0x36:
	              case 0x37:
	                var x = ch & 0x0F;
	                ch = this.nextChar();
	                charBuffered = true;
	                if (ch >= 0x30 && ch <= 0x37) {
	                  x = (x << 3) + (ch & 0x0F);
	                  ch = this.nextChar();
	                  if (ch >= 0x30 && ch <= 0x37) {
	                    charBuffered = false;
	                    x = (x << 3) + (ch & 0x0F);
	                  }
	                }
	                strBuf.push(String.fromCharCode(x));
	                break;
	              case 0x0D:
	                if (this.peekChar() === 0x0A) {
	                  this.nextChar();
	                }
	                break;
	              case 0x0A:
	                break;
	              default:
	                strBuf.push(String.fromCharCode(ch));
	                break;
	            }
	            break;
	          default:
	            strBuf.push(String.fromCharCode(ch));
	            break;
	        }
	        if (done) {
	          break;
	        }
	        if (!charBuffered) {
	          ch = this.nextChar();
	        }
	      }
	      return strBuf.join('');
	    },
	    getName: function Lexer_getName() {
	      var ch, previousCh;
	      var strBuf = this.strBuf;
	      strBuf.length = 0;
	      while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
	        if (ch === 0x23) {
	          ch = this.nextChar();
	          if (specialChars[ch]) {
	            warn('Lexer_getName: ' + 'NUMBER SIGN (#) should be followed by a hexadecimal number.');
	            strBuf.push('#');
	            break;
	          }
	          var x = toHexDigit(ch);
	          if (x !== -1) {
	            previousCh = ch;
	            ch = this.nextChar();
	            var x2 = toHexDigit(ch);
	            if (x2 === -1) {
	              warn('Lexer_getName: Illegal digit (' + String.fromCharCode(ch) + ') in hexadecimal number.');
	              strBuf.push('#', String.fromCharCode(previousCh));
	              if (specialChars[ch]) {
	                break;
	              }
	              strBuf.push(String.fromCharCode(ch));
	              continue;
	            }
	            strBuf.push(String.fromCharCode(x << 4 | x2));
	          } else {
	            strBuf.push('#', String.fromCharCode(ch));
	          }
	        } else {
	          strBuf.push(String.fromCharCode(ch));
	        }
	      }
	      if (strBuf.length > 127) {
	        warn('name token is longer than allowed by the spec: ' + strBuf.length);
	      }
	      return Name.get(strBuf.join(''));
	    },
	    getHexString: function Lexer_getHexString() {
	      var strBuf = this.strBuf;
	      strBuf.length = 0;
	      var ch = this.currentChar;
	      var isFirstHex = true;
	      var firstDigit;
	      var secondDigit;
	      while (true) {
	        if (ch < 0) {
	          warn('Unterminated hex string');
	          break;
	        } else if (ch === 0x3E) {
	          this.nextChar();
	          break;
	        } else if (specialChars[ch] === 1) {
	          ch = this.nextChar();
	          continue;
	        } else {
	          if (isFirstHex) {
	            firstDigit = toHexDigit(ch);
	            if (firstDigit === -1) {
	              warn('Ignoring invalid character "' + ch + '" in hex string');
	              ch = this.nextChar();
	              continue;
	            }
	          } else {
	            secondDigit = toHexDigit(ch);
	            if (secondDigit === -1) {
	              warn('Ignoring invalid character "' + ch + '" in hex string');
	              ch = this.nextChar();
	              continue;
	            }
	            strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));
	          }
	          isFirstHex = !isFirstHex;
	          ch = this.nextChar();
	        }
	      }
	      return strBuf.join('');
	    },
	    getObj: function Lexer_getObj() {
	      var comment = false;
	      var ch = this.currentChar;
	      while (true) {
	        if (ch < 0) {
	          return EOF;
	        }
	        if (comment) {
	          if (ch === 0x0A || ch === 0x0D) {
	            comment = false;
	          }
	        } else if (ch === 0x25) {
	          comment = true;
	        } else if (specialChars[ch] !== 1) {
	          break;
	        }
	        ch = this.nextChar();
	      }
	      switch (ch | 0) {
	        case 0x30:
	        case 0x31:
	        case 0x32:
	        case 0x33:
	        case 0x34:
	        case 0x35:
	        case 0x36:
	        case 0x37:
	        case 0x38:
	        case 0x39:
	        case 0x2B:
	        case 0x2D:
	        case 0x2E:
	          return this.getNumber();
	        case 0x28:
	          return this.getString();
	        case 0x2F:
	          return this.getName();
	        case 0x5B:
	          this.nextChar();
	          return Cmd.get('[');
	        case 0x5D:
	          this.nextChar();
	          return Cmd.get(']');
	        case 0x3C:
	          ch = this.nextChar();
	          if (ch === 0x3C) {
	            this.nextChar();
	            return Cmd.get('<<');
	          }
	          return this.getHexString();
	        case 0x3E:
	          ch = this.nextChar();
	          if (ch === 0x3E) {
	            this.nextChar();
	            return Cmd.get('>>');
	          }
	          return Cmd.get('>');
	        case 0x7B:
	          this.nextChar();
	          return Cmd.get('{');
	        case 0x7D:
	          this.nextChar();
	          return Cmd.get('}');
	        case 0x29:
	          this.nextChar();
	          error('Illegal character: ' + ch);
	          break;
	      }
	      var str = String.fromCharCode(ch);
	      var knownCommands = this.knownCommands;
	      var knownCommandFound = knownCommands && knownCommands[str] !== undefined;
	      while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
	        var possibleCommand = str + String.fromCharCode(ch);
	        if (knownCommandFound && knownCommands[possibleCommand] === undefined) {
	          break;
	        }
	        if (str.length === 128) {
	          error('Command token too long: ' + str.length);
	        }
	        str = possibleCommand;
	        knownCommandFound = knownCommands && knownCommands[str] !== undefined;
	      }
	      if (str === 'true') {
	        return true;
	      }
	      if (str === 'false') {
	        return false;
	      }
	      if (str === 'null') {
	        return null;
	      }
	      return Cmd.get(str);
	    },
	    skipToNextLine: function Lexer_skipToNextLine() {
	      var ch = this.currentChar;
	      while (ch >= 0) {
	        if (ch === 0x0D) {
	          ch = this.nextChar();
	          if (ch === 0x0A) {
	            this.nextChar();
	          }
	          break;
	        } else if (ch === 0x0A) {
	          this.nextChar();
	          break;
	        }
	        ch = this.nextChar();
	      }
	    }
	  };
	  return Lexer;
	}();
	var Linearization = {
	  create: function LinearizationCreate(stream) {
	    function getInt(name, allowZeroValue) {
	      var obj = linDict.get(name);
	      if (isInt(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {
	        return obj;
	      }
	      throw new Error('The "' + name + '" parameter in the linearization ' + 'dictionary is invalid.');
	    }
	    function getHints() {
	      var hints = linDict.get('H'),
	          hintsLength,
	          item;
	      if (isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {
	        for (var index = 0; index < hintsLength; index++) {
	          if (!(isInt(item = hints[index]) && item > 0)) {
	            throw new Error('Hint (' + index + ') in the linearization dictionary is invalid.');
	          }
	        }
	        return hints;
	      }
	      throw new Error('Hint array in the linearization dictionary is invalid.');
	    }
	    var parser = new Parser(new Lexer(stream), false, null);
	    var obj1 = parser.getObj();
	    var obj2 = parser.getObj();
	    var obj3 = parser.getObj();
	    var linDict = parser.getObj();
	    var obj, length;
	    if (!(isInt(obj1) && isInt(obj2) && isCmd(obj3, 'obj') && isDict(linDict) && isNum(obj = linDict.get('Linearized')) && obj > 0)) {
	      return null;
	    } else if ((length = getInt('L')) !== stream.length) {
	      throw new Error('The "L" parameter in the linearization dictionary ' + 'does not equal the stream length.');
	    }
	    return {
	      length: length,
	      hints: getHints(),
	      objectNumberFirst: getInt('O'),
	      endFirst: getInt('E'),
	      numPages: getInt('N'),
	      mainXRefEntriesOffset: getInt('T'),
	      pageFirst: linDict.has('P') ? getInt('P', true) : 0
	    };
	  }
	};
	exports.Lexer = Lexer;
	exports.Linearization = Linearization;
	exports.Parser = Parser;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var corePsParser = __w_pdfjs_require__(34);
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isBool = sharedUtil.isBool;
	var isDict = corePrimitives.isDict;
	var isStream = corePrimitives.isStream;
	var PostScriptLexer = corePsParser.PostScriptLexer;
	var PostScriptParser = corePsParser.PostScriptParser;
	var PDFFunction = function PDFFunctionClosure() {
	  var CONSTRUCT_SAMPLED = 0;
	  var CONSTRUCT_INTERPOLATED = 2;
	  var CONSTRUCT_STICHED = 3;
	  var CONSTRUCT_POSTSCRIPT = 4;
	  return {
	    getSampleArray: function PDFFunction_getSampleArray(size, outputSize, bps, str) {
	      var i, ii;
	      var length = 1;
	      for (i = 0, ii = size.length; i < ii; i++) {
	        length *= size[i];
	      }
	      length *= outputSize;
	      var array = new Array(length);
	      var codeSize = 0;
	      var codeBuf = 0;
	      var sampleMul = 1.0 / (Math.pow(2.0, bps) - 1);
	      var strBytes = str.getBytes((length * bps + 7) / 8);
	      var strIdx = 0;
	      for (i = 0; i < length; i++) {
	        while (codeSize < bps) {
	          codeBuf <<= 8;
	          codeBuf |= strBytes[strIdx++];
	          codeSize += 8;
	        }
	        codeSize -= bps;
	        array[i] = (codeBuf >> codeSize) * sampleMul;
	        codeBuf &= (1 << codeSize) - 1;
	      }
	      return array;
	    },
	    getIR: function PDFFunction_getIR(xref, fn) {
	      var dict = fn.dict;
	      if (!dict) {
	        dict = fn;
	      }
	      var types = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript];
	      var typeNum = dict.get('FunctionType');
	      var typeFn = types[typeNum];
	      if (!typeFn) {
	        error('Unknown type of function');
	      }
	      return typeFn.call(this, fn, dict, xref);
	    },
	    fromIR: function PDFFunction_fromIR(IR) {
	      var type = IR[0];
	      switch (type) {
	        case CONSTRUCT_SAMPLED:
	          return this.constructSampledFromIR(IR);
	        case CONSTRUCT_INTERPOLATED:
	          return this.constructInterpolatedFromIR(IR);
	        case CONSTRUCT_STICHED:
	          return this.constructStichedFromIR(IR);
	        default:
	          return this.constructPostScriptFromIR(IR);
	      }
	    },
	    parse: function PDFFunction_parse(xref, fn) {
	      var IR = this.getIR(xref, fn);
	      return this.fromIR(IR);
	    },
	    parseArray: function PDFFunction_parseArray(xref, fnObj) {
	      if (!isArray(fnObj)) {
	        return this.parse(xref, fnObj);
	      }
	      var fnArray = [];
	      for (var j = 0, jj = fnObj.length; j < jj; j++) {
	        var obj = xref.fetchIfRef(fnObj[j]);
	        fnArray.push(PDFFunction.parse(xref, obj));
	      }
	      return function (src, srcOffset, dest, destOffset) {
	        for (var i = 0, ii = fnArray.length; i < ii; i++) {
	          fnArray[i](src, srcOffset, dest, destOffset + i);
	        }
	      };
	    },
	    constructSampled: function PDFFunction_constructSampled(str, dict) {
	      function toMultiArray(arr) {
	        var inputLength = arr.length;
	        var out = [];
	        var index = 0;
	        for (var i = 0; i < inputLength; i += 2) {
	          out[index] = [arr[i], arr[i + 1]];
	          ++index;
	        }
	        return out;
	      }
	      var domain = dict.getArray('Domain');
	      var range = dict.getArray('Range');
	      if (!domain || !range) {
	        error('No domain or range');
	      }
	      var inputSize = domain.length / 2;
	      var outputSize = range.length / 2;
	      domain = toMultiArray(domain);
	      range = toMultiArray(range);
	      var size = dict.get('Size');
	      var bps = dict.get('BitsPerSample');
	      var order = dict.get('Order') || 1;
	      if (order !== 1) {
	        info('No support for cubic spline interpolation: ' + order);
	      }
	      var encode = dict.getArray('Encode');
	      if (!encode) {
	        encode = [];
	        for (var i = 0; i < inputSize; ++i) {
	          encode.push(0);
	          encode.push(size[i] - 1);
	        }
	      }
	      encode = toMultiArray(encode);
	      var decode = dict.getArray('Decode');
	      if (!decode) {
	        decode = range;
	      } else {
	        decode = toMultiArray(decode);
	      }
	      var samples = this.getSampleArray(size, outputSize, bps, str);
	      return [CONSTRUCT_SAMPLED, inputSize, domain, encode, decode, samples, size, outputSize, Math.pow(2, bps) - 1, range];
	    },
	    constructSampledFromIR: function PDFFunction_constructSampledFromIR(IR) {
	      function interpolate(x, xmin, xmax, ymin, ymax) {
	        return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));
	      }
	      return function constructSampledFromIRResult(src, srcOffset, dest, destOffset) {
	        var m = IR[1];
	        var domain = IR[2];
	        var encode = IR[3];
	        var decode = IR[4];
	        var samples = IR[5];
	        var size = IR[6];
	        var n = IR[7];
	        var range = IR[9];
	        var cubeVertices = 1 << m;
	        var cubeN = new Float64Array(cubeVertices);
	        var cubeVertex = new Uint32Array(cubeVertices);
	        var i, j;
	        for (j = 0; j < cubeVertices; j++) {
	          cubeN[j] = 1;
	        }
	        var k = n,
	            pos = 1;
	        for (i = 0; i < m; ++i) {
	          var domain_2i = domain[i][0];
	          var domain_2i_1 = domain[i][1];
	          var xi = Math.min(Math.max(src[srcOffset + i], domain_2i), domain_2i_1);
	          var e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);
	          var size_i = size[i];
	          e = Math.min(Math.max(e, 0), size_i - 1);
	          var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;
	          var n0 = e0 + 1 - e;
	          var n1 = e - e0;
	          var offset0 = e0 * k;
	          var offset1 = offset0 + k;
	          for (j = 0; j < cubeVertices; j++) {
	            if (j & pos) {
	              cubeN[j] *= n1;
	              cubeVertex[j] += offset1;
	            } else {
	              cubeN[j] *= n0;
	              cubeVertex[j] += offset0;
	            }
	          }
	          k *= size_i;
	          pos <<= 1;
	        }
	        for (j = 0; j < n; ++j) {
	          var rj = 0;
	          for (i = 0; i < cubeVertices; i++) {
	            rj += samples[cubeVertex[i] + j] * cubeN[i];
	          }
	          rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);
	          dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);
	        }
	      };
	    },
	    constructInterpolated: function PDFFunction_constructInterpolated(str, dict) {
	      var c0 = dict.getArray('C0') || [0];
	      var c1 = dict.getArray('C1') || [1];
	      var n = dict.get('N');
	      if (!isArray(c0) || !isArray(c1)) {
	        error('Illegal dictionary for interpolated function');
	      }
	      var length = c0.length;
	      var diff = [];
	      for (var i = 0; i < length; ++i) {
	        diff.push(c1[i] - c0[i]);
	      }
	      return [CONSTRUCT_INTERPOLATED, c0, diff, n];
	    },
	    constructInterpolatedFromIR: function PDFFunction_constructInterpolatedFromIR(IR) {
	      var c0 = IR[1];
	      var diff = IR[2];
	      var n = IR[3];
	      var length = diff.length;
	      return function constructInterpolatedFromIRResult(src, srcOffset, dest, destOffset) {
	        var x = n === 1 ? src[srcOffset] : Math.pow(src[srcOffset], n);
	        for (var j = 0; j < length; ++j) {
	          dest[destOffset + j] = c0[j] + x * diff[j];
	        }
	      };
	    },
	    constructStiched: function PDFFunction_constructStiched(fn, dict, xref) {
	      var domain = dict.getArray('Domain');
	      if (!domain) {
	        error('No domain');
	      }
	      var inputSize = domain.length / 2;
	      if (inputSize !== 1) {
	        error('Bad domain for stiched function');
	      }
	      var fnRefs = dict.get('Functions');
	      var fns = [];
	      for (var i = 0, ii = fnRefs.length; i < ii; ++i) {
	        fns.push(PDFFunction.getIR(xref, xref.fetchIfRef(fnRefs[i])));
	      }
	      var bounds = dict.getArray('Bounds');
	      var encode = dict.getArray('Encode');
	      return [CONSTRUCT_STICHED, domain, bounds, encode, fns];
	    },
	    constructStichedFromIR: function PDFFunction_constructStichedFromIR(IR) {
	      var domain = IR[1];
	      var bounds = IR[2];
	      var encode = IR[3];
	      var fnsIR = IR[4];
	      var fns = [];
	      var tmpBuf = new Float32Array(1);
	      for (var i = 0, ii = fnsIR.length; i < ii; i++) {
	        fns.push(PDFFunction.fromIR(fnsIR[i]));
	      }
	      return function constructStichedFromIRResult(src, srcOffset, dest, destOffset) {
	        var clip = function constructStichedFromIRClip(v, min, max) {
	          if (v > max) {
	            v = max;
	          } else if (v < min) {
	            v = min;
	          }
	          return v;
	        };
	        var v = clip(src[srcOffset], domain[0], domain[1]);
	        for (var i = 0, ii = bounds.length; i < ii; ++i) {
	          if (v < bounds[i]) {
	            break;
	          }
	        }
	        var dmin = domain[0];
	        if (i > 0) {
	          dmin = bounds[i - 1];
	        }
	        var dmax = domain[1];
	        if (i < bounds.length) {
	          dmax = bounds[i];
	        }
	        var rmin = encode[2 * i];
	        var rmax = encode[2 * i + 1];
	        tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);
	        fns[i](tmpBuf, 0, dest, destOffset);
	      };
	    },
	    constructPostScript: function PDFFunction_constructPostScript(fn, dict, xref) {
	      var domain = dict.getArray('Domain');
	      var range = dict.getArray('Range');
	      if (!domain) {
	        error('No domain.');
	      }
	      if (!range) {
	        error('No range.');
	      }
	      var lexer = new PostScriptLexer(fn);
	      var parser = new PostScriptParser(lexer);
	      var code = parser.parse();
	      return [CONSTRUCT_POSTSCRIPT, domain, range, code];
	    },
	    constructPostScriptFromIR: function PDFFunction_constructPostScriptFromIR(IR) {
	      var domain = IR[1];
	      var range = IR[2];
	      var code = IR[3];
	      var compiled = new PostScriptCompiler().compile(code, domain, range);
	      if (compiled) {
	        return new Function('src', 'srcOffset', 'dest', 'destOffset', compiled);
	      }
	      info('Unable to compile PS function');
	      var numOutputs = range.length >> 1;
	      var numInputs = domain.length >> 1;
	      var evaluator = new PostScriptEvaluator(code);
	      var cache = Object.create(null);
	      var MAX_CACHE_SIZE = 2048 * 4;
	      var cache_available = MAX_CACHE_SIZE;
	      var tmpBuf = new Float32Array(numInputs);
	      return function constructPostScriptFromIRResult(src, srcOffset, dest, destOffset) {
	        var i, value;
	        var key = '';
	        var input = tmpBuf;
	        for (i = 0; i < numInputs; i++) {
	          value = src[srcOffset + i];
	          input[i] = value;
	          key += value + '_';
	        }
	        var cachedValue = cache[key];
	        if (cachedValue !== undefined) {
	          dest.set(cachedValue, destOffset);
	          return;
	        }
	        var output = new Float32Array(numOutputs);
	        var stack = evaluator.execute(input);
	        var stackIndex = stack.length - numOutputs;
	        for (i = 0; i < numOutputs; i++) {
	          value = stack[stackIndex + i];
	          var bound = range[i * 2];
	          if (value < bound) {
	            value = bound;
	          } else {
	            bound = range[i * 2 + 1];
	            if (value > bound) {
	              value = bound;
	            }
	          }
	          output[i] = value;
	        }
	        if (cache_available > 0) {
	          cache_available--;
	          cache[key] = output;
	        }
	        dest.set(output, destOffset);
	      };
	    }
	  };
	}();
	function isPDFFunction(v) {
	  var fnDict;
	  if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) !== 'object') {
	    return false;
	  } else if (isDict(v)) {
	    fnDict = v;
	  } else if (isStream(v)) {
	    fnDict = v.dict;
	  } else {
	    return false;
	  }
	  return fnDict.has('FunctionType');
	}
	var PostScriptStack = function PostScriptStackClosure() {
	  var MAX_STACK_SIZE = 100;
	  function PostScriptStack(initialStack) {
	    this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);
	  }
	  PostScriptStack.prototype = {
	    push: function PostScriptStack_push(value) {
	      if (this.stack.length >= MAX_STACK_SIZE) {
	        error('PostScript function stack overflow.');
	      }
	      this.stack.push(value);
	    },
	    pop: function PostScriptStack_pop() {
	      if (this.stack.length <= 0) {
	        error('PostScript function stack underflow.');
	      }
	      return this.stack.pop();
	    },
	    copy: function PostScriptStack_copy(n) {
	      if (this.stack.length + n >= MAX_STACK_SIZE) {
	        error('PostScript function stack overflow.');
	      }
	      var stack = this.stack;
	      for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {
	        stack.push(stack[i]);
	      }
	    },
	    index: function PostScriptStack_index(n) {
	      this.push(this.stack[this.stack.length - n - 1]);
	    },
	    roll: function PostScriptStack_roll(n, p) {
	      var stack = this.stack;
	      var l = stack.length - n;
	      var r = stack.length - 1,
	          c = l + (p - Math.floor(p / n) * n),
	          i,
	          j,
	          t;
	      for (i = l, j = r; i < j; i++, j--) {
	        t = stack[i];
	        stack[i] = stack[j];
	        stack[j] = t;
	      }
	      for (i = l, j = c - 1; i < j; i++, j--) {
	        t = stack[i];
	        stack[i] = stack[j];
	        stack[j] = t;
	      }
	      for (i = c, j = r; i < j; i++, j--) {
	        t = stack[i];
	        stack[i] = stack[j];
	        stack[j] = t;
	      }
	    }
	  };
	  return PostScriptStack;
	}();
	var PostScriptEvaluator = function PostScriptEvaluatorClosure() {
	  function PostScriptEvaluator(operators) {
	    this.operators = operators;
	  }
	  PostScriptEvaluator.prototype = {
	    execute: function PostScriptEvaluator_execute(initialStack) {
	      var stack = new PostScriptStack(initialStack);
	      var counter = 0;
	      var operators = this.operators;
	      var length = operators.length;
	      var operator, a, b;
	      while (counter < length) {
	        operator = operators[counter++];
	        if (typeof operator === 'number') {
	          stack.push(operator);
	          continue;
	        }
	        switch (operator) {
	          case 'jz':
	            b = stack.pop();
	            a = stack.pop();
	            if (!a) {
	              counter = b;
	            }
	            break;
	          case 'j':
	            a = stack.pop();
	            counter = a;
	            break;
	          case 'abs':
	            a = stack.pop();
	            stack.push(Math.abs(a));
	            break;
	          case 'add':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a + b);
	            break;
	          case 'and':
	            b = stack.pop();
	            a = stack.pop();
	            if (isBool(a) && isBool(b)) {
	              stack.push(a && b);
	            } else {
	              stack.push(a & b);
	            }
	            break;
	          case 'atan':
	            a = stack.pop();
	            stack.push(Math.atan(a));
	            break;
	          case 'bitshift':
	            b = stack.pop();
	            a = stack.pop();
	            if (a > 0) {
	              stack.push(a << b);
	            } else {
	              stack.push(a >> b);
	            }
	            break;
	          case 'ceiling':
	            a = stack.pop();
	            stack.push(Math.ceil(a));
	            break;
	          case 'copy':
	            a = stack.pop();
	            stack.copy(a);
	            break;
	          case 'cos':
	            a = stack.pop();
	            stack.push(Math.cos(a));
	            break;
	          case 'cvi':
	            a = stack.pop() | 0;
	            stack.push(a);
	            break;
	          case 'cvr':
	            break;
	          case 'div':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a / b);
	            break;
	          case 'dup':
	            stack.copy(1);
	            break;
	          case 'eq':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a === b);
	            break;
	          case 'exch':
	            stack.roll(2, 1);
	            break;
	          case 'exp':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(Math.pow(a, b));
	            break;
	          case 'false':
	            stack.push(false);
	            break;
	          case 'floor':
	            a = stack.pop();
	            stack.push(Math.floor(a));
	            break;
	          case 'ge':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a >= b);
	            break;
	          case 'gt':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a > b);
	            break;
	          case 'idiv':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a / b | 0);
	            break;
	          case 'index':
	            a = stack.pop();
	            stack.index(a);
	            break;
	          case 'le':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a <= b);
	            break;
	          case 'ln':
	            a = stack.pop();
	            stack.push(Math.log(a));
	            break;
	          case 'log':
	            a = stack.pop();
	            stack.push(Math.log(a) / Math.LN10);
	            break;
	          case 'lt':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a < b);
	            break;
	          case 'mod':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a % b);
	            break;
	          case 'mul':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a * b);
	            break;
	          case 'ne':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a !== b);
	            break;
	          case 'neg':
	            a = stack.pop();
	            stack.push(-a);
	            break;
	          case 'not':
	            a = stack.pop();
	            if (isBool(a)) {
	              stack.push(!a);
	            } else {
	              stack.push(~a);
	            }
	            break;
	          case 'or':
	            b = stack.pop();
	            a = stack.pop();
	            if (isBool(a) && isBool(b)) {
	              stack.push(a || b);
	            } else {
	              stack.push(a | b);
	            }
	            break;
	          case 'pop':
	            stack.pop();
	            break;
	          case 'roll':
	            b = stack.pop();
	            a = stack.pop();
	            stack.roll(a, b);
	            break;
	          case 'round':
	            a = stack.pop();
	            stack.push(Math.round(a));
	            break;
	          case 'sin':
	            a = stack.pop();
	            stack.push(Math.sin(a));
	            break;
	          case 'sqrt':
	            a = stack.pop();
	            stack.push(Math.sqrt(a));
	            break;
	          case 'sub':
	            b = stack.pop();
	            a = stack.pop();
	            stack.push(a - b);
	            break;
	          case 'true':
	            stack.push(true);
	            break;
	          case 'truncate':
	            a = stack.pop();
	            a = a < 0 ? Math.ceil(a) : Math.floor(a);
	            stack.push(a);
	            break;
	          case 'xor':
	            b = stack.pop();
	            a = stack.pop();
	            if (isBool(a) && isBool(b)) {
	              stack.push(a !== b);
	            } else {
	              stack.push(a ^ b);
	            }
	            break;
	          default:
	            error('Unknown operator ' + operator);
	            break;
	        }
	      }
	      return stack.stack;
	    }
	  };
	  return PostScriptEvaluator;
	}();
	var PostScriptCompiler = function PostScriptCompilerClosure() {
	  function AstNode(type) {
	    this.type = type;
	  }
	  AstNode.prototype.visit = function (visitor) {
	    throw new Error('abstract method');
	  };
	  function AstArgument(index, min, max) {
	    AstNode.call(this, 'args');
	    this.index = index;
	    this.min = min;
	    this.max = max;
	  }
	  AstArgument.prototype = Object.create(AstNode.prototype);
	  AstArgument.prototype.visit = function (visitor) {
	    visitor.visitArgument(this);
	  };
	  function AstLiteral(number) {
	    AstNode.call(this, 'literal');
	    this.number = number;
	    this.min = number;
	    this.max = number;
	  }
	  AstLiteral.prototype = Object.create(AstNode.prototype);
	  AstLiteral.prototype.visit = function (visitor) {
	    visitor.visitLiteral(this);
	  };
	  function AstBinaryOperation(op, arg1, arg2, min, max) {
	    AstNode.call(this, 'binary');
	    this.op = op;
	    this.arg1 = arg1;
	    this.arg2 = arg2;
	    this.min = min;
	    this.max = max;
	  }
	  AstBinaryOperation.prototype = Object.create(AstNode.prototype);
	  AstBinaryOperation.prototype.visit = function (visitor) {
	    visitor.visitBinaryOperation(this);
	  };
	  function AstMin(arg, max) {
	    AstNode.call(this, 'max');
	    this.arg = arg;
	    this.min = arg.min;
	    this.max = max;
	  }
	  AstMin.prototype = Object.create(AstNode.prototype);
	  AstMin.prototype.visit = function (visitor) {
	    visitor.visitMin(this);
	  };
	  function AstVariable(index, min, max) {
	    AstNode.call(this, 'var');
	    this.index = index;
	    this.min = min;
	    this.max = max;
	  }
	  AstVariable.prototype = Object.create(AstNode.prototype);
	  AstVariable.prototype.visit = function (visitor) {
	    visitor.visitVariable(this);
	  };
	  function AstVariableDefinition(variable, arg) {
	    AstNode.call(this, 'definition');
	    this.variable = variable;
	    this.arg = arg;
	  }
	  AstVariableDefinition.prototype = Object.create(AstNode.prototype);
	  AstVariableDefinition.prototype.visit = function (visitor) {
	    visitor.visitVariableDefinition(this);
	  };
	  function ExpressionBuilderVisitor() {
	    this.parts = [];
	  }
	  ExpressionBuilderVisitor.prototype = {
	    visitArgument: function visitArgument(arg) {
	      this.parts.push('Math.max(', arg.min, ', Math.min(', arg.max, ', src[srcOffset + ', arg.index, ']))');
	    },
	    visitVariable: function visitVariable(variable) {
	      this.parts.push('v', variable.index);
	    },
	    visitLiteral: function visitLiteral(literal) {
	      this.parts.push(literal.number);
	    },
	    visitBinaryOperation: function visitBinaryOperation(operation) {
	      this.parts.push('(');
	      operation.arg1.visit(this);
	      this.parts.push(' ', operation.op, ' ');
	      operation.arg2.visit(this);
	      this.parts.push(')');
	    },
	    visitVariableDefinition: function visitVariableDefinition(definition) {
	      this.parts.push('var ');
	      definition.variable.visit(this);
	      this.parts.push(' = ');
	      definition.arg.visit(this);
	      this.parts.push(';');
	    },
	    visitMin: function visitMin(max) {
	      this.parts.push('Math.min(');
	      max.arg.visit(this);
	      this.parts.push(', ', max.max, ')');
	    },
	    toString: function toString() {
	      return this.parts.join('');
	    }
	  };
	  function buildAddOperation(num1, num2) {
	    if (num2.type === 'literal' && num2.number === 0) {
	      return num1;
	    }
	    if (num1.type === 'literal' && num1.number === 0) {
	      return num2;
	    }
	    if (num2.type === 'literal' && num1.type === 'literal') {
	      return new AstLiteral(num1.number + num2.number);
	    }
	    return new AstBinaryOperation('+', num1, num2, num1.min + num2.min, num1.max + num2.max);
	  }
	  function buildMulOperation(num1, num2) {
	    if (num2.type === 'literal') {
	      if (num2.number === 0) {
	        return new AstLiteral(0);
	      } else if (num2.number === 1) {
	        return num1;
	      } else if (num1.type === 'literal') {
	        return new AstLiteral(num1.number * num2.number);
	      }
	    }
	    if (num1.type === 'literal') {
	      if (num1.number === 0) {
	        return new AstLiteral(0);
	      } else if (num1.number === 1) {
	        return num2;
	      }
	    }
	    var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);
	    var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);
	    return new AstBinaryOperation('*', num1, num2, min, max);
	  }
	  function buildSubOperation(num1, num2) {
	    if (num2.type === 'literal') {
	      if (num2.number === 0) {
	        return num1;
	      } else if (num1.type === 'literal') {
	        return new AstLiteral(num1.number - num2.number);
	      }
	    }
	    if (num2.type === 'binary' && num2.op === '-' && num1.type === 'literal' && num1.number === 1 && num2.arg1.type === 'literal' && num2.arg1.number === 1) {
	      return num2.arg2;
	    }
	    return new AstBinaryOperation('-', num1, num2, num1.min - num2.max, num1.max - num2.min);
	  }
	  function buildMinOperation(num1, max) {
	    if (num1.min >= max) {
	      return new AstLiteral(max);
	    } else if (num1.max <= max) {
	      return num1;
	    }
	    return new AstMin(num1, max);
	  }
	  function PostScriptCompiler() {}
	  PostScriptCompiler.prototype = {
	    compile: function PostScriptCompiler_compile(code, domain, range) {
	      var stack = [];
	      var i, ii;
	      var instructions = [];
	      var inputSize = domain.length >> 1,
	          outputSize = range.length >> 1;
	      var lastRegister = 0;
	      var n, j;
	      var num1, num2, ast1, ast2, tmpVar, item;
	      for (i = 0; i < inputSize; i++) {
	        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));
	      }
	      for (i = 0, ii = code.length; i < ii; i++) {
	        item = code[i];
	        if (typeof item === 'number') {
	          stack.push(new AstLiteral(item));
	          continue;
	        }
	        switch (item) {
	          case 'add':
	            if (stack.length < 2) {
	              return null;
	            }
	            num2 = stack.pop();
	            num1 = stack.pop();
	            stack.push(buildAddOperation(num1, num2));
	            break;
	          case 'cvr':
	            if (stack.length < 1) {
	              return null;
	            }
	            break;
	          case 'mul':
	            if (stack.length < 2) {
	              return null;
	            }
	            num2 = stack.pop();
	            num1 = stack.pop();
	            stack.push(buildMulOperation(num1, num2));
	            break;
	          case 'sub':
	            if (stack.length < 2) {
	              return null;
	            }
	            num2 = stack.pop();
	            num1 = stack.pop();
	            stack.push(buildSubOperation(num1, num2));
	            break;
	          case 'exch':
	            if (stack.length < 2) {
	              return null;
	            }
	            ast1 = stack.pop();
	            ast2 = stack.pop();
	            stack.push(ast1, ast2);
	            break;
	          case 'pop':
	            if (stack.length < 1) {
	              return null;
	            }
	            stack.pop();
	            break;
	          case 'index':
	            if (stack.length < 1) {
	              return null;
	            }
	            num1 = stack.pop();
	            if (num1.type !== 'literal') {
	              return null;
	            }
	            n = num1.number;
	            if (n < 0 || (n | 0) !== n || stack.length < n) {
	              return null;
	            }
	            ast1 = stack[stack.length - n - 1];
	            if (ast1.type === 'literal' || ast1.type === 'var') {
	              stack.push(ast1);
	              break;
	            }
	            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
	            stack[stack.length - n - 1] = tmpVar;
	            stack.push(tmpVar);
	            instructions.push(new AstVariableDefinition(tmpVar, ast1));
	            break;
	          case 'dup':
	            if (stack.length < 1) {
	              return null;
	            }
	            if (typeof code[i + 1] === 'number' && code[i + 2] === 'gt' && code[i + 3] === i + 7 && code[i + 4] === 'jz' && code[i + 5] === 'pop' && code[i + 6] === code[i + 1]) {
	              num1 = stack.pop();
	              stack.push(buildMinOperation(num1, code[i + 1]));
	              i += 6;
	              break;
	            }
	            ast1 = stack[stack.length - 1];
	            if (ast1.type === 'literal' || ast1.type === 'var') {
	              stack.push(ast1);
	              break;
	            }
	            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
	            stack[stack.length - 1] = tmpVar;
	            stack.push(tmpVar);
	            instructions.push(new AstVariableDefinition(tmpVar, ast1));
	            break;
	          case 'roll':
	            if (stack.length < 2) {
	              return null;
	            }
	            num2 = stack.pop();
	            num1 = stack.pop();
	            if (num2.type !== 'literal' || num1.type !== 'literal') {
	              return null;
	            }
	            j = num2.number;
	            n = num1.number;
	            if (n <= 0 || (n | 0) !== n || (j | 0) !== j || stack.length < n) {
	              return null;
	            }
	            j = (j % n + n) % n;
	            if (j === 0) {
	              break;
	            }
	            Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));
	            break;
	          default:
	            return null;
	        }
	      }
	      if (stack.length !== outputSize) {
	        return null;
	      }
	      var result = [];
	      instructions.forEach(function (instruction) {
	        var statementBuilder = new ExpressionBuilderVisitor();
	        instruction.visit(statementBuilder);
	        result.push(statementBuilder.toString());
	      });
	      stack.forEach(function (expr, i) {
	        var statementBuilder = new ExpressionBuilderVisitor();
	        expr.visit(statementBuilder);
	        var min = range[i * 2],
	            max = range[i * 2 + 1];
	        var out = [statementBuilder.toString()];
	        if (min > expr.min) {
	          out.unshift('Math.max(', min, ', ');
	          out.push(')');
	        }
	        if (max < expr.max) {
	          out.unshift('Math.min(', max, ', ');
	          out.push(')');
	        }
	        out.unshift('dest[destOffset + ', i, '] = ');
	        out.push(';');
	        result.push(out.join(''));
	      });
	      return result.join('\n');
	    }
	  };
	  return PostScriptCompiler;
	}();
	exports.isPDFFunction = isPDFFunction;
	exports.PDFFunction = PDFFunction;
	exports.PostScriptEvaluator = PostScriptEvaluator;
	exports.PostScriptCompiler = PostScriptCompiler;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var getLookupTableFactory = sharedUtil.getLookupTableFactory;
	var getGlyphsUnicode = getLookupTableFactory(function (t) {
	  t['A'] = 0x0041;
	  t['AE'] = 0x00C6;
	  t['AEacute'] = 0x01FC;
	  t['AEmacron'] = 0x01E2;
	  t['AEsmall'] = 0xF7E6;
	  t['Aacute'] = 0x00C1;
	  t['Aacutesmall'] = 0xF7E1;
	  t['Abreve'] = 0x0102;
	  t['Abreveacute'] = 0x1EAE;
	  t['Abrevecyrillic'] = 0x04D0;
	  t['Abrevedotbelow'] = 0x1EB6;
	  t['Abrevegrave'] = 0x1EB0;
	  t['Abrevehookabove'] = 0x1EB2;
	  t['Abrevetilde'] = 0x1EB4;
	  t['Acaron'] = 0x01CD;
	  t['Acircle'] = 0x24B6;
	  t['Acircumflex'] = 0x00C2;
	  t['Acircumflexacute'] = 0x1EA4;
	  t['Acircumflexdotbelow'] = 0x1EAC;
	  t['Acircumflexgrave'] = 0x1EA6;
	  t['Acircumflexhookabove'] = 0x1EA8;
	  t['Acircumflexsmall'] = 0xF7E2;
	  t['Acircumflextilde'] = 0x1EAA;
	  t['Acute'] = 0xF6C9;
	  t['Acutesmall'] = 0xF7B4;
	  t['Acyrillic'] = 0x0410;
	  t['Adblgrave'] = 0x0200;
	  t['Adieresis'] = 0x00C4;
	  t['Adieresiscyrillic'] = 0x04D2;
	  t['Adieresismacron'] = 0x01DE;
	  t['Adieresissmall'] = 0xF7E4;
	  t['Adotbelow'] = 0x1EA0;
	  t['Adotmacron'] = 0x01E0;
	  t['Agrave'] = 0x00C0;
	  t['Agravesmall'] = 0xF7E0;
	  t['Ahookabove'] = 0x1EA2;
	  t['Aiecyrillic'] = 0x04D4;
	  t['Ainvertedbreve'] = 0x0202;
	  t['Alpha'] = 0x0391;
	  t['Alphatonos'] = 0x0386;
	  t['Amacron'] = 0x0100;
	  t['Amonospace'] = 0xFF21;
	  t['Aogonek'] = 0x0104;
	  t['Aring'] = 0x00C5;
	  t['Aringacute'] = 0x01FA;
	  t['Aringbelow'] = 0x1E00;
	  t['Aringsmall'] = 0xF7E5;
	  t['Asmall'] = 0xF761;
	  t['Atilde'] = 0x00C3;
	  t['Atildesmall'] = 0xF7E3;
	  t['Aybarmenian'] = 0x0531;
	  t['B'] = 0x0042;
	  t['Bcircle'] = 0x24B7;
	  t['Bdotaccent'] = 0x1E02;
	  t['Bdotbelow'] = 0x1E04;
	  t['Becyrillic'] = 0x0411;
	  t['Benarmenian'] = 0x0532;
	  t['Beta'] = 0x0392;
	  t['Bhook'] = 0x0181;
	  t['Blinebelow'] = 0x1E06;
	  t['Bmonospace'] = 0xFF22;
	  t['Brevesmall'] = 0xF6F4;
	  t['Bsmall'] = 0xF762;
	  t['Btopbar'] = 0x0182;
	  t['C'] = 0x0043;
	  t['Caarmenian'] = 0x053E;
	  t['Cacute'] = 0x0106;
	  t['Caron'] = 0xF6CA;
	  t['Caronsmall'] = 0xF6F5;
	  t['Ccaron'] = 0x010C;
	  t['Ccedilla'] = 0x00C7;
	  t['Ccedillaacute'] = 0x1E08;
	  t['Ccedillasmall'] = 0xF7E7;
	  t['Ccircle'] = 0x24B8;
	  t['Ccircumflex'] = 0x0108;
	  t['Cdot'] = 0x010A;
	  t['Cdotaccent'] = 0x010A;
	  t['Cedillasmall'] = 0xF7B8;
	  t['Chaarmenian'] = 0x0549;
	  t['Cheabkhasiancyrillic'] = 0x04BC;
	  t['Checyrillic'] = 0x0427;
	  t['Chedescenderabkhasiancyrillic'] = 0x04BE;
	  t['Chedescendercyrillic'] = 0x04B6;
	  t['Chedieresiscyrillic'] = 0x04F4;
	  t['Cheharmenian'] = 0x0543;
	  t['Chekhakassiancyrillic'] = 0x04CB;
	  t['Cheverticalstrokecyrillic'] = 0x04B8;
	  t['Chi'] = 0x03A7;
	  t['Chook'] = 0x0187;
	  t['Circumflexsmall'] = 0xF6F6;
	  t['Cmonospace'] = 0xFF23;
	  t['Coarmenian'] = 0x0551;
	  t['Csmall'] = 0xF763;
	  t['D'] = 0x0044;
	  t['DZ'] = 0x01F1;
	  t['DZcaron'] = 0x01C4;
	  t['Daarmenian'] = 0x0534;
	  t['Dafrican'] = 0x0189;
	  t['Dcaron'] = 0x010E;
	  t['Dcedilla'] = 0x1E10;
	  t['Dcircle'] = 0x24B9;
	  t['Dcircumflexbelow'] = 0x1E12;
	  t['Dcroat'] = 0x0110;
	  t['Ddotaccent'] = 0x1E0A;
	  t['Ddotbelow'] = 0x1E0C;
	  t['Decyrillic'] = 0x0414;
	  t['Deicoptic'] = 0x03EE;
	  t['Delta'] = 0x2206;
	  t['Deltagreek'] = 0x0394;
	  t['Dhook'] = 0x018A;
	  t['Dieresis'] = 0xF6CB;
	  t['DieresisAcute'] = 0xF6CC;
	  t['DieresisGrave'] = 0xF6CD;
	  t['Dieresissmall'] = 0xF7A8;
	  t['Digammagreek'] = 0x03DC;
	  t['Djecyrillic'] = 0x0402;
	  t['Dlinebelow'] = 0x1E0E;
	  t['Dmonospace'] = 0xFF24;
	  t['Dotaccentsmall'] = 0xF6F7;
	  t['Dslash'] = 0x0110;
	  t['Dsmall'] = 0xF764;
	  t['Dtopbar'] = 0x018B;
	  t['Dz'] = 0x01F2;
	  t['Dzcaron'] = 0x01C5;
	  t['Dzeabkhasiancyrillic'] = 0x04E0;
	  t['Dzecyrillic'] = 0x0405;
	  t['Dzhecyrillic'] = 0x040F;
	  t['E'] = 0x0045;
	  t['Eacute'] = 0x00C9;
	  t['Eacutesmall'] = 0xF7E9;
	  t['Ebreve'] = 0x0114;
	  t['Ecaron'] = 0x011A;
	  t['Ecedillabreve'] = 0x1E1C;
	  t['Echarmenian'] = 0x0535;
	  t['Ecircle'] = 0x24BA;
	  t['Ecircumflex'] = 0x00CA;
	  t['Ecircumflexacute'] = 0x1EBE;
	  t['Ecircumflexbelow'] = 0x1E18;
	  t['Ecircumflexdotbelow'] = 0x1EC6;
	  t['Ecircumflexgrave'] = 0x1EC0;
	  t['Ecircumflexhookabove'] = 0x1EC2;
	  t['Ecircumflexsmall'] = 0xF7EA;
	  t['Ecircumflextilde'] = 0x1EC4;
	  t['Ecyrillic'] = 0x0404;
	  t['Edblgrave'] = 0x0204;
	  t['Edieresis'] = 0x00CB;
	  t['Edieresissmall'] = 0xF7EB;
	  t['Edot'] = 0x0116;
	  t['Edotaccent'] = 0x0116;
	  t['Edotbelow'] = 0x1EB8;
	  t['Efcyrillic'] = 0x0424;
	  t['Egrave'] = 0x00C8;
	  t['Egravesmall'] = 0xF7E8;
	  t['Eharmenian'] = 0x0537;
	  t['Ehookabove'] = 0x1EBA;
	  t['Eightroman'] = 0x2167;
	  t['Einvertedbreve'] = 0x0206;
	  t['Eiotifiedcyrillic'] = 0x0464;
	  t['Elcyrillic'] = 0x041B;
	  t['Elevenroman'] = 0x216A;
	  t['Emacron'] = 0x0112;
	  t['Emacronacute'] = 0x1E16;
	  t['Emacrongrave'] = 0x1E14;
	  t['Emcyrillic'] = 0x041C;
	  t['Emonospace'] = 0xFF25;
	  t['Encyrillic'] = 0x041D;
	  t['Endescendercyrillic'] = 0x04A2;
	  t['Eng'] = 0x014A;
	  t['Enghecyrillic'] = 0x04A4;
	  t['Enhookcyrillic'] = 0x04C7;
	  t['Eogonek'] = 0x0118;
	  t['Eopen'] = 0x0190;
	  t['Epsilon'] = 0x0395;
	  t['Epsilontonos'] = 0x0388;
	  t['Ercyrillic'] = 0x0420;
	  t['Ereversed'] = 0x018E;
	  t['Ereversedcyrillic'] = 0x042D;
	  t['Escyrillic'] = 0x0421;
	  t['Esdescendercyrillic'] = 0x04AA;
	  t['Esh'] = 0x01A9;
	  t['Esmall'] = 0xF765;
	  t['Eta'] = 0x0397;
	  t['Etarmenian'] = 0x0538;
	  t['Etatonos'] = 0x0389;
	  t['Eth'] = 0x00D0;
	  t['Ethsmall'] = 0xF7F0;
	  t['Etilde'] = 0x1EBC;
	  t['Etildebelow'] = 0x1E1A;
	  t['Euro'] = 0x20AC;
	  t['Ezh'] = 0x01B7;
	  t['Ezhcaron'] = 0x01EE;
	  t['Ezhreversed'] = 0x01B8;
	  t['F'] = 0x0046;
	  t['Fcircle'] = 0x24BB;
	  t['Fdotaccent'] = 0x1E1E;
	  t['Feharmenian'] = 0x0556;
	  t['Feicoptic'] = 0x03E4;
	  t['Fhook'] = 0x0191;
	  t['Fitacyrillic'] = 0x0472;
	  t['Fiveroman'] = 0x2164;
	  t['Fmonospace'] = 0xFF26;
	  t['Fourroman'] = 0x2163;
	  t['Fsmall'] = 0xF766;
	  t['G'] = 0x0047;
	  t['GBsquare'] = 0x3387;
	  t['Gacute'] = 0x01F4;
	  t['Gamma'] = 0x0393;
	  t['Gammaafrican'] = 0x0194;
	  t['Gangiacoptic'] = 0x03EA;
	  t['Gbreve'] = 0x011E;
	  t['Gcaron'] = 0x01E6;
	  t['Gcedilla'] = 0x0122;
	  t['Gcircle'] = 0x24BC;
	  t['Gcircumflex'] = 0x011C;
	  t['Gcommaaccent'] = 0x0122;
	  t['Gdot'] = 0x0120;
	  t['Gdotaccent'] = 0x0120;
	  t['Gecyrillic'] = 0x0413;
	  t['Ghadarmenian'] = 0x0542;
	  t['Ghemiddlehookcyrillic'] = 0x0494;
	  t['Ghestrokecyrillic'] = 0x0492;
	  t['Gheupturncyrillic'] = 0x0490;
	  t['Ghook'] = 0x0193;
	  t['Gimarmenian'] = 0x0533;
	  t['Gjecyrillic'] = 0x0403;
	  t['Gmacron'] = 0x1E20;
	  t['Gmonospace'] = 0xFF27;
	  t['Grave'] = 0xF6CE;
	  t['Gravesmall'] = 0xF760;
	  t['Gsmall'] = 0xF767;
	  t['Gsmallhook'] = 0x029B;
	  t['Gstroke'] = 0x01E4;
	  t['H'] = 0x0048;
	  t['H18533'] = 0x25CF;
	  t['H18543'] = 0x25AA;
	  t['H18551'] = 0x25AB;
	  t['H22073'] = 0x25A1;
	  t['HPsquare'] = 0x33CB;
	  t['Haabkhasiancyrillic'] = 0x04A8;
	  t['Hadescendercyrillic'] = 0x04B2;
	  t['Hardsigncyrillic'] = 0x042A;
	  t['Hbar'] = 0x0126;
	  t['Hbrevebelow'] = 0x1E2A;
	  t['Hcedilla'] = 0x1E28;
	  t['Hcircle'] = 0x24BD;
	  t['Hcircumflex'] = 0x0124;
	  t['Hdieresis'] = 0x1E26;
	  t['Hdotaccent'] = 0x1E22;
	  t['Hdotbelow'] = 0x1E24;
	  t['Hmonospace'] = 0xFF28;
	  t['Hoarmenian'] = 0x0540;
	  t['Horicoptic'] = 0x03E8;
	  t['Hsmall'] = 0xF768;
	  t['Hungarumlaut'] = 0xF6CF;
	  t['Hungarumlautsmall'] = 0xF6F8;
	  t['Hzsquare'] = 0x3390;
	  t['I'] = 0x0049;
	  t['IAcyrillic'] = 0x042F;
	  t['IJ'] = 0x0132;
	  t['IUcyrillic'] = 0x042E;
	  t['Iacute'] = 0x00CD;
	  t['Iacutesmall'] = 0xF7ED;
	  t['Ibreve'] = 0x012C;
	  t['Icaron'] = 0x01CF;
	  t['Icircle'] = 0x24BE;
	  t['Icircumflex'] = 0x00CE;
	  t['Icircumflexsmall'] = 0xF7EE;
	  t['Icyrillic'] = 0x0406;
	  t['Idblgrave'] = 0x0208;
	  t['Idieresis'] = 0x00CF;
	  t['Idieresisacute'] = 0x1E2E;
	  t['Idieresiscyrillic'] = 0x04E4;
	  t['Idieresissmall'] = 0xF7EF;
	  t['Idot'] = 0x0130;
	  t['Idotaccent'] = 0x0130;
	  t['Idotbelow'] = 0x1ECA;
	  t['Iebrevecyrillic'] = 0x04D6;
	  t['Iecyrillic'] = 0x0415;
	  t['Ifraktur'] = 0x2111;
	  t['Igrave'] = 0x00CC;
	  t['Igravesmall'] = 0xF7EC;
	  t['Ihookabove'] = 0x1EC8;
	  t['Iicyrillic'] = 0x0418;
	  t['Iinvertedbreve'] = 0x020A;
	  t['Iishortcyrillic'] = 0x0419;
	  t['Imacron'] = 0x012A;
	  t['Imacroncyrillic'] = 0x04E2;
	  t['Imonospace'] = 0xFF29;
	  t['Iniarmenian'] = 0x053B;
	  t['Iocyrillic'] = 0x0401;
	  t['Iogonek'] = 0x012E;
	  t['Iota'] = 0x0399;
	  t['Iotaafrican'] = 0x0196;
	  t['Iotadieresis'] = 0x03AA;
	  t['Iotatonos'] = 0x038A;
	  t['Ismall'] = 0xF769;
	  t['Istroke'] = 0x0197;
	  t['Itilde'] = 0x0128;
	  t['Itildebelow'] = 0x1E2C;
	  t['Izhitsacyrillic'] = 0x0474;
	  t['Izhitsadblgravecyrillic'] = 0x0476;
	  t['J'] = 0x004A;
	  t['Jaarmenian'] = 0x0541;
	  t['Jcircle'] = 0x24BF;
	  t['Jcircumflex'] = 0x0134;
	  t['Jecyrillic'] = 0x0408;
	  t['Jheharmenian'] = 0x054B;
	  t['Jmonospace'] = 0xFF2A;
	  t['Jsmall'] = 0xF76A;
	  t['K'] = 0x004B;
	  t['KBsquare'] = 0x3385;
	  t['KKsquare'] = 0x33CD;
	  t['Kabashkircyrillic'] = 0x04A0;
	  t['Kacute'] = 0x1E30;
	  t['Kacyrillic'] = 0x041A;
	  t['Kadescendercyrillic'] = 0x049A;
	  t['Kahookcyrillic'] = 0x04C3;
	  t['Kappa'] = 0x039A;
	  t['Kastrokecyrillic'] = 0x049E;
	  t['Kaverticalstrokecyrillic'] = 0x049C;
	  t['Kcaron'] = 0x01E8;
	  t['Kcedilla'] = 0x0136;
	  t['Kcircle'] = 0x24C0;
	  t['Kcommaaccent'] = 0x0136;
	  t['Kdotbelow'] = 0x1E32;
	  t['Keharmenian'] = 0x0554;
	  t['Kenarmenian'] = 0x053F;
	  t['Khacyrillic'] = 0x0425;
	  t['Kheicoptic'] = 0x03E6;
	  t['Khook'] = 0x0198;
	  t['Kjecyrillic'] = 0x040C;
	  t['Klinebelow'] = 0x1E34;
	  t['Kmonospace'] = 0xFF2B;
	  t['Koppacyrillic'] = 0x0480;
	  t['Koppagreek'] = 0x03DE;
	  t['Ksicyrillic'] = 0x046E;
	  t['Ksmall'] = 0xF76B;
	  t['L'] = 0x004C;
	  t['LJ'] = 0x01C7;
	  t['LL'] = 0xF6BF;
	  t['Lacute'] = 0x0139;
	  t['Lambda'] = 0x039B;
	  t['Lcaron'] = 0x013D;
	  t['Lcedilla'] = 0x013B;
	  t['Lcircle'] = 0x24C1;
	  t['Lcircumflexbelow'] = 0x1E3C;
	  t['Lcommaaccent'] = 0x013B;
	  t['Ldot'] = 0x013F;
	  t['Ldotaccent'] = 0x013F;
	  t['Ldotbelow'] = 0x1E36;
	  t['Ldotbelowmacron'] = 0x1E38;
	  t['Liwnarmenian'] = 0x053C;
	  t['Lj'] = 0x01C8;
	  t['Ljecyrillic'] = 0x0409;
	  t['Llinebelow'] = 0x1E3A;
	  t['Lmonospace'] = 0xFF2C;
	  t['Lslash'] = 0x0141;
	  t['Lslashsmall'] = 0xF6F9;
	  t['Lsmall'] = 0xF76C;
	  t['M'] = 0x004D;
	  t['MBsquare'] = 0x3386;
	  t['Macron'] = 0xF6D0;
	  t['Macronsmall'] = 0xF7AF;
	  t['Macute'] = 0x1E3E;
	  t['Mcircle'] = 0x24C2;
	  t['Mdotaccent'] = 0x1E40;
	  t['Mdotbelow'] = 0x1E42;
	  t['Menarmenian'] = 0x0544;
	  t['Mmonospace'] = 0xFF2D;
	  t['Msmall'] = 0xF76D;
	  t['Mturned'] = 0x019C;
	  t['Mu'] = 0x039C;
	  t['N'] = 0x004E;
	  t['NJ'] = 0x01CA;
	  t['Nacute'] = 0x0143;
	  t['Ncaron'] = 0x0147;
	  t['Ncedilla'] = 0x0145;
	  t['Ncircle'] = 0x24C3;
	  t['Ncircumflexbelow'] = 0x1E4A;
	  t['Ncommaaccent'] = 0x0145;
	  t['Ndotaccent'] = 0x1E44;
	  t['Ndotbelow'] = 0x1E46;
	  t['Nhookleft'] = 0x019D;
	  t['Nineroman'] = 0x2168;
	  t['Nj'] = 0x01CB;
	  t['Njecyrillic'] = 0x040A;
	  t['Nlinebelow'] = 0x1E48;
	  t['Nmonospace'] = 0xFF2E;
	  t['Nowarmenian'] = 0x0546;
	  t['Nsmall'] = 0xF76E;
	  t['Ntilde'] = 0x00D1;
	  t['Ntildesmall'] = 0xF7F1;
	  t['Nu'] = 0x039D;
	  t['O'] = 0x004F;
	  t['OE'] = 0x0152;
	  t['OEsmall'] = 0xF6FA;
	  t['Oacute'] = 0x00D3;
	  t['Oacutesmall'] = 0xF7F3;
	  t['Obarredcyrillic'] = 0x04E8;
	  t['Obarreddieresiscyrillic'] = 0x04EA;
	  t['Obreve'] = 0x014E;
	  t['Ocaron'] = 0x01D1;
	  t['Ocenteredtilde'] = 0x019F;
	  t['Ocircle'] = 0x24C4;
	  t['Ocircumflex'] = 0x00D4;
	  t['Ocircumflexacute'] = 0x1ED0;
	  t['Ocircumflexdotbelow'] = 0x1ED8;
	  t['Ocircumflexgrave'] = 0x1ED2;
	  t['Ocircumflexhookabove'] = 0x1ED4;
	  t['Ocircumflexsmall'] = 0xF7F4;
	  t['Ocircumflextilde'] = 0x1ED6;
	  t['Ocyrillic'] = 0x041E;
	  t['Odblacute'] = 0x0150;
	  t['Odblgrave'] = 0x020C;
	  t['Odieresis'] = 0x00D6;
	  t['Odieresiscyrillic'] = 0x04E6;
	  t['Odieresissmall'] = 0xF7F6;
	  t['Odotbelow'] = 0x1ECC;
	  t['Ogoneksmall'] = 0xF6FB;
	  t['Ograve'] = 0x00D2;
	  t['Ogravesmall'] = 0xF7F2;
	  t['Oharmenian'] = 0x0555;
	  t['Ohm'] = 0x2126;
	  t['Ohookabove'] = 0x1ECE;
	  t['Ohorn'] = 0x01A0;
	  t['Ohornacute'] = 0x1EDA;
	  t['Ohorndotbelow'] = 0x1EE2;
	  t['Ohorngrave'] = 0x1EDC;
	  t['Ohornhookabove'] = 0x1EDE;
	  t['Ohorntilde'] = 0x1EE0;
	  t['Ohungarumlaut'] = 0x0150;
	  t['Oi'] = 0x01A2;
	  t['Oinvertedbreve'] = 0x020E;
	  t['Omacron'] = 0x014C;
	  t['Omacronacute'] = 0x1E52;
	  t['Omacrongrave'] = 0x1E50;
	  t['Omega'] = 0x2126;
	  t['Omegacyrillic'] = 0x0460;
	  t['Omegagreek'] = 0x03A9;
	  t['Omegaroundcyrillic'] = 0x047A;
	  t['Omegatitlocyrillic'] = 0x047C;
	  t['Omegatonos'] = 0x038F;
	  t['Omicron'] = 0x039F;
	  t['Omicrontonos'] = 0x038C;
	  t['Omonospace'] = 0xFF2F;
	  t['Oneroman'] = 0x2160;
	  t['Oogonek'] = 0x01EA;
	  t['Oogonekmacron'] = 0x01EC;
	  t['Oopen'] = 0x0186;
	  t['Oslash'] = 0x00D8;
	  t['Oslashacute'] = 0x01FE;
	  t['Oslashsmall'] = 0xF7F8;
	  t['Osmall'] = 0xF76F;
	  t['Ostrokeacute'] = 0x01FE;
	  t['Otcyrillic'] = 0x047E;
	  t['Otilde'] = 0x00D5;
	  t['Otildeacute'] = 0x1E4C;
	  t['Otildedieresis'] = 0x1E4E;
	  t['Otildesmall'] = 0xF7F5;
	  t['P'] = 0x0050;
	  t['Pacute'] = 0x1E54;
	  t['Pcircle'] = 0x24C5;
	  t['Pdotaccent'] = 0x1E56;
	  t['Pecyrillic'] = 0x041F;
	  t['Peharmenian'] = 0x054A;
	  t['Pemiddlehookcyrillic'] = 0x04A6;
	  t['Phi'] = 0x03A6;
	  t['Phook'] = 0x01A4;
	  t['Pi'] = 0x03A0;
	  t['Piwrarmenian'] = 0x0553;
	  t['Pmonospace'] = 0xFF30;
	  t['Psi'] = 0x03A8;
	  t['Psicyrillic'] = 0x0470;
	  t['Psmall'] = 0xF770;
	  t['Q'] = 0x0051;
	  t['Qcircle'] = 0x24C6;
	  t['Qmonospace'] = 0xFF31;
	  t['Qsmall'] = 0xF771;
	  t['R'] = 0x0052;
	  t['Raarmenian'] = 0x054C;
	  t['Racute'] = 0x0154;
	  t['Rcaron'] = 0x0158;
	  t['Rcedilla'] = 0x0156;
	  t['Rcircle'] = 0x24C7;
	  t['Rcommaaccent'] = 0x0156;
	  t['Rdblgrave'] = 0x0210;
	  t['Rdotaccent'] = 0x1E58;
	  t['Rdotbelow'] = 0x1E5A;
	  t['Rdotbelowmacron'] = 0x1E5C;
	  t['Reharmenian'] = 0x0550;
	  t['Rfraktur'] = 0x211C;
	  t['Rho'] = 0x03A1;
	  t['Ringsmall'] = 0xF6FC;
	  t['Rinvertedbreve'] = 0x0212;
	  t['Rlinebelow'] = 0x1E5E;
	  t['Rmonospace'] = 0xFF32;
	  t['Rsmall'] = 0xF772;
	  t['Rsmallinverted'] = 0x0281;
	  t['Rsmallinvertedsuperior'] = 0x02B6;
	  t['S'] = 0x0053;
	  t['SF010000'] = 0x250C;
	  t['SF020000'] = 0x2514;
	  t['SF030000'] = 0x2510;
	  t['SF040000'] = 0x2518;
	  t['SF050000'] = 0x253C;
	  t['SF060000'] = 0x252C;
	  t['SF070000'] = 0x2534;
	  t['SF080000'] = 0x251C;
	  t['SF090000'] = 0x2524;
	  t['SF100000'] = 0x2500;
	  t['SF110000'] = 0x2502;
	  t['SF190000'] = 0x2561;
	  t['SF200000'] = 0x2562;
	  t['SF210000'] = 0x2556;
	  t['SF220000'] = 0x2555;
	  t['SF230000'] = 0x2563;
	  t['SF240000'] = 0x2551;
	  t['SF250000'] = 0x2557;
	  t['SF260000'] = 0x255D;
	  t['SF270000'] = 0x255C;
	  t['SF280000'] = 0x255B;
	  t['SF360000'] = 0x255E;
	  t['SF370000'] = 0x255F;
	  t['SF380000'] = 0x255A;
	  t['SF390000'] = 0x2554;
	  t['SF400000'] = 0x2569;
	  t['SF410000'] = 0x2566;
	  t['SF420000'] = 0x2560;
	  t['SF430000'] = 0x2550;
	  t['SF440000'] = 0x256C;
	  t['SF450000'] = 0x2567;
	  t['SF460000'] = 0x2568;
	  t['SF470000'] = 0x2564;
	  t['SF480000'] = 0x2565;
	  t['SF490000'] = 0x2559;
	  t['SF500000'] = 0x2558;
	  t['SF510000'] = 0x2552;
	  t['SF520000'] = 0x2553;
	  t['SF530000'] = 0x256B;
	  t['SF540000'] = 0x256A;
	  t['Sacute'] = 0x015A;
	  t['Sacutedotaccent'] = 0x1E64;
	  t['Sampigreek'] = 0x03E0;
	  t['Scaron'] = 0x0160;
	  t['Scarondotaccent'] = 0x1E66;
	  t['Scaronsmall'] = 0xF6FD;
	  t['Scedilla'] = 0x015E;
	  t['Schwa'] = 0x018F;
	  t['Schwacyrillic'] = 0x04D8;
	  t['Schwadieresiscyrillic'] = 0x04DA;
	  t['Scircle'] = 0x24C8;
	  t['Scircumflex'] = 0x015C;
	  t['Scommaaccent'] = 0x0218;
	  t['Sdotaccent'] = 0x1E60;
	  t['Sdotbelow'] = 0x1E62;
	  t['Sdotbelowdotaccent'] = 0x1E68;
	  t['Seharmenian'] = 0x054D;
	  t['Sevenroman'] = 0x2166;
	  t['Shaarmenian'] = 0x0547;
	  t['Shacyrillic'] = 0x0428;
	  t['Shchacyrillic'] = 0x0429;
	  t['Sheicoptic'] = 0x03E2;
	  t['Shhacyrillic'] = 0x04BA;
	  t['Shimacoptic'] = 0x03EC;
	  t['Sigma'] = 0x03A3;
	  t['Sixroman'] = 0x2165;
	  t['Smonospace'] = 0xFF33;
	  t['Softsigncyrillic'] = 0x042C;
	  t['Ssmall'] = 0xF773;
	  t['Stigmagreek'] = 0x03DA;
	  t['T'] = 0x0054;
	  t['Tau'] = 0x03A4;
	  t['Tbar'] = 0x0166;
	  t['Tcaron'] = 0x0164;
	  t['Tcedilla'] = 0x0162;
	  t['Tcircle'] = 0x24C9;
	  t['Tcircumflexbelow'] = 0x1E70;
	  t['Tcommaaccent'] = 0x0162;
	  t['Tdotaccent'] = 0x1E6A;
	  t['Tdotbelow'] = 0x1E6C;
	  t['Tecyrillic'] = 0x0422;
	  t['Tedescendercyrillic'] = 0x04AC;
	  t['Tenroman'] = 0x2169;
	  t['Tetsecyrillic'] = 0x04B4;
	  t['Theta'] = 0x0398;
	  t['Thook'] = 0x01AC;
	  t['Thorn'] = 0x00DE;
	  t['Thornsmall'] = 0xF7FE;
	  t['Threeroman'] = 0x2162;
	  t['Tildesmall'] = 0xF6FE;
	  t['Tiwnarmenian'] = 0x054F;
	  t['Tlinebelow'] = 0x1E6E;
	  t['Tmonospace'] = 0xFF34;
	  t['Toarmenian'] = 0x0539;
	  t['Tonefive'] = 0x01BC;
	  t['Tonesix'] = 0x0184;
	  t['Tonetwo'] = 0x01A7;
	  t['Tretroflexhook'] = 0x01AE;
	  t['Tsecyrillic'] = 0x0426;
	  t['Tshecyrillic'] = 0x040B;
	  t['Tsmall'] = 0xF774;
	  t['Twelveroman'] = 0x216B;
	  t['Tworoman'] = 0x2161;
	  t['U'] = 0x0055;
	  t['Uacute'] = 0x00DA;
	  t['Uacutesmall'] = 0xF7FA;
	  t['Ubreve'] = 0x016C;
	  t['Ucaron'] = 0x01D3;
	  t['Ucircle'] = 0x24CA;
	  t['Ucircumflex'] = 0x00DB;
	  t['Ucircumflexbelow'] = 0x1E76;
	  t['Ucircumflexsmall'] = 0xF7FB;
	  t['Ucyrillic'] = 0x0423;
	  t['Udblacute'] = 0x0170;
	  t['Udblgrave'] = 0x0214;
	  t['Udieresis'] = 0x00DC;
	  t['Udieresisacute'] = 0x01D7;
	  t['Udieresisbelow'] = 0x1E72;
	  t['Udieresiscaron'] = 0x01D9;
	  t['Udieresiscyrillic'] = 0x04F0;
	  t['Udieresisgrave'] = 0x01DB;
	  t['Udieresismacron'] = 0x01D5;
	  t['Udieresissmall'] = 0xF7FC;
	  t['Udotbelow'] = 0x1EE4;
	  t['Ugrave'] = 0x00D9;
	  t['Ugravesmall'] = 0xF7F9;
	  t['Uhookabove'] = 0x1EE6;
	  t['Uhorn'] = 0x01AF;
	  t['Uhornacute'] = 0x1EE8;
	  t['Uhorndotbelow'] = 0x1EF0;
	  t['Uhorngrave'] = 0x1EEA;
	  t['Uhornhookabove'] = 0x1EEC;
	  t['Uhorntilde'] = 0x1EEE;
	  t['Uhungarumlaut'] = 0x0170;
	  t['Uhungarumlautcyrillic'] = 0x04F2;
	  t['Uinvertedbreve'] = 0x0216;
	  t['Ukcyrillic'] = 0x0478;
	  t['Umacron'] = 0x016A;
	  t['Umacroncyrillic'] = 0x04EE;
	  t['Umacrondieresis'] = 0x1E7A;
	  t['Umonospace'] = 0xFF35;
	  t['Uogonek'] = 0x0172;
	  t['Upsilon'] = 0x03A5;
	  t['Upsilon1'] = 0x03D2;
	  t['Upsilonacutehooksymbolgreek'] = 0x03D3;
	  t['Upsilonafrican'] = 0x01B1;
	  t['Upsilondieresis'] = 0x03AB;
	  t['Upsilondieresishooksymbolgreek'] = 0x03D4;
	  t['Upsilonhooksymbol'] = 0x03D2;
	  t['Upsilontonos'] = 0x038E;
	  t['Uring'] = 0x016E;
	  t['Ushortcyrillic'] = 0x040E;
	  t['Usmall'] = 0xF775;
	  t['Ustraightcyrillic'] = 0x04AE;
	  t['Ustraightstrokecyrillic'] = 0x04B0;
	  t['Utilde'] = 0x0168;
	  t['Utildeacute'] = 0x1E78;
	  t['Utildebelow'] = 0x1E74;
	  t['V'] = 0x0056;
	  t['Vcircle'] = 0x24CB;
	  t['Vdotbelow'] = 0x1E7E;
	  t['Vecyrillic'] = 0x0412;
	  t['Vewarmenian'] = 0x054E;
	  t['Vhook'] = 0x01B2;
	  t['Vmonospace'] = 0xFF36;
	  t['Voarmenian'] = 0x0548;
	  t['Vsmall'] = 0xF776;
	  t['Vtilde'] = 0x1E7C;
	  t['W'] = 0x0057;
	  t['Wacute'] = 0x1E82;
	  t['Wcircle'] = 0x24CC;
	  t['Wcircumflex'] = 0x0174;
	  t['Wdieresis'] = 0x1E84;
	  t['Wdotaccent'] = 0x1E86;
	  t['Wdotbelow'] = 0x1E88;
	  t['Wgrave'] = 0x1E80;
	  t['Wmonospace'] = 0xFF37;
	  t['Wsmall'] = 0xF777;
	  t['X'] = 0x0058;
	  t['Xcircle'] = 0x24CD;
	  t['Xdieresis'] = 0x1E8C;
	  t['Xdotaccent'] = 0x1E8A;
	  t['Xeharmenian'] = 0x053D;
	  t['Xi'] = 0x039E;
	  t['Xmonospace'] = 0xFF38;
	  t['Xsmall'] = 0xF778;
	  t['Y'] = 0x0059;
	  t['Yacute'] = 0x00DD;
	  t['Yacutesmall'] = 0xF7FD;
	  t['Yatcyrillic'] = 0x0462;
	  t['Ycircle'] = 0x24CE;
	  t['Ycircumflex'] = 0x0176;
	  t['Ydieresis'] = 0x0178;
	  t['Ydieresissmall'] = 0xF7FF;
	  t['Ydotaccent'] = 0x1E8E;
	  t['Ydotbelow'] = 0x1EF4;
	  t['Yericyrillic'] = 0x042B;
	  t['Yerudieresiscyrillic'] = 0x04F8;
	  t['Ygrave'] = 0x1EF2;
	  t['Yhook'] = 0x01B3;
	  t['Yhookabove'] = 0x1EF6;
	  t['Yiarmenian'] = 0x0545;
	  t['Yicyrillic'] = 0x0407;
	  t['Yiwnarmenian'] = 0x0552;
	  t['Ymonospace'] = 0xFF39;
	  t['Ysmall'] = 0xF779;
	  t['Ytilde'] = 0x1EF8;
	  t['Yusbigcyrillic'] = 0x046A;
	  t['Yusbigiotifiedcyrillic'] = 0x046C;
	  t['Yuslittlecyrillic'] = 0x0466;
	  t['Yuslittleiotifiedcyrillic'] = 0x0468;
	  t['Z'] = 0x005A;
	  t['Zaarmenian'] = 0x0536;
	  t['Zacute'] = 0x0179;
	  t['Zcaron'] = 0x017D;
	  t['Zcaronsmall'] = 0xF6FF;
	  t['Zcircle'] = 0x24CF;
	  t['Zcircumflex'] = 0x1E90;
	  t['Zdot'] = 0x017B;
	  t['Zdotaccent'] = 0x017B;
	  t['Zdotbelow'] = 0x1E92;
	  t['Zecyrillic'] = 0x0417;
	  t['Zedescendercyrillic'] = 0x0498;
	  t['Zedieresiscyrillic'] = 0x04DE;
	  t['Zeta'] = 0x0396;
	  t['Zhearmenian'] = 0x053A;
	  t['Zhebrevecyrillic'] = 0x04C1;
	  t['Zhecyrillic'] = 0x0416;
	  t['Zhedescendercyrillic'] = 0x0496;
	  t['Zhedieresiscyrillic'] = 0x04DC;
	  t['Zlinebelow'] = 0x1E94;
	  t['Zmonospace'] = 0xFF3A;
	  t['Zsmall'] = 0xF77A;
	  t['Zstroke'] = 0x01B5;
	  t['a'] = 0x0061;
	  t['aabengali'] = 0x0986;
	  t['aacute'] = 0x00E1;
	  t['aadeva'] = 0x0906;
	  t['aagujarati'] = 0x0A86;
	  t['aagurmukhi'] = 0x0A06;
	  t['aamatragurmukhi'] = 0x0A3E;
	  t['aarusquare'] = 0x3303;
	  t['aavowelsignbengali'] = 0x09BE;
	  t['aavowelsigndeva'] = 0x093E;
	  t['aavowelsigngujarati'] = 0x0ABE;
	  t['abbreviationmarkarmenian'] = 0x055F;
	  t['abbreviationsigndeva'] = 0x0970;
	  t['abengali'] = 0x0985;
	  t['abopomofo'] = 0x311A;
	  t['abreve'] = 0x0103;
	  t['abreveacute'] = 0x1EAF;
	  t['abrevecyrillic'] = 0x04D1;
	  t['abrevedotbelow'] = 0x1EB7;
	  t['abrevegrave'] = 0x1EB1;
	  t['abrevehookabove'] = 0x1EB3;
	  t['abrevetilde'] = 0x1EB5;
	  t['acaron'] = 0x01CE;
	  t['acircle'] = 0x24D0;
	  t['acircumflex'] = 0x00E2;
	  t['acircumflexacute'] = 0x1EA5;
	  t['acircumflexdotbelow'] = 0x1EAD;
	  t['acircumflexgrave'] = 0x1EA7;
	  t['acircumflexhookabove'] = 0x1EA9;
	  t['acircumflextilde'] = 0x1EAB;
	  t['acute'] = 0x00B4;
	  t['acutebelowcmb'] = 0x0317;
	  t['acutecmb'] = 0x0301;
	  t['acutecomb'] = 0x0301;
	  t['acutedeva'] = 0x0954;
	  t['acutelowmod'] = 0x02CF;
	  t['acutetonecmb'] = 0x0341;
	  t['acyrillic'] = 0x0430;
	  t['adblgrave'] = 0x0201;
	  t['addakgurmukhi'] = 0x0A71;
	  t['adeva'] = 0x0905;
	  t['adieresis'] = 0x00E4;
	  t['adieresiscyrillic'] = 0x04D3;
	  t['adieresismacron'] = 0x01DF;
	  t['adotbelow'] = 0x1EA1;
	  t['adotmacron'] = 0x01E1;
	  t['ae'] = 0x00E6;
	  t['aeacute'] = 0x01FD;
	  t['aekorean'] = 0x3150;
	  t['aemacron'] = 0x01E3;
	  t['afii00208'] = 0x2015;
	  t['afii08941'] = 0x20A4;
	  t['afii10017'] = 0x0410;
	  t['afii10018'] = 0x0411;
	  t['afii10019'] = 0x0412;
	  t['afii10020'] = 0x0413;
	  t['afii10021'] = 0x0414;
	  t['afii10022'] = 0x0415;
	  t['afii10023'] = 0x0401;
	  t['afii10024'] = 0x0416;
	  t['afii10025'] = 0x0417;
	  t['afii10026'] = 0x0418;
	  t['afii10027'] = 0x0419;
	  t['afii10028'] = 0x041A;
	  t['afii10029'] = 0x041B;
	  t['afii10030'] = 0x041C;
	  t['afii10031'] = 0x041D;
	  t['afii10032'] = 0x041E;
	  t['afii10033'] = 0x041F;
	  t['afii10034'] = 0x0420;
	  t['afii10035'] = 0x0421;
	  t['afii10036'] = 0x0422;
	  t['afii10037'] = 0x0423;
	  t['afii10038'] = 0x0424;
	  t['afii10039'] = 0x0425;
	  t['afii10040'] = 0x0426;
	  t['afii10041'] = 0x0427;
	  t['afii10042'] = 0x0428;
	  t['afii10043'] = 0x0429;
	  t['afii10044'] = 0x042A;
	  t['afii10045'] = 0x042B;
	  t['afii10046'] = 0x042C;
	  t['afii10047'] = 0x042D;
	  t['afii10048'] = 0x042E;
	  t['afii10049'] = 0x042F;
	  t['afii10050'] = 0x0490;
	  t['afii10051'] = 0x0402;
	  t['afii10052'] = 0x0403;
	  t['afii10053'] = 0x0404;
	  t['afii10054'] = 0x0405;
	  t['afii10055'] = 0x0406;
	  t['afii10056'] = 0x0407;
	  t['afii10057'] = 0x0408;
	  t['afii10058'] = 0x0409;
	  t['afii10059'] = 0x040A;
	  t['afii10060'] = 0x040B;
	  t['afii10061'] = 0x040C;
	  t['afii10062'] = 0x040E;
	  t['afii10063'] = 0xF6C4;
	  t['afii10064'] = 0xF6C5;
	  t['afii10065'] = 0x0430;
	  t['afii10066'] = 0x0431;
	  t['afii10067'] = 0x0432;
	  t['afii10068'] = 0x0433;
	  t['afii10069'] = 0x0434;
	  t['afii10070'] = 0x0435;
	  t['afii10071'] = 0x0451;
	  t['afii10072'] = 0x0436;
	  t['afii10073'] = 0x0437;
	  t['afii10074'] = 0x0438;
	  t['afii10075'] = 0x0439;
	  t['afii10076'] = 0x043A;
	  t['afii10077'] = 0x043B;
	  t['afii10078'] = 0x043C;
	  t['afii10079'] = 0x043D;
	  t['afii10080'] = 0x043E;
	  t['afii10081'] = 0x043F;
	  t['afii10082'] = 0x0440;
	  t['afii10083'] = 0x0441;
	  t['afii10084'] = 0x0442;
	  t['afii10085'] = 0x0443;
	  t['afii10086'] = 0x0444;
	  t['afii10087'] = 0x0445;
	  t['afii10088'] = 0x0446;
	  t['afii10089'] = 0x0447;
	  t['afii10090'] = 0x0448;
	  t['afii10091'] = 0x0449;
	  t['afii10092'] = 0x044A;
	  t['afii10093'] = 0x044B;
	  t['afii10094'] = 0x044C;
	  t['afii10095'] = 0x044D;
	  t['afii10096'] = 0x044E;
	  t['afii10097'] = 0x044F;
	  t['afii10098'] = 0x0491;
	  t['afii10099'] = 0x0452;
	  t['afii10100'] = 0x0453;
	  t['afii10101'] = 0x0454;
	  t['afii10102'] = 0x0455;
	  t['afii10103'] = 0x0456;
	  t['afii10104'] = 0x0457;
	  t['afii10105'] = 0x0458;
	  t['afii10106'] = 0x0459;
	  t['afii10107'] = 0x045A;
	  t['afii10108'] = 0x045B;
	  t['afii10109'] = 0x045C;
	  t['afii10110'] = 0x045E;
	  t['afii10145'] = 0x040F;
	  t['afii10146'] = 0x0462;
	  t['afii10147'] = 0x0472;
	  t['afii10148'] = 0x0474;
	  t['afii10192'] = 0xF6C6;
	  t['afii10193'] = 0x045F;
	  t['afii10194'] = 0x0463;
	  t['afii10195'] = 0x0473;
	  t['afii10196'] = 0x0475;
	  t['afii10831'] = 0xF6C7;
	  t['afii10832'] = 0xF6C8;
	  t['afii10846'] = 0x04D9;
	  t['afii299'] = 0x200E;
	  t['afii300'] = 0x200F;
	  t['afii301'] = 0x200D;
	  t['afii57381'] = 0x066A;
	  t['afii57388'] = 0x060C;
	  t['afii57392'] = 0x0660;
	  t['afii57393'] = 0x0661;
	  t['afii57394'] = 0x0662;
	  t['afii57395'] = 0x0663;
	  t['afii57396'] = 0x0664;
	  t['afii57397'] = 0x0665;
	  t['afii57398'] = 0x0666;
	  t['afii57399'] = 0x0667;
	  t['afii57400'] = 0x0668;
	  t['afii57401'] = 0x0669;
	  t['afii57403'] = 0x061B;
	  t['afii57407'] = 0x061F;
	  t['afii57409'] = 0x0621;
	  t['afii57410'] = 0x0622;
	  t['afii57411'] = 0x0623;
	  t['afii57412'] = 0x0624;
	  t['afii57413'] = 0x0625;
	  t['afii57414'] = 0x0626;
	  t['afii57415'] = 0x0627;
	  t['afii57416'] = 0x0628;
	  t['afii57417'] = 0x0629;
	  t['afii57418'] = 0x062A;
	  t['afii57419'] = 0x062B;
	  t['afii57420'] = 0x062C;
	  t['afii57421'] = 0x062D;
	  t['afii57422'] = 0x062E;
	  t['afii57423'] = 0x062F;
	  t['afii57424'] = 0x0630;
	  t['afii57425'] = 0x0631;
	  t['afii57426'] = 0x0632;
	  t['afii57427'] = 0x0633;
	  t['afii57428'] = 0x0634;
	  t['afii57429'] = 0x0635;
	  t['afii57430'] = 0x0636;
	  t['afii57431'] = 0x0637;
	  t['afii57432'] = 0x0638;
	  t['afii57433'] = 0x0639;
	  t['afii57434'] = 0x063A;
	  t['afii57440'] = 0x0640;
	  t['afii57441'] = 0x0641;
	  t['afii57442'] = 0x0642;
	  t['afii57443'] = 0x0643;
	  t['afii57444'] = 0x0644;
	  t['afii57445'] = 0x0645;
	  t['afii57446'] = 0x0646;
	  t['afii57448'] = 0x0648;
	  t['afii57449'] = 0x0649;
	  t['afii57450'] = 0x064A;
	  t['afii57451'] = 0x064B;
	  t['afii57452'] = 0x064C;
	  t['afii57453'] = 0x064D;
	  t['afii57454'] = 0x064E;
	  t['afii57455'] = 0x064F;
	  t['afii57456'] = 0x0650;
	  t['afii57457'] = 0x0651;
	  t['afii57458'] = 0x0652;
	  t['afii57470'] = 0x0647;
	  t['afii57505'] = 0x06A4;
	  t['afii57506'] = 0x067E;
	  t['afii57507'] = 0x0686;
	  t['afii57508'] = 0x0698;
	  t['afii57509'] = 0x06AF;
	  t['afii57511'] = 0x0679;
	  t['afii57512'] = 0x0688;
	  t['afii57513'] = 0x0691;
	  t['afii57514'] = 0x06BA;
	  t['afii57519'] = 0x06D2;
	  t['afii57534'] = 0x06D5;
	  t['afii57636'] = 0x20AA;
	  t['afii57645'] = 0x05BE;
	  t['afii57658'] = 0x05C3;
	  t['afii57664'] = 0x05D0;
	  t['afii57665'] = 0x05D1;
	  t['afii57666'] = 0x05D2;
	  t['afii57667'] = 0x05D3;
	  t['afii57668'] = 0x05D4;
	  t['afii57669'] = 0x05D5;
	  t['afii57670'] = 0x05D6;
	  t['afii57671'] = 0x05D7;
	  t['afii57672'] = 0x05D8;
	  t['afii57673'] = 0x05D9;
	  t['afii57674'] = 0x05DA;
	  t['afii57675'] = 0x05DB;
	  t['afii57676'] = 0x05DC;
	  t['afii57677'] = 0x05DD;
	  t['afii57678'] = 0x05DE;
	  t['afii57679'] = 0x05DF;
	  t['afii57680'] = 0x05E0;
	  t['afii57681'] = 0x05E1;
	  t['afii57682'] = 0x05E2;
	  t['afii57683'] = 0x05E3;
	  t['afii57684'] = 0x05E4;
	  t['afii57685'] = 0x05E5;
	  t['afii57686'] = 0x05E6;
	  t['afii57687'] = 0x05E7;
	  t['afii57688'] = 0x05E8;
	  t['afii57689'] = 0x05E9;
	  t['afii57690'] = 0x05EA;
	  t['afii57694'] = 0xFB2A;
	  t['afii57695'] = 0xFB2B;
	  t['afii57700'] = 0xFB4B;
	  t['afii57705'] = 0xFB1F;
	  t['afii57716'] = 0x05F0;
	  t['afii57717'] = 0x05F1;
	  t['afii57718'] = 0x05F2;
	  t['afii57723'] = 0xFB35;
	  t['afii57793'] = 0x05B4;
	  t['afii57794'] = 0x05B5;
	  t['afii57795'] = 0x05B6;
	  t['afii57796'] = 0x05BB;
	  t['afii57797'] = 0x05B8;
	  t['afii57798'] = 0x05B7;
	  t['afii57799'] = 0x05B0;
	  t['afii57800'] = 0x05B2;
	  t['afii57801'] = 0x05B1;
	  t['afii57802'] = 0x05B3;
	  t['afii57803'] = 0x05C2;
	  t['afii57804'] = 0x05C1;
	  t['afii57806'] = 0x05B9;
	  t['afii57807'] = 0x05BC;
	  t['afii57839'] = 0x05BD;
	  t['afii57841'] = 0x05BF;
	  t['afii57842'] = 0x05C0;
	  t['afii57929'] = 0x02BC;
	  t['afii61248'] = 0x2105;
	  t['afii61289'] = 0x2113;
	  t['afii61352'] = 0x2116;
	  t['afii61573'] = 0x202C;
	  t['afii61574'] = 0x202D;
	  t['afii61575'] = 0x202E;
	  t['afii61664'] = 0x200C;
	  t['afii63167'] = 0x066D;
	  t['afii64937'] = 0x02BD;
	  t['agrave'] = 0x00E0;
	  t['agujarati'] = 0x0A85;
	  t['agurmukhi'] = 0x0A05;
	  t['ahiragana'] = 0x3042;
	  t['ahookabove'] = 0x1EA3;
	  t['aibengali'] = 0x0990;
	  t['aibopomofo'] = 0x311E;
	  t['aideva'] = 0x0910;
	  t['aiecyrillic'] = 0x04D5;
	  t['aigujarati'] = 0x0A90;
	  t['aigurmukhi'] = 0x0A10;
	  t['aimatragurmukhi'] = 0x0A48;
	  t['ainarabic'] = 0x0639;
	  t['ainfinalarabic'] = 0xFECA;
	  t['aininitialarabic'] = 0xFECB;
	  t['ainmedialarabic'] = 0xFECC;
	  t['ainvertedbreve'] = 0x0203;
	  t['aivowelsignbengali'] = 0x09C8;
	  t['aivowelsigndeva'] = 0x0948;
	  t['aivowelsigngujarati'] = 0x0AC8;
	  t['akatakana'] = 0x30A2;
	  t['akatakanahalfwidth'] = 0xFF71;
	  t['akorean'] = 0x314F;
	  t['alef'] = 0x05D0;
	  t['alefarabic'] = 0x0627;
	  t['alefdageshhebrew'] = 0xFB30;
	  t['aleffinalarabic'] = 0xFE8E;
	  t['alefhamzaabovearabic'] = 0x0623;
	  t['alefhamzaabovefinalarabic'] = 0xFE84;
	  t['alefhamzabelowarabic'] = 0x0625;
	  t['alefhamzabelowfinalarabic'] = 0xFE88;
	  t['alefhebrew'] = 0x05D0;
	  t['aleflamedhebrew'] = 0xFB4F;
	  t['alefmaddaabovearabic'] = 0x0622;
	  t['alefmaddaabovefinalarabic'] = 0xFE82;
	  t['alefmaksuraarabic'] = 0x0649;
	  t['alefmaksurafinalarabic'] = 0xFEF0;
	  t['alefmaksurainitialarabic'] = 0xFEF3;
	  t['alefmaksuramedialarabic'] = 0xFEF4;
	  t['alefpatahhebrew'] = 0xFB2E;
	  t['alefqamatshebrew'] = 0xFB2F;
	  t['aleph'] = 0x2135;
	  t['allequal'] = 0x224C;
	  t['alpha'] = 0x03B1;
	  t['alphatonos'] = 0x03AC;
	  t['amacron'] = 0x0101;
	  t['amonospace'] = 0xFF41;
	  t['ampersand'] = 0x0026;
	  t['ampersandmonospace'] = 0xFF06;
	  t['ampersandsmall'] = 0xF726;
	  t['amsquare'] = 0x33C2;
	  t['anbopomofo'] = 0x3122;
	  t['angbopomofo'] = 0x3124;
	  t['angbracketleft'] = 0x3008;
	  t['angbracketright'] = 0x3009;
	  t['angkhankhuthai'] = 0x0E5A;
	  t['angle'] = 0x2220;
	  t['anglebracketleft'] = 0x3008;
	  t['anglebracketleftvertical'] = 0xFE3F;
	  t['anglebracketright'] = 0x3009;
	  t['anglebracketrightvertical'] = 0xFE40;
	  t['angleleft'] = 0x2329;
	  t['angleright'] = 0x232A;
	  t['angstrom'] = 0x212B;
	  t['anoteleia'] = 0x0387;
	  t['anudattadeva'] = 0x0952;
	  t['anusvarabengali'] = 0x0982;
	  t['anusvaradeva'] = 0x0902;
	  t['anusvaragujarati'] = 0x0A82;
	  t['aogonek'] = 0x0105;
	  t['apaatosquare'] = 0x3300;
	  t['aparen'] = 0x249C;
	  t['apostrophearmenian'] = 0x055A;
	  t['apostrophemod'] = 0x02BC;
	  t['apple'] = 0xF8FF;
	  t['approaches'] = 0x2250;
	  t['approxequal'] = 0x2248;
	  t['approxequalorimage'] = 0x2252;
	  t['approximatelyequal'] = 0x2245;
	  t['araeaekorean'] = 0x318E;
	  t['araeakorean'] = 0x318D;
	  t['arc'] = 0x2312;
	  t['arighthalfring'] = 0x1E9A;
	  t['aring'] = 0x00E5;
	  t['aringacute'] = 0x01FB;
	  t['aringbelow'] = 0x1E01;
	  t['arrowboth'] = 0x2194;
	  t['arrowdashdown'] = 0x21E3;
	  t['arrowdashleft'] = 0x21E0;
	  t['arrowdashright'] = 0x21E2;
	  t['arrowdashup'] = 0x21E1;
	  t['arrowdblboth'] = 0x21D4;
	  t['arrowdbldown'] = 0x21D3;
	  t['arrowdblleft'] = 0x21D0;
	  t['arrowdblright'] = 0x21D2;
	  t['arrowdblup'] = 0x21D1;
	  t['arrowdown'] = 0x2193;
	  t['arrowdownleft'] = 0x2199;
	  t['arrowdownright'] = 0x2198;
	  t['arrowdownwhite'] = 0x21E9;
	  t['arrowheaddownmod'] = 0x02C5;
	  t['arrowheadleftmod'] = 0x02C2;
	  t['arrowheadrightmod'] = 0x02C3;
	  t['arrowheadupmod'] = 0x02C4;
	  t['arrowhorizex'] = 0xF8E7;
	  t['arrowleft'] = 0x2190;
	  t['arrowleftdbl'] = 0x21D0;
	  t['arrowleftdblstroke'] = 0x21CD;
	  t['arrowleftoverright'] = 0x21C6;
	  t['arrowleftwhite'] = 0x21E6;
	  t['arrowright'] = 0x2192;
	  t['arrowrightdblstroke'] = 0x21CF;
	  t['arrowrightheavy'] = 0x279E;
	  t['arrowrightoverleft'] = 0x21C4;
	  t['arrowrightwhite'] = 0x21E8;
	  t['arrowtableft'] = 0x21E4;
	  t['arrowtabright'] = 0x21E5;
	  t['arrowup'] = 0x2191;
	  t['arrowupdn'] = 0x2195;
	  t['arrowupdnbse'] = 0x21A8;
	  t['arrowupdownbase'] = 0x21A8;
	  t['arrowupleft'] = 0x2196;
	  t['arrowupleftofdown'] = 0x21C5;
	  t['arrowupright'] = 0x2197;
	  t['arrowupwhite'] = 0x21E7;
	  t['arrowvertex'] = 0xF8E6;
	  t['asciicircum'] = 0x005E;
	  t['asciicircummonospace'] = 0xFF3E;
	  t['asciitilde'] = 0x007E;
	  t['asciitildemonospace'] = 0xFF5E;
	  t['ascript'] = 0x0251;
	  t['ascriptturned'] = 0x0252;
	  t['asmallhiragana'] = 0x3041;
	  t['asmallkatakana'] = 0x30A1;
	  t['asmallkatakanahalfwidth'] = 0xFF67;
	  t['asterisk'] = 0x002A;
	  t['asteriskaltonearabic'] = 0x066D;
	  t['asteriskarabic'] = 0x066D;
	  t['asteriskmath'] = 0x2217;
	  t['asteriskmonospace'] = 0xFF0A;
	  t['asterisksmall'] = 0xFE61;
	  t['asterism'] = 0x2042;
	  t['asuperior'] = 0xF6E9;
	  t['asymptoticallyequal'] = 0x2243;
	  t['at'] = 0x0040;
	  t['atilde'] = 0x00E3;
	  t['atmonospace'] = 0xFF20;
	  t['atsmall'] = 0xFE6B;
	  t['aturned'] = 0x0250;
	  t['aubengali'] = 0x0994;
	  t['aubopomofo'] = 0x3120;
	  t['audeva'] = 0x0914;
	  t['augujarati'] = 0x0A94;
	  t['augurmukhi'] = 0x0A14;
	  t['aulengthmarkbengali'] = 0x09D7;
	  t['aumatragurmukhi'] = 0x0A4C;
	  t['auvowelsignbengali'] = 0x09CC;
	  t['auvowelsigndeva'] = 0x094C;
	  t['auvowelsigngujarati'] = 0x0ACC;
	  t['avagrahadeva'] = 0x093D;
	  t['aybarmenian'] = 0x0561;
	  t['ayin'] = 0x05E2;
	  t['ayinaltonehebrew'] = 0xFB20;
	  t['ayinhebrew'] = 0x05E2;
	  t['b'] = 0x0062;
	  t['babengali'] = 0x09AC;
	  t['backslash'] = 0x005C;
	  t['backslashmonospace'] = 0xFF3C;
	  t['badeva'] = 0x092C;
	  t['bagujarati'] = 0x0AAC;
	  t['bagurmukhi'] = 0x0A2C;
	  t['bahiragana'] = 0x3070;
	  t['bahtthai'] = 0x0E3F;
	  t['bakatakana'] = 0x30D0;
	  t['bar'] = 0x007C;
	  t['barmonospace'] = 0xFF5C;
	  t['bbopomofo'] = 0x3105;
	  t['bcircle'] = 0x24D1;
	  t['bdotaccent'] = 0x1E03;
	  t['bdotbelow'] = 0x1E05;
	  t['beamedsixteenthnotes'] = 0x266C;
	  t['because'] = 0x2235;
	  t['becyrillic'] = 0x0431;
	  t['beharabic'] = 0x0628;
	  t['behfinalarabic'] = 0xFE90;
	  t['behinitialarabic'] = 0xFE91;
	  t['behiragana'] = 0x3079;
	  t['behmedialarabic'] = 0xFE92;
	  t['behmeeminitialarabic'] = 0xFC9F;
	  t['behmeemisolatedarabic'] = 0xFC08;
	  t['behnoonfinalarabic'] = 0xFC6D;
	  t['bekatakana'] = 0x30D9;
	  t['benarmenian'] = 0x0562;
	  t['bet'] = 0x05D1;
	  t['beta'] = 0x03B2;
	  t['betasymbolgreek'] = 0x03D0;
	  t['betdagesh'] = 0xFB31;
	  t['betdageshhebrew'] = 0xFB31;
	  t['bethebrew'] = 0x05D1;
	  t['betrafehebrew'] = 0xFB4C;
	  t['bhabengali'] = 0x09AD;
	  t['bhadeva'] = 0x092D;
	  t['bhagujarati'] = 0x0AAD;
	  t['bhagurmukhi'] = 0x0A2D;
	  t['bhook'] = 0x0253;
	  t['bihiragana'] = 0x3073;
	  t['bikatakana'] = 0x30D3;
	  t['bilabialclick'] = 0x0298;
	  t['bindigurmukhi'] = 0x0A02;
	  t['birusquare'] = 0x3331;
	  t['blackcircle'] = 0x25CF;
	  t['blackdiamond'] = 0x25C6;
	  t['blackdownpointingtriangle'] = 0x25BC;
	  t['blackleftpointingpointer'] = 0x25C4;
	  t['blackleftpointingtriangle'] = 0x25C0;
	  t['blacklenticularbracketleft'] = 0x3010;
	  t['blacklenticularbracketleftvertical'] = 0xFE3B;
	  t['blacklenticularbracketright'] = 0x3011;
	  t['blacklenticularbracketrightvertical'] = 0xFE3C;
	  t['blacklowerlefttriangle'] = 0x25E3;
	  t['blacklowerrighttriangle'] = 0x25E2;
	  t['blackrectangle'] = 0x25AC;
	  t['blackrightpointingpointer'] = 0x25BA;
	  t['blackrightpointingtriangle'] = 0x25B6;
	  t['blacksmallsquare'] = 0x25AA;
	  t['blacksmilingface'] = 0x263B;
	  t['blacksquare'] = 0x25A0;
	  t['blackstar'] = 0x2605;
	  t['blackupperlefttriangle'] = 0x25E4;
	  t['blackupperrighttriangle'] = 0x25E5;
	  t['blackuppointingsmalltriangle'] = 0x25B4;
	  t['blackuppointingtriangle'] = 0x25B2;
	  t['blank'] = 0x2423;
	  t['blinebelow'] = 0x1E07;
	  t['block'] = 0x2588;
	  t['bmonospace'] = 0xFF42;
	  t['bobaimaithai'] = 0x0E1A;
	  t['bohiragana'] = 0x307C;
	  t['bokatakana'] = 0x30DC;
	  t['bparen'] = 0x249D;
	  t['bqsquare'] = 0x33C3;
	  t['braceex'] = 0xF8F4;
	  t['braceleft'] = 0x007B;
	  t['braceleftbt'] = 0xF8F3;
	  t['braceleftmid'] = 0xF8F2;
	  t['braceleftmonospace'] = 0xFF5B;
	  t['braceleftsmall'] = 0xFE5B;
	  t['bracelefttp'] = 0xF8F1;
	  t['braceleftvertical'] = 0xFE37;
	  t['braceright'] = 0x007D;
	  t['bracerightbt'] = 0xF8FE;
	  t['bracerightmid'] = 0xF8FD;
	  t['bracerightmonospace'] = 0xFF5D;
	  t['bracerightsmall'] = 0xFE5C;
	  t['bracerighttp'] = 0xF8FC;
	  t['bracerightvertical'] = 0xFE38;
	  t['bracketleft'] = 0x005B;
	  t['bracketleftbt'] = 0xF8F0;
	  t['bracketleftex'] = 0xF8EF;
	  t['bracketleftmonospace'] = 0xFF3B;
	  t['bracketlefttp'] = 0xF8EE;
	  t['bracketright'] = 0x005D;
	  t['bracketrightbt'] = 0xF8FB;
	  t['bracketrightex'] = 0xF8FA;
	  t['bracketrightmonospace'] = 0xFF3D;
	  t['bracketrighttp'] = 0xF8F9;
	  t['breve'] = 0x02D8;
	  t['brevebelowcmb'] = 0x032E;
	  t['brevecmb'] = 0x0306;
	  t['breveinvertedbelowcmb'] = 0x032F;
	  t['breveinvertedcmb'] = 0x0311;
	  t['breveinverteddoublecmb'] = 0x0361;
	  t['bridgebelowcmb'] = 0x032A;
	  t['bridgeinvertedbelowcmb'] = 0x033A;
	  t['brokenbar'] = 0x00A6;
	  t['bstroke'] = 0x0180;
	  t['bsuperior'] = 0xF6EA;
	  t['btopbar'] = 0x0183;
	  t['buhiragana'] = 0x3076;
	  t['bukatakana'] = 0x30D6;
	  t['bullet'] = 0x2022;
	  t['bulletinverse'] = 0x25D8;
	  t['bulletoperator'] = 0x2219;
	  t['bullseye'] = 0x25CE;
	  t['c'] = 0x0063;
	  t['caarmenian'] = 0x056E;
	  t['cabengali'] = 0x099A;
	  t['cacute'] = 0x0107;
	  t['cadeva'] = 0x091A;
	  t['cagujarati'] = 0x0A9A;
	  t['cagurmukhi'] = 0x0A1A;
	  t['calsquare'] = 0x3388;
	  t['candrabindubengali'] = 0x0981;
	  t['candrabinducmb'] = 0x0310;
	  t['candrabindudeva'] = 0x0901;
	  t['candrabindugujarati'] = 0x0A81;
	  t['capslock'] = 0x21EA;
	  t['careof'] = 0x2105;
	  t['caron'] = 0x02C7;
	  t['caronbelowcmb'] = 0x032C;
	  t['caroncmb'] = 0x030C;
	  t['carriagereturn'] = 0x21B5;
	  t['cbopomofo'] = 0x3118;
	  t['ccaron'] = 0x010D;
	  t['ccedilla'] = 0x00E7;
	  t['ccedillaacute'] = 0x1E09;
	  t['ccircle'] = 0x24D2;
	  t['ccircumflex'] = 0x0109;
	  t['ccurl'] = 0x0255;
	  t['cdot'] = 0x010B;
	  t['cdotaccent'] = 0x010B;
	  t['cdsquare'] = 0x33C5;
	  t['cedilla'] = 0x00B8;
	  t['cedillacmb'] = 0x0327;
	  t['cent'] = 0x00A2;
	  t['centigrade'] = 0x2103;
	  t['centinferior'] = 0xF6DF;
	  t['centmonospace'] = 0xFFE0;
	  t['centoldstyle'] = 0xF7A2;
	  t['centsuperior'] = 0xF6E0;
	  t['chaarmenian'] = 0x0579;
	  t['chabengali'] = 0x099B;
	  t['chadeva'] = 0x091B;
	  t['chagujarati'] = 0x0A9B;
	  t['chagurmukhi'] = 0x0A1B;
	  t['chbopomofo'] = 0x3114;
	  t['cheabkhasiancyrillic'] = 0x04BD;
	  t['checkmark'] = 0x2713;
	  t['checyrillic'] = 0x0447;
	  t['chedescenderabkhasiancyrillic'] = 0x04BF;
	  t['chedescendercyrillic'] = 0x04B7;
	  t['chedieresiscyrillic'] = 0x04F5;
	  t['cheharmenian'] = 0x0573;
	  t['chekhakassiancyrillic'] = 0x04CC;
	  t['cheverticalstrokecyrillic'] = 0x04B9;
	  t['chi'] = 0x03C7;
	  t['chieuchacirclekorean'] = 0x3277;
	  t['chieuchaparenkorean'] = 0x3217;
	  t['chieuchcirclekorean'] = 0x3269;
	  t['chieuchkorean'] = 0x314A;
	  t['chieuchparenkorean'] = 0x3209;
	  t['chochangthai'] = 0x0E0A;
	  t['chochanthai'] = 0x0E08;
	  t['chochingthai'] = 0x0E09;
	  t['chochoethai'] = 0x0E0C;
	  t['chook'] = 0x0188;
	  t['cieucacirclekorean'] = 0x3276;
	  t['cieucaparenkorean'] = 0x3216;
	  t['cieuccirclekorean'] = 0x3268;
	  t['cieuckorean'] = 0x3148;
	  t['cieucparenkorean'] = 0x3208;
	  t['cieucuparenkorean'] = 0x321C;
	  t['circle'] = 0x25CB;
	  t['circlecopyrt'] = 0x00A9;
	  t['circlemultiply'] = 0x2297;
	  t['circleot'] = 0x2299;
	  t['circleplus'] = 0x2295;
	  t['circlepostalmark'] = 0x3036;
	  t['circlewithlefthalfblack'] = 0x25D0;
	  t['circlewithrighthalfblack'] = 0x25D1;
	  t['circumflex'] = 0x02C6;
	  t['circumflexbelowcmb'] = 0x032D;
	  t['circumflexcmb'] = 0x0302;
	  t['clear'] = 0x2327;
	  t['clickalveolar'] = 0x01C2;
	  t['clickdental'] = 0x01C0;
	  t['clicklateral'] = 0x01C1;
	  t['clickretroflex'] = 0x01C3;
	  t['club'] = 0x2663;
	  t['clubsuitblack'] = 0x2663;
	  t['clubsuitwhite'] = 0x2667;
	  t['cmcubedsquare'] = 0x33A4;
	  t['cmonospace'] = 0xFF43;
	  t['cmsquaredsquare'] = 0x33A0;
	  t['coarmenian'] = 0x0581;
	  t['colon'] = 0x003A;
	  t['colonmonetary'] = 0x20A1;
	  t['colonmonospace'] = 0xFF1A;
	  t['colonsign'] = 0x20A1;
	  t['colonsmall'] = 0xFE55;
	  t['colontriangularhalfmod'] = 0x02D1;
	  t['colontriangularmod'] = 0x02D0;
	  t['comma'] = 0x002C;
	  t['commaabovecmb'] = 0x0313;
	  t['commaaboverightcmb'] = 0x0315;
	  t['commaaccent'] = 0xF6C3;
	  t['commaarabic'] = 0x060C;
	  t['commaarmenian'] = 0x055D;
	  t['commainferior'] = 0xF6E1;
	  t['commamonospace'] = 0xFF0C;
	  t['commareversedabovecmb'] = 0x0314;
	  t['commareversedmod'] = 0x02BD;
	  t['commasmall'] = 0xFE50;
	  t['commasuperior'] = 0xF6E2;
	  t['commaturnedabovecmb'] = 0x0312;
	  t['commaturnedmod'] = 0x02BB;
	  t['compass'] = 0x263C;
	  t['congruent'] = 0x2245;
	  t['contourintegral'] = 0x222E;
	  t['control'] = 0x2303;
	  t['controlACK'] = 0x0006;
	  t['controlBEL'] = 0x0007;
	  t['controlBS'] = 0x0008;
	  t['controlCAN'] = 0x0018;
	  t['controlCR'] = 0x000D;
	  t['controlDC1'] = 0x0011;
	  t['controlDC2'] = 0x0012;
	  t['controlDC3'] = 0x0013;
	  t['controlDC4'] = 0x0014;
	  t['controlDEL'] = 0x007F;
	  t['controlDLE'] = 0x0010;
	  t['controlEM'] = 0x0019;
	  t['controlENQ'] = 0x0005;
	  t['controlEOT'] = 0x0004;
	  t['controlESC'] = 0x001B;
	  t['controlETB'] = 0x0017;
	  t['controlETX'] = 0x0003;
	  t['controlFF'] = 0x000C;
	  t['controlFS'] = 0x001C;
	  t['controlGS'] = 0x001D;
	  t['controlHT'] = 0x0009;
	  t['controlLF'] = 0x000A;
	  t['controlNAK'] = 0x0015;
	  t['controlNULL'] = 0x0000;
	  t['controlRS'] = 0x001E;
	  t['controlSI'] = 0x000F;
	  t['controlSO'] = 0x000E;
	  t['controlSOT'] = 0x0002;
	  t['controlSTX'] = 0x0001;
	  t['controlSUB'] = 0x001A;
	  t['controlSYN'] = 0x0016;
	  t['controlUS'] = 0x001F;
	  t['controlVT'] = 0x000B;
	  t['copyright'] = 0x00A9;
	  t['copyrightsans'] = 0xF8E9;
	  t['copyrightserif'] = 0xF6D9;
	  t['cornerbracketleft'] = 0x300C;
	  t['cornerbracketlefthalfwidth'] = 0xFF62;
	  t['cornerbracketleftvertical'] = 0xFE41;
	  t['cornerbracketright'] = 0x300D;
	  t['cornerbracketrighthalfwidth'] = 0xFF63;
	  t['cornerbracketrightvertical'] = 0xFE42;
	  t['corporationsquare'] = 0x337F;
	  t['cosquare'] = 0x33C7;
	  t['coverkgsquare'] = 0x33C6;
	  t['cparen'] = 0x249E;
	  t['cruzeiro'] = 0x20A2;
	  t['cstretched'] = 0x0297;
	  t['curlyand'] = 0x22CF;
	  t['curlyor'] = 0x22CE;
	  t['currency'] = 0x00A4;
	  t['cyrBreve'] = 0xF6D1;
	  t['cyrFlex'] = 0xF6D2;
	  t['cyrbreve'] = 0xF6D4;
	  t['cyrflex'] = 0xF6D5;
	  t['d'] = 0x0064;
	  t['daarmenian'] = 0x0564;
	  t['dabengali'] = 0x09A6;
	  t['dadarabic'] = 0x0636;
	  t['dadeva'] = 0x0926;
	  t['dadfinalarabic'] = 0xFEBE;
	  t['dadinitialarabic'] = 0xFEBF;
	  t['dadmedialarabic'] = 0xFEC0;
	  t['dagesh'] = 0x05BC;
	  t['dageshhebrew'] = 0x05BC;
	  t['dagger'] = 0x2020;
	  t['daggerdbl'] = 0x2021;
	  t['dagujarati'] = 0x0AA6;
	  t['dagurmukhi'] = 0x0A26;
	  t['dahiragana'] = 0x3060;
	  t['dakatakana'] = 0x30C0;
	  t['dalarabic'] = 0x062F;
	  t['dalet'] = 0x05D3;
	  t['daletdagesh'] = 0xFB33;
	  t['daletdageshhebrew'] = 0xFB33;
	  t['dalethebrew'] = 0x05D3;
	  t['dalfinalarabic'] = 0xFEAA;
	  t['dammaarabic'] = 0x064F;
	  t['dammalowarabic'] = 0x064F;
	  t['dammatanaltonearabic'] = 0x064C;
	  t['dammatanarabic'] = 0x064C;
	  t['danda'] = 0x0964;
	  t['dargahebrew'] = 0x05A7;
	  t['dargalefthebrew'] = 0x05A7;
	  t['dasiapneumatacyrilliccmb'] = 0x0485;
	  t['dblGrave'] = 0xF6D3;
	  t['dblanglebracketleft'] = 0x300A;
	  t['dblanglebracketleftvertical'] = 0xFE3D;
	  t['dblanglebracketright'] = 0x300B;
	  t['dblanglebracketrightvertical'] = 0xFE3E;
	  t['dblarchinvertedbelowcmb'] = 0x032B;
	  t['dblarrowleft'] = 0x21D4;
	  t['dblarrowright'] = 0x21D2;
	  t['dbldanda'] = 0x0965;
	  t['dblgrave'] = 0xF6D6;
	  t['dblgravecmb'] = 0x030F;
	  t['dblintegral'] = 0x222C;
	  t['dbllowline'] = 0x2017;
	  t['dbllowlinecmb'] = 0x0333;
	  t['dbloverlinecmb'] = 0x033F;
	  t['dblprimemod'] = 0x02BA;
	  t['dblverticalbar'] = 0x2016;
	  t['dblverticallineabovecmb'] = 0x030E;
	  t['dbopomofo'] = 0x3109;
	  t['dbsquare'] = 0x33C8;
	  t['dcaron'] = 0x010F;
	  t['dcedilla'] = 0x1E11;
	  t['dcircle'] = 0x24D3;
	  t['dcircumflexbelow'] = 0x1E13;
	  t['dcroat'] = 0x0111;
	  t['ddabengali'] = 0x09A1;
	  t['ddadeva'] = 0x0921;
	  t['ddagujarati'] = 0x0AA1;
	  t['ddagurmukhi'] = 0x0A21;
	  t['ddalarabic'] = 0x0688;
	  t['ddalfinalarabic'] = 0xFB89;
	  t['dddhadeva'] = 0x095C;
	  t['ddhabengali'] = 0x09A2;
	  t['ddhadeva'] = 0x0922;
	  t['ddhagujarati'] = 0x0AA2;
	  t['ddhagurmukhi'] = 0x0A22;
	  t['ddotaccent'] = 0x1E0B;
	  t['ddotbelow'] = 0x1E0D;
	  t['decimalseparatorarabic'] = 0x066B;
	  t['decimalseparatorpersian'] = 0x066B;
	  t['decyrillic'] = 0x0434;
	  t['degree'] = 0x00B0;
	  t['dehihebrew'] = 0x05AD;
	  t['dehiragana'] = 0x3067;
	  t['deicoptic'] = 0x03EF;
	  t['dekatakana'] = 0x30C7;
	  t['deleteleft'] = 0x232B;
	  t['deleteright'] = 0x2326;
	  t['delta'] = 0x03B4;
	  t['deltaturned'] = 0x018D;
	  t['denominatorminusonenumeratorbengali'] = 0x09F8;
	  t['dezh'] = 0x02A4;
	  t['dhabengali'] = 0x09A7;
	  t['dhadeva'] = 0x0927;
	  t['dhagujarati'] = 0x0AA7;
	  t['dhagurmukhi'] = 0x0A27;
	  t['dhook'] = 0x0257;
	  t['dialytikatonos'] = 0x0385;
	  t['dialytikatonoscmb'] = 0x0344;
	  t['diamond'] = 0x2666;
	  t['diamondsuitwhite'] = 0x2662;
	  t['dieresis'] = 0x00A8;
	  t['dieresisacute'] = 0xF6D7;
	  t['dieresisbelowcmb'] = 0x0324;
	  t['dieresiscmb'] = 0x0308;
	  t['dieresisgrave'] = 0xF6D8;
	  t['dieresistonos'] = 0x0385;
	  t['dihiragana'] = 0x3062;
	  t['dikatakana'] = 0x30C2;
	  t['dittomark'] = 0x3003;
	  t['divide'] = 0x00F7;
	  t['divides'] = 0x2223;
	  t['divisionslash'] = 0x2215;
	  t['djecyrillic'] = 0x0452;
	  t['dkshade'] = 0x2593;
	  t['dlinebelow'] = 0x1E0F;
	  t['dlsquare'] = 0x3397;
	  t['dmacron'] = 0x0111;
	  t['dmonospace'] = 0xFF44;
	  t['dnblock'] = 0x2584;
	  t['dochadathai'] = 0x0E0E;
	  t['dodekthai'] = 0x0E14;
	  t['dohiragana'] = 0x3069;
	  t['dokatakana'] = 0x30C9;
	  t['dollar'] = 0x0024;
	  t['dollarinferior'] = 0xF6E3;
	  t['dollarmonospace'] = 0xFF04;
	  t['dollaroldstyle'] = 0xF724;
	  t['dollarsmall'] = 0xFE69;
	  t['dollarsuperior'] = 0xF6E4;
	  t['dong'] = 0x20AB;
	  t['dorusquare'] = 0x3326;
	  t['dotaccent'] = 0x02D9;
	  t['dotaccentcmb'] = 0x0307;
	  t['dotbelowcmb'] = 0x0323;
	  t['dotbelowcomb'] = 0x0323;
	  t['dotkatakana'] = 0x30FB;
	  t['dotlessi'] = 0x0131;
	  t['dotlessj'] = 0xF6BE;
	  t['dotlessjstrokehook'] = 0x0284;
	  t['dotmath'] = 0x22C5;
	  t['dottedcircle'] = 0x25CC;
	  t['doubleyodpatah'] = 0xFB1F;
	  t['doubleyodpatahhebrew'] = 0xFB1F;
	  t['downtackbelowcmb'] = 0x031E;
	  t['downtackmod'] = 0x02D5;
	  t['dparen'] = 0x249F;
	  t['dsuperior'] = 0xF6EB;
	  t['dtail'] = 0x0256;
	  t['dtopbar'] = 0x018C;
	  t['duhiragana'] = 0x3065;
	  t['dukatakana'] = 0x30C5;
	  t['dz'] = 0x01F3;
	  t['dzaltone'] = 0x02A3;
	  t['dzcaron'] = 0x01C6;
	  t['dzcurl'] = 0x02A5;
	  t['dzeabkhasiancyrillic'] = 0x04E1;
	  t['dzecyrillic'] = 0x0455;
	  t['dzhecyrillic'] = 0x045F;
	  t['e'] = 0x0065;
	  t['eacute'] = 0x00E9;
	  t['earth'] = 0x2641;
	  t['ebengali'] = 0x098F;
	  t['ebopomofo'] = 0x311C;
	  t['ebreve'] = 0x0115;
	  t['ecandradeva'] = 0x090D;
	  t['ecandragujarati'] = 0x0A8D;
	  t['ecandravowelsigndeva'] = 0x0945;
	  t['ecandravowelsigngujarati'] = 0x0AC5;
	  t['ecaron'] = 0x011B;
	  t['ecedillabreve'] = 0x1E1D;
	  t['echarmenian'] = 0x0565;
	  t['echyiwnarmenian'] = 0x0587;
	  t['ecircle'] = 0x24D4;
	  t['ecircumflex'] = 0x00EA;
	  t['ecircumflexacute'] = 0x1EBF;
	  t['ecircumflexbelow'] = 0x1E19;
	  t['ecircumflexdotbelow'] = 0x1EC7;
	  t['ecircumflexgrave'] = 0x1EC1;
	  t['ecircumflexhookabove'] = 0x1EC3;
	  t['ecircumflextilde'] = 0x1EC5;
	  t['ecyrillic'] = 0x0454;
	  t['edblgrave'] = 0x0205;
	  t['edeva'] = 0x090F;
	  t['edieresis'] = 0x00EB;
	  t['edot'] = 0x0117;
	  t['edotaccent'] = 0x0117;
	  t['edotbelow'] = 0x1EB9;
	  t['eegurmukhi'] = 0x0A0F;
	  t['eematragurmukhi'] = 0x0A47;
	  t['efcyrillic'] = 0x0444;
	  t['egrave'] = 0x00E8;
	  t['egujarati'] = 0x0A8F;
	  t['eharmenian'] = 0x0567;
	  t['ehbopomofo'] = 0x311D;
	  t['ehiragana'] = 0x3048;
	  t['ehookabove'] = 0x1EBB;
	  t['eibopomofo'] = 0x311F;
	  t['eight'] = 0x0038;
	  t['eightarabic'] = 0x0668;
	  t['eightbengali'] = 0x09EE;
	  t['eightcircle'] = 0x2467;
	  t['eightcircleinversesansserif'] = 0x2791;
	  t['eightdeva'] = 0x096E;
	  t['eighteencircle'] = 0x2471;
	  t['eighteenparen'] = 0x2485;
	  t['eighteenperiod'] = 0x2499;
	  t['eightgujarati'] = 0x0AEE;
	  t['eightgurmukhi'] = 0x0A6E;
	  t['eighthackarabic'] = 0x0668;
	  t['eighthangzhou'] = 0x3028;
	  t['eighthnotebeamed'] = 0x266B;
	  t['eightideographicparen'] = 0x3227;
	  t['eightinferior'] = 0x2088;
	  t['eightmonospace'] = 0xFF18;
	  t['eightoldstyle'] = 0xF738;
	  t['eightparen'] = 0x247B;
	  t['eightperiod'] = 0x248F;
	  t['eightpersian'] = 0x06F8;
	  t['eightroman'] = 0x2177;
	  t['eightsuperior'] = 0x2078;
	  t['eightthai'] = 0x0E58;
	  t['einvertedbreve'] = 0x0207;
	  t['eiotifiedcyrillic'] = 0x0465;
	  t['ekatakana'] = 0x30A8;
	  t['ekatakanahalfwidth'] = 0xFF74;
	  t['ekonkargurmukhi'] = 0x0A74;
	  t['ekorean'] = 0x3154;
	  t['elcyrillic'] = 0x043B;
	  t['element'] = 0x2208;
	  t['elevencircle'] = 0x246A;
	  t['elevenparen'] = 0x247E;
	  t['elevenperiod'] = 0x2492;
	  t['elevenroman'] = 0x217A;
	  t['ellipsis'] = 0x2026;
	  t['ellipsisvertical'] = 0x22EE;
	  t['emacron'] = 0x0113;
	  t['emacronacute'] = 0x1E17;
	  t['emacrongrave'] = 0x1E15;
	  t['emcyrillic'] = 0x043C;
	  t['emdash'] = 0x2014;
	  t['emdashvertical'] = 0xFE31;
	  t['emonospace'] = 0xFF45;
	  t['emphasismarkarmenian'] = 0x055B;
	  t['emptyset'] = 0x2205;
	  t['enbopomofo'] = 0x3123;
	  t['encyrillic'] = 0x043D;
	  t['endash'] = 0x2013;
	  t['endashvertical'] = 0xFE32;
	  t['endescendercyrillic'] = 0x04A3;
	  t['eng'] = 0x014B;
	  t['engbopomofo'] = 0x3125;
	  t['enghecyrillic'] = 0x04A5;
	  t['enhookcyrillic'] = 0x04C8;
	  t['enspace'] = 0x2002;
	  t['eogonek'] = 0x0119;
	  t['eokorean'] = 0x3153;
	  t['eopen'] = 0x025B;
	  t['eopenclosed'] = 0x029A;
	  t['eopenreversed'] = 0x025C;
	  t['eopenreversedclosed'] = 0x025E;
	  t['eopenreversedhook'] = 0x025D;
	  t['eparen'] = 0x24A0;
	  t['epsilon'] = 0x03B5;
	  t['epsilontonos'] = 0x03AD;
	  t['equal'] = 0x003D;
	  t['equalmonospace'] = 0xFF1D;
	  t['equalsmall'] = 0xFE66;
	  t['equalsuperior'] = 0x207C;
	  t['equivalence'] = 0x2261;
	  t['erbopomofo'] = 0x3126;
	  t['ercyrillic'] = 0x0440;
	  t['ereversed'] = 0x0258;
	  t['ereversedcyrillic'] = 0x044D;
	  t['escyrillic'] = 0x0441;
	  t['esdescendercyrillic'] = 0x04AB;
	  t['esh'] = 0x0283;
	  t['eshcurl'] = 0x0286;
	  t['eshortdeva'] = 0x090E;
	  t['eshortvowelsigndeva'] = 0x0946;
	  t['eshreversedloop'] = 0x01AA;
	  t['eshsquatreversed'] = 0x0285;
	  t['esmallhiragana'] = 0x3047;
	  t['esmallkatakana'] = 0x30A7;
	  t['esmallkatakanahalfwidth'] = 0xFF6A;
	  t['estimated'] = 0x212E;
	  t['esuperior'] = 0xF6EC;
	  t['eta'] = 0x03B7;
	  t['etarmenian'] = 0x0568;
	  t['etatonos'] = 0x03AE;
	  t['eth'] = 0x00F0;
	  t['etilde'] = 0x1EBD;
	  t['etildebelow'] = 0x1E1B;
	  t['etnahtafoukhhebrew'] = 0x0591;
	  t['etnahtafoukhlefthebrew'] = 0x0591;
	  t['etnahtahebrew'] = 0x0591;
	  t['etnahtalefthebrew'] = 0x0591;
	  t['eturned'] = 0x01DD;
	  t['eukorean'] = 0x3161;
	  t['euro'] = 0x20AC;
	  t['evowelsignbengali'] = 0x09C7;
	  t['evowelsigndeva'] = 0x0947;
	  t['evowelsigngujarati'] = 0x0AC7;
	  t['exclam'] = 0x0021;
	  t['exclamarmenian'] = 0x055C;
	  t['exclamdbl'] = 0x203C;
	  t['exclamdown'] = 0x00A1;
	  t['exclamdownsmall'] = 0xF7A1;
	  t['exclammonospace'] = 0xFF01;
	  t['exclamsmall'] = 0xF721;
	  t['existential'] = 0x2203;
	  t['ezh'] = 0x0292;
	  t['ezhcaron'] = 0x01EF;
	  t['ezhcurl'] = 0x0293;
	  t['ezhreversed'] = 0x01B9;
	  t['ezhtail'] = 0x01BA;
	  t['f'] = 0x0066;
	  t['fadeva'] = 0x095E;
	  t['fagurmukhi'] = 0x0A5E;
	  t['fahrenheit'] = 0x2109;
	  t['fathaarabic'] = 0x064E;
	  t['fathalowarabic'] = 0x064E;
	  t['fathatanarabic'] = 0x064B;
	  t['fbopomofo'] = 0x3108;
	  t['fcircle'] = 0x24D5;
	  t['fdotaccent'] = 0x1E1F;
	  t['feharabic'] = 0x0641;
	  t['feharmenian'] = 0x0586;
	  t['fehfinalarabic'] = 0xFED2;
	  t['fehinitialarabic'] = 0xFED3;
	  t['fehmedialarabic'] = 0xFED4;
	  t['feicoptic'] = 0x03E5;
	  t['female'] = 0x2640;
	  t['ff'] = 0xFB00;
	  t['ffi'] = 0xFB03;
	  t['ffl'] = 0xFB04;
	  t['fi'] = 0xFB01;
	  t['fifteencircle'] = 0x246E;
	  t['fifteenparen'] = 0x2482;
	  t['fifteenperiod'] = 0x2496;
	  t['figuredash'] = 0x2012;
	  t['filledbox'] = 0x25A0;
	  t['filledrect'] = 0x25AC;
	  t['finalkaf'] = 0x05DA;
	  t['finalkafdagesh'] = 0xFB3A;
	  t['finalkafdageshhebrew'] = 0xFB3A;
	  t['finalkafhebrew'] = 0x05DA;
	  t['finalmem'] = 0x05DD;
	  t['finalmemhebrew'] = 0x05DD;
	  t['finalnun'] = 0x05DF;
	  t['finalnunhebrew'] = 0x05DF;
	  t['finalpe'] = 0x05E3;
	  t['finalpehebrew'] = 0x05E3;
	  t['finaltsadi'] = 0x05E5;
	  t['finaltsadihebrew'] = 0x05E5;
	  t['firsttonechinese'] = 0x02C9;
	  t['fisheye'] = 0x25C9;
	  t['fitacyrillic'] = 0x0473;
	  t['five'] = 0x0035;
	  t['fivearabic'] = 0x0665;
	  t['fivebengali'] = 0x09EB;
	  t['fivecircle'] = 0x2464;
	  t['fivecircleinversesansserif'] = 0x278E;
	  t['fivedeva'] = 0x096B;
	  t['fiveeighths'] = 0x215D;
	  t['fivegujarati'] = 0x0AEB;
	  t['fivegurmukhi'] = 0x0A6B;
	  t['fivehackarabic'] = 0x0665;
	  t['fivehangzhou'] = 0x3025;
	  t['fiveideographicparen'] = 0x3224;
	  t['fiveinferior'] = 0x2085;
	  t['fivemonospace'] = 0xFF15;
	  t['fiveoldstyle'] = 0xF735;
	  t['fiveparen'] = 0x2478;
	  t['fiveperiod'] = 0x248C;
	  t['fivepersian'] = 0x06F5;
	  t['fiveroman'] = 0x2174;
	  t['fivesuperior'] = 0x2075;
	  t['fivethai'] = 0x0E55;
	  t['fl'] = 0xFB02;
	  t['florin'] = 0x0192;
	  t['fmonospace'] = 0xFF46;
	  t['fmsquare'] = 0x3399;
	  t['fofanthai'] = 0x0E1F;
	  t['fofathai'] = 0x0E1D;
	  t['fongmanthai'] = 0x0E4F;
	  t['forall'] = 0x2200;
	  t['four'] = 0x0034;
	  t['fourarabic'] = 0x0664;
	  t['fourbengali'] = 0x09EA;
	  t['fourcircle'] = 0x2463;
	  t['fourcircleinversesansserif'] = 0x278D;
	  t['fourdeva'] = 0x096A;
	  t['fourgujarati'] = 0x0AEA;
	  t['fourgurmukhi'] = 0x0A6A;
	  t['fourhackarabic'] = 0x0664;
	  t['fourhangzhou'] = 0x3024;
	  t['fourideographicparen'] = 0x3223;
	  t['fourinferior'] = 0x2084;
	  t['fourmonospace'] = 0xFF14;
	  t['fournumeratorbengali'] = 0x09F7;
	  t['fouroldstyle'] = 0xF734;
	  t['fourparen'] = 0x2477;
	  t['fourperiod'] = 0x248B;
	  t['fourpersian'] = 0x06F4;
	  t['fourroman'] = 0x2173;
	  t['foursuperior'] = 0x2074;
	  t['fourteencircle'] = 0x246D;
	  t['fourteenparen'] = 0x2481;
	  t['fourteenperiod'] = 0x2495;
	  t['fourthai'] = 0x0E54;
	  t['fourthtonechinese'] = 0x02CB;
	  t['fparen'] = 0x24A1;
	  t['fraction'] = 0x2044;
	  t['franc'] = 0x20A3;
	  t['g'] = 0x0067;
	  t['gabengali'] = 0x0997;
	  t['gacute'] = 0x01F5;
	  t['gadeva'] = 0x0917;
	  t['gafarabic'] = 0x06AF;
	  t['gaffinalarabic'] = 0xFB93;
	  t['gafinitialarabic'] = 0xFB94;
	  t['gafmedialarabic'] = 0xFB95;
	  t['gagujarati'] = 0x0A97;
	  t['gagurmukhi'] = 0x0A17;
	  t['gahiragana'] = 0x304C;
	  t['gakatakana'] = 0x30AC;
	  t['gamma'] = 0x03B3;
	  t['gammalatinsmall'] = 0x0263;
	  t['gammasuperior'] = 0x02E0;
	  t['gangiacoptic'] = 0x03EB;
	  t['gbopomofo'] = 0x310D;
	  t['gbreve'] = 0x011F;
	  t['gcaron'] = 0x01E7;
	  t['gcedilla'] = 0x0123;
	  t['gcircle'] = 0x24D6;
	  t['gcircumflex'] = 0x011D;
	  t['gcommaaccent'] = 0x0123;
	  t['gdot'] = 0x0121;
	  t['gdotaccent'] = 0x0121;
	  t['gecyrillic'] = 0x0433;
	  t['gehiragana'] = 0x3052;
	  t['gekatakana'] = 0x30B2;
	  t['geometricallyequal'] = 0x2251;
	  t['gereshaccenthebrew'] = 0x059C;
	  t['gereshhebrew'] = 0x05F3;
	  t['gereshmuqdamhebrew'] = 0x059D;
	  t['germandbls'] = 0x00DF;
	  t['gershayimaccenthebrew'] = 0x059E;
	  t['gershayimhebrew'] = 0x05F4;
	  t['getamark'] = 0x3013;
	  t['ghabengali'] = 0x0998;
	  t['ghadarmenian'] = 0x0572;
	  t['ghadeva'] = 0x0918;
	  t['ghagujarati'] = 0x0A98;
	  t['ghagurmukhi'] = 0x0A18;
	  t['ghainarabic'] = 0x063A;
	  t['ghainfinalarabic'] = 0xFECE;
	  t['ghaininitialarabic'] = 0xFECF;
	  t['ghainmedialarabic'] = 0xFED0;
	  t['ghemiddlehookcyrillic'] = 0x0495;
	  t['ghestrokecyrillic'] = 0x0493;
	  t['gheupturncyrillic'] = 0x0491;
	  t['ghhadeva'] = 0x095A;
	  t['ghhagurmukhi'] = 0x0A5A;
	  t['ghook'] = 0x0260;
	  t['ghzsquare'] = 0x3393;
	  t['gihiragana'] = 0x304E;
	  t['gikatakana'] = 0x30AE;
	  t['gimarmenian'] = 0x0563;
	  t['gimel'] = 0x05D2;
	  t['gimeldagesh'] = 0xFB32;
	  t['gimeldageshhebrew'] = 0xFB32;
	  t['gimelhebrew'] = 0x05D2;
	  t['gjecyrillic'] = 0x0453;
	  t['glottalinvertedstroke'] = 0x01BE;
	  t['glottalstop'] = 0x0294;
	  t['glottalstopinverted'] = 0x0296;
	  t['glottalstopmod'] = 0x02C0;
	  t['glottalstopreversed'] = 0x0295;
	  t['glottalstopreversedmod'] = 0x02C1;
	  t['glottalstopreversedsuperior'] = 0x02E4;
	  t['glottalstopstroke'] = 0x02A1;
	  t['glottalstopstrokereversed'] = 0x02A2;
	  t['gmacron'] = 0x1E21;
	  t['gmonospace'] = 0xFF47;
	  t['gohiragana'] = 0x3054;
	  t['gokatakana'] = 0x30B4;
	  t['gparen'] = 0x24A2;
	  t['gpasquare'] = 0x33AC;
	  t['gradient'] = 0x2207;
	  t['grave'] = 0x0060;
	  t['gravebelowcmb'] = 0x0316;
	  t['gravecmb'] = 0x0300;
	  t['gravecomb'] = 0x0300;
	  t['gravedeva'] = 0x0953;
	  t['gravelowmod'] = 0x02CE;
	  t['gravemonospace'] = 0xFF40;
	  t['gravetonecmb'] = 0x0340;
	  t['greater'] = 0x003E;
	  t['greaterequal'] = 0x2265;
	  t['greaterequalorless'] = 0x22DB;
	  t['greatermonospace'] = 0xFF1E;
	  t['greaterorequivalent'] = 0x2273;
	  t['greaterorless'] = 0x2277;
	  t['greateroverequal'] = 0x2267;
	  t['greatersmall'] = 0xFE65;
	  t['gscript'] = 0x0261;
	  t['gstroke'] = 0x01E5;
	  t['guhiragana'] = 0x3050;
	  t['guillemotleft'] = 0x00AB;
	  t['guillemotright'] = 0x00BB;
	  t['guilsinglleft'] = 0x2039;
	  t['guilsinglright'] = 0x203A;
	  t['gukatakana'] = 0x30B0;
	  t['guramusquare'] = 0x3318;
	  t['gysquare'] = 0x33C9;
	  t['h'] = 0x0068;
	  t['haabkhasiancyrillic'] = 0x04A9;
	  t['haaltonearabic'] = 0x06C1;
	  t['habengali'] = 0x09B9;
	  t['hadescendercyrillic'] = 0x04B3;
	  t['hadeva'] = 0x0939;
	  t['hagujarati'] = 0x0AB9;
	  t['hagurmukhi'] = 0x0A39;
	  t['haharabic'] = 0x062D;
	  t['hahfinalarabic'] = 0xFEA2;
	  t['hahinitialarabic'] = 0xFEA3;
	  t['hahiragana'] = 0x306F;
	  t['hahmedialarabic'] = 0xFEA4;
	  t['haitusquare'] = 0x332A;
	  t['hakatakana'] = 0x30CF;
	  t['hakatakanahalfwidth'] = 0xFF8A;
	  t['halantgurmukhi'] = 0x0A4D;
	  t['hamzaarabic'] = 0x0621;
	  t['hamzalowarabic'] = 0x0621;
	  t['hangulfiller'] = 0x3164;
	  t['hardsigncyrillic'] = 0x044A;
	  t['harpoonleftbarbup'] = 0x21BC;
	  t['harpoonrightbarbup'] = 0x21C0;
	  t['hasquare'] = 0x33CA;
	  t['hatafpatah'] = 0x05B2;
	  t['hatafpatah16'] = 0x05B2;
	  t['hatafpatah23'] = 0x05B2;
	  t['hatafpatah2f'] = 0x05B2;
	  t['hatafpatahhebrew'] = 0x05B2;
	  t['hatafpatahnarrowhebrew'] = 0x05B2;
	  t['hatafpatahquarterhebrew'] = 0x05B2;
	  t['hatafpatahwidehebrew'] = 0x05B2;
	  t['hatafqamats'] = 0x05B3;
	  t['hatafqamats1b'] = 0x05B3;
	  t['hatafqamats28'] = 0x05B3;
	  t['hatafqamats34'] = 0x05B3;
	  t['hatafqamatshebrew'] = 0x05B3;
	  t['hatafqamatsnarrowhebrew'] = 0x05B3;
	  t['hatafqamatsquarterhebrew'] = 0x05B3;
	  t['hatafqamatswidehebrew'] = 0x05B3;
	  t['hatafsegol'] = 0x05B1;
	  t['hatafsegol17'] = 0x05B1;
	  t['hatafsegol24'] = 0x05B1;
	  t['hatafsegol30'] = 0x05B1;
	  t['hatafsegolhebrew'] = 0x05B1;
	  t['hatafsegolnarrowhebrew'] = 0x05B1;
	  t['hatafsegolquarterhebrew'] = 0x05B1;
	  t['hatafsegolwidehebrew'] = 0x05B1;
	  t['hbar'] = 0x0127;
	  t['hbopomofo'] = 0x310F;
	  t['hbrevebelow'] = 0x1E2B;
	  t['hcedilla'] = 0x1E29;
	  t['hcircle'] = 0x24D7;
	  t['hcircumflex'] = 0x0125;
	  t['hdieresis'] = 0x1E27;
	  t['hdotaccent'] = 0x1E23;
	  t['hdotbelow'] = 0x1E25;
	  t['he'] = 0x05D4;
	  t['heart'] = 0x2665;
	  t['heartsuitblack'] = 0x2665;
	  t['heartsuitwhite'] = 0x2661;
	  t['hedagesh'] = 0xFB34;
	  t['hedageshhebrew'] = 0xFB34;
	  t['hehaltonearabic'] = 0x06C1;
	  t['heharabic'] = 0x0647;
	  t['hehebrew'] = 0x05D4;
	  t['hehfinalaltonearabic'] = 0xFBA7;
	  t['hehfinalalttwoarabic'] = 0xFEEA;
	  t['hehfinalarabic'] = 0xFEEA;
	  t['hehhamzaabovefinalarabic'] = 0xFBA5;
	  t['hehhamzaaboveisolatedarabic'] = 0xFBA4;
	  t['hehinitialaltonearabic'] = 0xFBA8;
	  t['hehinitialarabic'] = 0xFEEB;
	  t['hehiragana'] = 0x3078;
	  t['hehmedialaltonearabic'] = 0xFBA9;
	  t['hehmedialarabic'] = 0xFEEC;
	  t['heiseierasquare'] = 0x337B;
	  t['hekatakana'] = 0x30D8;
	  t['hekatakanahalfwidth'] = 0xFF8D;
	  t['hekutaarusquare'] = 0x3336;
	  t['henghook'] = 0x0267;
	  t['herutusquare'] = 0x3339;
	  t['het'] = 0x05D7;
	  t['hethebrew'] = 0x05D7;
	  t['hhook'] = 0x0266;
	  t['hhooksuperior'] = 0x02B1;
	  t['hieuhacirclekorean'] = 0x327B;
	  t['hieuhaparenkorean'] = 0x321B;
	  t['hieuhcirclekorean'] = 0x326D;
	  t['hieuhkorean'] = 0x314E;
	  t['hieuhparenkorean'] = 0x320D;
	  t['hihiragana'] = 0x3072;
	  t['hikatakana'] = 0x30D2;
	  t['hikatakanahalfwidth'] = 0xFF8B;
	  t['hiriq'] = 0x05B4;
	  t['hiriq14'] = 0x05B4;
	  t['hiriq21'] = 0x05B4;
	  t['hiriq2d'] = 0x05B4;
	  t['hiriqhebrew'] = 0x05B4;
	  t['hiriqnarrowhebrew'] = 0x05B4;
	  t['hiriqquarterhebrew'] = 0x05B4;
	  t['hiriqwidehebrew'] = 0x05B4;
	  t['hlinebelow'] = 0x1E96;
	  t['hmonospace'] = 0xFF48;
	  t['hoarmenian'] = 0x0570;
	  t['hohipthai'] = 0x0E2B;
	  t['hohiragana'] = 0x307B;
	  t['hokatakana'] = 0x30DB;
	  t['hokatakanahalfwidth'] = 0xFF8E;
	  t['holam'] = 0x05B9;
	  t['holam19'] = 0x05B9;
	  t['holam26'] = 0x05B9;
	  t['holam32'] = 0x05B9;
	  t['holamhebrew'] = 0x05B9;
	  t['holamnarrowhebrew'] = 0x05B9;
	  t['holamquarterhebrew'] = 0x05B9;
	  t['holamwidehebrew'] = 0x05B9;
	  t['honokhukthai'] = 0x0E2E;
	  t['hookabovecomb'] = 0x0309;
	  t['hookcmb'] = 0x0309;
	  t['hookpalatalizedbelowcmb'] = 0x0321;
	  t['hookretroflexbelowcmb'] = 0x0322;
	  t['hoonsquare'] = 0x3342;
	  t['horicoptic'] = 0x03E9;
	  t['horizontalbar'] = 0x2015;
	  t['horncmb'] = 0x031B;
	  t['hotsprings'] = 0x2668;
	  t['house'] = 0x2302;
	  t['hparen'] = 0x24A3;
	  t['hsuperior'] = 0x02B0;
	  t['hturned'] = 0x0265;
	  t['huhiragana'] = 0x3075;
	  t['huiitosquare'] = 0x3333;
	  t['hukatakana'] = 0x30D5;
	  t['hukatakanahalfwidth'] = 0xFF8C;
	  t['hungarumlaut'] = 0x02DD;
	  t['hungarumlautcmb'] = 0x030B;
	  t['hv'] = 0x0195;
	  t['hyphen'] = 0x002D;
	  t['hypheninferior'] = 0xF6E5;
	  t['hyphenmonospace'] = 0xFF0D;
	  t['hyphensmall'] = 0xFE63;
	  t['hyphensuperior'] = 0xF6E6;
	  t['hyphentwo'] = 0x2010;
	  t['i'] = 0x0069;
	  t['iacute'] = 0x00ED;
	  t['iacyrillic'] = 0x044F;
	  t['ibengali'] = 0x0987;
	  t['ibopomofo'] = 0x3127;
	  t['ibreve'] = 0x012D;
	  t['icaron'] = 0x01D0;
	  t['icircle'] = 0x24D8;
	  t['icircumflex'] = 0x00EE;
	  t['icyrillic'] = 0x0456;
	  t['idblgrave'] = 0x0209;
	  t['ideographearthcircle'] = 0x328F;
	  t['ideographfirecircle'] = 0x328B;
	  t['ideographicallianceparen'] = 0x323F;
	  t['ideographiccallparen'] = 0x323A;
	  t['ideographiccentrecircle'] = 0x32A5;
	  t['ideographicclose'] = 0x3006;
	  t['ideographiccomma'] = 0x3001;
	  t['ideographiccommaleft'] = 0xFF64;
	  t['ideographiccongratulationparen'] = 0x3237;
	  t['ideographiccorrectcircle'] = 0x32A3;
	  t['ideographicearthparen'] = 0x322F;
	  t['ideographicenterpriseparen'] = 0x323D;
	  t['ideographicexcellentcircle'] = 0x329D;
	  t['ideographicfestivalparen'] = 0x3240;
	  t['ideographicfinancialcircle'] = 0x3296;
	  t['ideographicfinancialparen'] = 0x3236;
	  t['ideographicfireparen'] = 0x322B;
	  t['ideographichaveparen'] = 0x3232;
	  t['ideographichighcircle'] = 0x32A4;
	  t['ideographiciterationmark'] = 0x3005;
	  t['ideographiclaborcircle'] = 0x3298;
	  t['ideographiclaborparen'] = 0x3238;
	  t['ideographicleftcircle'] = 0x32A7;
	  t['ideographiclowcircle'] = 0x32A6;
	  t['ideographicmedicinecircle'] = 0x32A9;
	  t['ideographicmetalparen'] = 0x322E;
	  t['ideographicmoonparen'] = 0x322A;
	  t['ideographicnameparen'] = 0x3234;
	  t['ideographicperiod'] = 0x3002;
	  t['ideographicprintcircle'] = 0x329E;
	  t['ideographicreachparen'] = 0x3243;
	  t['ideographicrepresentparen'] = 0x3239;
	  t['ideographicresourceparen'] = 0x323E;
	  t['ideographicrightcircle'] = 0x32A8;
	  t['ideographicsecretcircle'] = 0x3299;
	  t['ideographicselfparen'] = 0x3242;
	  t['ideographicsocietyparen'] = 0x3233;
	  t['ideographicspace'] = 0x3000;
	  t['ideographicspecialparen'] = 0x3235;
	  t['ideographicstockparen'] = 0x3231;
	  t['ideographicstudyparen'] = 0x323B;
	  t['ideographicsunparen'] = 0x3230;
	  t['ideographicsuperviseparen'] = 0x323C;
	  t['ideographicwaterparen'] = 0x322C;
	  t['ideographicwoodparen'] = 0x322D;
	  t['ideographiczero'] = 0x3007;
	  t['ideographmetalcircle'] = 0x328E;
	  t['ideographmooncircle'] = 0x328A;
	  t['ideographnamecircle'] = 0x3294;
	  t['ideographsuncircle'] = 0x3290;
	  t['ideographwatercircle'] = 0x328C;
	  t['ideographwoodcircle'] = 0x328D;
	  t['ideva'] = 0x0907;
	  t['idieresis'] = 0x00EF;
	  t['idieresisacute'] = 0x1E2F;
	  t['idieresiscyrillic'] = 0x04E5;
	  t['idotbelow'] = 0x1ECB;
	  t['iebrevecyrillic'] = 0x04D7;
	  t['iecyrillic'] = 0x0435;
	  t['ieungacirclekorean'] = 0x3275;
	  t['ieungaparenkorean'] = 0x3215;
	  t['ieungcirclekorean'] = 0x3267;
	  t['ieungkorean'] = 0x3147;
	  t['ieungparenkorean'] = 0x3207;
	  t['igrave'] = 0x00EC;
	  t['igujarati'] = 0x0A87;
	  t['igurmukhi'] = 0x0A07;
	  t['ihiragana'] = 0x3044;
	  t['ihookabove'] = 0x1EC9;
	  t['iibengali'] = 0x0988;
	  t['iicyrillic'] = 0x0438;
	  t['iideva'] = 0x0908;
	  t['iigujarati'] = 0x0A88;
	  t['iigurmukhi'] = 0x0A08;
	  t['iimatragurmukhi'] = 0x0A40;
	  t['iinvertedbreve'] = 0x020B;
	  t['iishortcyrillic'] = 0x0439;
	  t['iivowelsignbengali'] = 0x09C0;
	  t['iivowelsigndeva'] = 0x0940;
	  t['iivowelsigngujarati'] = 0x0AC0;
	  t['ij'] = 0x0133;
	  t['ikatakana'] = 0x30A4;
	  t['ikatakanahalfwidth'] = 0xFF72;
	  t['ikorean'] = 0x3163;
	  t['ilde'] = 0x02DC;
	  t['iluyhebrew'] = 0x05AC;
	  t['imacron'] = 0x012B;
	  t['imacroncyrillic'] = 0x04E3;
	  t['imageorapproximatelyequal'] = 0x2253;
	  t['imatragurmukhi'] = 0x0A3F;
	  t['imonospace'] = 0xFF49;
	  t['increment'] = 0x2206;
	  t['infinity'] = 0x221E;
	  t['iniarmenian'] = 0x056B;
	  t['integral'] = 0x222B;
	  t['integralbottom'] = 0x2321;
	  t['integralbt'] = 0x2321;
	  t['integralex'] = 0xF8F5;
	  t['integraltop'] = 0x2320;
	  t['integraltp'] = 0x2320;
	  t['intersection'] = 0x2229;
	  t['intisquare'] = 0x3305;
	  t['invbullet'] = 0x25D8;
	  t['invcircle'] = 0x25D9;
	  t['invsmileface'] = 0x263B;
	  t['iocyrillic'] = 0x0451;
	  t['iogonek'] = 0x012F;
	  t['iota'] = 0x03B9;
	  t['iotadieresis'] = 0x03CA;
	  t['iotadieresistonos'] = 0x0390;
	  t['iotalatin'] = 0x0269;
	  t['iotatonos'] = 0x03AF;
	  t['iparen'] = 0x24A4;
	  t['irigurmukhi'] = 0x0A72;
	  t['ismallhiragana'] = 0x3043;
	  t['ismallkatakana'] = 0x30A3;
	  t['ismallkatakanahalfwidth'] = 0xFF68;
	  t['issharbengali'] = 0x09FA;
	  t['istroke'] = 0x0268;
	  t['isuperior'] = 0xF6ED;
	  t['iterationhiragana'] = 0x309D;
	  t['iterationkatakana'] = 0x30FD;
	  t['itilde'] = 0x0129;
	  t['itildebelow'] = 0x1E2D;
	  t['iubopomofo'] = 0x3129;
	  t['iucyrillic'] = 0x044E;
	  t['ivowelsignbengali'] = 0x09BF;
	  t['ivowelsigndeva'] = 0x093F;
	  t['ivowelsigngujarati'] = 0x0ABF;
	  t['izhitsacyrillic'] = 0x0475;
	  t['izhitsadblgravecyrillic'] = 0x0477;
	  t['j'] = 0x006A;
	  t['jaarmenian'] = 0x0571;
	  t['jabengali'] = 0x099C;
	  t['jadeva'] = 0x091C;
	  t['jagujarati'] = 0x0A9C;
	  t['jagurmukhi'] = 0x0A1C;
	  t['jbopomofo'] = 0x3110;
	  t['jcaron'] = 0x01F0;
	  t['jcircle'] = 0x24D9;
	  t['jcircumflex'] = 0x0135;
	  t['jcrossedtail'] = 0x029D;
	  t['jdotlessstroke'] = 0x025F;
	  t['jecyrillic'] = 0x0458;
	  t['jeemarabic'] = 0x062C;
	  t['jeemfinalarabic'] = 0xFE9E;
	  t['jeeminitialarabic'] = 0xFE9F;
	  t['jeemmedialarabic'] = 0xFEA0;
	  t['jeharabic'] = 0x0698;
	  t['jehfinalarabic'] = 0xFB8B;
	  t['jhabengali'] = 0x099D;
	  t['jhadeva'] = 0x091D;
	  t['jhagujarati'] = 0x0A9D;
	  t['jhagurmukhi'] = 0x0A1D;
	  t['jheharmenian'] = 0x057B;
	  t['jis'] = 0x3004;
	  t['jmonospace'] = 0xFF4A;
	  t['jparen'] = 0x24A5;
	  t['jsuperior'] = 0x02B2;
	  t['k'] = 0x006B;
	  t['kabashkircyrillic'] = 0x04A1;
	  t['kabengali'] = 0x0995;
	  t['kacute'] = 0x1E31;
	  t['kacyrillic'] = 0x043A;
	  t['kadescendercyrillic'] = 0x049B;
	  t['kadeva'] = 0x0915;
	  t['kaf'] = 0x05DB;
	  t['kafarabic'] = 0x0643;
	  t['kafdagesh'] = 0xFB3B;
	  t['kafdageshhebrew'] = 0xFB3B;
	  t['kaffinalarabic'] = 0xFEDA;
	  t['kafhebrew'] = 0x05DB;
	  t['kafinitialarabic'] = 0xFEDB;
	  t['kafmedialarabic'] = 0xFEDC;
	  t['kafrafehebrew'] = 0xFB4D;
	  t['kagujarati'] = 0x0A95;
	  t['kagurmukhi'] = 0x0A15;
	  t['kahiragana'] = 0x304B;
	  t['kahookcyrillic'] = 0x04C4;
	  t['kakatakana'] = 0x30AB;
	  t['kakatakanahalfwidth'] = 0xFF76;
	  t['kappa'] = 0x03BA;
	  t['kappasymbolgreek'] = 0x03F0;
	  t['kapyeounmieumkorean'] = 0x3171;
	  t['kapyeounphieuphkorean'] = 0x3184;
	  t['kapyeounpieupkorean'] = 0x3178;
	  t['kapyeounssangpieupkorean'] = 0x3179;
	  t['karoriisquare'] = 0x330D;
	  t['kashidaautoarabic'] = 0x0640;
	  t['kashidaautonosidebearingarabic'] = 0x0640;
	  t['kasmallkatakana'] = 0x30F5;
	  t['kasquare'] = 0x3384;
	  t['kasraarabic'] = 0x0650;
	  t['kasratanarabic'] = 0x064D;
	  t['kastrokecyrillic'] = 0x049F;
	  t['katahiraprolongmarkhalfwidth'] = 0xFF70;
	  t['kaverticalstrokecyrillic'] = 0x049D;
	  t['kbopomofo'] = 0x310E;
	  t['kcalsquare'] = 0x3389;
	  t['kcaron'] = 0x01E9;
	  t['kcedilla'] = 0x0137;
	  t['kcircle'] = 0x24DA;
	  t['kcommaaccent'] = 0x0137;
	  t['kdotbelow'] = 0x1E33;
	  t['keharmenian'] = 0x0584;
	  t['kehiragana'] = 0x3051;
	  t['kekatakana'] = 0x30B1;
	  t['kekatakanahalfwidth'] = 0xFF79;
	  t['kenarmenian'] = 0x056F;
	  t['kesmallkatakana'] = 0x30F6;
	  t['kgreenlandic'] = 0x0138;
	  t['khabengali'] = 0x0996;
	  t['khacyrillic'] = 0x0445;
	  t['khadeva'] = 0x0916;
	  t['khagujarati'] = 0x0A96;
	  t['khagurmukhi'] = 0x0A16;
	  t['khaharabic'] = 0x062E;
	  t['khahfinalarabic'] = 0xFEA6;
	  t['khahinitialarabic'] = 0xFEA7;
	  t['khahmedialarabic'] = 0xFEA8;
	  t['kheicoptic'] = 0x03E7;
	  t['khhadeva'] = 0x0959;
	  t['khhagurmukhi'] = 0x0A59;
	  t['khieukhacirclekorean'] = 0x3278;
	  t['khieukhaparenkorean'] = 0x3218;
	  t['khieukhcirclekorean'] = 0x326A;
	  t['khieukhkorean'] = 0x314B;
	  t['khieukhparenkorean'] = 0x320A;
	  t['khokhaithai'] = 0x0E02;
	  t['khokhonthai'] = 0x0E05;
	  t['khokhuatthai'] = 0x0E03;
	  t['khokhwaithai'] = 0x0E04;
	  t['khomutthai'] = 0x0E5B;
	  t['khook'] = 0x0199;
	  t['khorakhangthai'] = 0x0E06;
	  t['khzsquare'] = 0x3391;
	  t['kihiragana'] = 0x304D;
	  t['kikatakana'] = 0x30AD;
	  t['kikatakanahalfwidth'] = 0xFF77;
	  t['kiroguramusquare'] = 0x3315;
	  t['kiromeetorusquare'] = 0x3316;
	  t['kirosquare'] = 0x3314;
	  t['kiyeokacirclekorean'] = 0x326E;
	  t['kiyeokaparenkorean'] = 0x320E;
	  t['kiyeokcirclekorean'] = 0x3260;
	  t['kiyeokkorean'] = 0x3131;
	  t['kiyeokparenkorean'] = 0x3200;
	  t['kiyeoksioskorean'] = 0x3133;
	  t['kjecyrillic'] = 0x045C;
	  t['klinebelow'] = 0x1E35;
	  t['klsquare'] = 0x3398;
	  t['kmcubedsquare'] = 0x33A6;
	  t['kmonospace'] = 0xFF4B;
	  t['kmsquaredsquare'] = 0x33A2;
	  t['kohiragana'] = 0x3053;
	  t['kohmsquare'] = 0x33C0;
	  t['kokaithai'] = 0x0E01;
	  t['kokatakana'] = 0x30B3;
	  t['kokatakanahalfwidth'] = 0xFF7A;
	  t['kooposquare'] = 0x331E;
	  t['koppacyrillic'] = 0x0481;
	  t['koreanstandardsymbol'] = 0x327F;
	  t['koroniscmb'] = 0x0343;
	  t['kparen'] = 0x24A6;
	  t['kpasquare'] = 0x33AA;
	  t['ksicyrillic'] = 0x046F;
	  t['ktsquare'] = 0x33CF;
	  t['kturned'] = 0x029E;
	  t['kuhiragana'] = 0x304F;
	  t['kukatakana'] = 0x30AF;
	  t['kukatakanahalfwidth'] = 0xFF78;
	  t['kvsquare'] = 0x33B8;
	  t['kwsquare'] = 0x33BE;
	  t['l'] = 0x006C;
	  t['labengali'] = 0x09B2;
	  t['lacute'] = 0x013A;
	  t['ladeva'] = 0x0932;
	  t['lagujarati'] = 0x0AB2;
	  t['lagurmukhi'] = 0x0A32;
	  t['lakkhangyaothai'] = 0x0E45;
	  t['lamaleffinalarabic'] = 0xFEFC;
	  t['lamalefhamzaabovefinalarabic'] = 0xFEF8;
	  t['lamalefhamzaaboveisolatedarabic'] = 0xFEF7;
	  t['lamalefhamzabelowfinalarabic'] = 0xFEFA;
	  t['lamalefhamzabelowisolatedarabic'] = 0xFEF9;
	  t['lamalefisolatedarabic'] = 0xFEFB;
	  t['lamalefmaddaabovefinalarabic'] = 0xFEF6;
	  t['lamalefmaddaaboveisolatedarabic'] = 0xFEF5;
	  t['lamarabic'] = 0x0644;
	  t['lambda'] = 0x03BB;
	  t['lambdastroke'] = 0x019B;
	  t['lamed'] = 0x05DC;
	  t['lameddagesh'] = 0xFB3C;
	  t['lameddageshhebrew'] = 0xFB3C;
	  t['lamedhebrew'] = 0x05DC;
	  t['lamfinalarabic'] = 0xFEDE;
	  t['lamhahinitialarabic'] = 0xFCCA;
	  t['laminitialarabic'] = 0xFEDF;
	  t['lamjeeminitialarabic'] = 0xFCC9;
	  t['lamkhahinitialarabic'] = 0xFCCB;
	  t['lamlamhehisolatedarabic'] = 0xFDF2;
	  t['lammedialarabic'] = 0xFEE0;
	  t['lammeemhahinitialarabic'] = 0xFD88;
	  t['lammeeminitialarabic'] = 0xFCCC;
	  t['largecircle'] = 0x25EF;
	  t['lbar'] = 0x019A;
	  t['lbelt'] = 0x026C;
	  t['lbopomofo'] = 0x310C;
	  t['lcaron'] = 0x013E;
	  t['lcedilla'] = 0x013C;
	  t['lcircle'] = 0x24DB;
	  t['lcircumflexbelow'] = 0x1E3D;
	  t['lcommaaccent'] = 0x013C;
	  t['ldot'] = 0x0140;
	  t['ldotaccent'] = 0x0140;
	  t['ldotbelow'] = 0x1E37;
	  t['ldotbelowmacron'] = 0x1E39;
	  t['leftangleabovecmb'] = 0x031A;
	  t['lefttackbelowcmb'] = 0x0318;
	  t['less'] = 0x003C;
	  t['lessequal'] = 0x2264;
	  t['lessequalorgreater'] = 0x22DA;
	  t['lessmonospace'] = 0xFF1C;
	  t['lessorequivalent'] = 0x2272;
	  t['lessorgreater'] = 0x2276;
	  t['lessoverequal'] = 0x2266;
	  t['lesssmall'] = 0xFE64;
	  t['lezh'] = 0x026E;
	  t['lfblock'] = 0x258C;
	  t['lhookretroflex'] = 0x026D;
	  t['lira'] = 0x20A4;
	  t['liwnarmenian'] = 0x056C;
	  t['lj'] = 0x01C9;
	  t['ljecyrillic'] = 0x0459;
	  t['ll'] = 0xF6C0;
	  t['lladeva'] = 0x0933;
	  t['llagujarati'] = 0x0AB3;
	  t['llinebelow'] = 0x1E3B;
	  t['llladeva'] = 0x0934;
	  t['llvocalicbengali'] = 0x09E1;
	  t['llvocalicdeva'] = 0x0961;
	  t['llvocalicvowelsignbengali'] = 0x09E3;
	  t['llvocalicvowelsigndeva'] = 0x0963;
	  t['lmiddletilde'] = 0x026B;
	  t['lmonospace'] = 0xFF4C;
	  t['lmsquare'] = 0x33D0;
	  t['lochulathai'] = 0x0E2C;
	  t['logicaland'] = 0x2227;
	  t['logicalnot'] = 0x00AC;
	  t['logicalnotreversed'] = 0x2310;
	  t['logicalor'] = 0x2228;
	  t['lolingthai'] = 0x0E25;
	  t['longs'] = 0x017F;
	  t['lowlinecenterline'] = 0xFE4E;
	  t['lowlinecmb'] = 0x0332;
	  t['lowlinedashed'] = 0xFE4D;
	  t['lozenge'] = 0x25CA;
	  t['lparen'] = 0x24A7;
	  t['lslash'] = 0x0142;
	  t['lsquare'] = 0x2113;
	  t['lsuperior'] = 0xF6EE;
	  t['ltshade'] = 0x2591;
	  t['luthai'] = 0x0E26;
	  t['lvocalicbengali'] = 0x098C;
	  t['lvocalicdeva'] = 0x090C;
	  t['lvocalicvowelsignbengali'] = 0x09E2;
	  t['lvocalicvowelsigndeva'] = 0x0962;
	  t['lxsquare'] = 0x33D3;
	  t['m'] = 0x006D;
	  t['mabengali'] = 0x09AE;
	  t['macron'] = 0x00AF;
	  t['macronbelowcmb'] = 0x0331;
	  t['macroncmb'] = 0x0304;
	  t['macronlowmod'] = 0x02CD;
	  t['macronmonospace'] = 0xFFE3;
	  t['macute'] = 0x1E3F;
	  t['madeva'] = 0x092E;
	  t['magujarati'] = 0x0AAE;
	  t['magurmukhi'] = 0x0A2E;
	  t['mahapakhhebrew'] = 0x05A4;
	  t['mahapakhlefthebrew'] = 0x05A4;
	  t['mahiragana'] = 0x307E;
	  t['maichattawalowleftthai'] = 0xF895;
	  t['maichattawalowrightthai'] = 0xF894;
	  t['maichattawathai'] = 0x0E4B;
	  t['maichattawaupperleftthai'] = 0xF893;
	  t['maieklowleftthai'] = 0xF88C;
	  t['maieklowrightthai'] = 0xF88B;
	  t['maiekthai'] = 0x0E48;
	  t['maiekupperleftthai'] = 0xF88A;
	  t['maihanakatleftthai'] = 0xF884;
	  t['maihanakatthai'] = 0x0E31;
	  t['maitaikhuleftthai'] = 0xF889;
	  t['maitaikhuthai'] = 0x0E47;
	  t['maitholowleftthai'] = 0xF88F;
	  t['maitholowrightthai'] = 0xF88E;
	  t['maithothai'] = 0x0E49;
	  t['maithoupperleftthai'] = 0xF88D;
	  t['maitrilowleftthai'] = 0xF892;
	  t['maitrilowrightthai'] = 0xF891;
	  t['maitrithai'] = 0x0E4A;
	  t['maitriupperleftthai'] = 0xF890;
	  t['maiyamokthai'] = 0x0E46;
	  t['makatakana'] = 0x30DE;
	  t['makatakanahalfwidth'] = 0xFF8F;
	  t['male'] = 0x2642;
	  t['mansyonsquare'] = 0x3347;
	  t['maqafhebrew'] = 0x05BE;
	  t['mars'] = 0x2642;
	  t['masoracirclehebrew'] = 0x05AF;
	  t['masquare'] = 0x3383;
	  t['mbopomofo'] = 0x3107;
	  t['mbsquare'] = 0x33D4;
	  t['mcircle'] = 0x24DC;
	  t['mcubedsquare'] = 0x33A5;
	  t['mdotaccent'] = 0x1E41;
	  t['mdotbelow'] = 0x1E43;
	  t['meemarabic'] = 0x0645;
	  t['meemfinalarabic'] = 0xFEE2;
	  t['meeminitialarabic'] = 0xFEE3;
	  t['meemmedialarabic'] = 0xFEE4;
	  t['meemmeeminitialarabic'] = 0xFCD1;
	  t['meemmeemisolatedarabic'] = 0xFC48;
	  t['meetorusquare'] = 0x334D;
	  t['mehiragana'] = 0x3081;
	  t['meizierasquare'] = 0x337E;
	  t['mekatakana'] = 0x30E1;
	  t['mekatakanahalfwidth'] = 0xFF92;
	  t['mem'] = 0x05DE;
	  t['memdagesh'] = 0xFB3E;
	  t['memdageshhebrew'] = 0xFB3E;
	  t['memhebrew'] = 0x05DE;
	  t['menarmenian'] = 0x0574;
	  t['merkhahebrew'] = 0x05A5;
	  t['merkhakefulahebrew'] = 0x05A6;
	  t['merkhakefulalefthebrew'] = 0x05A6;
	  t['merkhalefthebrew'] = 0x05A5;
	  t['mhook'] = 0x0271;
	  t['mhzsquare'] = 0x3392;
	  t['middledotkatakanahalfwidth'] = 0xFF65;
	  t['middot'] = 0x00B7;
	  t['mieumacirclekorean'] = 0x3272;
	  t['mieumaparenkorean'] = 0x3212;
	  t['mieumcirclekorean'] = 0x3264;
	  t['mieumkorean'] = 0x3141;
	  t['mieumpansioskorean'] = 0x3170;
	  t['mieumparenkorean'] = 0x3204;
	  t['mieumpieupkorean'] = 0x316E;
	  t['mieumsioskorean'] = 0x316F;
	  t['mihiragana'] = 0x307F;
	  t['mikatakana'] = 0x30DF;
	  t['mikatakanahalfwidth'] = 0xFF90;
	  t['minus'] = 0x2212;
	  t['minusbelowcmb'] = 0x0320;
	  t['minuscircle'] = 0x2296;
	  t['minusmod'] = 0x02D7;
	  t['minusplus'] = 0x2213;
	  t['minute'] = 0x2032;
	  t['miribaarusquare'] = 0x334A;
	  t['mirisquare'] = 0x3349;
	  t['mlonglegturned'] = 0x0270;
	  t['mlsquare'] = 0x3396;
	  t['mmcubedsquare'] = 0x33A3;
	  t['mmonospace'] = 0xFF4D;
	  t['mmsquaredsquare'] = 0x339F;
	  t['mohiragana'] = 0x3082;
	  t['mohmsquare'] = 0x33C1;
	  t['mokatakana'] = 0x30E2;
	  t['mokatakanahalfwidth'] = 0xFF93;
	  t['molsquare'] = 0x33D6;
	  t['momathai'] = 0x0E21;
	  t['moverssquare'] = 0x33A7;
	  t['moverssquaredsquare'] = 0x33A8;
	  t['mparen'] = 0x24A8;
	  t['mpasquare'] = 0x33AB;
	  t['mssquare'] = 0x33B3;
	  t['msuperior'] = 0xF6EF;
	  t['mturned'] = 0x026F;
	  t['mu'] = 0x00B5;
	  t['mu1'] = 0x00B5;
	  t['muasquare'] = 0x3382;
	  t['muchgreater'] = 0x226B;
	  t['muchless'] = 0x226A;
	  t['mufsquare'] = 0x338C;
	  t['mugreek'] = 0x03BC;
	  t['mugsquare'] = 0x338D;
	  t['muhiragana'] = 0x3080;
	  t['mukatakana'] = 0x30E0;
	  t['mukatakanahalfwidth'] = 0xFF91;
	  t['mulsquare'] = 0x3395;
	  t['multiply'] = 0x00D7;
	  t['mumsquare'] = 0x339B;
	  t['munahhebrew'] = 0x05A3;
	  t['munahlefthebrew'] = 0x05A3;
	  t['musicalnote'] = 0x266A;
	  t['musicalnotedbl'] = 0x266B;
	  t['musicflatsign'] = 0x266D;
	  t['musicsharpsign'] = 0x266F;
	  t['mussquare'] = 0x33B2;
	  t['muvsquare'] = 0x33B6;
	  t['muwsquare'] = 0x33BC;
	  t['mvmegasquare'] = 0x33B9;
	  t['mvsquare'] = 0x33B7;
	  t['mwmegasquare'] = 0x33BF;
	  t['mwsquare'] = 0x33BD;
	  t['n'] = 0x006E;
	  t['nabengali'] = 0x09A8;
	  t['nabla'] = 0x2207;
	  t['nacute'] = 0x0144;
	  t['nadeva'] = 0x0928;
	  t['nagujarati'] = 0x0AA8;
	  t['nagurmukhi'] = 0x0A28;
	  t['nahiragana'] = 0x306A;
	  t['nakatakana'] = 0x30CA;
	  t['nakatakanahalfwidth'] = 0xFF85;
	  t['napostrophe'] = 0x0149;
	  t['nasquare'] = 0x3381;
	  t['nbopomofo'] = 0x310B;
	  t['nbspace'] = 0x00A0;
	  t['ncaron'] = 0x0148;
	  t['ncedilla'] = 0x0146;
	  t['ncircle'] = 0x24DD;
	  t['ncircumflexbelow'] = 0x1E4B;
	  t['ncommaaccent'] = 0x0146;
	  t['ndotaccent'] = 0x1E45;
	  t['ndotbelow'] = 0x1E47;
	  t['nehiragana'] = 0x306D;
	  t['nekatakana'] = 0x30CD;
	  t['nekatakanahalfwidth'] = 0xFF88;
	  t['newsheqelsign'] = 0x20AA;
	  t['nfsquare'] = 0x338B;
	  t['ngabengali'] = 0x0999;
	  t['ngadeva'] = 0x0919;
	  t['ngagujarati'] = 0x0A99;
	  t['ngagurmukhi'] = 0x0A19;
	  t['ngonguthai'] = 0x0E07;
	  t['nhiragana'] = 0x3093;
	  t['nhookleft'] = 0x0272;
	  t['nhookretroflex'] = 0x0273;
	  t['nieunacirclekorean'] = 0x326F;
	  t['nieunaparenkorean'] = 0x320F;
	  t['nieuncieuckorean'] = 0x3135;
	  t['nieuncirclekorean'] = 0x3261;
	  t['nieunhieuhkorean'] = 0x3136;
	  t['nieunkorean'] = 0x3134;
	  t['nieunpansioskorean'] = 0x3168;
	  t['nieunparenkorean'] = 0x3201;
	  t['nieunsioskorean'] = 0x3167;
	  t['nieuntikeutkorean'] = 0x3166;
	  t['nihiragana'] = 0x306B;
	  t['nikatakana'] = 0x30CB;
	  t['nikatakanahalfwidth'] = 0xFF86;
	  t['nikhahitleftthai'] = 0xF899;
	  t['nikhahitthai'] = 0x0E4D;
	  t['nine'] = 0x0039;
	  t['ninearabic'] = 0x0669;
	  t['ninebengali'] = 0x09EF;
	  t['ninecircle'] = 0x2468;
	  t['ninecircleinversesansserif'] = 0x2792;
	  t['ninedeva'] = 0x096F;
	  t['ninegujarati'] = 0x0AEF;
	  t['ninegurmukhi'] = 0x0A6F;
	  t['ninehackarabic'] = 0x0669;
	  t['ninehangzhou'] = 0x3029;
	  t['nineideographicparen'] = 0x3228;
	  t['nineinferior'] = 0x2089;
	  t['ninemonospace'] = 0xFF19;
	  t['nineoldstyle'] = 0xF739;
	  t['nineparen'] = 0x247C;
	  t['nineperiod'] = 0x2490;
	  t['ninepersian'] = 0x06F9;
	  t['nineroman'] = 0x2178;
	  t['ninesuperior'] = 0x2079;
	  t['nineteencircle'] = 0x2472;
	  t['nineteenparen'] = 0x2486;
	  t['nineteenperiod'] = 0x249A;
	  t['ninethai'] = 0x0E59;
	  t['nj'] = 0x01CC;
	  t['njecyrillic'] = 0x045A;
	  t['nkatakana'] = 0x30F3;
	  t['nkatakanahalfwidth'] = 0xFF9D;
	  t['nlegrightlong'] = 0x019E;
	  t['nlinebelow'] = 0x1E49;
	  t['nmonospace'] = 0xFF4E;
	  t['nmsquare'] = 0x339A;
	  t['nnabengali'] = 0x09A3;
	  t['nnadeva'] = 0x0923;
	  t['nnagujarati'] = 0x0AA3;
	  t['nnagurmukhi'] = 0x0A23;
	  t['nnnadeva'] = 0x0929;
	  t['nohiragana'] = 0x306E;
	  t['nokatakana'] = 0x30CE;
	  t['nokatakanahalfwidth'] = 0xFF89;
	  t['nonbreakingspace'] = 0x00A0;
	  t['nonenthai'] = 0x0E13;
	  t['nonuthai'] = 0x0E19;
	  t['noonarabic'] = 0x0646;
	  t['noonfinalarabic'] = 0xFEE6;
	  t['noonghunnaarabic'] = 0x06BA;
	  t['noonghunnafinalarabic'] = 0xFB9F;
	  t['nooninitialarabic'] = 0xFEE7;
	  t['noonjeeminitialarabic'] = 0xFCD2;
	  t['noonjeemisolatedarabic'] = 0xFC4B;
	  t['noonmedialarabic'] = 0xFEE8;
	  t['noonmeeminitialarabic'] = 0xFCD5;
	  t['noonmeemisolatedarabic'] = 0xFC4E;
	  t['noonnoonfinalarabic'] = 0xFC8D;
	  t['notcontains'] = 0x220C;
	  t['notelement'] = 0x2209;
	  t['notelementof'] = 0x2209;
	  t['notequal'] = 0x2260;
	  t['notgreater'] = 0x226F;
	  t['notgreaternorequal'] = 0x2271;
	  t['notgreaternorless'] = 0x2279;
	  t['notidentical'] = 0x2262;
	  t['notless'] = 0x226E;
	  t['notlessnorequal'] = 0x2270;
	  t['notparallel'] = 0x2226;
	  t['notprecedes'] = 0x2280;
	  t['notsubset'] = 0x2284;
	  t['notsucceeds'] = 0x2281;
	  t['notsuperset'] = 0x2285;
	  t['nowarmenian'] = 0x0576;
	  t['nparen'] = 0x24A9;
	  t['nssquare'] = 0x33B1;
	  t['nsuperior'] = 0x207F;
	  t['ntilde'] = 0x00F1;
	  t['nu'] = 0x03BD;
	  t['nuhiragana'] = 0x306C;
	  t['nukatakana'] = 0x30CC;
	  t['nukatakanahalfwidth'] = 0xFF87;
	  t['nuktabengali'] = 0x09BC;
	  t['nuktadeva'] = 0x093C;
	  t['nuktagujarati'] = 0x0ABC;
	  t['nuktagurmukhi'] = 0x0A3C;
	  t['numbersign'] = 0x0023;
	  t['numbersignmonospace'] = 0xFF03;
	  t['numbersignsmall'] = 0xFE5F;
	  t['numeralsigngreek'] = 0x0374;
	  t['numeralsignlowergreek'] = 0x0375;
	  t['numero'] = 0x2116;
	  t['nun'] = 0x05E0;
	  t['nundagesh'] = 0xFB40;
	  t['nundageshhebrew'] = 0xFB40;
	  t['nunhebrew'] = 0x05E0;
	  t['nvsquare'] = 0x33B5;
	  t['nwsquare'] = 0x33BB;
	  t['nyabengali'] = 0x099E;
	  t['nyadeva'] = 0x091E;
	  t['nyagujarati'] = 0x0A9E;
	  t['nyagurmukhi'] = 0x0A1E;
	  t['o'] = 0x006F;
	  t['oacute'] = 0x00F3;
	  t['oangthai'] = 0x0E2D;
	  t['obarred'] = 0x0275;
	  t['obarredcyrillic'] = 0x04E9;
	  t['obarreddieresiscyrillic'] = 0x04EB;
	  t['obengali'] = 0x0993;
	  t['obopomofo'] = 0x311B;
	  t['obreve'] = 0x014F;
	  t['ocandradeva'] = 0x0911;
	  t['ocandragujarati'] = 0x0A91;
	  t['ocandravowelsigndeva'] = 0x0949;
	  t['ocandravowelsigngujarati'] = 0x0AC9;
	  t['ocaron'] = 0x01D2;
	  t['ocircle'] = 0x24DE;
	  t['ocircumflex'] = 0x00F4;
	  t['ocircumflexacute'] = 0x1ED1;
	  t['ocircumflexdotbelow'] = 0x1ED9;
	  t['ocircumflexgrave'] = 0x1ED3;
	  t['ocircumflexhookabove'] = 0x1ED5;
	  t['ocircumflextilde'] = 0x1ED7;
	  t['ocyrillic'] = 0x043E;
	  t['odblacute'] = 0x0151;
	  t['odblgrave'] = 0x020D;
	  t['odeva'] = 0x0913;
	  t['odieresis'] = 0x00F6;
	  t['odieresiscyrillic'] = 0x04E7;
	  t['odotbelow'] = 0x1ECD;
	  t['oe'] = 0x0153;
	  t['oekorean'] = 0x315A;
	  t['ogonek'] = 0x02DB;
	  t['ogonekcmb'] = 0x0328;
	  t['ograve'] = 0x00F2;
	  t['ogujarati'] = 0x0A93;
	  t['oharmenian'] = 0x0585;
	  t['ohiragana'] = 0x304A;
	  t['ohookabove'] = 0x1ECF;
	  t['ohorn'] = 0x01A1;
	  t['ohornacute'] = 0x1EDB;
	  t['ohorndotbelow'] = 0x1EE3;
	  t['ohorngrave'] = 0x1EDD;
	  t['ohornhookabove'] = 0x1EDF;
	  t['ohorntilde'] = 0x1EE1;
	  t['ohungarumlaut'] = 0x0151;
	  t['oi'] = 0x01A3;
	  t['oinvertedbreve'] = 0x020F;
	  t['okatakana'] = 0x30AA;
	  t['okatakanahalfwidth'] = 0xFF75;
	  t['okorean'] = 0x3157;
	  t['olehebrew'] = 0x05AB;
	  t['omacron'] = 0x014D;
	  t['omacronacute'] = 0x1E53;
	  t['omacrongrave'] = 0x1E51;
	  t['omdeva'] = 0x0950;
	  t['omega'] = 0x03C9;
	  t['omega1'] = 0x03D6;
	  t['omegacyrillic'] = 0x0461;
	  t['omegalatinclosed'] = 0x0277;
	  t['omegaroundcyrillic'] = 0x047B;
	  t['omegatitlocyrillic'] = 0x047D;
	  t['omegatonos'] = 0x03CE;
	  t['omgujarati'] = 0x0AD0;
	  t['omicron'] = 0x03BF;
	  t['omicrontonos'] = 0x03CC;
	  t['omonospace'] = 0xFF4F;
	  t['one'] = 0x0031;
	  t['onearabic'] = 0x0661;
	  t['onebengali'] = 0x09E7;
	  t['onecircle'] = 0x2460;
	  t['onecircleinversesansserif'] = 0x278A;
	  t['onedeva'] = 0x0967;
	  t['onedotenleader'] = 0x2024;
	  t['oneeighth'] = 0x215B;
	  t['onefitted'] = 0xF6DC;
	  t['onegujarati'] = 0x0AE7;
	  t['onegurmukhi'] = 0x0A67;
	  t['onehackarabic'] = 0x0661;
	  t['onehalf'] = 0x00BD;
	  t['onehangzhou'] = 0x3021;
	  t['oneideographicparen'] = 0x3220;
	  t['oneinferior'] = 0x2081;
	  t['onemonospace'] = 0xFF11;
	  t['onenumeratorbengali'] = 0x09F4;
	  t['oneoldstyle'] = 0xF731;
	  t['oneparen'] = 0x2474;
	  t['oneperiod'] = 0x2488;
	  t['onepersian'] = 0x06F1;
	  t['onequarter'] = 0x00BC;
	  t['oneroman'] = 0x2170;
	  t['onesuperior'] = 0x00B9;
	  t['onethai'] = 0x0E51;
	  t['onethird'] = 0x2153;
	  t['oogonek'] = 0x01EB;
	  t['oogonekmacron'] = 0x01ED;
	  t['oogurmukhi'] = 0x0A13;
	  t['oomatragurmukhi'] = 0x0A4B;
	  t['oopen'] = 0x0254;
	  t['oparen'] = 0x24AA;
	  t['openbullet'] = 0x25E6;
	  t['option'] = 0x2325;
	  t['ordfeminine'] = 0x00AA;
	  t['ordmasculine'] = 0x00BA;
	  t['orthogonal'] = 0x221F;
	  t['oshortdeva'] = 0x0912;
	  t['oshortvowelsigndeva'] = 0x094A;
	  t['oslash'] = 0x00F8;
	  t['oslashacute'] = 0x01FF;
	  t['osmallhiragana'] = 0x3049;
	  t['osmallkatakana'] = 0x30A9;
	  t['osmallkatakanahalfwidth'] = 0xFF6B;
	  t['ostrokeacute'] = 0x01FF;
	  t['osuperior'] = 0xF6F0;
	  t['otcyrillic'] = 0x047F;
	  t['otilde'] = 0x00F5;
	  t['otildeacute'] = 0x1E4D;
	  t['otildedieresis'] = 0x1E4F;
	  t['oubopomofo'] = 0x3121;
	  t['overline'] = 0x203E;
	  t['overlinecenterline'] = 0xFE4A;
	  t['overlinecmb'] = 0x0305;
	  t['overlinedashed'] = 0xFE49;
	  t['overlinedblwavy'] = 0xFE4C;
	  t['overlinewavy'] = 0xFE4B;
	  t['overscore'] = 0x00AF;
	  t['ovowelsignbengali'] = 0x09CB;
	  t['ovowelsigndeva'] = 0x094B;
	  t['ovowelsigngujarati'] = 0x0ACB;
	  t['p'] = 0x0070;
	  t['paampssquare'] = 0x3380;
	  t['paasentosquare'] = 0x332B;
	  t['pabengali'] = 0x09AA;
	  t['pacute'] = 0x1E55;
	  t['padeva'] = 0x092A;
	  t['pagedown'] = 0x21DF;
	  t['pageup'] = 0x21DE;
	  t['pagujarati'] = 0x0AAA;
	  t['pagurmukhi'] = 0x0A2A;
	  t['pahiragana'] = 0x3071;
	  t['paiyannoithai'] = 0x0E2F;
	  t['pakatakana'] = 0x30D1;
	  t['palatalizationcyrilliccmb'] = 0x0484;
	  t['palochkacyrillic'] = 0x04C0;
	  t['pansioskorean'] = 0x317F;
	  t['paragraph'] = 0x00B6;
	  t['parallel'] = 0x2225;
	  t['parenleft'] = 0x0028;
	  t['parenleftaltonearabic'] = 0xFD3E;
	  t['parenleftbt'] = 0xF8ED;
	  t['parenleftex'] = 0xF8EC;
	  t['parenleftinferior'] = 0x208D;
	  t['parenleftmonospace'] = 0xFF08;
	  t['parenleftsmall'] = 0xFE59;
	  t['parenleftsuperior'] = 0x207D;
	  t['parenlefttp'] = 0xF8EB;
	  t['parenleftvertical'] = 0xFE35;
	  t['parenright'] = 0x0029;
	  t['parenrightaltonearabic'] = 0xFD3F;
	  t['parenrightbt'] = 0xF8F8;
	  t['parenrightex'] = 0xF8F7;
	  t['parenrightinferior'] = 0x208E;
	  t['parenrightmonospace'] = 0xFF09;
	  t['parenrightsmall'] = 0xFE5A;
	  t['parenrightsuperior'] = 0x207E;
	  t['parenrighttp'] = 0xF8F6;
	  t['parenrightvertical'] = 0xFE36;
	  t['partialdiff'] = 0x2202;
	  t['paseqhebrew'] = 0x05C0;
	  t['pashtahebrew'] = 0x0599;
	  t['pasquare'] = 0x33A9;
	  t['patah'] = 0x05B7;
	  t['patah11'] = 0x05B7;
	  t['patah1d'] = 0x05B7;
	  t['patah2a'] = 0x05B7;
	  t['patahhebrew'] = 0x05B7;
	  t['patahnarrowhebrew'] = 0x05B7;
	  t['patahquarterhebrew'] = 0x05B7;
	  t['patahwidehebrew'] = 0x05B7;
	  t['pazerhebrew'] = 0x05A1;
	  t['pbopomofo'] = 0x3106;
	  t['pcircle'] = 0x24DF;
	  t['pdotaccent'] = 0x1E57;
	  t['pe'] = 0x05E4;
	  t['pecyrillic'] = 0x043F;
	  t['pedagesh'] = 0xFB44;
	  t['pedageshhebrew'] = 0xFB44;
	  t['peezisquare'] = 0x333B;
	  t['pefinaldageshhebrew'] = 0xFB43;
	  t['peharabic'] = 0x067E;
	  t['peharmenian'] = 0x057A;
	  t['pehebrew'] = 0x05E4;
	  t['pehfinalarabic'] = 0xFB57;
	  t['pehinitialarabic'] = 0xFB58;
	  t['pehiragana'] = 0x307A;
	  t['pehmedialarabic'] = 0xFB59;
	  t['pekatakana'] = 0x30DA;
	  t['pemiddlehookcyrillic'] = 0x04A7;
	  t['perafehebrew'] = 0xFB4E;
	  t['percent'] = 0x0025;
	  t['percentarabic'] = 0x066A;
	  t['percentmonospace'] = 0xFF05;
	  t['percentsmall'] = 0xFE6A;
	  t['period'] = 0x002E;
	  t['periodarmenian'] = 0x0589;
	  t['periodcentered'] = 0x00B7;
	  t['periodhalfwidth'] = 0xFF61;
	  t['periodinferior'] = 0xF6E7;
	  t['periodmonospace'] = 0xFF0E;
	  t['periodsmall'] = 0xFE52;
	  t['periodsuperior'] = 0xF6E8;
	  t['perispomenigreekcmb'] = 0x0342;
	  t['perpendicular'] = 0x22A5;
	  t['perthousand'] = 0x2030;
	  t['peseta'] = 0x20A7;
	  t['pfsquare'] = 0x338A;
	  t['phabengali'] = 0x09AB;
	  t['phadeva'] = 0x092B;
	  t['phagujarati'] = 0x0AAB;
	  t['phagurmukhi'] = 0x0A2B;
	  t['phi'] = 0x03C6;
	  t['phi1'] = 0x03D5;
	  t['phieuphacirclekorean'] = 0x327A;
	  t['phieuphaparenkorean'] = 0x321A;
	  t['phieuphcirclekorean'] = 0x326C;
	  t['phieuphkorean'] = 0x314D;
	  t['phieuphparenkorean'] = 0x320C;
	  t['philatin'] = 0x0278;
	  t['phinthuthai'] = 0x0E3A;
	  t['phisymbolgreek'] = 0x03D5;
	  t['phook'] = 0x01A5;
	  t['phophanthai'] = 0x0E1E;
	  t['phophungthai'] = 0x0E1C;
	  t['phosamphaothai'] = 0x0E20;
	  t['pi'] = 0x03C0;
	  t['pieupacirclekorean'] = 0x3273;
	  t['pieupaparenkorean'] = 0x3213;
	  t['pieupcieuckorean'] = 0x3176;
	  t['pieupcirclekorean'] = 0x3265;
	  t['pieupkiyeokkorean'] = 0x3172;
	  t['pieupkorean'] = 0x3142;
	  t['pieupparenkorean'] = 0x3205;
	  t['pieupsioskiyeokkorean'] = 0x3174;
	  t['pieupsioskorean'] = 0x3144;
	  t['pieupsiostikeutkorean'] = 0x3175;
	  t['pieupthieuthkorean'] = 0x3177;
	  t['pieuptikeutkorean'] = 0x3173;
	  t['pihiragana'] = 0x3074;
	  t['pikatakana'] = 0x30D4;
	  t['pisymbolgreek'] = 0x03D6;
	  t['piwrarmenian'] = 0x0583;
	  t['plus'] = 0x002B;
	  t['plusbelowcmb'] = 0x031F;
	  t['pluscircle'] = 0x2295;
	  t['plusminus'] = 0x00B1;
	  t['plusmod'] = 0x02D6;
	  t['plusmonospace'] = 0xFF0B;
	  t['plussmall'] = 0xFE62;
	  t['plussuperior'] = 0x207A;
	  t['pmonospace'] = 0xFF50;
	  t['pmsquare'] = 0x33D8;
	  t['pohiragana'] = 0x307D;
	  t['pointingindexdownwhite'] = 0x261F;
	  t['pointingindexleftwhite'] = 0x261C;
	  t['pointingindexrightwhite'] = 0x261E;
	  t['pointingindexupwhite'] = 0x261D;
	  t['pokatakana'] = 0x30DD;
	  t['poplathai'] = 0x0E1B;
	  t['postalmark'] = 0x3012;
	  t['postalmarkface'] = 0x3020;
	  t['pparen'] = 0x24AB;
	  t['precedes'] = 0x227A;
	  t['prescription'] = 0x211E;
	  t['primemod'] = 0x02B9;
	  t['primereversed'] = 0x2035;
	  t['product'] = 0x220F;
	  t['projective'] = 0x2305;
	  t['prolongedkana'] = 0x30FC;
	  t['propellor'] = 0x2318;
	  t['propersubset'] = 0x2282;
	  t['propersuperset'] = 0x2283;
	  t['proportion'] = 0x2237;
	  t['proportional'] = 0x221D;
	  t['psi'] = 0x03C8;
	  t['psicyrillic'] = 0x0471;
	  t['psilipneumatacyrilliccmb'] = 0x0486;
	  t['pssquare'] = 0x33B0;
	  t['puhiragana'] = 0x3077;
	  t['pukatakana'] = 0x30D7;
	  t['pvsquare'] = 0x33B4;
	  t['pwsquare'] = 0x33BA;
	  t['q'] = 0x0071;
	  t['qadeva'] = 0x0958;
	  t['qadmahebrew'] = 0x05A8;
	  t['qafarabic'] = 0x0642;
	  t['qaffinalarabic'] = 0xFED6;
	  t['qafinitialarabic'] = 0xFED7;
	  t['qafmedialarabic'] = 0xFED8;
	  t['qamats'] = 0x05B8;
	  t['qamats10'] = 0x05B8;
	  t['qamats1a'] = 0x05B8;
	  t['qamats1c'] = 0x05B8;
	  t['qamats27'] = 0x05B8;
	  t['qamats29'] = 0x05B8;
	  t['qamats33'] = 0x05B8;
	  t['qamatsde'] = 0x05B8;
	  t['qamatshebrew'] = 0x05B8;
	  t['qamatsnarrowhebrew'] = 0x05B8;
	  t['qamatsqatanhebrew'] = 0x05B8;
	  t['qamatsqatannarrowhebrew'] = 0x05B8;
	  t['qamatsqatanquarterhebrew'] = 0x05B8;
	  t['qamatsqatanwidehebrew'] = 0x05B8;
	  t['qamatsquarterhebrew'] = 0x05B8;
	  t['qamatswidehebrew'] = 0x05B8;
	  t['qarneyparahebrew'] = 0x059F;
	  t['qbopomofo'] = 0x3111;
	  t['qcircle'] = 0x24E0;
	  t['qhook'] = 0x02A0;
	  t['qmonospace'] = 0xFF51;
	  t['qof'] = 0x05E7;
	  t['qofdagesh'] = 0xFB47;
	  t['qofdageshhebrew'] = 0xFB47;
	  t['qofhebrew'] = 0x05E7;
	  t['qparen'] = 0x24AC;
	  t['quarternote'] = 0x2669;
	  t['qubuts'] = 0x05BB;
	  t['qubuts18'] = 0x05BB;
	  t['qubuts25'] = 0x05BB;
	  t['qubuts31'] = 0x05BB;
	  t['qubutshebrew'] = 0x05BB;
	  t['qubutsnarrowhebrew'] = 0x05BB;
	  t['qubutsquarterhebrew'] = 0x05BB;
	  t['qubutswidehebrew'] = 0x05BB;
	  t['question'] = 0x003F;
	  t['questionarabic'] = 0x061F;
	  t['questionarmenian'] = 0x055E;
	  t['questiondown'] = 0x00BF;
	  t['questiondownsmall'] = 0xF7BF;
	  t['questiongreek'] = 0x037E;
	  t['questionmonospace'] = 0xFF1F;
	  t['questionsmall'] = 0xF73F;
	  t['quotedbl'] = 0x0022;
	  t['quotedblbase'] = 0x201E;
	  t['quotedblleft'] = 0x201C;
	  t['quotedblmonospace'] = 0xFF02;
	  t['quotedblprime'] = 0x301E;
	  t['quotedblprimereversed'] = 0x301D;
	  t['quotedblright'] = 0x201D;
	  t['quoteleft'] = 0x2018;
	  t['quoteleftreversed'] = 0x201B;
	  t['quotereversed'] = 0x201B;
	  t['quoteright'] = 0x2019;
	  t['quoterightn'] = 0x0149;
	  t['quotesinglbase'] = 0x201A;
	  t['quotesingle'] = 0x0027;
	  t['quotesinglemonospace'] = 0xFF07;
	  t['r'] = 0x0072;
	  t['raarmenian'] = 0x057C;
	  t['rabengali'] = 0x09B0;
	  t['racute'] = 0x0155;
	  t['radeva'] = 0x0930;
	  t['radical'] = 0x221A;
	  t['radicalex'] = 0xF8E5;
	  t['radoverssquare'] = 0x33AE;
	  t['radoverssquaredsquare'] = 0x33AF;
	  t['radsquare'] = 0x33AD;
	  t['rafe'] = 0x05BF;
	  t['rafehebrew'] = 0x05BF;
	  t['ragujarati'] = 0x0AB0;
	  t['ragurmukhi'] = 0x0A30;
	  t['rahiragana'] = 0x3089;
	  t['rakatakana'] = 0x30E9;
	  t['rakatakanahalfwidth'] = 0xFF97;
	  t['ralowerdiagonalbengali'] = 0x09F1;
	  t['ramiddlediagonalbengali'] = 0x09F0;
	  t['ramshorn'] = 0x0264;
	  t['ratio'] = 0x2236;
	  t['rbopomofo'] = 0x3116;
	  t['rcaron'] = 0x0159;
	  t['rcedilla'] = 0x0157;
	  t['rcircle'] = 0x24E1;
	  t['rcommaaccent'] = 0x0157;
	  t['rdblgrave'] = 0x0211;
	  t['rdotaccent'] = 0x1E59;
	  t['rdotbelow'] = 0x1E5B;
	  t['rdotbelowmacron'] = 0x1E5D;
	  t['referencemark'] = 0x203B;
	  t['reflexsubset'] = 0x2286;
	  t['reflexsuperset'] = 0x2287;
	  t['registered'] = 0x00AE;
	  t['registersans'] = 0xF8E8;
	  t['registerserif'] = 0xF6DA;
	  t['reharabic'] = 0x0631;
	  t['reharmenian'] = 0x0580;
	  t['rehfinalarabic'] = 0xFEAE;
	  t['rehiragana'] = 0x308C;
	  t['rekatakana'] = 0x30EC;
	  t['rekatakanahalfwidth'] = 0xFF9A;
	  t['resh'] = 0x05E8;
	  t['reshdageshhebrew'] = 0xFB48;
	  t['reshhebrew'] = 0x05E8;
	  t['reversedtilde'] = 0x223D;
	  t['reviahebrew'] = 0x0597;
	  t['reviamugrashhebrew'] = 0x0597;
	  t['revlogicalnot'] = 0x2310;
	  t['rfishhook'] = 0x027E;
	  t['rfishhookreversed'] = 0x027F;
	  t['rhabengali'] = 0x09DD;
	  t['rhadeva'] = 0x095D;
	  t['rho'] = 0x03C1;
	  t['rhook'] = 0x027D;
	  t['rhookturned'] = 0x027B;
	  t['rhookturnedsuperior'] = 0x02B5;
	  t['rhosymbolgreek'] = 0x03F1;
	  t['rhotichookmod'] = 0x02DE;
	  t['rieulacirclekorean'] = 0x3271;
	  t['rieulaparenkorean'] = 0x3211;
	  t['rieulcirclekorean'] = 0x3263;
	  t['rieulhieuhkorean'] = 0x3140;
	  t['rieulkiyeokkorean'] = 0x313A;
	  t['rieulkiyeoksioskorean'] = 0x3169;
	  t['rieulkorean'] = 0x3139;
	  t['rieulmieumkorean'] = 0x313B;
	  t['rieulpansioskorean'] = 0x316C;
	  t['rieulparenkorean'] = 0x3203;
	  t['rieulphieuphkorean'] = 0x313F;
	  t['rieulpieupkorean'] = 0x313C;
	  t['rieulpieupsioskorean'] = 0x316B;
	  t['rieulsioskorean'] = 0x313D;
	  t['rieulthieuthkorean'] = 0x313E;
	  t['rieultikeutkorean'] = 0x316A;
	  t['rieulyeorinhieuhkorean'] = 0x316D;
	  t['rightangle'] = 0x221F;
	  t['righttackbelowcmb'] = 0x0319;
	  t['righttriangle'] = 0x22BF;
	  t['rihiragana'] = 0x308A;
	  t['rikatakana'] = 0x30EA;
	  t['rikatakanahalfwidth'] = 0xFF98;
	  t['ring'] = 0x02DA;
	  t['ringbelowcmb'] = 0x0325;
	  t['ringcmb'] = 0x030A;
	  t['ringhalfleft'] = 0x02BF;
	  t['ringhalfleftarmenian'] = 0x0559;
	  t['ringhalfleftbelowcmb'] = 0x031C;
	  t['ringhalfleftcentered'] = 0x02D3;
	  t['ringhalfright'] = 0x02BE;
	  t['ringhalfrightbelowcmb'] = 0x0339;
	  t['ringhalfrightcentered'] = 0x02D2;
	  t['rinvertedbreve'] = 0x0213;
	  t['rittorusquare'] = 0x3351;
	  t['rlinebelow'] = 0x1E5F;
	  t['rlongleg'] = 0x027C;
	  t['rlonglegturned'] = 0x027A;
	  t['rmonospace'] = 0xFF52;
	  t['rohiragana'] = 0x308D;
	  t['rokatakana'] = 0x30ED;
	  t['rokatakanahalfwidth'] = 0xFF9B;
	  t['roruathai'] = 0x0E23;
	  t['rparen'] = 0x24AD;
	  t['rrabengali'] = 0x09DC;
	  t['rradeva'] = 0x0931;
	  t['rragurmukhi'] = 0x0A5C;
	  t['rreharabic'] = 0x0691;
	  t['rrehfinalarabic'] = 0xFB8D;
	  t['rrvocalicbengali'] = 0x09E0;
	  t['rrvocalicdeva'] = 0x0960;
	  t['rrvocalicgujarati'] = 0x0AE0;
	  t['rrvocalicvowelsignbengali'] = 0x09C4;
	  t['rrvocalicvowelsigndeva'] = 0x0944;
	  t['rrvocalicvowelsigngujarati'] = 0x0AC4;
	  t['rsuperior'] = 0xF6F1;
	  t['rtblock'] = 0x2590;
	  t['rturned'] = 0x0279;
	  t['rturnedsuperior'] = 0x02B4;
	  t['ruhiragana'] = 0x308B;
	  t['rukatakana'] = 0x30EB;
	  t['rukatakanahalfwidth'] = 0xFF99;
	  t['rupeemarkbengali'] = 0x09F2;
	  t['rupeesignbengali'] = 0x09F3;
	  t['rupiah'] = 0xF6DD;
	  t['ruthai'] = 0x0E24;
	  t['rvocalicbengali'] = 0x098B;
	  t['rvocalicdeva'] = 0x090B;
	  t['rvocalicgujarati'] = 0x0A8B;
	  t['rvocalicvowelsignbengali'] = 0x09C3;
	  t['rvocalicvowelsigndeva'] = 0x0943;
	  t['rvocalicvowelsigngujarati'] = 0x0AC3;
	  t['s'] = 0x0073;
	  t['sabengali'] = 0x09B8;
	  t['sacute'] = 0x015B;
	  t['sacutedotaccent'] = 0x1E65;
	  t['sadarabic'] = 0x0635;
	  t['sadeva'] = 0x0938;
	  t['sadfinalarabic'] = 0xFEBA;
	  t['sadinitialarabic'] = 0xFEBB;
	  t['sadmedialarabic'] = 0xFEBC;
	  t['sagujarati'] = 0x0AB8;
	  t['sagurmukhi'] = 0x0A38;
	  t['sahiragana'] = 0x3055;
	  t['sakatakana'] = 0x30B5;
	  t['sakatakanahalfwidth'] = 0xFF7B;
	  t['sallallahoualayhewasallamarabic'] = 0xFDFA;
	  t['samekh'] = 0x05E1;
	  t['samekhdagesh'] = 0xFB41;
	  t['samekhdageshhebrew'] = 0xFB41;
	  t['samekhhebrew'] = 0x05E1;
	  t['saraaathai'] = 0x0E32;
	  t['saraaethai'] = 0x0E41;
	  t['saraaimaimalaithai'] = 0x0E44;
	  t['saraaimaimuanthai'] = 0x0E43;
	  t['saraamthai'] = 0x0E33;
	  t['saraathai'] = 0x0E30;
	  t['saraethai'] = 0x0E40;
	  t['saraiileftthai'] = 0xF886;
	  t['saraiithai'] = 0x0E35;
	  t['saraileftthai'] = 0xF885;
	  t['saraithai'] = 0x0E34;
	  t['saraothai'] = 0x0E42;
	  t['saraueeleftthai'] = 0xF888;
	  t['saraueethai'] = 0x0E37;
	  t['saraueleftthai'] = 0xF887;
	  t['sarauethai'] = 0x0E36;
	  t['sarauthai'] = 0x0E38;
	  t['sarauuthai'] = 0x0E39;
	  t['sbopomofo'] = 0x3119;
	  t['scaron'] = 0x0161;
	  t['scarondotaccent'] = 0x1E67;
	  t['scedilla'] = 0x015F;
	  t['schwa'] = 0x0259;
	  t['schwacyrillic'] = 0x04D9;
	  t['schwadieresiscyrillic'] = 0x04DB;
	  t['schwahook'] = 0x025A;
	  t['scircle'] = 0x24E2;
	  t['scircumflex'] = 0x015D;
	  t['scommaaccent'] = 0x0219;
	  t['sdotaccent'] = 0x1E61;
	  t['sdotbelow'] = 0x1E63;
	  t['sdotbelowdotaccent'] = 0x1E69;
	  t['seagullbelowcmb'] = 0x033C;
	  t['second'] = 0x2033;
	  t['secondtonechinese'] = 0x02CA;
	  t['section'] = 0x00A7;
	  t['seenarabic'] = 0x0633;
	  t['seenfinalarabic'] = 0xFEB2;
	  t['seeninitialarabic'] = 0xFEB3;
	  t['seenmedialarabic'] = 0xFEB4;
	  t['segol'] = 0x05B6;
	  t['segol13'] = 0x05B6;
	  t['segol1f'] = 0x05B6;
	  t['segol2c'] = 0x05B6;
	  t['segolhebrew'] = 0x05B6;
	  t['segolnarrowhebrew'] = 0x05B6;
	  t['segolquarterhebrew'] = 0x05B6;
	  t['segoltahebrew'] = 0x0592;
	  t['segolwidehebrew'] = 0x05B6;
	  t['seharmenian'] = 0x057D;
	  t['sehiragana'] = 0x305B;
	  t['sekatakana'] = 0x30BB;
	  t['sekatakanahalfwidth'] = 0xFF7E;
	  t['semicolon'] = 0x003B;
	  t['semicolonarabic'] = 0x061B;
	  t['semicolonmonospace'] = 0xFF1B;
	  t['semicolonsmall'] = 0xFE54;
	  t['semivoicedmarkkana'] = 0x309C;
	  t['semivoicedmarkkanahalfwidth'] = 0xFF9F;
	  t['sentisquare'] = 0x3322;
	  t['sentosquare'] = 0x3323;
	  t['seven'] = 0x0037;
	  t['sevenarabic'] = 0x0667;
	  t['sevenbengali'] = 0x09ED;
	  t['sevencircle'] = 0x2466;
	  t['sevencircleinversesansserif'] = 0x2790;
	  t['sevendeva'] = 0x096D;
	  t['seveneighths'] = 0x215E;
	  t['sevengujarati'] = 0x0AED;
	  t['sevengurmukhi'] = 0x0A6D;
	  t['sevenhackarabic'] = 0x0667;
	  t['sevenhangzhou'] = 0x3027;
	  t['sevenideographicparen'] = 0x3226;
	  t['seveninferior'] = 0x2087;
	  t['sevenmonospace'] = 0xFF17;
	  t['sevenoldstyle'] = 0xF737;
	  t['sevenparen'] = 0x247A;
	  t['sevenperiod'] = 0x248E;
	  t['sevenpersian'] = 0x06F7;
	  t['sevenroman'] = 0x2176;
	  t['sevensuperior'] = 0x2077;
	  t['seventeencircle'] = 0x2470;
	  t['seventeenparen'] = 0x2484;
	  t['seventeenperiod'] = 0x2498;
	  t['seventhai'] = 0x0E57;
	  t['sfthyphen'] = 0x00AD;
	  t['shaarmenian'] = 0x0577;
	  t['shabengali'] = 0x09B6;
	  t['shacyrillic'] = 0x0448;
	  t['shaddaarabic'] = 0x0651;
	  t['shaddadammaarabic'] = 0xFC61;
	  t['shaddadammatanarabic'] = 0xFC5E;
	  t['shaddafathaarabic'] = 0xFC60;
	  t['shaddakasraarabic'] = 0xFC62;
	  t['shaddakasratanarabic'] = 0xFC5F;
	  t['shade'] = 0x2592;
	  t['shadedark'] = 0x2593;
	  t['shadelight'] = 0x2591;
	  t['shademedium'] = 0x2592;
	  t['shadeva'] = 0x0936;
	  t['shagujarati'] = 0x0AB6;
	  t['shagurmukhi'] = 0x0A36;
	  t['shalshelethebrew'] = 0x0593;
	  t['shbopomofo'] = 0x3115;
	  t['shchacyrillic'] = 0x0449;
	  t['sheenarabic'] = 0x0634;
	  t['sheenfinalarabic'] = 0xFEB6;
	  t['sheeninitialarabic'] = 0xFEB7;
	  t['sheenmedialarabic'] = 0xFEB8;
	  t['sheicoptic'] = 0x03E3;
	  t['sheqel'] = 0x20AA;
	  t['sheqelhebrew'] = 0x20AA;
	  t['sheva'] = 0x05B0;
	  t['sheva115'] = 0x05B0;
	  t['sheva15'] = 0x05B0;
	  t['sheva22'] = 0x05B0;
	  t['sheva2e'] = 0x05B0;
	  t['shevahebrew'] = 0x05B0;
	  t['shevanarrowhebrew'] = 0x05B0;
	  t['shevaquarterhebrew'] = 0x05B0;
	  t['shevawidehebrew'] = 0x05B0;
	  t['shhacyrillic'] = 0x04BB;
	  t['shimacoptic'] = 0x03ED;
	  t['shin'] = 0x05E9;
	  t['shindagesh'] = 0xFB49;
	  t['shindageshhebrew'] = 0xFB49;
	  t['shindageshshindot'] = 0xFB2C;
	  t['shindageshshindothebrew'] = 0xFB2C;
	  t['shindageshsindot'] = 0xFB2D;
	  t['shindageshsindothebrew'] = 0xFB2D;
	  t['shindothebrew'] = 0x05C1;
	  t['shinhebrew'] = 0x05E9;
	  t['shinshindot'] = 0xFB2A;
	  t['shinshindothebrew'] = 0xFB2A;
	  t['shinsindot'] = 0xFB2B;
	  t['shinsindothebrew'] = 0xFB2B;
	  t['shook'] = 0x0282;
	  t['sigma'] = 0x03C3;
	  t['sigma1'] = 0x03C2;
	  t['sigmafinal'] = 0x03C2;
	  t['sigmalunatesymbolgreek'] = 0x03F2;
	  t['sihiragana'] = 0x3057;
	  t['sikatakana'] = 0x30B7;
	  t['sikatakanahalfwidth'] = 0xFF7C;
	  t['siluqhebrew'] = 0x05BD;
	  t['siluqlefthebrew'] = 0x05BD;
	  t['similar'] = 0x223C;
	  t['sindothebrew'] = 0x05C2;
	  t['siosacirclekorean'] = 0x3274;
	  t['siosaparenkorean'] = 0x3214;
	  t['sioscieuckorean'] = 0x317E;
	  t['sioscirclekorean'] = 0x3266;
	  t['sioskiyeokkorean'] = 0x317A;
	  t['sioskorean'] = 0x3145;
	  t['siosnieunkorean'] = 0x317B;
	  t['siosparenkorean'] = 0x3206;
	  t['siospieupkorean'] = 0x317D;
	  t['siostikeutkorean'] = 0x317C;
	  t['six'] = 0x0036;
	  t['sixarabic'] = 0x0666;
	  t['sixbengali'] = 0x09EC;
	  t['sixcircle'] = 0x2465;
	  t['sixcircleinversesansserif'] = 0x278F;
	  t['sixdeva'] = 0x096C;
	  t['sixgujarati'] = 0x0AEC;
	  t['sixgurmukhi'] = 0x0A6C;
	  t['sixhackarabic'] = 0x0666;
	  t['sixhangzhou'] = 0x3026;
	  t['sixideographicparen'] = 0x3225;
	  t['sixinferior'] = 0x2086;
	  t['sixmonospace'] = 0xFF16;
	  t['sixoldstyle'] = 0xF736;
	  t['sixparen'] = 0x2479;
	  t['sixperiod'] = 0x248D;
	  t['sixpersian'] = 0x06F6;
	  t['sixroman'] = 0x2175;
	  t['sixsuperior'] = 0x2076;
	  t['sixteencircle'] = 0x246F;
	  t['sixteencurrencydenominatorbengali'] = 0x09F9;
	  t['sixteenparen'] = 0x2483;
	  t['sixteenperiod'] = 0x2497;
	  t['sixthai'] = 0x0E56;
	  t['slash'] = 0x002F;
	  t['slashmonospace'] = 0xFF0F;
	  t['slong'] = 0x017F;
	  t['slongdotaccent'] = 0x1E9B;
	  t['smileface'] = 0x263A;
	  t['smonospace'] = 0xFF53;
	  t['sofpasuqhebrew'] = 0x05C3;
	  t['softhyphen'] = 0x00AD;
	  t['softsigncyrillic'] = 0x044C;
	  t['sohiragana'] = 0x305D;
	  t['sokatakana'] = 0x30BD;
	  t['sokatakanahalfwidth'] = 0xFF7F;
	  t['soliduslongoverlaycmb'] = 0x0338;
	  t['solidusshortoverlaycmb'] = 0x0337;
	  t['sorusithai'] = 0x0E29;
	  t['sosalathai'] = 0x0E28;
	  t['sosothai'] = 0x0E0B;
	  t['sosuathai'] = 0x0E2A;
	  t['space'] = 0x0020;
	  t['spacehackarabic'] = 0x0020;
	  t['spade'] = 0x2660;
	  t['spadesuitblack'] = 0x2660;
	  t['spadesuitwhite'] = 0x2664;
	  t['sparen'] = 0x24AE;
	  t['squarebelowcmb'] = 0x033B;
	  t['squarecc'] = 0x33C4;
	  t['squarecm'] = 0x339D;
	  t['squarediagonalcrosshatchfill'] = 0x25A9;
	  t['squarehorizontalfill'] = 0x25A4;
	  t['squarekg'] = 0x338F;
	  t['squarekm'] = 0x339E;
	  t['squarekmcapital'] = 0x33CE;
	  t['squareln'] = 0x33D1;
	  t['squarelog'] = 0x33D2;
	  t['squaremg'] = 0x338E;
	  t['squaremil'] = 0x33D5;
	  t['squaremm'] = 0x339C;
	  t['squaremsquared'] = 0x33A1;
	  t['squareorthogonalcrosshatchfill'] = 0x25A6;
	  t['squareupperlefttolowerrightfill'] = 0x25A7;
	  t['squareupperrighttolowerleftfill'] = 0x25A8;
	  t['squareverticalfill'] = 0x25A5;
	  t['squarewhitewithsmallblack'] = 0x25A3;
	  t['srsquare'] = 0x33DB;
	  t['ssabengali'] = 0x09B7;
	  t['ssadeva'] = 0x0937;
	  t['ssagujarati'] = 0x0AB7;
	  t['ssangcieuckorean'] = 0x3149;
	  t['ssanghieuhkorean'] = 0x3185;
	  t['ssangieungkorean'] = 0x3180;
	  t['ssangkiyeokkorean'] = 0x3132;
	  t['ssangnieunkorean'] = 0x3165;
	  t['ssangpieupkorean'] = 0x3143;
	  t['ssangsioskorean'] = 0x3146;
	  t['ssangtikeutkorean'] = 0x3138;
	  t['ssuperior'] = 0xF6F2;
	  t['sterling'] = 0x00A3;
	  t['sterlingmonospace'] = 0xFFE1;
	  t['strokelongoverlaycmb'] = 0x0336;
	  t['strokeshortoverlaycmb'] = 0x0335;
	  t['subset'] = 0x2282;
	  t['subsetnotequal'] = 0x228A;
	  t['subsetorequal'] = 0x2286;
	  t['succeeds'] = 0x227B;
	  t['suchthat'] = 0x220B;
	  t['suhiragana'] = 0x3059;
	  t['sukatakana'] = 0x30B9;
	  t['sukatakanahalfwidth'] = 0xFF7D;
	  t['sukunarabic'] = 0x0652;
	  t['summation'] = 0x2211;
	  t['sun'] = 0x263C;
	  t['superset'] = 0x2283;
	  t['supersetnotequal'] = 0x228B;
	  t['supersetorequal'] = 0x2287;
	  t['svsquare'] = 0x33DC;
	  t['syouwaerasquare'] = 0x337C;
	  t['t'] = 0x0074;
	  t['tabengali'] = 0x09A4;
	  t['tackdown'] = 0x22A4;
	  t['tackleft'] = 0x22A3;
	  t['tadeva'] = 0x0924;
	  t['tagujarati'] = 0x0AA4;
	  t['tagurmukhi'] = 0x0A24;
	  t['taharabic'] = 0x0637;
	  t['tahfinalarabic'] = 0xFEC2;
	  t['tahinitialarabic'] = 0xFEC3;
	  t['tahiragana'] = 0x305F;
	  t['tahmedialarabic'] = 0xFEC4;
	  t['taisyouerasquare'] = 0x337D;
	  t['takatakana'] = 0x30BF;
	  t['takatakanahalfwidth'] = 0xFF80;
	  t['tatweelarabic'] = 0x0640;
	  t['tau'] = 0x03C4;
	  t['tav'] = 0x05EA;
	  t['tavdages'] = 0xFB4A;
	  t['tavdagesh'] = 0xFB4A;
	  t['tavdageshhebrew'] = 0xFB4A;
	  t['tavhebrew'] = 0x05EA;
	  t['tbar'] = 0x0167;
	  t['tbopomofo'] = 0x310A;
	  t['tcaron'] = 0x0165;
	  t['tccurl'] = 0x02A8;
	  t['tcedilla'] = 0x0163;
	  t['tcheharabic'] = 0x0686;
	  t['tchehfinalarabic'] = 0xFB7B;
	  t['tchehinitialarabic'] = 0xFB7C;
	  t['tchehmedialarabic'] = 0xFB7D;
	  t['tcircle'] = 0x24E3;
	  t['tcircumflexbelow'] = 0x1E71;
	  t['tcommaaccent'] = 0x0163;
	  t['tdieresis'] = 0x1E97;
	  t['tdotaccent'] = 0x1E6B;
	  t['tdotbelow'] = 0x1E6D;
	  t['tecyrillic'] = 0x0442;
	  t['tedescendercyrillic'] = 0x04AD;
	  t['teharabic'] = 0x062A;
	  t['tehfinalarabic'] = 0xFE96;
	  t['tehhahinitialarabic'] = 0xFCA2;
	  t['tehhahisolatedarabic'] = 0xFC0C;
	  t['tehinitialarabic'] = 0xFE97;
	  t['tehiragana'] = 0x3066;
	  t['tehjeeminitialarabic'] = 0xFCA1;
	  t['tehjeemisolatedarabic'] = 0xFC0B;
	  t['tehmarbutaarabic'] = 0x0629;
	  t['tehmarbutafinalarabic'] = 0xFE94;
	  t['tehmedialarabic'] = 0xFE98;
	  t['tehmeeminitialarabic'] = 0xFCA4;
	  t['tehmeemisolatedarabic'] = 0xFC0E;
	  t['tehnoonfinalarabic'] = 0xFC73;
	  t['tekatakana'] = 0x30C6;
	  t['tekatakanahalfwidth'] = 0xFF83;
	  t['telephone'] = 0x2121;
	  t['telephoneblack'] = 0x260E;
	  t['telishagedolahebrew'] = 0x05A0;
	  t['telishaqetanahebrew'] = 0x05A9;
	  t['tencircle'] = 0x2469;
	  t['tenideographicparen'] = 0x3229;
	  t['tenparen'] = 0x247D;
	  t['tenperiod'] = 0x2491;
	  t['tenroman'] = 0x2179;
	  t['tesh'] = 0x02A7;
	  t['tet'] = 0x05D8;
	  t['tetdagesh'] = 0xFB38;
	  t['tetdageshhebrew'] = 0xFB38;
	  t['tethebrew'] = 0x05D8;
	  t['tetsecyrillic'] = 0x04B5;
	  t['tevirhebrew'] = 0x059B;
	  t['tevirlefthebrew'] = 0x059B;
	  t['thabengali'] = 0x09A5;
	  t['thadeva'] = 0x0925;
	  t['thagujarati'] = 0x0AA5;
	  t['thagurmukhi'] = 0x0A25;
	  t['thalarabic'] = 0x0630;
	  t['thalfinalarabic'] = 0xFEAC;
	  t['thanthakhatlowleftthai'] = 0xF898;
	  t['thanthakhatlowrightthai'] = 0xF897;
	  t['thanthakhatthai'] = 0x0E4C;
	  t['thanthakhatupperleftthai'] = 0xF896;
	  t['theharabic'] = 0x062B;
	  t['thehfinalarabic'] = 0xFE9A;
	  t['thehinitialarabic'] = 0xFE9B;
	  t['thehmedialarabic'] = 0xFE9C;
	  t['thereexists'] = 0x2203;
	  t['therefore'] = 0x2234;
	  t['theta'] = 0x03B8;
	  t['theta1'] = 0x03D1;
	  t['thetasymbolgreek'] = 0x03D1;
	  t['thieuthacirclekorean'] = 0x3279;
	  t['thieuthaparenkorean'] = 0x3219;
	  t['thieuthcirclekorean'] = 0x326B;
	  t['thieuthkorean'] = 0x314C;
	  t['thieuthparenkorean'] = 0x320B;
	  t['thirteencircle'] = 0x246C;
	  t['thirteenparen'] = 0x2480;
	  t['thirteenperiod'] = 0x2494;
	  t['thonangmonthothai'] = 0x0E11;
	  t['thook'] = 0x01AD;
	  t['thophuthaothai'] = 0x0E12;
	  t['thorn'] = 0x00FE;
	  t['thothahanthai'] = 0x0E17;
	  t['thothanthai'] = 0x0E10;
	  t['thothongthai'] = 0x0E18;
	  t['thothungthai'] = 0x0E16;
	  t['thousandcyrillic'] = 0x0482;
	  t['thousandsseparatorarabic'] = 0x066C;
	  t['thousandsseparatorpersian'] = 0x066C;
	  t['three'] = 0x0033;
	  t['threearabic'] = 0x0663;
	  t['threebengali'] = 0x09E9;
	  t['threecircle'] = 0x2462;
	  t['threecircleinversesansserif'] = 0x278C;
	  t['threedeva'] = 0x0969;
	  t['threeeighths'] = 0x215C;
	  t['threegujarati'] = 0x0AE9;
	  t['threegurmukhi'] = 0x0A69;
	  t['threehackarabic'] = 0x0663;
	  t['threehangzhou'] = 0x3023;
	  t['threeideographicparen'] = 0x3222;
	  t['threeinferior'] = 0x2083;
	  t['threemonospace'] = 0xFF13;
	  t['threenumeratorbengali'] = 0x09F6;
	  t['threeoldstyle'] = 0xF733;
	  t['threeparen'] = 0x2476;
	  t['threeperiod'] = 0x248A;
	  t['threepersian'] = 0x06F3;
	  t['threequarters'] = 0x00BE;
	  t['threequartersemdash'] = 0xF6DE;
	  t['threeroman'] = 0x2172;
	  t['threesuperior'] = 0x00B3;
	  t['threethai'] = 0x0E53;
	  t['thzsquare'] = 0x3394;
	  t['tihiragana'] = 0x3061;
	  t['tikatakana'] = 0x30C1;
	  t['tikatakanahalfwidth'] = 0xFF81;
	  t['tikeutacirclekorean'] = 0x3270;
	  t['tikeutaparenkorean'] = 0x3210;
	  t['tikeutcirclekorean'] = 0x3262;
	  t['tikeutkorean'] = 0x3137;
	  t['tikeutparenkorean'] = 0x3202;
	  t['tilde'] = 0x02DC;
	  t['tildebelowcmb'] = 0x0330;
	  t['tildecmb'] = 0x0303;
	  t['tildecomb'] = 0x0303;
	  t['tildedoublecmb'] = 0x0360;
	  t['tildeoperator'] = 0x223C;
	  t['tildeoverlaycmb'] = 0x0334;
	  t['tildeverticalcmb'] = 0x033E;
	  t['timescircle'] = 0x2297;
	  t['tipehahebrew'] = 0x0596;
	  t['tipehalefthebrew'] = 0x0596;
	  t['tippigurmukhi'] = 0x0A70;
	  t['titlocyrilliccmb'] = 0x0483;
	  t['tiwnarmenian'] = 0x057F;
	  t['tlinebelow'] = 0x1E6F;
	  t['tmonospace'] = 0xFF54;
	  t['toarmenian'] = 0x0569;
	  t['tohiragana'] = 0x3068;
	  t['tokatakana'] = 0x30C8;
	  t['tokatakanahalfwidth'] = 0xFF84;
	  t['tonebarextrahighmod'] = 0x02E5;
	  t['tonebarextralowmod'] = 0x02E9;
	  t['tonebarhighmod'] = 0x02E6;
	  t['tonebarlowmod'] = 0x02E8;
	  t['tonebarmidmod'] = 0x02E7;
	  t['tonefive'] = 0x01BD;
	  t['tonesix'] = 0x0185;
	  t['tonetwo'] = 0x01A8;
	  t['tonos'] = 0x0384;
	  t['tonsquare'] = 0x3327;
	  t['topatakthai'] = 0x0E0F;
	  t['tortoiseshellbracketleft'] = 0x3014;
	  t['tortoiseshellbracketleftsmall'] = 0xFE5D;
	  t['tortoiseshellbracketleftvertical'] = 0xFE39;
	  t['tortoiseshellbracketright'] = 0x3015;
	  t['tortoiseshellbracketrightsmall'] = 0xFE5E;
	  t['tortoiseshellbracketrightvertical'] = 0xFE3A;
	  t['totaothai'] = 0x0E15;
	  t['tpalatalhook'] = 0x01AB;
	  t['tparen'] = 0x24AF;
	  t['trademark'] = 0x2122;
	  t['trademarksans'] = 0xF8EA;
	  t['trademarkserif'] = 0xF6DB;
	  t['tretroflexhook'] = 0x0288;
	  t['triagdn'] = 0x25BC;
	  t['triaglf'] = 0x25C4;
	  t['triagrt'] = 0x25BA;
	  t['triagup'] = 0x25B2;
	  t['ts'] = 0x02A6;
	  t['tsadi'] = 0x05E6;
	  t['tsadidagesh'] = 0xFB46;
	  t['tsadidageshhebrew'] = 0xFB46;
	  t['tsadihebrew'] = 0x05E6;
	  t['tsecyrillic'] = 0x0446;
	  t['tsere'] = 0x05B5;
	  t['tsere12'] = 0x05B5;
	  t['tsere1e'] = 0x05B5;
	  t['tsere2b'] = 0x05B5;
	  t['tserehebrew'] = 0x05B5;
	  t['tserenarrowhebrew'] = 0x05B5;
	  t['tserequarterhebrew'] = 0x05B5;
	  t['tserewidehebrew'] = 0x05B5;
	  t['tshecyrillic'] = 0x045B;
	  t['tsuperior'] = 0xF6F3;
	  t['ttabengali'] = 0x099F;
	  t['ttadeva'] = 0x091F;
	  t['ttagujarati'] = 0x0A9F;
	  t['ttagurmukhi'] = 0x0A1F;
	  t['tteharabic'] = 0x0679;
	  t['ttehfinalarabic'] = 0xFB67;
	  t['ttehinitialarabic'] = 0xFB68;
	  t['ttehmedialarabic'] = 0xFB69;
	  t['tthabengali'] = 0x09A0;
	  t['tthadeva'] = 0x0920;
	  t['tthagujarati'] = 0x0AA0;
	  t['tthagurmukhi'] = 0x0A20;
	  t['tturned'] = 0x0287;
	  t['tuhiragana'] = 0x3064;
	  t['tukatakana'] = 0x30C4;
	  t['tukatakanahalfwidth'] = 0xFF82;
	  t['tusmallhiragana'] = 0x3063;
	  t['tusmallkatakana'] = 0x30C3;
	  t['tusmallkatakanahalfwidth'] = 0xFF6F;
	  t['twelvecircle'] = 0x246B;
	  t['twelveparen'] = 0x247F;
	  t['twelveperiod'] = 0x2493;
	  t['twelveroman'] = 0x217B;
	  t['twentycircle'] = 0x2473;
	  t['twentyhangzhou'] = 0x5344;
	  t['twentyparen'] = 0x2487;
	  t['twentyperiod'] = 0x249B;
	  t['two'] = 0x0032;
	  t['twoarabic'] = 0x0662;
	  t['twobengali'] = 0x09E8;
	  t['twocircle'] = 0x2461;
	  t['twocircleinversesansserif'] = 0x278B;
	  t['twodeva'] = 0x0968;
	  t['twodotenleader'] = 0x2025;
	  t['twodotleader'] = 0x2025;
	  t['twodotleadervertical'] = 0xFE30;
	  t['twogujarati'] = 0x0AE8;
	  t['twogurmukhi'] = 0x0A68;
	  t['twohackarabic'] = 0x0662;
	  t['twohangzhou'] = 0x3022;
	  t['twoideographicparen'] = 0x3221;
	  t['twoinferior'] = 0x2082;
	  t['twomonospace'] = 0xFF12;
	  t['twonumeratorbengali'] = 0x09F5;
	  t['twooldstyle'] = 0xF732;
	  t['twoparen'] = 0x2475;
	  t['twoperiod'] = 0x2489;
	  t['twopersian'] = 0x06F2;
	  t['tworoman'] = 0x2171;
	  t['twostroke'] = 0x01BB;
	  t['twosuperior'] = 0x00B2;
	  t['twothai'] = 0x0E52;
	  t['twothirds'] = 0x2154;
	  t['u'] = 0x0075;
	  t['uacute'] = 0x00FA;
	  t['ubar'] = 0x0289;
	  t['ubengali'] = 0x0989;
	  t['ubopomofo'] = 0x3128;
	  t['ubreve'] = 0x016D;
	  t['ucaron'] = 0x01D4;
	  t['ucircle'] = 0x24E4;
	  t['ucircumflex'] = 0x00FB;
	  t['ucircumflexbelow'] = 0x1E77;
	  t['ucyrillic'] = 0x0443;
	  t['udattadeva'] = 0x0951;
	  t['udblacute'] = 0x0171;
	  t['udblgrave'] = 0x0215;
	  t['udeva'] = 0x0909;
	  t['udieresis'] = 0x00FC;
	  t['udieresisacute'] = 0x01D8;
	  t['udieresisbelow'] = 0x1E73;
	  t['udieresiscaron'] = 0x01DA;
	  t['udieresiscyrillic'] = 0x04F1;
	  t['udieresisgrave'] = 0x01DC;
	  t['udieresismacron'] = 0x01D6;
	  t['udotbelow'] = 0x1EE5;
	  t['ugrave'] = 0x00F9;
	  t['ugujarati'] = 0x0A89;
	  t['ugurmukhi'] = 0x0A09;
	  t['uhiragana'] = 0x3046;
	  t['uhookabove'] = 0x1EE7;
	  t['uhorn'] = 0x01B0;
	  t['uhornacute'] = 0x1EE9;
	  t['uhorndotbelow'] = 0x1EF1;
	  t['uhorngrave'] = 0x1EEB;
	  t['uhornhookabove'] = 0x1EED;
	  t['uhorntilde'] = 0x1EEF;
	  t['uhungarumlaut'] = 0x0171;
	  t['uhungarumlautcyrillic'] = 0x04F3;
	  t['uinvertedbreve'] = 0x0217;
	  t['ukatakana'] = 0x30A6;
	  t['ukatakanahalfwidth'] = 0xFF73;
	  t['ukcyrillic'] = 0x0479;
	  t['ukorean'] = 0x315C;
	  t['umacron'] = 0x016B;
	  t['umacroncyrillic'] = 0x04EF;
	  t['umacrondieresis'] = 0x1E7B;
	  t['umatragurmukhi'] = 0x0A41;
	  t['umonospace'] = 0xFF55;
	  t['underscore'] = 0x005F;
	  t['underscoredbl'] = 0x2017;
	  t['underscoremonospace'] = 0xFF3F;
	  t['underscorevertical'] = 0xFE33;
	  t['underscorewavy'] = 0xFE4F;
	  t['union'] = 0x222A;
	  t['universal'] = 0x2200;
	  t['uogonek'] = 0x0173;
	  t['uparen'] = 0x24B0;
	  t['upblock'] = 0x2580;
	  t['upperdothebrew'] = 0x05C4;
	  t['upsilon'] = 0x03C5;
	  t['upsilondieresis'] = 0x03CB;
	  t['upsilondieresistonos'] = 0x03B0;
	  t['upsilonlatin'] = 0x028A;
	  t['upsilontonos'] = 0x03CD;
	  t['uptackbelowcmb'] = 0x031D;
	  t['uptackmod'] = 0x02D4;
	  t['uragurmukhi'] = 0x0A73;
	  t['uring'] = 0x016F;
	  t['ushortcyrillic'] = 0x045E;
	  t['usmallhiragana'] = 0x3045;
	  t['usmallkatakana'] = 0x30A5;
	  t['usmallkatakanahalfwidth'] = 0xFF69;
	  t['ustraightcyrillic'] = 0x04AF;
	  t['ustraightstrokecyrillic'] = 0x04B1;
	  t['utilde'] = 0x0169;
	  t['utildeacute'] = 0x1E79;
	  t['utildebelow'] = 0x1E75;
	  t['uubengali'] = 0x098A;
	  t['uudeva'] = 0x090A;
	  t['uugujarati'] = 0x0A8A;
	  t['uugurmukhi'] = 0x0A0A;
	  t['uumatragurmukhi'] = 0x0A42;
	  t['uuvowelsignbengali'] = 0x09C2;
	  t['uuvowelsigndeva'] = 0x0942;
	  t['uuvowelsigngujarati'] = 0x0AC2;
	  t['uvowelsignbengali'] = 0x09C1;
	  t['uvowelsigndeva'] = 0x0941;
	  t['uvowelsigngujarati'] = 0x0AC1;
	  t['v'] = 0x0076;
	  t['vadeva'] = 0x0935;
	  t['vagujarati'] = 0x0AB5;
	  t['vagurmukhi'] = 0x0A35;
	  t['vakatakana'] = 0x30F7;
	  t['vav'] = 0x05D5;
	  t['vavdagesh'] = 0xFB35;
	  t['vavdagesh65'] = 0xFB35;
	  t['vavdageshhebrew'] = 0xFB35;
	  t['vavhebrew'] = 0x05D5;
	  t['vavholam'] = 0xFB4B;
	  t['vavholamhebrew'] = 0xFB4B;
	  t['vavvavhebrew'] = 0x05F0;
	  t['vavyodhebrew'] = 0x05F1;
	  t['vcircle'] = 0x24E5;
	  t['vdotbelow'] = 0x1E7F;
	  t['vecyrillic'] = 0x0432;
	  t['veharabic'] = 0x06A4;
	  t['vehfinalarabic'] = 0xFB6B;
	  t['vehinitialarabic'] = 0xFB6C;
	  t['vehmedialarabic'] = 0xFB6D;
	  t['vekatakana'] = 0x30F9;
	  t['venus'] = 0x2640;
	  t['verticalbar'] = 0x007C;
	  t['verticallineabovecmb'] = 0x030D;
	  t['verticallinebelowcmb'] = 0x0329;
	  t['verticallinelowmod'] = 0x02CC;
	  t['verticallinemod'] = 0x02C8;
	  t['vewarmenian'] = 0x057E;
	  t['vhook'] = 0x028B;
	  t['vikatakana'] = 0x30F8;
	  t['viramabengali'] = 0x09CD;
	  t['viramadeva'] = 0x094D;
	  t['viramagujarati'] = 0x0ACD;
	  t['visargabengali'] = 0x0983;
	  t['visargadeva'] = 0x0903;
	  t['visargagujarati'] = 0x0A83;
	  t['vmonospace'] = 0xFF56;
	  t['voarmenian'] = 0x0578;
	  t['voicediterationhiragana'] = 0x309E;
	  t['voicediterationkatakana'] = 0x30FE;
	  t['voicedmarkkana'] = 0x309B;
	  t['voicedmarkkanahalfwidth'] = 0xFF9E;
	  t['vokatakana'] = 0x30FA;
	  t['vparen'] = 0x24B1;
	  t['vtilde'] = 0x1E7D;
	  t['vturned'] = 0x028C;
	  t['vuhiragana'] = 0x3094;
	  t['vukatakana'] = 0x30F4;
	  t['w'] = 0x0077;
	  t['wacute'] = 0x1E83;
	  t['waekorean'] = 0x3159;
	  t['wahiragana'] = 0x308F;
	  t['wakatakana'] = 0x30EF;
	  t['wakatakanahalfwidth'] = 0xFF9C;
	  t['wakorean'] = 0x3158;
	  t['wasmallhiragana'] = 0x308E;
	  t['wasmallkatakana'] = 0x30EE;
	  t['wattosquare'] = 0x3357;
	  t['wavedash'] = 0x301C;
	  t['wavyunderscorevertical'] = 0xFE34;
	  t['wawarabic'] = 0x0648;
	  t['wawfinalarabic'] = 0xFEEE;
	  t['wawhamzaabovearabic'] = 0x0624;
	  t['wawhamzaabovefinalarabic'] = 0xFE86;
	  t['wbsquare'] = 0x33DD;
	  t['wcircle'] = 0x24E6;
	  t['wcircumflex'] = 0x0175;
	  t['wdieresis'] = 0x1E85;
	  t['wdotaccent'] = 0x1E87;
	  t['wdotbelow'] = 0x1E89;
	  t['wehiragana'] = 0x3091;
	  t['weierstrass'] = 0x2118;
	  t['wekatakana'] = 0x30F1;
	  t['wekorean'] = 0x315E;
	  t['weokorean'] = 0x315D;
	  t['wgrave'] = 0x1E81;
	  t['whitebullet'] = 0x25E6;
	  t['whitecircle'] = 0x25CB;
	  t['whitecircleinverse'] = 0x25D9;
	  t['whitecornerbracketleft'] = 0x300E;
	  t['whitecornerbracketleftvertical'] = 0xFE43;
	  t['whitecornerbracketright'] = 0x300F;
	  t['whitecornerbracketrightvertical'] = 0xFE44;
	  t['whitediamond'] = 0x25C7;
	  t['whitediamondcontainingblacksmalldiamond'] = 0x25C8;
	  t['whitedownpointingsmalltriangle'] = 0x25BF;
	  t['whitedownpointingtriangle'] = 0x25BD;
	  t['whiteleftpointingsmalltriangle'] = 0x25C3;
	  t['whiteleftpointingtriangle'] = 0x25C1;
	  t['whitelenticularbracketleft'] = 0x3016;
	  t['whitelenticularbracketright'] = 0x3017;
	  t['whiterightpointingsmalltriangle'] = 0x25B9;
	  t['whiterightpointingtriangle'] = 0x25B7;
	  t['whitesmallsquare'] = 0x25AB;
	  t['whitesmilingface'] = 0x263A;
	  t['whitesquare'] = 0x25A1;
	  t['whitestar'] = 0x2606;
	  t['whitetelephone'] = 0x260F;
	  t['whitetortoiseshellbracketleft'] = 0x3018;
	  t['whitetortoiseshellbracketright'] = 0x3019;
	  t['whiteuppointingsmalltriangle'] = 0x25B5;
	  t['whiteuppointingtriangle'] = 0x25B3;
	  t['wihiragana'] = 0x3090;
	  t['wikatakana'] = 0x30F0;
	  t['wikorean'] = 0x315F;
	  t['wmonospace'] = 0xFF57;
	  t['wohiragana'] = 0x3092;
	  t['wokatakana'] = 0x30F2;
	  t['wokatakanahalfwidth'] = 0xFF66;
	  t['won'] = 0x20A9;
	  t['wonmonospace'] = 0xFFE6;
	  t['wowaenthai'] = 0x0E27;
	  t['wparen'] = 0x24B2;
	  t['wring'] = 0x1E98;
	  t['wsuperior'] = 0x02B7;
	  t['wturned'] = 0x028D;
	  t['wynn'] = 0x01BF;
	  t['x'] = 0x0078;
	  t['xabovecmb'] = 0x033D;
	  t['xbopomofo'] = 0x3112;
	  t['xcircle'] = 0x24E7;
	  t['xdieresis'] = 0x1E8D;
	  t['xdotaccent'] = 0x1E8B;
	  t['xeharmenian'] = 0x056D;
	  t['xi'] = 0x03BE;
	  t['xmonospace'] = 0xFF58;
	  t['xparen'] = 0x24B3;
	  t['xsuperior'] = 0x02E3;
	  t['y'] = 0x0079;
	  t['yaadosquare'] = 0x334E;
	  t['yabengali'] = 0x09AF;
	  t['yacute'] = 0x00FD;
	  t['yadeva'] = 0x092F;
	  t['yaekorean'] = 0x3152;
	  t['yagujarati'] = 0x0AAF;
	  t['yagurmukhi'] = 0x0A2F;
	  t['yahiragana'] = 0x3084;
	  t['yakatakana'] = 0x30E4;
	  t['yakatakanahalfwidth'] = 0xFF94;
	  t['yakorean'] = 0x3151;
	  t['yamakkanthai'] = 0x0E4E;
	  t['yasmallhiragana'] = 0x3083;
	  t['yasmallkatakana'] = 0x30E3;
	  t['yasmallkatakanahalfwidth'] = 0xFF6C;
	  t['yatcyrillic'] = 0x0463;
	  t['ycircle'] = 0x24E8;
	  t['ycircumflex'] = 0x0177;
	  t['ydieresis'] = 0x00FF;
	  t['ydotaccent'] = 0x1E8F;
	  t['ydotbelow'] = 0x1EF5;
	  t['yeharabic'] = 0x064A;
	  t['yehbarreearabic'] = 0x06D2;
	  t['yehbarreefinalarabic'] = 0xFBAF;
	  t['yehfinalarabic'] = 0xFEF2;
	  t['yehhamzaabovearabic'] = 0x0626;
	  t['yehhamzaabovefinalarabic'] = 0xFE8A;
	  t['yehhamzaaboveinitialarabic'] = 0xFE8B;
	  t['yehhamzaabovemedialarabic'] = 0xFE8C;
	  t['yehinitialarabic'] = 0xFEF3;
	  t['yehmedialarabic'] = 0xFEF4;
	  t['yehmeeminitialarabic'] = 0xFCDD;
	  t['yehmeemisolatedarabic'] = 0xFC58;
	  t['yehnoonfinalarabic'] = 0xFC94;
	  t['yehthreedotsbelowarabic'] = 0x06D1;
	  t['yekorean'] = 0x3156;
	  t['yen'] = 0x00A5;
	  t['yenmonospace'] = 0xFFE5;
	  t['yeokorean'] = 0x3155;
	  t['yeorinhieuhkorean'] = 0x3186;
	  t['yerahbenyomohebrew'] = 0x05AA;
	  t['yerahbenyomolefthebrew'] = 0x05AA;
	  t['yericyrillic'] = 0x044B;
	  t['yerudieresiscyrillic'] = 0x04F9;
	  t['yesieungkorean'] = 0x3181;
	  t['yesieungpansioskorean'] = 0x3183;
	  t['yesieungsioskorean'] = 0x3182;
	  t['yetivhebrew'] = 0x059A;
	  t['ygrave'] = 0x1EF3;
	  t['yhook'] = 0x01B4;
	  t['yhookabove'] = 0x1EF7;
	  t['yiarmenian'] = 0x0575;
	  t['yicyrillic'] = 0x0457;
	  t['yikorean'] = 0x3162;
	  t['yinyang'] = 0x262F;
	  t['yiwnarmenian'] = 0x0582;
	  t['ymonospace'] = 0xFF59;
	  t['yod'] = 0x05D9;
	  t['yoddagesh'] = 0xFB39;
	  t['yoddageshhebrew'] = 0xFB39;
	  t['yodhebrew'] = 0x05D9;
	  t['yodyodhebrew'] = 0x05F2;
	  t['yodyodpatahhebrew'] = 0xFB1F;
	  t['yohiragana'] = 0x3088;
	  t['yoikorean'] = 0x3189;
	  t['yokatakana'] = 0x30E8;
	  t['yokatakanahalfwidth'] = 0xFF96;
	  t['yokorean'] = 0x315B;
	  t['yosmallhiragana'] = 0x3087;
	  t['yosmallkatakana'] = 0x30E7;
	  t['yosmallkatakanahalfwidth'] = 0xFF6E;
	  t['yotgreek'] = 0x03F3;
	  t['yoyaekorean'] = 0x3188;
	  t['yoyakorean'] = 0x3187;
	  t['yoyakthai'] = 0x0E22;
	  t['yoyingthai'] = 0x0E0D;
	  t['yparen'] = 0x24B4;
	  t['ypogegrammeni'] = 0x037A;
	  t['ypogegrammenigreekcmb'] = 0x0345;
	  t['yr'] = 0x01A6;
	  t['yring'] = 0x1E99;
	  t['ysuperior'] = 0x02B8;
	  t['ytilde'] = 0x1EF9;
	  t['yturned'] = 0x028E;
	  t['yuhiragana'] = 0x3086;
	  t['yuikorean'] = 0x318C;
	  t['yukatakana'] = 0x30E6;
	  t['yukatakanahalfwidth'] = 0xFF95;
	  t['yukorean'] = 0x3160;
	  t['yusbigcyrillic'] = 0x046B;
	  t['yusbigiotifiedcyrillic'] = 0x046D;
	  t['yuslittlecyrillic'] = 0x0467;
	  t['yuslittleiotifiedcyrillic'] = 0x0469;
	  t['yusmallhiragana'] = 0x3085;
	  t['yusmallkatakana'] = 0x30E5;
	  t['yusmallkatakanahalfwidth'] = 0xFF6D;
	  t['yuyekorean'] = 0x318B;
	  t['yuyeokorean'] = 0x318A;
	  t['yyabengali'] = 0x09DF;
	  t['yyadeva'] = 0x095F;
	  t['z'] = 0x007A;
	  t['zaarmenian'] = 0x0566;
	  t['zacute'] = 0x017A;
	  t['zadeva'] = 0x095B;
	  t['zagurmukhi'] = 0x0A5B;
	  t['zaharabic'] = 0x0638;
	  t['zahfinalarabic'] = 0xFEC6;
	  t['zahinitialarabic'] = 0xFEC7;
	  t['zahiragana'] = 0x3056;
	  t['zahmedialarabic'] = 0xFEC8;
	  t['zainarabic'] = 0x0632;
	  t['zainfinalarabic'] = 0xFEB0;
	  t['zakatakana'] = 0x30B6;
	  t['zaqefgadolhebrew'] = 0x0595;
	  t['zaqefqatanhebrew'] = 0x0594;
	  t['zarqahebrew'] = 0x0598;
	  t['zayin'] = 0x05D6;
	  t['zayindagesh'] = 0xFB36;
	  t['zayindageshhebrew'] = 0xFB36;
	  t['zayinhebrew'] = 0x05D6;
	  t['zbopomofo'] = 0x3117;
	  t['zcaron'] = 0x017E;
	  t['zcircle'] = 0x24E9;
	  t['zcircumflex'] = 0x1E91;
	  t['zcurl'] = 0x0291;
	  t['zdot'] = 0x017C;
	  t['zdotaccent'] = 0x017C;
	  t['zdotbelow'] = 0x1E93;
	  t['zecyrillic'] = 0x0437;
	  t['zedescendercyrillic'] = 0x0499;
	  t['zedieresiscyrillic'] = 0x04DF;
	  t['zehiragana'] = 0x305C;
	  t['zekatakana'] = 0x30BC;
	  t['zero'] = 0x0030;
	  t['zeroarabic'] = 0x0660;
	  t['zerobengali'] = 0x09E6;
	  t['zerodeva'] = 0x0966;
	  t['zerogujarati'] = 0x0AE6;
	  t['zerogurmukhi'] = 0x0A66;
	  t['zerohackarabic'] = 0x0660;
	  t['zeroinferior'] = 0x2080;
	  t['zeromonospace'] = 0xFF10;
	  t['zerooldstyle'] = 0xF730;
	  t['zeropersian'] = 0x06F0;
	  t['zerosuperior'] = 0x2070;
	  t['zerothai'] = 0x0E50;
	  t['zerowidthjoiner'] = 0xFEFF;
	  t['zerowidthnonjoiner'] = 0x200C;
	  t['zerowidthspace'] = 0x200B;
	  t['zeta'] = 0x03B6;
	  t['zhbopomofo'] = 0x3113;
	  t['zhearmenian'] = 0x056A;
	  t['zhebrevecyrillic'] = 0x04C2;
	  t['zhecyrillic'] = 0x0436;
	  t['zhedescendercyrillic'] = 0x0497;
	  t['zhedieresiscyrillic'] = 0x04DD;
	  t['zihiragana'] = 0x3058;
	  t['zikatakana'] = 0x30B8;
	  t['zinorhebrew'] = 0x05AE;
	  t['zlinebelow'] = 0x1E95;
	  t['zmonospace'] = 0xFF5A;
	  t['zohiragana'] = 0x305E;
	  t['zokatakana'] = 0x30BE;
	  t['zparen'] = 0x24B5;
	  t['zretroflexhook'] = 0x0290;
	  t['zstroke'] = 0x01B6;
	  t['zuhiragana'] = 0x305A;
	  t['zukatakana'] = 0x30BA;
	  t['.notdef'] = 0x0000;
	  t['angbracketleftbig'] = 0x2329;
	  t['angbracketleftBig'] = 0x2329;
	  t['angbracketleftbigg'] = 0x2329;
	  t['angbracketleftBigg'] = 0x2329;
	  t['angbracketrightBig'] = 0x232A;
	  t['angbracketrightbig'] = 0x232A;
	  t['angbracketrightBigg'] = 0x232A;
	  t['angbracketrightbigg'] = 0x232A;
	  t['arrowhookleft'] = 0x21AA;
	  t['arrowhookright'] = 0x21A9;
	  t['arrowlefttophalf'] = 0x21BC;
	  t['arrowleftbothalf'] = 0x21BD;
	  t['arrownortheast'] = 0x2197;
	  t['arrownorthwest'] = 0x2196;
	  t['arrowrighttophalf'] = 0x21C0;
	  t['arrowrightbothalf'] = 0x21C1;
	  t['arrowsoutheast'] = 0x2198;
	  t['arrowsouthwest'] = 0x2199;
	  t['backslashbig'] = 0x2216;
	  t['backslashBig'] = 0x2216;
	  t['backslashBigg'] = 0x2216;
	  t['backslashbigg'] = 0x2216;
	  t['bardbl'] = 0x2016;
	  t['bracehtipdownleft'] = 0xFE37;
	  t['bracehtipdownright'] = 0xFE37;
	  t['bracehtipupleft'] = 0xFE38;
	  t['bracehtipupright'] = 0xFE38;
	  t['braceleftBig'] = 0x007B;
	  t['braceleftbig'] = 0x007B;
	  t['braceleftbigg'] = 0x007B;
	  t['braceleftBigg'] = 0x007B;
	  t['bracerightBig'] = 0x007D;
	  t['bracerightbig'] = 0x007D;
	  t['bracerightbigg'] = 0x007D;
	  t['bracerightBigg'] = 0x007D;
	  t['bracketleftbig'] = 0x005B;
	  t['bracketleftBig'] = 0x005B;
	  t['bracketleftbigg'] = 0x005B;
	  t['bracketleftBigg'] = 0x005B;
	  t['bracketrightBig'] = 0x005D;
	  t['bracketrightbig'] = 0x005D;
	  t['bracketrightbigg'] = 0x005D;
	  t['bracketrightBigg'] = 0x005D;
	  t['ceilingleftbig'] = 0x2308;
	  t['ceilingleftBig'] = 0x2308;
	  t['ceilingleftBigg'] = 0x2308;
	  t['ceilingleftbigg'] = 0x2308;
	  t['ceilingrightbig'] = 0x2309;
	  t['ceilingrightBig'] = 0x2309;
	  t['ceilingrightbigg'] = 0x2309;
	  t['ceilingrightBigg'] = 0x2309;
	  t['circledotdisplay'] = 0x2299;
	  t['circledottext'] = 0x2299;
	  t['circlemultiplydisplay'] = 0x2297;
	  t['circlemultiplytext'] = 0x2297;
	  t['circleplusdisplay'] = 0x2295;
	  t['circleplustext'] = 0x2295;
	  t['contintegraldisplay'] = 0x222E;
	  t['contintegraltext'] = 0x222E;
	  t['coproductdisplay'] = 0x2210;
	  t['coproducttext'] = 0x2210;
	  t['floorleftBig'] = 0x230A;
	  t['floorleftbig'] = 0x230A;
	  t['floorleftbigg'] = 0x230A;
	  t['floorleftBigg'] = 0x230A;
	  t['floorrightbig'] = 0x230B;
	  t['floorrightBig'] = 0x230B;
	  t['floorrightBigg'] = 0x230B;
	  t['floorrightbigg'] = 0x230B;
	  t['hatwide'] = 0x0302;
	  t['hatwider'] = 0x0302;
	  t['hatwidest'] = 0x0302;
	  t['intercal'] = 0x1D40;
	  t['integraldisplay'] = 0x222B;
	  t['integraltext'] = 0x222B;
	  t['intersectiondisplay'] = 0x22C2;
	  t['intersectiontext'] = 0x22C2;
	  t['logicalanddisplay'] = 0x2227;
	  t['logicalandtext'] = 0x2227;
	  t['logicalordisplay'] = 0x2228;
	  t['logicalortext'] = 0x2228;
	  t['parenleftBig'] = 0x0028;
	  t['parenleftbig'] = 0x0028;
	  t['parenleftBigg'] = 0x0028;
	  t['parenleftbigg'] = 0x0028;
	  t['parenrightBig'] = 0x0029;
	  t['parenrightbig'] = 0x0029;
	  t['parenrightBigg'] = 0x0029;
	  t['parenrightbigg'] = 0x0029;
	  t['prime'] = 0x2032;
	  t['productdisplay'] = 0x220F;
	  t['producttext'] = 0x220F;
	  t['radicalbig'] = 0x221A;
	  t['radicalBig'] = 0x221A;
	  t['radicalBigg'] = 0x221A;
	  t['radicalbigg'] = 0x221A;
	  t['radicalbt'] = 0x221A;
	  t['radicaltp'] = 0x221A;
	  t['radicalvertex'] = 0x221A;
	  t['slashbig'] = 0x002F;
	  t['slashBig'] = 0x002F;
	  t['slashBigg'] = 0x002F;
	  t['slashbigg'] = 0x002F;
	  t['summationdisplay'] = 0x2211;
	  t['summationtext'] = 0x2211;
	  t['tildewide'] = 0x02DC;
	  t['tildewider'] = 0x02DC;
	  t['tildewidest'] = 0x02DC;
	  t['uniondisplay'] = 0x22C3;
	  t['unionmultidisplay'] = 0x228E;
	  t['unionmultitext'] = 0x228E;
	  t['unionsqdisplay'] = 0x2294;
	  t['unionsqtext'] = 0x2294;
	  t['uniontext'] = 0x22C3;
	  t['vextenddouble'] = 0x2225;
	  t['vextendsingle'] = 0x2223;
	});
	var getDingbatsGlyphsUnicode = getLookupTableFactory(function (t) {
	  t['space'] = 0x0020;
	  t['a1'] = 0x2701;
	  t['a2'] = 0x2702;
	  t['a202'] = 0x2703;
	  t['a3'] = 0x2704;
	  t['a4'] = 0x260E;
	  t['a5'] = 0x2706;
	  t['a119'] = 0x2707;
	  t['a118'] = 0x2708;
	  t['a117'] = 0x2709;
	  t['a11'] = 0x261B;
	  t['a12'] = 0x261E;
	  t['a13'] = 0x270C;
	  t['a14'] = 0x270D;
	  t['a15'] = 0x270E;
	  t['a16'] = 0x270F;
	  t['a105'] = 0x2710;
	  t['a17'] = 0x2711;
	  t['a18'] = 0x2712;
	  t['a19'] = 0x2713;
	  t['a20'] = 0x2714;
	  t['a21'] = 0x2715;
	  t['a22'] = 0x2716;
	  t['a23'] = 0x2717;
	  t['a24'] = 0x2718;
	  t['a25'] = 0x2719;
	  t['a26'] = 0x271A;
	  t['a27'] = 0x271B;
	  t['a28'] = 0x271C;
	  t['a6'] = 0x271D;
	  t['a7'] = 0x271E;
	  t['a8'] = 0x271F;
	  t['a9'] = 0x2720;
	  t['a10'] = 0x2721;
	  t['a29'] = 0x2722;
	  t['a30'] = 0x2723;
	  t['a31'] = 0x2724;
	  t['a32'] = 0x2725;
	  t['a33'] = 0x2726;
	  t['a34'] = 0x2727;
	  t['a35'] = 0x2605;
	  t['a36'] = 0x2729;
	  t['a37'] = 0x272A;
	  t['a38'] = 0x272B;
	  t['a39'] = 0x272C;
	  t['a40'] = 0x272D;
	  t['a41'] = 0x272E;
	  t['a42'] = 0x272F;
	  t['a43'] = 0x2730;
	  t['a44'] = 0x2731;
	  t['a45'] = 0x2732;
	  t['a46'] = 0x2733;
	  t['a47'] = 0x2734;
	  t['a48'] = 0x2735;
	  t['a49'] = 0x2736;
	  t['a50'] = 0x2737;
	  t['a51'] = 0x2738;
	  t['a52'] = 0x2739;
	  t['a53'] = 0x273A;
	  t['a54'] = 0x273B;
	  t['a55'] = 0x273C;
	  t['a56'] = 0x273D;
	  t['a57'] = 0x273E;
	  t['a58'] = 0x273F;
	  t['a59'] = 0x2740;
	  t['a60'] = 0x2741;
	  t['a61'] = 0x2742;
	  t['a62'] = 0x2743;
	  t['a63'] = 0x2744;
	  t['a64'] = 0x2745;
	  t['a65'] = 0x2746;
	  t['a66'] = 0x2747;
	  t['a67'] = 0x2748;
	  t['a68'] = 0x2749;
	  t['a69'] = 0x274A;
	  t['a70'] = 0x274B;
	  t['a71'] = 0x25CF;
	  t['a72'] = 0x274D;
	  t['a73'] = 0x25A0;
	  t['a74'] = 0x274F;
	  t['a203'] = 0x2750;
	  t['a75'] = 0x2751;
	  t['a204'] = 0x2752;
	  t['a76'] = 0x25B2;
	  t['a77'] = 0x25BC;
	  t['a78'] = 0x25C6;
	  t['a79'] = 0x2756;
	  t['a81'] = 0x25D7;
	  t['a82'] = 0x2758;
	  t['a83'] = 0x2759;
	  t['a84'] = 0x275A;
	  t['a97'] = 0x275B;
	  t['a98'] = 0x275C;
	  t['a99'] = 0x275D;
	  t['a100'] = 0x275E;
	  t['a101'] = 0x2761;
	  t['a102'] = 0x2762;
	  t['a103'] = 0x2763;
	  t['a104'] = 0x2764;
	  t['a106'] = 0x2765;
	  t['a107'] = 0x2766;
	  t['a108'] = 0x2767;
	  t['a112'] = 0x2663;
	  t['a111'] = 0x2666;
	  t['a110'] = 0x2665;
	  t['a109'] = 0x2660;
	  t['a120'] = 0x2460;
	  t['a121'] = 0x2461;
	  t['a122'] = 0x2462;
	  t['a123'] = 0x2463;
	  t['a124'] = 0x2464;
	  t['a125'] = 0x2465;
	  t['a126'] = 0x2466;
	  t['a127'] = 0x2467;
	  t['a128'] = 0x2468;
	  t['a129'] = 0x2469;
	  t['a130'] = 0x2776;
	  t['a131'] = 0x2777;
	  t['a132'] = 0x2778;
	  t['a133'] = 0x2779;
	  t['a134'] = 0x277A;
	  t['a135'] = 0x277B;
	  t['a136'] = 0x277C;
	  t['a137'] = 0x277D;
	  t['a138'] = 0x277E;
	  t['a139'] = 0x277F;
	  t['a140'] = 0x2780;
	  t['a141'] = 0x2781;
	  t['a142'] = 0x2782;
	  t['a143'] = 0x2783;
	  t['a144'] = 0x2784;
	  t['a145'] = 0x2785;
	  t['a146'] = 0x2786;
	  t['a147'] = 0x2787;
	  t['a148'] = 0x2788;
	  t['a149'] = 0x2789;
	  t['a150'] = 0x278A;
	  t['a151'] = 0x278B;
	  t['a152'] = 0x278C;
	  t['a153'] = 0x278D;
	  t['a154'] = 0x278E;
	  t['a155'] = 0x278F;
	  t['a156'] = 0x2790;
	  t['a157'] = 0x2791;
	  t['a158'] = 0x2792;
	  t['a159'] = 0x2793;
	  t['a160'] = 0x2794;
	  t['a161'] = 0x2192;
	  t['a163'] = 0x2194;
	  t['a164'] = 0x2195;
	  t['a196'] = 0x2798;
	  t['a165'] = 0x2799;
	  t['a192'] = 0x279A;
	  t['a166'] = 0x279B;
	  t['a167'] = 0x279C;
	  t['a168'] = 0x279D;
	  t['a169'] = 0x279E;
	  t['a170'] = 0x279F;
	  t['a171'] = 0x27A0;
	  t['a172'] = 0x27A1;
	  t['a173'] = 0x27A2;
	  t['a162'] = 0x27A3;
	  t['a174'] = 0x27A4;
	  t['a175'] = 0x27A5;
	  t['a176'] = 0x27A6;
	  t['a177'] = 0x27A7;
	  t['a178'] = 0x27A8;
	  t['a179'] = 0x27A9;
	  t['a193'] = 0x27AA;
	  t['a180'] = 0x27AB;
	  t['a199'] = 0x27AC;
	  t['a181'] = 0x27AD;
	  t['a200'] = 0x27AE;
	  t['a182'] = 0x27AF;
	  t['a201'] = 0x27B1;
	  t['a183'] = 0x27B2;
	  t['a184'] = 0x27B3;
	  t['a197'] = 0x27B4;
	  t['a185'] = 0x27B5;
	  t['a194'] = 0x27B6;
	  t['a198'] = 0x27B7;
	  t['a186'] = 0x27B8;
	  t['a195'] = 0x27B9;
	  t['a187'] = 0x27BA;
	  t['a188'] = 0x27BB;
	  t['a189'] = 0x27BC;
	  t['a190'] = 0x27BD;
	  t['a191'] = 0x27BE;
	  t['a89'] = 0x2768;
	  t['a90'] = 0x2769;
	  t['a93'] = 0x276A;
	  t['a94'] = 0x276B;
	  t['a91'] = 0x276C;
	  t['a92'] = 0x276D;
	  t['a205'] = 0x276E;
	  t['a85'] = 0x276F;
	  t['a206'] = 0x2770;
	  t['a86'] = 0x2771;
	  t['a87'] = 0x2772;
	  t['a88'] = 0x2773;
	  t['a95'] = 0x2774;
	  t['a96'] = 0x2775;
	  t['.notdef'] = 0x0000;
	});
	exports.getGlyphsUnicode = getGlyphsUnicode;
	exports.getDingbatsGlyphsUnicode = getDingbatsGlyphsUnicode;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var corePdfManager = __w_pdfjs_require__(33);
	var UNSUPPORTED_FEATURES = sharedUtil.UNSUPPORTED_FEATURES;
	var InvalidPDFException = sharedUtil.InvalidPDFException;
	var MessageHandler = sharedUtil.MessageHandler;
	var MissingPDFException = sharedUtil.MissingPDFException;
	var UnexpectedResponseException = sharedUtil.UnexpectedResponseException;
	var PasswordException = sharedUtil.PasswordException;
	var UnknownErrorException = sharedUtil.UnknownErrorException;
	var XRefParseException = sharedUtil.XRefParseException;
	var arrayByteLength = sharedUtil.arrayByteLength;
	var arraysToBytes = sharedUtil.arraysToBytes;
	var assert = sharedUtil.assert;
	var createPromiseCapability = sharedUtil.createPromiseCapability;
	var info = sharedUtil.info;
	var warn = sharedUtil.warn;
	var setVerbosityLevel = sharedUtil.setVerbosityLevel;
	var isNodeJS = sharedUtil.isNodeJS;
	var Ref = corePrimitives.Ref;
	var LocalPdfManager = corePdfManager.LocalPdfManager;
	var NetworkPdfManager = corePdfManager.NetworkPdfManager;
	var WorkerTask = function WorkerTaskClosure() {
	  function WorkerTask(name) {
	    this.name = name;
	    this.terminated = false;
	    this._capability = createPromiseCapability();
	  }
	  WorkerTask.prototype = {
	    get finished() {
	      return this._capability.promise;
	    },
	    finish: function finish() {
	      this._capability.resolve();
	    },
	    terminate: function terminate() {
	      this.terminated = true;
	    },
	    ensureNotTerminated: function ensureNotTerminated() {
	      if (this.terminated) {
	        throw new Error('Worker task was terminated');
	      }
	    }
	  };
	  return WorkerTask;
	}();
	var PDFWorkerStream = function PDFWorkerStreamClosure() {
	  function PDFWorkerStream(params, msgHandler) {
	    this._queuedChunks = [];
	    var initialData = params.initialData;
	    if (initialData && initialData.length > 0) {
	      this._queuedChunks.push(initialData);
	    }
	    this._msgHandler = msgHandler;
	    this._isRangeSupported = !params.disableRange;
	    this._isStreamingSupported = !params.disableStream;
	    this._contentLength = params.length;
	    this._fullRequestReader = null;
	    this._rangeReaders = [];
	    msgHandler.on('OnDataRange', this._onReceiveData.bind(this));
	    msgHandler.on('OnDataProgress', this._onProgress.bind(this));
	  }
	  PDFWorkerStream.prototype = {
	    _onReceiveData: function PDFWorkerStream_onReceiveData(args) {
	      if (args.begin === undefined) {
	        if (this._fullRequestReader) {
	          this._fullRequestReader._enqueue(args.chunk);
	        } else {
	          this._queuedChunks.push(args.chunk);
	        }
	      } else {
	        var found = this._rangeReaders.some(function (rangeReader) {
	          if (rangeReader._begin !== args.begin) {
	            return false;
	          }
	          rangeReader._enqueue(args.chunk);
	          return true;
	        });
	        assert(found);
	      }
	    },
	    _onProgress: function PDFWorkerStream_onProgress(evt) {
	      if (this._rangeReaders.length > 0) {
	        var firstReader = this._rangeReaders[0];
	        if (firstReader.onProgress) {
	          firstReader.onProgress({ loaded: evt.loaded });
	        }
	      }
	    },
	    _removeRangeReader: function PDFWorkerStream_removeRangeReader(reader) {
	      var i = this._rangeReaders.indexOf(reader);
	      if (i >= 0) {
	        this._rangeReaders.splice(i, 1);
	      }
	    },
	    getFullReader: function PDFWorkerStream_getFullReader() {
	      assert(!this._fullRequestReader);
	      var queuedChunks = this._queuedChunks;
	      this._queuedChunks = null;
	      return new PDFWorkerStreamReader(this, queuedChunks);
	    },
	    getRangeReader: function PDFWorkerStream_getRangeReader(begin, end) {
	      var reader = new PDFWorkerStreamRangeReader(this, begin, end);
	      this._msgHandler.send('RequestDataRange', {
	        begin: begin,
	        end: end
	      });
	      this._rangeReaders.push(reader);
	      return reader;
	    },
	    cancelAllRequests: function PDFWorkerStream_cancelAllRequests(reason) {
	      if (this._fullRequestReader) {
	        this._fullRequestReader.cancel(reason);
	      }
	      var readers = this._rangeReaders.slice(0);
	      readers.forEach(function (rangeReader) {
	        rangeReader.cancel(reason);
	      });
	    }
	  };
	  function PDFWorkerStreamReader(stream, queuedChunks) {
	    this._stream = stream;
	    this._done = false;
	    this._queuedChunks = queuedChunks || [];
	    this._requests = [];
	    this._headersReady = Promise.resolve();
	    stream._fullRequestReader = this;
	    this.onProgress = null;
	  }
	  PDFWorkerStreamReader.prototype = {
	    _enqueue: function PDFWorkerStreamReader_enqueue(chunk) {
	      if (this._done) {
	        return;
	      }
	      if (this._requests.length > 0) {
	        var requestCapability = this._requests.shift();
	        requestCapability.resolve({
	          value: chunk,
	          done: false
	        });
	        return;
	      }
	      this._queuedChunks.push(chunk);
	    },
	    get headersReady() {
	      return this._headersReady;
	    },
	    get isRangeSupported() {
	      return this._stream._isRangeSupported;
	    },
	    get isStreamingSupported() {
	      return this._stream._isStreamingSupported;
	    },
	    get contentLength() {
	      return this._stream._contentLength;
	    },
	    read: function PDFWorkerStreamReader_read() {
	      if (this._queuedChunks.length > 0) {
	        var chunk = this._queuedChunks.shift();
	        return Promise.resolve({
	          value: chunk,
	          done: false
	        });
	      }
	      if (this._done) {
	        return Promise.resolve({
	          value: undefined,
	          done: true
	        });
	      }
	      var requestCapability = createPromiseCapability();
	      this._requests.push(requestCapability);
	      return requestCapability.promise;
	    },
	    cancel: function PDFWorkerStreamReader_cancel(reason) {
	      this._done = true;
	      this._requests.forEach(function (requestCapability) {
	        requestCapability.resolve({
	          value: undefined,
	          done: true
	        });
	      });
	      this._requests = [];
	    }
	  };
	  function PDFWorkerStreamRangeReader(stream, begin, end) {
	    this._stream = stream;
	    this._begin = begin;
	    this._end = end;
	    this._queuedChunk = null;
	    this._requests = [];
	    this._done = false;
	    this.onProgress = null;
	  }
	  PDFWorkerStreamRangeReader.prototype = {
	    _enqueue: function PDFWorkerStreamRangeReader_enqueue(chunk) {
	      if (this._done) {
	        return;
	      }
	      if (this._requests.length === 0) {
	        this._queuedChunk = chunk;
	      } else {
	        var requestsCapability = this._requests.shift();
	        requestsCapability.resolve({
	          value: chunk,
	          done: false
	        });
	        this._requests.forEach(function (requestCapability) {
	          requestCapability.resolve({
	            value: undefined,
	            done: true
	          });
	        });
	        this._requests = [];
	      }
	      this._done = true;
	      this._stream._removeRangeReader(this);
	    },
	    get isStreamingSupported() {
	      return false;
	    },
	    read: function PDFWorkerStreamRangeReader_read() {
	      if (this._queuedChunk) {
	        return Promise.resolve({
	          value: this._queuedChunk,
	          done: false
	        });
	      }
	      if (this._done) {
	        return Promise.resolve({
	          value: undefined,
	          done: true
	        });
	      }
	      var requestCapability = createPromiseCapability();
	      this._requests.push(requestCapability);
	      return requestCapability.promise;
	    },
	    cancel: function PDFWorkerStreamRangeReader_cancel(reason) {
	      this._done = true;
	      this._requests.forEach(function (requestCapability) {
	        requestCapability.resolve({
	          value: undefined,
	          done: true
	        });
	      });
	      this._requests = [];
	      this._stream._removeRangeReader(this);
	    }
	  };
	  return PDFWorkerStream;
	}();
	var PDFNetworkStream;
	function setPDFNetworkStreamClass(cls) {
	  PDFNetworkStream = cls;
	}
	var WorkerMessageHandler = {
	  setup: function setup(handler, port) {
	    var testMessageProcessed = false;
	    handler.on('test', function wphSetupTest(data) {
	      if (testMessageProcessed) {
	        return;
	      }
	      testMessageProcessed = true;
	      if (!(data instanceof Uint8Array)) {
	        handler.send('test', 'main', false);
	        return;
	      }
	      var supportTransfers = data[0] === 255;
	      handler.postMessageTransfers = supportTransfers;
	      var xhr = new XMLHttpRequest();
	      var responseExists = 'response' in xhr;
	      try {
	        xhr.responseType;
	      } catch (e) {
	        responseExists = false;
	      }
	      if (!responseExists) {
	        handler.send('test', false);
	        return;
	      }
	      handler.send('test', {
	        supportTypedArray: true,
	        supportTransfers: supportTransfers
	      });
	    });
	    handler.on('configure', function wphConfigure(data) {
	      setVerbosityLevel(data.verbosity);
	    });
	    handler.on('GetDocRequest', function wphSetupDoc(data) {
	      return WorkerMessageHandler.createDocumentHandler(data, port);
	    });
	  },
	  createDocumentHandler: function createDocumentHandler(docParams, port) {
	    var pdfManager;
	    var terminated = false;
	    var cancelXHRs = null;
	    var WorkerTasks = [];
	    var docId = docParams.docId;
	    var docBaseUrl = docParams.docBaseUrl;
	    var workerHandlerName = docParams.docId + '_worker';
	    var handler = new MessageHandler(workerHandlerName, docId, port);
	    handler.postMessageTransfers = docParams.postMessageTransfers;
	    function ensureNotTerminated() {
	      if (terminated) {
	        throw new Error('Worker was terminated');
	      }
	    }
	    function startWorkerTask(task) {
	      WorkerTasks.push(task);
	    }
	    function finishWorkerTask(task) {
	      task.finish();
	      var i = WorkerTasks.indexOf(task);
	      WorkerTasks.splice(i, 1);
	    }
	    function loadDocument(recoveryMode) {
	      var loadDocumentCapability = createPromiseCapability();
	      var parseSuccess = function parseSuccess() {
	        var numPagesPromise = pdfManager.ensureDoc('numPages');
	        var fingerprintPromise = pdfManager.ensureDoc('fingerprint');
	        var encryptedPromise = pdfManager.ensureXRef('encrypt');
	        Promise.all([numPagesPromise, fingerprintPromise, encryptedPromise]).then(function onDocReady(results) {
	          var doc = {
	            numPages: results[0],
	            fingerprint: results[1],
	            encrypted: !!results[2]
	          };
	          loadDocumentCapability.resolve(doc);
	        }, parseFailure);
	      };
	      var parseFailure = function parseFailure(e) {
	        loadDocumentCapability.reject(e);
	      };
	      pdfManager.ensureDoc('checkHeader', []).then(function () {
	        pdfManager.ensureDoc('parseStartXRef', []).then(function () {
	          pdfManager.ensureDoc('parse', [recoveryMode]).then(parseSuccess, parseFailure);
	        }, parseFailure);
	      }, parseFailure);
	      return loadDocumentCapability.promise;
	    }
	    function getPdfManager(data, evaluatorOptions) {
	      var pdfManagerCapability = createPromiseCapability();
	      var pdfManager;
	      var source = data.source;
	      if (source.data) {
	        try {
	          pdfManager = new LocalPdfManager(docId, source.data, source.password, evaluatorOptions, docBaseUrl);
	          pdfManagerCapability.resolve(pdfManager);
	        } catch (ex) {
	          pdfManagerCapability.reject(ex);
	        }
	        return pdfManagerCapability.promise;
	      }
	      var pdfStream;
	      try {
	        if (source.chunkedViewerLoading) {
	          pdfStream = new PDFWorkerStream(source, handler);
	        } else {
	          assert(PDFNetworkStream, 'pdfjs/core/network module is not loaded');
	          pdfStream = new PDFNetworkStream(data);
	        }
	      } catch (ex) {
	        pdfManagerCapability.reject(ex);
	        return pdfManagerCapability.promise;
	      }
	      var fullRequest = pdfStream.getFullReader();
	      fullRequest.headersReady.then(function () {
	        if (!fullRequest.isStreamingSupported || !fullRequest.isRangeSupported) {
	          fullRequest.onProgress = function (evt) {
	            handler.send('DocProgress', {
	              loaded: evt.loaded,
	              total: evt.total
	            });
	          };
	        }
	        if (!fullRequest.isRangeSupported) {
	          return;
	        }
	        var disableAutoFetch = source.disableAutoFetch || fullRequest.isStreamingSupported;
	        pdfManager = new NetworkPdfManager(docId, pdfStream, {
	          msgHandler: handler,
	          url: source.url,
	          password: source.password,
	          length: fullRequest.contentLength,
	          disableAutoFetch: disableAutoFetch,
	          rangeChunkSize: source.rangeChunkSize
	        }, evaluatorOptions, docBaseUrl);
	        pdfManagerCapability.resolve(pdfManager);
	        cancelXHRs = null;
	      }).catch(function (reason) {
	        pdfManagerCapability.reject(reason);
	        cancelXHRs = null;
	      });
	      var cachedChunks = [],
	          loaded = 0;
	      var flushChunks = function flushChunks() {
	        var pdfFile = arraysToBytes(cachedChunks);
	        if (source.length && pdfFile.length !== source.length) {
	          warn('reported HTTP length is different from actual');
	        }
	        try {
	          pdfManager = new LocalPdfManager(docId, pdfFile, source.password, evaluatorOptions, docBaseUrl);
	          pdfManagerCapability.resolve(pdfManager);
	        } catch (ex) {
	          pdfManagerCapability.reject(ex);
	        }
	        cachedChunks = [];
	      };
	      var readPromise = new Promise(function (resolve, reject) {
	        var readChunk = function readChunk(chunk) {
	          try {
	            ensureNotTerminated();
	            if (chunk.done) {
	              if (!pdfManager) {
	                flushChunks();
	              }
	              cancelXHRs = null;
	              return;
	            }
	            var data = chunk.value;
	            loaded += arrayByteLength(data);
	            if (!fullRequest.isStreamingSupported) {
	              handler.send('DocProgress', {
	                loaded: loaded,
	                total: Math.max(loaded, fullRequest.contentLength || 0)
	              });
	            }
	            if (pdfManager) {
	              pdfManager.sendProgressiveData(data);
	            } else {
	              cachedChunks.push(data);
	            }
	            fullRequest.read().then(readChunk, reject);
	          } catch (e) {
	            reject(e);
	          }
	        };
	        fullRequest.read().then(readChunk, reject);
	      });
	      readPromise.catch(function (e) {
	        pdfManagerCapability.reject(e);
	        cancelXHRs = null;
	      });
	      cancelXHRs = function cancelXHRs() {
	        pdfStream.cancelAllRequests('abort');
	      };
	      return pdfManagerCapability.promise;
	    }
	    function setupDoc(data) {
	      function onSuccess(doc) {
	        ensureNotTerminated();
	        handler.send('GetDoc', { pdfInfo: doc });
	      }
	      function onFailure(e) {
	        if (e instanceof PasswordException) {
	          var task = new WorkerTask('PasswordException: response ' + e.code);
	          startWorkerTask(task);
	          handler.sendWithPromise('PasswordRequest', e).then(function (data) {
	            finishWorkerTask(task);
	            pdfManager.updatePassword(data.password);
	            pdfManagerReady();
	          }).catch(function (ex) {
	            finishWorkerTask(task);
	            handler.send('PasswordException', ex);
	          }.bind(null, e));
	        } else if (e instanceof InvalidPDFException) {
	          handler.send('InvalidPDF', e);
	        } else if (e instanceof MissingPDFException) {
	          handler.send('MissingPDF', e);
	        } else if (e instanceof UnexpectedResponseException) {
	          handler.send('UnexpectedResponse', e);
	        } else {
	          handler.send('UnknownError', new UnknownErrorException(e.message, e.toString()));
	        }
	      }
	      function pdfManagerReady() {
	        ensureNotTerminated();
	        loadDocument(false).then(onSuccess, function loadFailure(ex) {
	          ensureNotTerminated();
	          if (!(ex instanceof XRefParseException)) {
	            onFailure(ex);
	            return;
	          }
	          pdfManager.requestLoadedStream();
	          pdfManager.onLoadedStream().then(function () {
	            ensureNotTerminated();
	            loadDocument(true).then(onSuccess, onFailure);
	          });
	        }, onFailure);
	      }
	      ensureNotTerminated();
	      var evaluatorOptions = {
	        forceDataSchema: data.disableCreateObjectURL,
	        maxImageSize: data.maxImageSize === undefined ? -1 : data.maxImageSize,
	        disableFontFace: data.disableFontFace,
	        nativeImageDecoderSupport: data.nativeImageDecoderSupport,
	        ignoreErrors: data.ignoreErrors
	      };
	      getPdfManager(data, evaluatorOptions).then(function (newPdfManager) {
	        if (terminated) {
	          newPdfManager.terminate();
	          throw new Error('Worker was terminated');
	        }
	        pdfManager = newPdfManager;
	        handler.send('PDFManagerReady', null);
	        pdfManager.onLoadedStream().then(function (stream) {
	          handler.send('DataLoaded', { length: stream.bytes.byteLength });
	        });
	      }).then(pdfManagerReady, onFailure);
	    }
	    handler.on('GetPage', function wphSetupGetPage(data) {
	      return pdfManager.getPage(data.pageIndex).then(function (page) {
	        var rotatePromise = pdfManager.ensure(page, 'rotate');
	        var refPromise = pdfManager.ensure(page, 'ref');
	        var userUnitPromise = pdfManager.ensure(page, 'userUnit');
	        var viewPromise = pdfManager.ensure(page, 'view');
	        return Promise.all([rotatePromise, refPromise, userUnitPromise, viewPromise]).then(function (results) {
	          return {
	            rotate: results[0],
	            ref: results[1],
	            userUnit: results[2],
	            view: results[3]
	          };
	        });
	      });
	    });
	    handler.on('GetPageIndex', function wphSetupGetPageIndex(data) {
	      var ref = new Ref(data.ref.num, data.ref.gen);
	      var catalog = pdfManager.pdfDocument.catalog;
	      return catalog.getPageIndex(ref);
	    });
	    handler.on('GetDestinations', function wphSetupGetDestinations(data) {
	      return pdfManager.ensureCatalog('destinations');
	    });
	    handler.on('GetDestination', function wphSetupGetDestination(data) {
	      return pdfManager.ensureCatalog('getDestination', [data.id]);
	    });
	    handler.on('GetPageLabels', function wphSetupGetPageLabels(data) {
	      return pdfManager.ensureCatalog('pageLabels');
	    });
	    handler.on('GetAttachments', function wphSetupGetAttachments(data) {
	      return pdfManager.ensureCatalog('attachments');
	    });
	    handler.on('GetJavaScript', function wphSetupGetJavaScript(data) {
	      return pdfManager.ensureCatalog('javaScript');
	    });
	    handler.on('GetOutline', function wphSetupGetOutline(data) {
	      return pdfManager.ensureCatalog('documentOutline');
	    });
	    handler.on('GetMetadata', function wphSetupGetMetadata(data) {
	      return Promise.all([pdfManager.ensureDoc('documentInfo'), pdfManager.ensureCatalog('metadata')]);
	    });
	    handler.on('GetData', function wphSetupGetData(data) {
	      pdfManager.requestLoadedStream();
	      return pdfManager.onLoadedStream().then(function (stream) {
	        return stream.bytes;
	      });
	    });
	    handler.on('GetStats', function wphSetupGetStats(data) {
	      return pdfManager.pdfDocument.xref.stats;
	    });
	    handler.on('GetAnnotations', function wphSetupGetAnnotations(data) {
	      return pdfManager.getPage(data.pageIndex).then(function (page) {
	        return pdfManager.ensure(page, 'getAnnotationsData', [data.intent]);
	      });
	    });
	    handler.on('RenderPageRequest', function wphSetupRenderPage(data) {
	      var pageIndex = data.pageIndex;
	      pdfManager.getPage(pageIndex).then(function (page) {
	        var task = new WorkerTask('RenderPageRequest: page ' + pageIndex);
	        startWorkerTask(task);
	        var pageNum = pageIndex + 1;
	        var start = Date.now();
	        page.getOperatorList({
	          handler: handler,
	          task: task,
	          intent: data.intent,
	          renderInteractiveForms: data.renderInteractiveForms
	        }).then(function (operatorList) {
	          finishWorkerTask(task);
	          info('page=' + pageNum + ' - getOperatorList: time=' + (Date.now() - start) + 'ms, len=' + operatorList.totalLength);
	        }, function (e) {
	          finishWorkerTask(task);
	          if (task.terminated) {
	            return;
	          }
	          handler.send('UnsupportedFeature', { featureId: UNSUPPORTED_FEATURES.unknown });
	          var minimumStackMessage = 'worker.js: while trying to getPage() and getOperatorList()';
	          var wrappedException;
	          if (typeof e === 'string') {
	            wrappedException = {
	              message: e,
	              stack: minimumStackMessage
	            };
	          } else if ((typeof e === 'undefined' ? 'undefined' : _typeof(e)) === 'object') {
	            wrappedException = {
	              message: e.message || e.toString(),
	              stack: e.stack || minimumStackMessage
	            };
	          } else {
	            wrappedException = {
	              message: 'Unknown exception type: ' + (typeof e === 'undefined' ? 'undefined' : _typeof(e)),
	              stack: minimumStackMessage
	            };
	          }
	          handler.send('PageError', {
	            pageNum: pageNum,
	            error: wrappedException,
	            intent: data.intent
	          });
	        });
	      });
	    }, this);
	    handler.on('GetTextContent', function wphExtractText(data) {
	      var pageIndex = data.pageIndex;
	      return pdfManager.getPage(pageIndex).then(function (page) {
	        var task = new WorkerTask('GetTextContent: page ' + pageIndex);
	        startWorkerTask(task);
	        var pageNum = pageIndex + 1;
	        var start = Date.now();
	        return page.extractTextContent({
	          handler: handler,
	          task: task,
	          normalizeWhitespace: data.normalizeWhitespace,
	          combineTextItems: data.combineTextItems
	        }).then(function (textContent) {
	          finishWorkerTask(task);
	          info('text indexing: page=' + pageNum + ' - time=' + (Date.now() - start) + 'ms');
	          return textContent;
	        }, function (reason) {
	          finishWorkerTask(task);
	          if (task.terminated) {
	            return;
	          }
	          throw reason;
	        });
	      });
	    });
	    handler.on('Cleanup', function wphCleanup(data) {
	      return pdfManager.cleanup();
	    });
	    handler.on('Terminate', function wphTerminate(data) {
	      terminated = true;
	      if (pdfManager) {
	        pdfManager.terminate();
	        pdfManager = null;
	      }
	      if (cancelXHRs) {
	        cancelXHRs();
	      }
	      var waitOn = [];
	      WorkerTasks.forEach(function (task) {
	        waitOn.push(task.finished);
	        task.terminate();
	      });
	      return Promise.all(waitOn).then(function () {
	        handler.destroy();
	        handler = null;
	      });
	    });
	    handler.on('Ready', function wphReady(data) {
	      setupDoc(docParams);
	      docParams = null;
	    });
	    return workerHandlerName;
	  },
	  initializeFromPort: function initializeFromPort(port) {
	    var handler = new MessageHandler('worker', 'main', port);
	    WorkerMessageHandler.setup(handler, port);
	    handler.send('ready', null);
	  }
	};
	function isMessagePort(maybePort) {
	  return typeof maybePort.postMessage === 'function' && 'onmessage' in maybePort;
	}
	if (typeof window === 'undefined' && !isNodeJS() && typeof self !== 'undefined' && isMessagePort(self)) {
	  WorkerMessageHandler.initializeFromPort(self);
	}
	exports.setPDFNetworkStreamClass = setPDFNetworkStreamClass;
	exports.WorkerTask = WorkerTask;
	exports.WorkerMessageHandler = WorkerMessageHandler;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var g;
	g = function () {
	  return this;
	}();
	try {
	  g = g || Function("return this")() || (1, eval)("this");
	} catch (e) {
	  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	}
	module.exports = g;

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var ArithmeticDecoder = function ArithmeticDecoderClosure() {
	  var QeTable = [{
	    qe: 0x5601,
	    nmps: 1,
	    nlps: 1,
	    switchFlag: 1
	  }, {
	    qe: 0x3401,
	    nmps: 2,
	    nlps: 6,
	    switchFlag: 0
	  }, {
	    qe: 0x1801,
	    nmps: 3,
	    nlps: 9,
	    switchFlag: 0
	  }, {
	    qe: 0x0AC1,
	    nmps: 4,
	    nlps: 12,
	    switchFlag: 0
	  }, {
	    qe: 0x0521,
	    nmps: 5,
	    nlps: 29,
	    switchFlag: 0
	  }, {
	    qe: 0x0221,
	    nmps: 38,
	    nlps: 33,
	    switchFlag: 0
	  }, {
	    qe: 0x5601,
	    nmps: 7,
	    nlps: 6,
	    switchFlag: 1
	  }, {
	    qe: 0x5401,
	    nmps: 8,
	    nlps: 14,
	    switchFlag: 0
	  }, {
	    qe: 0x4801,
	    nmps: 9,
	    nlps: 14,
	    switchFlag: 0
	  }, {
	    qe: 0x3801,
	    nmps: 10,
	    nlps: 14,
	    switchFlag: 0
	  }, {
	    qe: 0x3001,
	    nmps: 11,
	    nlps: 17,
	    switchFlag: 0
	  }, {
	    qe: 0x2401,
	    nmps: 12,
	    nlps: 18,
	    switchFlag: 0
	  }, {
	    qe: 0x1C01,
	    nmps: 13,
	    nlps: 20,
	    switchFlag: 0
	  }, {
	    qe: 0x1601,
	    nmps: 29,
	    nlps: 21,
	    switchFlag: 0
	  }, {
	    qe: 0x5601,
	    nmps: 15,
	    nlps: 14,
	    switchFlag: 1
	  }, {
	    qe: 0x5401,
	    nmps: 16,
	    nlps: 14,
	    switchFlag: 0
	  }, {
	    qe: 0x5101,
	    nmps: 17,
	    nlps: 15,
	    switchFlag: 0
	  }, {
	    qe: 0x4801,
	    nmps: 18,
	    nlps: 16,
	    switchFlag: 0
	  }, {
	    qe: 0x3801,
	    nmps: 19,
	    nlps: 17,
	    switchFlag: 0
	  }, {
	    qe: 0x3401,
	    nmps: 20,
	    nlps: 18,
	    switchFlag: 0
	  }, {
	    qe: 0x3001,
	    nmps: 21,
	    nlps: 19,
	    switchFlag: 0
	  }, {
	    qe: 0x2801,
	    nmps: 22,
	    nlps: 19,
	    switchFlag: 0
	  }, {
	    qe: 0x2401,
	    nmps: 23,
	    nlps: 20,
	    switchFlag: 0
	  }, {
	    qe: 0x2201,
	    nmps: 24,
	    nlps: 21,
	    switchFlag: 0
	  }, {
	    qe: 0x1C01,
	    nmps: 25,
	    nlps: 22,
	    switchFlag: 0
	  }, {
	    qe: 0x1801,
	    nmps: 26,
	    nlps: 23,
	    switchFlag: 0
	  }, {
	    qe: 0x1601,
	    nmps: 27,
	    nlps: 24,
	    switchFlag: 0
	  }, {
	    qe: 0x1401,
	    nmps: 28,
	    nlps: 25,
	    switchFlag: 0
	  }, {
	    qe: 0x1201,
	    nmps: 29,
	    nlps: 26,
	    switchFlag: 0
	  }, {
	    qe: 0x1101,
	    nmps: 30,
	    nlps: 27,
	    switchFlag: 0
	  }, {
	    qe: 0x0AC1,
	    nmps: 31,
	    nlps: 28,
	    switchFlag: 0
	  }, {
	    qe: 0x09C1,
	    nmps: 32,
	    nlps: 29,
	    switchFlag: 0
	  }, {
	    qe: 0x08A1,
	    nmps: 33,
	    nlps: 30,
	    switchFlag: 0
	  }, {
	    qe: 0x0521,
	    nmps: 34,
	    nlps: 31,
	    switchFlag: 0
	  }, {
	    qe: 0x0441,
	    nmps: 35,
	    nlps: 32,
	    switchFlag: 0
	  }, {
	    qe: 0x02A1,
	    nmps: 36,
	    nlps: 33,
	    switchFlag: 0
	  }, {
	    qe: 0x0221,
	    nmps: 37,
	    nlps: 34,
	    switchFlag: 0
	  }, {
	    qe: 0x0141,
	    nmps: 38,
	    nlps: 35,
	    switchFlag: 0
	  }, {
	    qe: 0x0111,
	    nmps: 39,
	    nlps: 36,
	    switchFlag: 0
	  }, {
	    qe: 0x0085,
	    nmps: 40,
	    nlps: 37,
	    switchFlag: 0
	  }, {
	    qe: 0x0049,
	    nmps: 41,
	    nlps: 38,
	    switchFlag: 0
	  }, {
	    qe: 0x0025,
	    nmps: 42,
	    nlps: 39,
	    switchFlag: 0
	  }, {
	    qe: 0x0015,
	    nmps: 43,
	    nlps: 40,
	    switchFlag: 0
	  }, {
	    qe: 0x0009,
	    nmps: 44,
	    nlps: 41,
	    switchFlag: 0
	  }, {
	    qe: 0x0005,
	    nmps: 45,
	    nlps: 42,
	    switchFlag: 0
	  }, {
	    qe: 0x0001,
	    nmps: 45,
	    nlps: 43,
	    switchFlag: 0
	  }, {
	    qe: 0x5601,
	    nmps: 46,
	    nlps: 46,
	    switchFlag: 0
	  }];
	  function ArithmeticDecoder(data, start, end) {
	    this.data = data;
	    this.bp = start;
	    this.dataEnd = end;
	    this.chigh = data[start];
	    this.clow = 0;
	    this.byteIn();
	    this.chigh = this.chigh << 7 & 0xFFFF | this.clow >> 9 & 0x7F;
	    this.clow = this.clow << 7 & 0xFFFF;
	    this.ct -= 7;
	    this.a = 0x8000;
	  }
	  ArithmeticDecoder.prototype = {
	    byteIn: function ArithmeticDecoder_byteIn() {
	      var data = this.data;
	      var bp = this.bp;
	      if (data[bp] === 0xFF) {
	        var b1 = data[bp + 1];
	        if (b1 > 0x8F) {
	          this.clow += 0xFF00;
	          this.ct = 8;
	        } else {
	          bp++;
	          this.clow += data[bp] << 9;
	          this.ct = 7;
	          this.bp = bp;
	        }
	      } else {
	        bp++;
	        this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xFF00;
	        this.ct = 8;
	        this.bp = bp;
	      }
	      if (this.clow > 0xFFFF) {
	        this.chigh += this.clow >> 16;
	        this.clow &= 0xFFFF;
	      }
	    },
	    readBit: function ArithmeticDecoder_readBit(contexts, pos) {
	      var cx_index = contexts[pos] >> 1,
	          cx_mps = contexts[pos] & 1;
	      var qeTableIcx = QeTable[cx_index];
	      var qeIcx = qeTableIcx.qe;
	      var d;
	      var a = this.a - qeIcx;
	      if (this.chigh < qeIcx) {
	        if (a < qeIcx) {
	          a = qeIcx;
	          d = cx_mps;
	          cx_index = qeTableIcx.nmps;
	        } else {
	          a = qeIcx;
	          d = 1 ^ cx_mps;
	          if (qeTableIcx.switchFlag === 1) {
	            cx_mps = d;
	          }
	          cx_index = qeTableIcx.nlps;
	        }
	      } else {
	        this.chigh -= qeIcx;
	        if ((a & 0x8000) !== 0) {
	          this.a = a;
	          return cx_mps;
	        }
	        if (a < qeIcx) {
	          d = 1 ^ cx_mps;
	          if (qeTableIcx.switchFlag === 1) {
	            cx_mps = d;
	          }
	          cx_index = qeTableIcx.nlps;
	        } else {
	          d = cx_mps;
	          cx_index = qeTableIcx.nmps;
	        }
	      }
	      do {
	        if (this.ct === 0) {
	          this.byteIn();
	        }
	        a <<= 1;
	        this.chigh = this.chigh << 1 & 0xFFFF | this.clow >> 15 & 1;
	        this.clow = this.clow << 1 & 0xFFFF;
	        this.ct--;
	      } while ((a & 0x8000) === 0);
	      this.a = a;
	      contexts[pos] = cx_index << 1 | cx_mps;
	      return d;
	    }
	  };
	  return ArithmeticDecoder;
	}();
	exports.ArithmeticDecoder = ArithmeticDecoder;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreCharsets = __w_pdfjs_require__(22);
	var coreEncodings = __w_pdfjs_require__(4);
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var bytesToString = sharedUtil.bytesToString;
	var warn = sharedUtil.warn;
	var isArray = sharedUtil.isArray;
	var Util = sharedUtil.Util;
	var stringToBytes = sharedUtil.stringToBytes;
	var assert = sharedUtil.assert;
	var ISOAdobeCharset = coreCharsets.ISOAdobeCharset;
	var ExpertCharset = coreCharsets.ExpertCharset;
	var ExpertSubsetCharset = coreCharsets.ExpertSubsetCharset;
	var StandardEncoding = coreEncodings.StandardEncoding;
	var ExpertEncoding = coreEncodings.ExpertEncoding;
	var MAX_SUBR_NESTING = 10;
	var CFFStandardStrings = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000', '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];
	var CFFParser = function CFFParserClosure() {
	  var CharstringValidationData = [null, {
	    id: 'hstem',
	    min: 2,
	    stackClearing: true,
	    stem: true
	  }, null, {
	    id: 'vstem',
	    min: 2,
	    stackClearing: true,
	    stem: true
	  }, {
	    id: 'vmoveto',
	    min: 1,
	    stackClearing: true
	  }, {
	    id: 'rlineto',
	    min: 2,
	    resetStack: true
	  }, {
	    id: 'hlineto',
	    min: 1,
	    resetStack: true
	  }, {
	    id: 'vlineto',
	    min: 1,
	    resetStack: true
	  }, {
	    id: 'rrcurveto',
	    min: 6,
	    resetStack: true
	  }, null, {
	    id: 'callsubr',
	    min: 1,
	    undefStack: true
	  }, {
	    id: 'return',
	    min: 0,
	    undefStack: true
	  }, null, null, {
	    id: 'endchar',
	    min: 0,
	    stackClearing: true
	  }, null, null, null, {
	    id: 'hstemhm',
	    min: 2,
	    stackClearing: true,
	    stem: true
	  }, {
	    id: 'hintmask',
	    min: 0,
	    stackClearing: true
	  }, {
	    id: 'cntrmask',
	    min: 0,
	    stackClearing: true
	  }, {
	    id: 'rmoveto',
	    min: 2,
	    stackClearing: true
	  }, {
	    id: 'hmoveto',
	    min: 1,
	    stackClearing: true
	  }, {
	    id: 'vstemhm',
	    min: 2,
	    stackClearing: true,
	    stem: true
	  }, {
	    id: 'rcurveline',
	    min: 8,
	    resetStack: true
	  }, {
	    id: 'rlinecurve',
	    min: 8,
	    resetStack: true
	  }, {
	    id: 'vvcurveto',
	    min: 4,
	    resetStack: true
	  }, {
	    id: 'hhcurveto',
	    min: 4,
	    resetStack: true
	  }, null, {
	    id: 'callgsubr',
	    min: 1,
	    undefStack: true
	  }, {
	    id: 'vhcurveto',
	    min: 4,
	    resetStack: true
	  }, {
	    id: 'hvcurveto',
	    min: 4,
	    resetStack: true
	  }];
	  var CharstringValidationData12 = [null, null, null, {
	    id: 'and',
	    min: 2,
	    stackDelta: -1
	  }, {
	    id: 'or',
	    min: 2,
	    stackDelta: -1
	  }, {
	    id: 'not',
	    min: 1,
	    stackDelta: 0
	  }, null, null, null, {
	    id: 'abs',
	    min: 1,
	    stackDelta: 0
	  }, {
	    id: 'add',
	    min: 2,
	    stackDelta: -1,
	    stackFn: function stack_div(stack, index) {
	      stack[index - 2] = stack[index - 2] + stack[index - 1];
	    }
	  }, {
	    id: 'sub',
	    min: 2,
	    stackDelta: -1,
	    stackFn: function stack_div(stack, index) {
	      stack[index - 2] = stack[index - 2] - stack[index - 1];
	    }
	  }, {
	    id: 'div',
	    min: 2,
	    stackDelta: -1,
	    stackFn: function stack_div(stack, index) {
	      stack[index - 2] = stack[index - 2] / stack[index - 1];
	    }
	  }, null, {
	    id: 'neg',
	    min: 1,
	    stackDelta: 0,
	    stackFn: function stack_div(stack, index) {
	      stack[index - 1] = -stack[index - 1];
	    }
	  }, {
	    id: 'eq',
	    min: 2,
	    stackDelta: -1
	  }, null, null, {
	    id: 'drop',
	    min: 1,
	    stackDelta: -1
	  }, null, {
	    id: 'put',
	    min: 2,
	    stackDelta: -2
	  }, {
	    id: 'get',
	    min: 1,
	    stackDelta: 0
	  }, {
	    id: 'ifelse',
	    min: 4,
	    stackDelta: -3
	  }, {
	    id: 'random',
	    min: 0,
	    stackDelta: 1
	  }, {
	    id: 'mul',
	    min: 2,
	    stackDelta: -1,
	    stackFn: function stack_div(stack, index) {
	      stack[index - 2] = stack[index - 2] * stack[index - 1];
	    }
	  }, null, {
	    id: 'sqrt',
	    min: 1,
	    stackDelta: 0
	  }, {
	    id: 'dup',
	    min: 1,
	    stackDelta: 1
	  }, {
	    id: 'exch',
	    min: 2,
	    stackDelta: 0
	  }, {
	    id: 'index',
	    min: 2,
	    stackDelta: 0
	  }, {
	    id: 'roll',
	    min: 3,
	    stackDelta: -2
	  }, null, null, null, {
	    id: 'hflex',
	    min: 7,
	    resetStack: true
	  }, {
	    id: 'flex',
	    min: 13,
	    resetStack: true
	  }, {
	    id: 'hflex1',
	    min: 9,
	    resetStack: true
	  }, {
	    id: 'flex1',
	    min: 11,
	    resetStack: true
	  }];
	  function CFFParser(file, properties, seacAnalysisEnabled) {
	    this.bytes = file.getBytes();
	    this.properties = properties;
	    this.seacAnalysisEnabled = !!seacAnalysisEnabled;
	  }
	  CFFParser.prototype = {
	    parse: function CFFParser_parse() {
	      var properties = this.properties;
	      var cff = new CFF();
	      this.cff = cff;
	      var header = this.parseHeader();
	      var nameIndex = this.parseIndex(header.endPos);
	      var topDictIndex = this.parseIndex(nameIndex.endPos);
	      var stringIndex = this.parseIndex(topDictIndex.endPos);
	      var globalSubrIndex = this.parseIndex(stringIndex.endPos);
	      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));
	      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);
	      cff.header = header.obj;
	      cff.names = this.parseNameIndex(nameIndex.obj);
	      cff.strings = this.parseStringIndex(stringIndex.obj);
	      cff.topDict = topDict;
	      cff.globalSubrIndex = globalSubrIndex.obj;
	      this.parsePrivateDict(cff.topDict);
	      cff.isCIDFont = topDict.hasName('ROS');
	      var charStringOffset = topDict.getByName('CharStrings');
	      var charStringIndex = this.parseIndex(charStringOffset).obj;
	      var fontMatrix = topDict.getByName('FontMatrix');
	      if (fontMatrix) {
	        properties.fontMatrix = fontMatrix;
	      }
	      var fontBBox = topDict.getByName('FontBBox');
	      if (fontBBox) {
	        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
	        properties.descent = Math.min(fontBBox[1], fontBBox[3]);
	        properties.ascentScaled = true;
	      }
	      var charset, encoding;
	      if (cff.isCIDFont) {
	        var fdArrayIndex = this.parseIndex(topDict.getByName('FDArray')).obj;
	        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {
	          var dictRaw = fdArrayIndex.get(i);
	          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);
	          this.parsePrivateDict(fontDict);
	          cff.fdArray.push(fontDict);
	        }
	        encoding = null;
	        charset = this.parseCharsets(topDict.getByName('charset'), charStringIndex.count, cff.strings, true);
	        cff.fdSelect = this.parseFDSelect(topDict.getByName('FDSelect'), charStringIndex.count);
	      } else {
	        charset = this.parseCharsets(topDict.getByName('charset'), charStringIndex.count, cff.strings, false);
	        encoding = this.parseEncoding(topDict.getByName('Encoding'), properties, cff.strings, charset.charset);
	      }
	      cff.charset = charset;
	      cff.encoding = encoding;
	      var charStringsAndSeacs = this.parseCharStrings(charStringIndex, topDict.privateDict.subrsIndex, globalSubrIndex.obj, cff.fdSelect, cff.fdArray);
	      cff.charStrings = charStringsAndSeacs.charStrings;
	      cff.seacs = charStringsAndSeacs.seacs;
	      cff.widths = charStringsAndSeacs.widths;
	      return cff;
	    },
	    parseHeader: function CFFParser_parseHeader() {
	      var bytes = this.bytes;
	      var bytesLength = bytes.length;
	      var offset = 0;
	      while (offset < bytesLength && bytes[offset] !== 1) {
	        ++offset;
	      }
	      if (offset >= bytesLength) {
	        error('Invalid CFF header');
	      } else if (offset !== 0) {
	        info('cff data is shifted');
	        bytes = bytes.subarray(offset);
	        this.bytes = bytes;
	      }
	      var major = bytes[0];
	      var minor = bytes[1];
	      var hdrSize = bytes[2];
	      var offSize = bytes[3];
	      var header = new CFFHeader(major, minor, hdrSize, offSize);
	      return {
	        obj: header,
	        endPos: hdrSize
	      };
	    },
	    parseDict: function CFFParser_parseDict(dict) {
	      var pos = 0;
	      function parseOperand() {
	        var value = dict[pos++];
	        if (value === 30) {
	          return parseFloatOperand();
	        } else if (value === 28) {
	          value = dict[pos++];
	          value = (value << 24 | dict[pos++] << 16) >> 16;
	          return value;
	        } else if (value === 29) {
	          value = dict[pos++];
	          value = value << 8 | dict[pos++];
	          value = value << 8 | dict[pos++];
	          value = value << 8 | dict[pos++];
	          return value;
	        } else if (value >= 32 && value <= 246) {
	          return value - 139;
	        } else if (value >= 247 && value <= 250) {
	          return (value - 247) * 256 + dict[pos++] + 108;
	        } else if (value >= 251 && value <= 254) {
	          return -((value - 251) * 256) - dict[pos++] - 108;
	        }
	        warn('CFFParser_parseDict: "' + value + '" is a reserved command.');
	        return NaN;
	      }
	      function parseFloatOperand() {
	        var str = '';
	        var eof = 15;
	        var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
	        var length = dict.length;
	        while (pos < length) {
	          var b = dict[pos++];
	          var b1 = b >> 4;
	          var b2 = b & 15;
	          if (b1 === eof) {
	            break;
	          }
	          str += lookup[b1];
	          if (b2 === eof) {
	            break;
	          }
	          str += lookup[b2];
	        }
	        return parseFloat(str);
	      }
	      var operands = [];
	      var entries = [];
	      pos = 0;
	      var end = dict.length;
	      while (pos < end) {
	        var b = dict[pos];
	        if (b <= 21) {
	          if (b === 12) {
	            b = b << 8 | dict[++pos];
	          }
	          entries.push([b, operands]);
	          operands = [];
	          ++pos;
	        } else {
	          operands.push(parseOperand());
	        }
	      }
	      return entries;
	    },
	    parseIndex: function CFFParser_parseIndex(pos) {
	      var cffIndex = new CFFIndex();
	      var bytes = this.bytes;
	      var count = bytes[pos++] << 8 | bytes[pos++];
	      var offsets = [];
	      var end = pos;
	      var i, ii;
	      if (count !== 0) {
	        var offsetSize = bytes[pos++];
	        var startPos = pos + (count + 1) * offsetSize - 1;
	        for (i = 0, ii = count + 1; i < ii; ++i) {
	          var offset = 0;
	          for (var j = 0; j < offsetSize; ++j) {
	            offset <<= 8;
	            offset += bytes[pos++];
	          }
	          offsets.push(startPos + offset);
	        }
	        end = offsets[count];
	      }
	      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {
	        var offsetStart = offsets[i];
	        var offsetEnd = offsets[i + 1];
	        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));
	      }
	      return {
	        obj: cffIndex,
	        endPos: end
	      };
	    },
	    parseNameIndex: function CFFParser_parseNameIndex(index) {
	      var names = [];
	      for (var i = 0, ii = index.count; i < ii; ++i) {
	        var name = index.get(i);
	        var length = Math.min(name.length, 127);
	        var data = [];
	        for (var j = 0; j < length; ++j) {
	          var c = name[j];
	          if (j === 0 && c === 0) {
	            data[j] = c;
	            continue;
	          }
	          if (c < 33 || c > 126 || c === 91 || c === 93 || c === 40 || c === 41 || c === 123 || c === 125 || c === 60 || c === 62 || c === 47 || c === 37 || c === 35) {
	            data[j] = 95;
	            continue;
	          }
	          data[j] = c;
	        }
	        names.push(bytesToString(data));
	      }
	      return names;
	    },
	    parseStringIndex: function CFFParser_parseStringIndex(index) {
	      var strings = new CFFStrings();
	      for (var i = 0, ii = index.count; i < ii; ++i) {
	        var data = index.get(i);
	        strings.add(bytesToString(data));
	      }
	      return strings;
	    },
	    createDict: function CFFParser_createDict(Type, dict, strings) {
	      var cffDict = new Type(strings);
	      for (var i = 0, ii = dict.length; i < ii; ++i) {
	        var pair = dict[i];
	        var key = pair[0];
	        var value = pair[1];
	        cffDict.setByKey(key, value);
	      }
	      return cffDict;
	    },
	    parseCharString: function CFFParser_parseCharString(state, data, localSubrIndex, globalSubrIndex) {
	      if (!data || state.callDepth > MAX_SUBR_NESTING) {
	        return false;
	      }
	      var stackSize = state.stackSize;
	      var stack = state.stack;
	      var length = data.length;
	      for (var j = 0; j < length;) {
	        var value = data[j++];
	        var validationCommand = null;
	        if (value === 12) {
	          var q = data[j++];
	          if (q === 0) {
	            data[j - 2] = 139;
	            data[j - 1] = 22;
	            stackSize = 0;
	          } else {
	            validationCommand = CharstringValidationData12[q];
	          }
	        } else if (value === 28) {
	          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;
	          j += 2;
	          stackSize++;
	        } else if (value === 14) {
	          if (stackSize >= 4) {
	            stackSize -= 4;
	            if (this.seacAnalysisEnabled) {
	              state.seac = stack.slice(stackSize, stackSize + 4);
	              return false;
	            }
	          }
	          validationCommand = CharstringValidationData[value];
	        } else if (value >= 32 && value <= 246) {
	          stack[stackSize] = value - 139;
	          stackSize++;
	        } else if (value >= 247 && value <= 254) {
	          stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;
	          j++;
	          stackSize++;
	        } else if (value === 255) {
	          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;
	          j += 4;
	          stackSize++;
	        } else if (value === 19 || value === 20) {
	          state.hints += stackSize >> 1;
	          j += state.hints + 7 >> 3;
	          stackSize %= 2;
	          validationCommand = CharstringValidationData[value];
	        } else if (value === 10 || value === 29) {
	          var subrsIndex;
	          if (value === 10) {
	            subrsIndex = localSubrIndex;
	          } else {
	            subrsIndex = globalSubrIndex;
	          }
	          if (!subrsIndex) {
	            validationCommand = CharstringValidationData[value];
	            warn('Missing subrsIndex for ' + validationCommand.id);
	            return false;
	          }
	          var bias = 32768;
	          if (subrsIndex.count < 1240) {
	            bias = 107;
	          } else if (subrsIndex.count < 33900) {
	            bias = 1131;
	          }
	          var subrNumber = stack[--stackSize] + bias;
	          if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {
	            validationCommand = CharstringValidationData[value];
	            warn('Out of bounds subrIndex for ' + validationCommand.id);
	            return false;
	          }
	          state.stackSize = stackSize;
	          state.callDepth++;
	          var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);
	          if (!valid) {
	            return false;
	          }
	          state.callDepth--;
	          stackSize = state.stackSize;
	          continue;
	        } else if (value === 11) {
	          state.stackSize = stackSize;
	          return true;
	        } else {
	          validationCommand = CharstringValidationData[value];
	        }
	        if (validationCommand) {
	          if (validationCommand.stem) {
	            state.hints += stackSize >> 1;
	          }
	          if ('min' in validationCommand) {
	            if (!state.undefStack && stackSize < validationCommand.min) {
	              warn('Not enough parameters for ' + validationCommand.id + '; actual: ' + stackSize + ', expected: ' + validationCommand.min);
	              return false;
	            }
	          }
	          if (state.firstStackClearing && validationCommand.stackClearing) {
	            state.firstStackClearing = false;
	            stackSize -= validationCommand.min;
	            if (stackSize >= 2 && validationCommand.stem) {
	              stackSize %= 2;
	            } else if (stackSize > 1) {
	              warn('Found too many parameters for stack-clearing command');
	            }
	            if (stackSize > 0 && stack[stackSize - 1] >= 0) {
	              state.width = stack[stackSize - 1];
	            }
	          }
	          if ('stackDelta' in validationCommand) {
	            if ('stackFn' in validationCommand) {
	              validationCommand.stackFn(stack, stackSize);
	            }
	            stackSize += validationCommand.stackDelta;
	          } else if (validationCommand.stackClearing) {
	            stackSize = 0;
	          } else if (validationCommand.resetStack) {
	            stackSize = 0;
	            state.undefStack = false;
	          } else if (validationCommand.undefStack) {
	            stackSize = 0;
	            state.undefStack = true;
	            state.firstStackClearing = false;
	          }
	        }
	      }
	      state.stackSize = stackSize;
	      return true;
	    },
	    parseCharStrings: function CFFParser_parseCharStrings(charStrings, localSubrIndex, globalSubrIndex, fdSelect, fdArray) {
	      var seacs = [];
	      var widths = [];
	      var count = charStrings.count;
	      for (var i = 0; i < count; i++) {
	        var charstring = charStrings.get(i);
	        var state = {
	          callDepth: 0,
	          stackSize: 0,
	          stack: [],
	          undefStack: true,
	          hints: 0,
	          firstStackClearing: true,
	          seac: null,
	          width: null
	        };
	        var valid = true;
	        var localSubrToUse = null;
	        if (fdSelect && fdArray.length) {
	          var fdIndex = fdSelect.getFDIndex(i);
	          if (fdIndex === -1) {
	            warn('Glyph index is not in fd select.');
	            valid = false;
	          }
	          if (fdIndex >= fdArray.length) {
	            warn('Invalid fd index for glyph index.');
	            valid = false;
	          }
	          if (valid) {
	            localSubrToUse = fdArray[fdIndex].privateDict.subrsIndex;
	          }
	        } else if (localSubrIndex) {
	          localSubrToUse = localSubrIndex;
	        }
	        if (valid) {
	          valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);
	        }
	        if (state.width !== null) {
	          widths[i] = state.width;
	        }
	        if (state.seac !== null) {
	          seacs[i] = state.seac;
	        }
	        if (!valid) {
	          charStrings.set(i, new Uint8Array([14]));
	        }
	      }
	      return {
	        charStrings: charStrings,
	        seacs: seacs,
	        widths: widths
	      };
	    },
	    emptyPrivateDictionary: function CFFParser_emptyPrivateDictionary(parentDict) {
	      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);
	      parentDict.setByKey(18, [0, 0]);
	      parentDict.privateDict = privateDict;
	    },
	    parsePrivateDict: function CFFParser_parsePrivateDict(parentDict) {
	      if (!parentDict.hasName('Private')) {
	        this.emptyPrivateDictionary(parentDict);
	        return;
	      }
	      var privateOffset = parentDict.getByName('Private');
	      if (!isArray(privateOffset) || privateOffset.length !== 2) {
	        parentDict.removeByName('Private');
	        return;
	      }
	      var size = privateOffset[0];
	      var offset = privateOffset[1];
	      if (size === 0 || offset >= this.bytes.length) {
	        this.emptyPrivateDictionary(parentDict);
	        return;
	      }
	      var privateDictEnd = offset + size;
	      var dictData = this.bytes.subarray(offset, privateDictEnd);
	      var dict = this.parseDict(dictData);
	      var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);
	      parentDict.privateDict = privateDict;
	      if (!privateDict.getByName('Subrs')) {
	        return;
	      }
	      var subrsOffset = privateDict.getByName('Subrs');
	      var relativeOffset = offset + subrsOffset;
	      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {
	        this.emptyPrivateDictionary(parentDict);
	        return;
	      }
	      var subrsIndex = this.parseIndex(relativeOffset);
	      privateDict.subrsIndex = subrsIndex.obj;
	    },
	    parseCharsets: function CFFParser_parseCharsets(pos, length, strings, cid) {
	      if (pos === 0) {
	        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, ISOAdobeCharset);
	      } else if (pos === 1) {
	        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, ExpertCharset);
	      } else if (pos === 2) {
	        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, ExpertSubsetCharset);
	      }
	      var bytes = this.bytes;
	      var start = pos;
	      var format = bytes[pos++];
	      var charset = ['.notdef'];
	      var id, count, i;
	      length -= 1;
	      switch (format) {
	        case 0:
	          for (i = 0; i < length; i++) {
	            id = bytes[pos++] << 8 | bytes[pos++];
	            charset.push(cid ? id : strings.get(id));
	          }
	          break;
	        case 1:
	          while (charset.length <= length) {
	            id = bytes[pos++] << 8 | bytes[pos++];
	            count = bytes[pos++];
	            for (i = 0; i <= count; i++) {
	              charset.push(cid ? id++ : strings.get(id++));
	            }
	          }
	          break;
	        case 2:
	          while (charset.length <= length) {
	            id = bytes[pos++] << 8 | bytes[pos++];
	            count = bytes[pos++] << 8 | bytes[pos++];
	            for (i = 0; i <= count; i++) {
	              charset.push(cid ? id++ : strings.get(id++));
	            }
	          }
	          break;
	        default:
	          error('Unknown charset format');
	      }
	      var end = pos;
	      var raw = bytes.subarray(start, end);
	      return new CFFCharset(false, format, charset, raw);
	    },
	    parseEncoding: function CFFParser_parseEncoding(pos, properties, strings, charset) {
	      var encoding = Object.create(null);
	      var bytes = this.bytes;
	      var predefined = false;
	      var format, i, ii;
	      var raw = null;
	      function readSupplement() {
	        var supplementsCount = bytes[pos++];
	        for (i = 0; i < supplementsCount; i++) {
	          var code = bytes[pos++];
	          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);
	          encoding[code] = charset.indexOf(strings.get(sid));
	        }
	      }
	      if (pos === 0 || pos === 1) {
	        predefined = true;
	        format = pos;
	        var baseEncoding = pos ? ExpertEncoding : StandardEncoding;
	        for (i = 0, ii = charset.length; i < ii; i++) {
	          var index = baseEncoding.indexOf(charset[i]);
	          if (index !== -1) {
	            encoding[index] = i;
	          }
	        }
	      } else {
	        var dataStart = pos;
	        format = bytes[pos++];
	        switch (format & 0x7f) {
	          case 0:
	            var glyphsCount = bytes[pos++];
	            for (i = 1; i <= glyphsCount; i++) {
	              encoding[bytes[pos++]] = i;
	            }
	            break;
	          case 1:
	            var rangesCount = bytes[pos++];
	            var gid = 1;
	            for (i = 0; i < rangesCount; i++) {
	              var start = bytes[pos++];
	              var left = bytes[pos++];
	              for (var j = start; j <= start + left; j++) {
	                encoding[j] = gid++;
	              }
	            }
	            break;
	          default:
	            error('Unknown encoding format: ' + format + ' in CFF');
	            break;
	        }
	        var dataEnd = pos;
	        if (format & 0x80) {
	          bytes[dataStart] &= 0x7f;
	          readSupplement();
	        }
	        raw = bytes.subarray(dataStart, dataEnd);
	      }
	      format = format & 0x7f;
	      return new CFFEncoding(predefined, format, encoding, raw);
	    },
	    parseFDSelect: function CFFParser_parseFDSelect(pos, length) {
	      var start = pos;
	      var bytes = this.bytes;
	      var format = bytes[pos++];
	      var fdSelect = [],
	          rawBytes;
	      var i,
	          invalidFirstGID = false;
	      switch (format) {
	        case 0:
	          for (i = 0; i < length; ++i) {
	            var id = bytes[pos++];
	            fdSelect.push(id);
	          }
	          rawBytes = bytes.subarray(start, pos);
	          break;
	        case 3:
	          var rangesCount = bytes[pos++] << 8 | bytes[pos++];
	          for (i = 0; i < rangesCount; ++i) {
	            var first = bytes[pos++] << 8 | bytes[pos++];
	            if (i === 0 && first !== 0) {
	              warn('parseFDSelect: The first range must have a first GID of 0' + ' -- trying to recover.');
	              invalidFirstGID = true;
	              first = 0;
	            }
	            var fdIndex = bytes[pos++];
	            var next = bytes[pos] << 8 | bytes[pos + 1];
	            for (var j = first; j < next; ++j) {
	              fdSelect.push(fdIndex);
	            }
	          }
	          pos += 2;
	          rawBytes = bytes.subarray(start, pos);
	          if (invalidFirstGID) {
	            rawBytes[3] = rawBytes[4] = 0;
	          }
	          break;
	        default:
	          error('parseFDSelect: Unknown format "' + format + '".');
	          break;
	      }
	      assert(fdSelect.length === length, 'parseFDSelect: Invalid font data.');
	      return new CFFFDSelect(fdSelect, rawBytes);
	    }
	  };
	  return CFFParser;
	}();
	var CFF = function CFFClosure() {
	  function CFF() {
	    this.header = null;
	    this.names = [];
	    this.topDict = null;
	    this.strings = new CFFStrings();
	    this.globalSubrIndex = null;
	    this.encoding = null;
	    this.charset = null;
	    this.charStrings = null;
	    this.fdArray = [];
	    this.fdSelect = null;
	    this.isCIDFont = false;
	  }
	  return CFF;
	}();
	var CFFHeader = function CFFHeaderClosure() {
	  function CFFHeader(major, minor, hdrSize, offSize) {
	    this.major = major;
	    this.minor = minor;
	    this.hdrSize = hdrSize;
	    this.offSize = offSize;
	  }
	  return CFFHeader;
	}();
	var CFFStrings = function CFFStringsClosure() {
	  function CFFStrings() {
	    this.strings = [];
	  }
	  CFFStrings.prototype = {
	    get: function CFFStrings_get(index) {
	      if (index >= 0 && index <= 390) {
	        return CFFStandardStrings[index];
	      }
	      if (index - 391 <= this.strings.length) {
	        return this.strings[index - 391];
	      }
	      return CFFStandardStrings[0];
	    },
	    add: function CFFStrings_add(value) {
	      this.strings.push(value);
	    },
	    get count() {
	      return this.strings.length;
	    }
	  };
	  return CFFStrings;
	}();
	var CFFIndex = function CFFIndexClosure() {
	  function CFFIndex() {
	    this.objects = [];
	    this.length = 0;
	  }
	  CFFIndex.prototype = {
	    add: function CFFIndex_add(data) {
	      this.length += data.length;
	      this.objects.push(data);
	    },
	    set: function CFFIndex_set(index, data) {
	      this.length += data.length - this.objects[index].length;
	      this.objects[index] = data;
	    },
	    get: function CFFIndex_get(index) {
	      return this.objects[index];
	    },
	    get count() {
	      return this.objects.length;
	    }
	  };
	  return CFFIndex;
	}();
	var CFFDict = function CFFDictClosure() {
	  function CFFDict(tables, strings) {
	    this.keyToNameMap = tables.keyToNameMap;
	    this.nameToKeyMap = tables.nameToKeyMap;
	    this.defaults = tables.defaults;
	    this.types = tables.types;
	    this.opcodes = tables.opcodes;
	    this.order = tables.order;
	    this.strings = strings;
	    this.values = Object.create(null);
	  }
	  CFFDict.prototype = {
	    setByKey: function CFFDict_setByKey(key, value) {
	      if (!(key in this.keyToNameMap)) {
	        return false;
	      }
	      var valueLength = value.length;
	      if (valueLength === 0) {
	        return true;
	      }
	      for (var i = 0; i < valueLength; i++) {
	        if (isNaN(value[i])) {
	          warn('Invalid CFFDict value: "' + value + '" for key "' + key + '".');
	          return true;
	        }
	      }
	      var type = this.types[key];
	      if (type === 'num' || type === 'sid' || type === 'offset') {
	        value = value[0];
	      }
	      this.values[key] = value;
	      return true;
	    },
	    setByName: function CFFDict_setByName(name, value) {
	      if (!(name in this.nameToKeyMap)) {
	        error('Invalid dictionary name "' + name + '"');
	      }
	      this.values[this.nameToKeyMap[name]] = value;
	    },
	    hasName: function CFFDict_hasName(name) {
	      return this.nameToKeyMap[name] in this.values;
	    },
	    getByName: function CFFDict_getByName(name) {
	      if (!(name in this.nameToKeyMap)) {
	        error('Invalid dictionary name "' + name + '"');
	      }
	      var key = this.nameToKeyMap[name];
	      if (!(key in this.values)) {
	        return this.defaults[key];
	      }
	      return this.values[key];
	    },
	    removeByName: function CFFDict_removeByName(name) {
	      delete this.values[this.nameToKeyMap[name]];
	    }
	  };
	  CFFDict.createTables = function CFFDict_createTables(layout) {
	    var tables = {
	      keyToNameMap: {},
	      nameToKeyMap: {},
	      defaults: {},
	      types: {},
	      opcodes: {},
	      order: []
	    };
	    for (var i = 0, ii = layout.length; i < ii; ++i) {
	      var entry = layout[i];
	      var key = isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];
	      tables.keyToNameMap[key] = entry[1];
	      tables.nameToKeyMap[entry[1]] = key;
	      tables.types[key] = entry[2];
	      tables.defaults[key] = entry[3];
	      tables.opcodes[key] = isArray(entry[0]) ? entry[0] : [entry[0]];
	      tables.order.push(key);
	    }
	    return tables;
	  };
	  return CFFDict;
	}();
	var CFFTopDict = function CFFTopDictClosure() {
	  var layout = [[[12, 30], 'ROS', ['sid', 'sid', 'num'], null], [[12, 20], 'SyntheticBase', 'num', null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'num', 0], [[12, 2], 'ItalicAngle', 'num', 0], [[12, 3], 'UnderlinePosition', 'num', -100], [[12, 4], 'UnderlineThickness', 'num', 50], [[12, 5], 'PaintType', 'num', 0], [[12, 6], 'CharstringType', 'num', 2], [[12, 7], 'FontMatrix', ['num', 'num', 'num', 'num', 'num', 'num'], [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'num', null], [5, 'FontBBox', ['num', 'num', 'num', 'num'], [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'num', 0], [14, 'XUID', 'array', null], [15, 'charset', 'offset', 0], [16, 'Encoding', 'offset', 0], [17, 'CharStrings', 'offset', 0], [18, 'Private', ['offset', 'offset'], null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null], [[12, 31], 'CIDFontVersion', 'num', 0], [[12, 32], 'CIDFontRevision', 'num', 0], [[12, 33], 'CIDFontType', 'num', 0], [[12, 34], 'CIDCount', 'num', 8720], [[12, 35], 'UIDBase', 'num', null], [[12, 37], 'FDSelect', 'offset', null], [[12, 36], 'FDArray', 'offset', null], [[12, 38], 'FontName', 'sid', null]];
	  var tables = null;
	  function CFFTopDict(strings) {
	    if (tables === null) {
	      tables = CFFDict.createTables(layout);
	    }
	    CFFDict.call(this, tables, strings);
	    this.privateDict = null;
	  }
	  CFFTopDict.prototype = Object.create(CFFDict.prototype);
	  return CFFTopDict;
	}();
	var CFFPrivateDict = function CFFPrivateDictClosure() {
	  var layout = [[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'num', 0.039625], [[12, 10], 'BlueShift', 'num', 7], [[12, 11], 'BlueFuzz', 'num', 1], [10, 'StdHW', 'num', null], [11, 'StdVW', 'num', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'num', 0], [[12, 17], 'LanguageGroup', 'num', 0], [[12, 18], 'ExpansionFactor', 'num', 0.06], [[12, 19], 'initialRandomSeed', 'num', 0], [20, 'defaultWidthX', 'num', 0], [21, 'nominalWidthX', 'num', 0], [19, 'Subrs', 'offset', null]];
	  var tables = null;
	  function CFFPrivateDict(strings) {
	    if (tables === null) {
	      tables = CFFDict.createTables(layout);
	    }
	    CFFDict.call(this, tables, strings);
	    this.subrsIndex = null;
	  }
	  CFFPrivateDict.prototype = Object.create(CFFDict.prototype);
	  return CFFPrivateDict;
	}();
	var CFFCharsetPredefinedTypes = {
	  ISO_ADOBE: 0,
	  EXPERT: 1,
	  EXPERT_SUBSET: 2
	};
	var CFFCharset = function CFFCharsetClosure() {
	  function CFFCharset(predefined, format, charset, raw) {
	    this.predefined = predefined;
	    this.format = format;
	    this.charset = charset;
	    this.raw = raw;
	  }
	  return CFFCharset;
	}();
	var CFFEncoding = function CFFEncodingClosure() {
	  function CFFEncoding(predefined, format, encoding, raw) {
	    this.predefined = predefined;
	    this.format = format;
	    this.encoding = encoding;
	    this.raw = raw;
	  }
	  return CFFEncoding;
	}();
	var CFFFDSelect = function CFFFDSelectClosure() {
	  function CFFFDSelect(fdSelect, raw) {
	    this.fdSelect = fdSelect;
	    this.raw = raw;
	  }
	  CFFFDSelect.prototype = {
	    getFDIndex: function CFFFDSelect_get(glyphIndex) {
	      if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {
	        return -1;
	      }
	      return this.fdSelect[glyphIndex];
	    }
	  };
	  return CFFFDSelect;
	}();
	var CFFOffsetTracker = function CFFOffsetTrackerClosure() {
	  function CFFOffsetTracker() {
	    this.offsets = Object.create(null);
	  }
	  CFFOffsetTracker.prototype = {
	    isTracking: function CFFOffsetTracker_isTracking(key) {
	      return key in this.offsets;
	    },
	    track: function CFFOffsetTracker_track(key, location) {
	      if (key in this.offsets) {
	        error('Already tracking location of ' + key);
	      }
	      this.offsets[key] = location;
	    },
	    offset: function CFFOffsetTracker_offset(value) {
	      for (var key in this.offsets) {
	        this.offsets[key] += value;
	      }
	    },
	    setEntryLocation: function CFFOffsetTracker_setEntryLocation(key, values, output) {
	      if (!(key in this.offsets)) {
	        error('Not tracking location of ' + key);
	      }
	      var data = output.data;
	      var dataOffset = this.offsets[key];
	      var size = 5;
	      for (var i = 0, ii = values.length; i < ii; ++i) {
	        var offset0 = i * size + dataOffset;
	        var offset1 = offset0 + 1;
	        var offset2 = offset0 + 2;
	        var offset3 = offset0 + 3;
	        var offset4 = offset0 + 4;
	        if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {
	          error('writing to an offset that is not empty');
	        }
	        var value = values[i];
	        data[offset0] = 0x1d;
	        data[offset1] = value >> 24 & 0xFF;
	        data[offset2] = value >> 16 & 0xFF;
	        data[offset3] = value >> 8 & 0xFF;
	        data[offset4] = value & 0xFF;
	      }
	    }
	  };
	  return CFFOffsetTracker;
	}();
	var CFFCompiler = function CFFCompilerClosure() {
	  function CFFCompiler(cff) {
	    this.cff = cff;
	  }
	  CFFCompiler.prototype = {
	    compile: function CFFCompiler_compile() {
	      var cff = this.cff;
	      var output = {
	        data: [],
	        length: 0,
	        add: function CFFCompiler_add(data) {
	          this.data = this.data.concat(data);
	          this.length = this.data.length;
	        }
	      };
	      var header = this.compileHeader(cff.header);
	      output.add(header);
	      var nameIndex = this.compileNameIndex(cff.names);
	      output.add(nameIndex);
	      if (cff.isCIDFont) {
	        if (cff.topDict.hasName('FontMatrix')) {
	          var base = cff.topDict.getByName('FontMatrix');
	          cff.topDict.removeByName('FontMatrix');
	          for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {
	            var subDict = cff.fdArray[i];
	            var matrix = base.slice(0);
	            if (subDict.hasName('FontMatrix')) {
	              matrix = Util.transform(matrix, subDict.getByName('FontMatrix'));
	            }
	            subDict.setByName('FontMatrix', matrix);
	          }
	        }
	      }
	      var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);
	      output.add(compiled.output);
	      var topDictTracker = compiled.trackers[0];
	      var stringIndex = this.compileStringIndex(cff.strings.strings);
	      output.add(stringIndex);
	      var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);
	      output.add(globalSubrIndex);
	      if (cff.encoding && cff.topDict.hasName('Encoding')) {
	        if (cff.encoding.predefined) {
	          topDictTracker.setEntryLocation('Encoding', [cff.encoding.format], output);
	        } else {
	          var encoding = this.compileEncoding(cff.encoding);
	          topDictTracker.setEntryLocation('Encoding', [output.length], output);
	          output.add(encoding);
	        }
	      }
	      if (cff.charset && cff.topDict.hasName('charset')) {
	        if (cff.charset.predefined) {
	          topDictTracker.setEntryLocation('charset', [cff.charset.format], output);
	        } else {
	          var charset = this.compileCharset(cff.charset);
	          topDictTracker.setEntryLocation('charset', [output.length], output);
	          output.add(charset);
	        }
	      }
	      var charStrings = this.compileCharStrings(cff.charStrings);
	      topDictTracker.setEntryLocation('CharStrings', [output.length], output);
	      output.add(charStrings);
	      if (cff.isCIDFont) {
	        topDictTracker.setEntryLocation('FDSelect', [output.length], output);
	        var fdSelect = this.compileFDSelect(cff.fdSelect.raw);
	        output.add(fdSelect);
	        compiled = this.compileTopDicts(cff.fdArray, output.length, true);
	        topDictTracker.setEntryLocation('FDArray', [output.length], output);
	        output.add(compiled.output);
	        var fontDictTrackers = compiled.trackers;
	        this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);
	      }
	      this.compilePrivateDicts([cff.topDict], [topDictTracker], output);
	      output.add([0]);
	      return output.data;
	    },
	    encodeNumber: function CFFCompiler_encodeNumber(value) {
	      if (parseFloat(value) === parseInt(value, 10) && !isNaN(value)) {
	        return this.encodeInteger(value);
	      }
	      return this.encodeFloat(value);
	    },
	    encodeFloat: function CFFCompiler_encodeFloat(num) {
	      var value = num.toString();
	      var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
	      if (m) {
	        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
	        value = (Math.round(num * epsilon) / epsilon).toString();
	      }
	      var nibbles = '';
	      var i, ii;
	      for (i = 0, ii = value.length; i < ii; ++i) {
	        var a = value[i];
	        if (a === 'e') {
	          nibbles += value[++i] === '-' ? 'c' : 'b';
	        } else if (a === '.') {
	          nibbles += 'a';
	        } else if (a === '-') {
	          nibbles += 'e';
	        } else {
	          nibbles += a;
	        }
	      }
	      nibbles += nibbles.length & 1 ? 'f' : 'ff';
	      var out = [30];
	      for (i = 0, ii = nibbles.length; i < ii; i += 2) {
	        out.push(parseInt(nibbles.substr(i, 2), 16));
	      }
	      return out;
	    },
	    encodeInteger: function CFFCompiler_encodeInteger(value) {
	      var code;
	      if (value >= -107 && value <= 107) {
	        code = [value + 139];
	      } else if (value >= 108 && value <= 1131) {
	        value = value - 108;
	        code = [(value >> 8) + 247, value & 0xFF];
	      } else if (value >= -1131 && value <= -108) {
	        value = -value - 108;
	        code = [(value >> 8) + 251, value & 0xFF];
	      } else if (value >= -32768 && value <= 32767) {
	        code = [0x1c, value >> 8 & 0xFF, value & 0xFF];
	      } else {
	        code = [0x1d, value >> 24 & 0xFF, value >> 16 & 0xFF, value >> 8 & 0xFF, value & 0xFF];
	      }
	      return code;
	    },
	    compileHeader: function CFFCompiler_compileHeader(header) {
	      return [header.major, header.minor, header.hdrSize, header.offSize];
	    },
	    compileNameIndex: function CFFCompiler_compileNameIndex(names) {
	      var nameIndex = new CFFIndex();
	      for (var i = 0, ii = names.length; i < ii; ++i) {
	        nameIndex.add(stringToBytes(names[i]));
	      }
	      return this.compileIndex(nameIndex);
	    },
	    compileTopDicts: function CFFCompiler_compileTopDicts(dicts, length, removeCidKeys) {
	      var fontDictTrackers = [];
	      var fdArrayIndex = new CFFIndex();
	      for (var i = 0, ii = dicts.length; i < ii; ++i) {
	        var fontDict = dicts[i];
	        if (removeCidKeys) {
	          fontDict.removeByName('CIDFontVersion');
	          fontDict.removeByName('CIDFontRevision');
	          fontDict.removeByName('CIDFontType');
	          fontDict.removeByName('CIDCount');
	          fontDict.removeByName('UIDBase');
	        }
	        var fontDictTracker = new CFFOffsetTracker();
	        var fontDictData = this.compileDict(fontDict, fontDictTracker);
	        fontDictTrackers.push(fontDictTracker);
	        fdArrayIndex.add(fontDictData);
	        fontDictTracker.offset(length);
	      }
	      fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);
	      return {
	        trackers: fontDictTrackers,
	        output: fdArrayIndex
	      };
	    },
	    compilePrivateDicts: function CFFCompiler_compilePrivateDicts(dicts, trackers, output) {
	      for (var i = 0, ii = dicts.length; i < ii; ++i) {
	        var fontDict = dicts[i];
	        assert(fontDict.privateDict && fontDict.hasName('Private'), 'There must be an private dictionary.');
	        var privateDict = fontDict.privateDict;
	        var privateDictTracker = new CFFOffsetTracker();
	        var privateDictData = this.compileDict(privateDict, privateDictTracker);
	        var outputLength = output.length;
	        privateDictTracker.offset(outputLength);
	        if (!privateDictData.length) {
	          outputLength = 0;
	        }
	        trackers[i].setEntryLocation('Private', [privateDictData.length, outputLength], output);
	        output.add(privateDictData);
	        if (privateDict.subrsIndex && privateDict.hasName('Subrs')) {
	          var subrs = this.compileIndex(privateDict.subrsIndex);
	          privateDictTracker.setEntryLocation('Subrs', [privateDictData.length], output);
	          output.add(subrs);
	        }
	      }
	    },
	    compileDict: function CFFCompiler_compileDict(dict, offsetTracker) {
	      var out = [];
	      var order = dict.order;
	      for (var i = 0; i < order.length; ++i) {
	        var key = order[i];
	        if (!(key in dict.values)) {
	          continue;
	        }
	        var values = dict.values[key];
	        var types = dict.types[key];
	        if (!isArray(types)) {
	          types = [types];
	        }
	        if (!isArray(values)) {
	          values = [values];
	        }
	        if (values.length === 0) {
	          continue;
	        }
	        for (var j = 0, jj = types.length; j < jj; ++j) {
	          var type = types[j];
	          var value = values[j];
	          switch (type) {
	            case 'num':
	            case 'sid':
	              out = out.concat(this.encodeNumber(value));
	              break;
	            case 'offset':
	              var name = dict.keyToNameMap[key];
	              if (!offsetTracker.isTracking(name)) {
	                offsetTracker.track(name, out.length);
	              }
	              out = out.concat([0x1d, 0, 0, 0, 0]);
	              break;
	            case 'array':
	            case 'delta':
	              out = out.concat(this.encodeNumber(value));
	              for (var k = 1, kk = values.length; k < kk; ++k) {
	                out = out.concat(this.encodeNumber(values[k]));
	              }
	              break;
	            default:
	              error('Unknown data type of ' + type);
	              break;
	          }
	        }
	        out = out.concat(dict.opcodes[key]);
	      }
	      return out;
	    },
	    compileStringIndex: function CFFCompiler_compileStringIndex(strings) {
	      var stringIndex = new CFFIndex();
	      for (var i = 0, ii = strings.length; i < ii; ++i) {
	        stringIndex.add(stringToBytes(strings[i]));
	      }
	      return this.compileIndex(stringIndex);
	    },
	    compileGlobalSubrIndex: function CFFCompiler_compileGlobalSubrIndex() {
	      var globalSubrIndex = this.cff.globalSubrIndex;
	      this.out.writeByteArray(this.compileIndex(globalSubrIndex));
	    },
	    compileCharStrings: function CFFCompiler_compileCharStrings(charStrings) {
	      return this.compileIndex(charStrings);
	    },
	    compileCharset: function CFFCompiler_compileCharset(charset) {
	      return this.compileTypedArray(charset.raw);
	    },
	    compileEncoding: function CFFCompiler_compileEncoding(encoding) {
	      return this.compileTypedArray(encoding.raw);
	    },
	    compileFDSelect: function CFFCompiler_compileFDSelect(fdSelect) {
	      return this.compileTypedArray(fdSelect);
	    },
	    compileTypedArray: function CFFCompiler_compileTypedArray(data) {
	      var out = [];
	      for (var i = 0, ii = data.length; i < ii; ++i) {
	        out[i] = data[i];
	      }
	      return out;
	    },
	    compileIndex: function CFFCompiler_compileIndex(index, trackers) {
	      trackers = trackers || [];
	      var objects = index.objects;
	      var count = objects.length;
	      if (count === 0) {
	        return [0, 0, 0];
	      }
	      var data = [count >> 8 & 0xFF, count & 0xff];
	      var lastOffset = 1,
	          i;
	      for (i = 0; i < count; ++i) {
	        lastOffset += objects[i].length;
	      }
	      var offsetSize;
	      if (lastOffset < 0x100) {
	        offsetSize = 1;
	      } else if (lastOffset < 0x10000) {
	        offsetSize = 2;
	      } else if (lastOffset < 0x1000000) {
	        offsetSize = 3;
	      } else {
	        offsetSize = 4;
	      }
	      data.push(offsetSize);
	      var relativeOffset = 1;
	      for (i = 0; i < count + 1; i++) {
	        if (offsetSize === 1) {
	          data.push(relativeOffset & 0xFF);
	        } else if (offsetSize === 2) {
	          data.push(relativeOffset >> 8 & 0xFF, relativeOffset & 0xFF);
	        } else if (offsetSize === 3) {
	          data.push(relativeOffset >> 16 & 0xFF, relativeOffset >> 8 & 0xFF, relativeOffset & 0xFF);
	        } else {
	          data.push(relativeOffset >>> 24 & 0xFF, relativeOffset >> 16 & 0xFF, relativeOffset >> 8 & 0xFF, relativeOffset & 0xFF);
	        }
	        if (objects[i]) {
	          relativeOffset += objects[i].length;
	        }
	      }
	      for (i = 0; i < count; i++) {
	        if (trackers[i]) {
	          trackers[i].offset(data.length);
	        }
	        for (var j = 0, jj = objects[i].length; j < jj; j++) {
	          data.push(objects[i][j]);
	        }
	      }
	      return data;
	    }
	  };
	  return CFFCompiler;
	}();
	exports.CFFStandardStrings = CFFStandardStrings;
	exports.CFFParser = CFFParser;
	exports.CFF = CFF;
	exports.CFFHeader = CFFHeader;
	exports.CFFStrings = CFFStrings;
	exports.CFFIndex = CFFIndex;
	exports.CFFCharset = CFFCharset;
	exports.CFFTopDict = CFFTopDict;
	exports.CFFPrivateDict = CFFPrivateDict;
	exports.CFFCompiler = CFFCompiler;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var MissingDataException = sharedUtil.MissingDataException;
	var arrayByteLength = sharedUtil.arrayByteLength;
	var arraysToBytes = sharedUtil.arraysToBytes;
	var assert = sharedUtil.assert;
	var createPromiseCapability = sharedUtil.createPromiseCapability;
	var isInt = sharedUtil.isInt;
	var isEmptyObj = sharedUtil.isEmptyObj;
	var ChunkedStream = function ChunkedStreamClosure() {
	  function ChunkedStream(length, chunkSize, manager) {
	    this.bytes = new Uint8Array(length);
	    this.start = 0;
	    this.pos = 0;
	    this.end = length;
	    this.chunkSize = chunkSize;
	    this.loadedChunks = [];
	    this.numChunksLoaded = 0;
	    this.numChunks = Math.ceil(length / chunkSize);
	    this.manager = manager;
	    this.progressiveDataLength = 0;
	    this.lastSuccessfulEnsureByteChunk = -1;
	  }
	  ChunkedStream.prototype = {
	    getMissingChunks: function ChunkedStream_getMissingChunks() {
	      var chunks = [];
	      for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {
	        if (!this.loadedChunks[chunk]) {
	          chunks.push(chunk);
	        }
	      }
	      return chunks;
	    },
	    getBaseStreams: function ChunkedStream_getBaseStreams() {
	      return [this];
	    },
	    allChunksLoaded: function ChunkedStream_allChunksLoaded() {
	      return this.numChunksLoaded === this.numChunks;
	    },
	    onReceiveData: function ChunkedStream_onReceiveData(begin, chunk) {
	      var end = begin + chunk.byteLength;
	      assert(begin % this.chunkSize === 0, 'Bad begin offset: ' + begin);
	      var length = this.bytes.length;
	      assert(end % this.chunkSize === 0 || end === length, 'Bad end offset: ' + end);
	      this.bytes.set(new Uint8Array(chunk), begin);
	      var chunkSize = this.chunkSize;
	      var beginChunk = Math.floor(begin / chunkSize);
	      var endChunk = Math.floor((end - 1) / chunkSize) + 1;
	      var curChunk;
	      for (curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
	        if (!this.loadedChunks[curChunk]) {
	          this.loadedChunks[curChunk] = true;
	          ++this.numChunksLoaded;
	        }
	      }
	    },
	    onReceiveProgressiveData: function ChunkedStream_onReceiveProgressiveData(data) {
	      var position = this.progressiveDataLength;
	      var beginChunk = Math.floor(position / this.chunkSize);
	      this.bytes.set(new Uint8Array(data), position);
	      position += data.byteLength;
	      this.progressiveDataLength = position;
	      var endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);
	      var curChunk;
	      for (curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
	        if (!this.loadedChunks[curChunk]) {
	          this.loadedChunks[curChunk] = true;
	          ++this.numChunksLoaded;
	        }
	      }
	    },
	    ensureByte: function ChunkedStream_ensureByte(pos) {
	      var chunk = Math.floor(pos / this.chunkSize);
	      if (chunk === this.lastSuccessfulEnsureByteChunk) {
	        return;
	      }
	      if (!this.loadedChunks[chunk]) {
	        throw new MissingDataException(pos, pos + 1);
	      }
	      this.lastSuccessfulEnsureByteChunk = chunk;
	    },
	    ensureRange: function ChunkedStream_ensureRange(begin, end) {
	      if (begin >= end) {
	        return;
	      }
	      if (end <= this.progressiveDataLength) {
	        return;
	      }
	      var chunkSize = this.chunkSize;
	      var beginChunk = Math.floor(begin / chunkSize);
	      var endChunk = Math.floor((end - 1) / chunkSize) + 1;
	      for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
	        if (!this.loadedChunks[chunk]) {
	          throw new MissingDataException(begin, end);
	        }
	      }
	    },
	    nextEmptyChunk: function ChunkedStream_nextEmptyChunk(beginChunk) {
	      var chunk,
	          numChunks = this.numChunks;
	      for (var i = 0; i < numChunks; ++i) {
	        chunk = (beginChunk + i) % numChunks;
	        if (!this.loadedChunks[chunk]) {
	          return chunk;
	        }
	      }
	      return null;
	    },
	    hasChunk: function ChunkedStream_hasChunk(chunk) {
	      return !!this.loadedChunks[chunk];
	    },
	    get length() {
	      return this.end - this.start;
	    },
	    get isEmpty() {
	      return this.length === 0;
	    },
	    getByte: function ChunkedStream_getByte() {
	      var pos = this.pos;
	      if (pos >= this.end) {
	        return -1;
	      }
	      this.ensureByte(pos);
	      return this.bytes[this.pos++];
	    },
	    getUint16: function ChunkedStream_getUint16() {
	      var b0 = this.getByte();
	      var b1 = this.getByte();
	      if (b0 === -1 || b1 === -1) {
	        return -1;
	      }
	      return (b0 << 8) + b1;
	    },
	    getInt32: function ChunkedStream_getInt32() {
	      var b0 = this.getByte();
	      var b1 = this.getByte();
	      var b2 = this.getByte();
	      var b3 = this.getByte();
	      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
	    },
	    getBytes: function ChunkedStream_getBytes(length) {
	      var bytes = this.bytes;
	      var pos = this.pos;
	      var strEnd = this.end;
	      if (!length) {
	        this.ensureRange(pos, strEnd);
	        return bytes.subarray(pos, strEnd);
	      }
	      var end = pos + length;
	      if (end > strEnd) {
	        end = strEnd;
	      }
	      this.ensureRange(pos, end);
	      this.pos = end;
	      return bytes.subarray(pos, end);
	    },
	    peekByte: function ChunkedStream_peekByte() {
	      var peekedByte = this.getByte();
	      this.pos--;
	      return peekedByte;
	    },
	    peekBytes: function ChunkedStream_peekBytes(length) {
	      var bytes = this.getBytes(length);
	      this.pos -= bytes.length;
	      return bytes;
	    },
	    getByteRange: function ChunkedStream_getBytes(begin, end) {
	      this.ensureRange(begin, end);
	      return this.bytes.subarray(begin, end);
	    },
	    skip: function ChunkedStream_skip(n) {
	      if (!n) {
	        n = 1;
	      }
	      this.pos += n;
	    },
	    reset: function ChunkedStream_reset() {
	      this.pos = this.start;
	    },
	    moveStart: function ChunkedStream_moveStart() {
	      this.start = this.pos;
	    },
	    makeSubStream: function ChunkedStream_makeSubStream(start, length, dict) {
	      this.ensureRange(start, start + length);
	      function ChunkedStreamSubstream() {}
	      ChunkedStreamSubstream.prototype = Object.create(this);
	      ChunkedStreamSubstream.prototype.getMissingChunks = function () {
	        var chunkSize = this.chunkSize;
	        var beginChunk = Math.floor(this.start / chunkSize);
	        var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;
	        var missingChunks = [];
	        for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
	          if (!this.loadedChunks[chunk]) {
	            missingChunks.push(chunk);
	          }
	        }
	        return missingChunks;
	      };
	      var subStream = new ChunkedStreamSubstream();
	      subStream.pos = subStream.start = start;
	      subStream.end = start + length || this.end;
	      subStream.dict = dict;
	      return subStream;
	    }
	  };
	  return ChunkedStream;
	}();
	var ChunkedStreamManager = function ChunkedStreamManagerClosure() {
	  function ChunkedStreamManager(pdfNetworkStream, args) {
	    var chunkSize = args.rangeChunkSize;
	    var length = args.length;
	    this.stream = new ChunkedStream(length, chunkSize, this);
	    this.length = length;
	    this.chunkSize = chunkSize;
	    this.pdfNetworkStream = pdfNetworkStream;
	    this.url = args.url;
	    this.disableAutoFetch = args.disableAutoFetch;
	    this.msgHandler = args.msgHandler;
	    this.currRequestId = 0;
	    this.chunksNeededByRequest = Object.create(null);
	    this.requestsByChunk = Object.create(null);
	    this.promisesByRequest = Object.create(null);
	    this.progressiveDataLength = 0;
	    this.aborted = false;
	    this._loadedStreamCapability = createPromiseCapability();
	  }
	  ChunkedStreamManager.prototype = {
	    onLoadedStream: function ChunkedStreamManager_getLoadedStream() {
	      return this._loadedStreamCapability.promise;
	    },
	    sendRequest: function ChunkedStreamManager_sendRequest(begin, end) {
	      var _this = this;

	      var rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);
	      if (!rangeReader.isStreamingSupported) {
	        rangeReader.onProgress = this.onProgress.bind(this);
	      }
	      var chunks = [],
	          loaded = 0;
	      var manager = this;
	      var promise = new Promise(function (resolve, reject) {
	        var readChunk = function readChunk(chunk) {
	          try {
	            if (!chunk.done) {
	              var data = chunk.value;
	              chunks.push(data);
	              loaded += arrayByteLength(data);
	              if (rangeReader.isStreamingSupported) {
	                manager.onProgress({ loaded: loaded });
	              }
	              rangeReader.read().then(readChunk, reject);
	              return;
	            }
	            var chunkData = arraysToBytes(chunks);
	            chunks = null;
	            resolve(chunkData);
	          } catch (e) {
	            reject(e);
	          }
	        };
	        rangeReader.read().then(readChunk, reject);
	      });
	      promise.then(function (data) {
	        if (_this.aborted) {
	          return;
	        }
	        _this.onReceiveData({
	          chunk: data,
	          begin: begin
	        });
	      });
	    },
	    requestAllChunks: function ChunkedStreamManager_requestAllChunks() {
	      var missingChunks = this.stream.getMissingChunks();
	      this._requestChunks(missingChunks);
	      return this._loadedStreamCapability.promise;
	    },
	    _requestChunks: function ChunkedStreamManager_requestChunks(chunks) {
	      var requestId = this.currRequestId++;
	      var i, ii;
	      var chunksNeeded = Object.create(null);
	      this.chunksNeededByRequest[requestId] = chunksNeeded;
	      for (i = 0, ii = chunks.length; i < ii; i++) {
	        if (!this.stream.hasChunk(chunks[i])) {
	          chunksNeeded[chunks[i]] = true;
	        }
	      }
	      if (isEmptyObj(chunksNeeded)) {
	        return Promise.resolve();
	      }
	      var capability = createPromiseCapability();
	      this.promisesByRequest[requestId] = capability;
	      var chunksToRequest = [];
	      for (var chunk in chunksNeeded) {
	        chunk = chunk | 0;
	        if (!(chunk in this.requestsByChunk)) {
	          this.requestsByChunk[chunk] = [];
	          chunksToRequest.push(chunk);
	        }
	        this.requestsByChunk[chunk].push(requestId);
	      }
	      if (!chunksToRequest.length) {
	        return capability.promise;
	      }
	      var groupedChunksToRequest = this.groupChunks(chunksToRequest);
	      for (i = 0; i < groupedChunksToRequest.length; ++i) {
	        var groupedChunk = groupedChunksToRequest[i];
	        var begin = groupedChunk.beginChunk * this.chunkSize;
	        var end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);
	        this.sendRequest(begin, end);
	      }
	      return capability.promise;
	    },
	    getStream: function ChunkedStreamManager_getStream() {
	      return this.stream;
	    },
	    requestRange: function ChunkedStreamManager_requestRange(begin, end) {
	      end = Math.min(end, this.length);
	      var beginChunk = this.getBeginChunk(begin);
	      var endChunk = this.getEndChunk(end);
	      var chunks = [];
	      for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
	        chunks.push(chunk);
	      }
	      return this._requestChunks(chunks);
	    },
	    requestRanges: function ChunkedStreamManager_requestRanges(ranges) {
	      ranges = ranges || [];
	      var chunksToRequest = [];
	      for (var i = 0; i < ranges.length; i++) {
	        var beginChunk = this.getBeginChunk(ranges[i].begin);
	        var endChunk = this.getEndChunk(ranges[i].end);
	        for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
	          if (chunksToRequest.indexOf(chunk) < 0) {
	            chunksToRequest.push(chunk);
	          }
	        }
	      }
	      chunksToRequest.sort(function (a, b) {
	        return a - b;
	      });
	      return this._requestChunks(chunksToRequest);
	    },
	    groupChunks: function ChunkedStreamManager_groupChunks(chunks) {
	      var groupedChunks = [];
	      var beginChunk = -1;
	      var prevChunk = -1;
	      for (var i = 0; i < chunks.length; ++i) {
	        var chunk = chunks[i];
	        if (beginChunk < 0) {
	          beginChunk = chunk;
	        }
	        if (prevChunk >= 0 && prevChunk + 1 !== chunk) {
	          groupedChunks.push({
	            beginChunk: beginChunk,
	            endChunk: prevChunk + 1
	          });
	          beginChunk = chunk;
	        }
	        if (i + 1 === chunks.length) {
	          groupedChunks.push({
	            beginChunk: beginChunk,
	            endChunk: chunk + 1
	          });
	        }
	        prevChunk = chunk;
	      }
	      return groupedChunks;
	    },
	    onProgress: function ChunkedStreamManager_onProgress(args) {
	      var bytesLoaded = this.stream.numChunksLoaded * this.chunkSize + args.loaded;
	      this.msgHandler.send('DocProgress', {
	        loaded: bytesLoaded,
	        total: this.length
	      });
	    },
	    onReceiveData: function ChunkedStreamManager_onReceiveData(args) {
	      var chunk = args.chunk;
	      var isProgressive = args.begin === undefined;
	      var begin = isProgressive ? this.progressiveDataLength : args.begin;
	      var end = begin + chunk.byteLength;
	      var beginChunk = Math.floor(begin / this.chunkSize);
	      var endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);
	      if (isProgressive) {
	        this.stream.onReceiveProgressiveData(chunk);
	        this.progressiveDataLength = end;
	      } else {
	        this.stream.onReceiveData(begin, chunk);
	      }
	      if (this.stream.allChunksLoaded()) {
	        this._loadedStreamCapability.resolve(this.stream);
	      }
	      var loadedRequests = [];
	      var i, requestId;
	      for (chunk = beginChunk; chunk < endChunk; ++chunk) {
	        var requestIds = this.requestsByChunk[chunk] || [];
	        delete this.requestsByChunk[chunk];
	        for (i = 0; i < requestIds.length; ++i) {
	          requestId = requestIds[i];
	          var chunksNeeded = this.chunksNeededByRequest[requestId];
	          if (chunk in chunksNeeded) {
	            delete chunksNeeded[chunk];
	          }
	          if (!isEmptyObj(chunksNeeded)) {
	            continue;
	          }
	          loadedRequests.push(requestId);
	        }
	      }
	      if (!this.disableAutoFetch && isEmptyObj(this.requestsByChunk)) {
	        var nextEmptyChunk;
	        if (this.stream.numChunksLoaded === 1) {
	          var lastChunk = this.stream.numChunks - 1;
	          if (!this.stream.hasChunk(lastChunk)) {
	            nextEmptyChunk = lastChunk;
	          }
	        } else {
	          nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);
	        }
	        if (isInt(nextEmptyChunk)) {
	          this._requestChunks([nextEmptyChunk]);
	        }
	      }
	      for (i = 0; i < loadedRequests.length; ++i) {
	        requestId = loadedRequests[i];
	        var capability = this.promisesByRequest[requestId];
	        delete this.promisesByRequest[requestId];
	        capability.resolve();
	      }
	      this.msgHandler.send('DocProgress', {
	        loaded: this.stream.numChunksLoaded * this.chunkSize,
	        total: this.length
	      });
	    },
	    onError: function ChunkedStreamManager_onError(err) {
	      this._loadedStreamCapability.reject(err);
	    },
	    getBeginChunk: function ChunkedStreamManager_getBeginChunk(begin) {
	      var chunk = Math.floor(begin / this.chunkSize);
	      return chunk;
	    },
	    getEndChunk: function ChunkedStreamManager_getEndChunk(end) {
	      var chunk = Math.floor((end - 1) / this.chunkSize) + 1;
	      return chunk;
	    },
	    abort: function ChunkedStreamManager_abort() {
	      this.aborted = true;
	      if (this.pdfNetworkStream) {
	        this.pdfNetworkStream.cancelAllRequests('abort');
	      }
	      for (var requestId in this.promisesByRequest) {
	        var capability = this.promisesByRequest[requestId];
	        capability.reject(new Error('Request was aborted'));
	      }
	    }
	  };
	  return ChunkedStreamManager;
	}();
	exports.ChunkedStream = ChunkedStream;
	exports.ChunkedStreamManager = ChunkedStreamManager;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var PasswordException = sharedUtil.PasswordException;
	var PasswordResponses = sharedUtil.PasswordResponses;
	var bytesToString = sharedUtil.bytesToString;
	var warn = sharedUtil.warn;
	var error = sharedUtil.error;
	var assert = sharedUtil.assert;
	var isInt = sharedUtil.isInt;
	var stringToBytes = sharedUtil.stringToBytes;
	var utf8StringToString = sharedUtil.utf8StringToString;
	var Name = corePrimitives.Name;
	var isName = corePrimitives.isName;
	var isDict = corePrimitives.isDict;
	var DecryptStream = coreStream.DecryptStream;
	var ARCFourCipher = function ARCFourCipherClosure() {
	  function ARCFourCipher(key) {
	    this.a = 0;
	    this.b = 0;
	    var s = new Uint8Array(256);
	    var i,
	        j = 0,
	        tmp,
	        keyLength = key.length;
	    for (i = 0; i < 256; ++i) {
	      s[i] = i;
	    }
	    for (i = 0; i < 256; ++i) {
	      tmp = s[i];
	      j = j + tmp + key[i % keyLength] & 0xFF;
	      s[i] = s[j];
	      s[j] = tmp;
	    }
	    this.s = s;
	  }
	  ARCFourCipher.prototype = {
	    encryptBlock: function ARCFourCipher_encryptBlock(data) {
	      var i,
	          n = data.length,
	          tmp,
	          tmp2;
	      var a = this.a,
	          b = this.b,
	          s = this.s;
	      var output = new Uint8Array(n);
	      for (i = 0; i < n; ++i) {
	        a = a + 1 & 0xFF;
	        tmp = s[a];
	        b = b + tmp & 0xFF;
	        tmp2 = s[b];
	        s[a] = tmp2;
	        s[b] = tmp;
	        output[i] = data[i] ^ s[tmp + tmp2 & 0xFF];
	      }
	      this.a = a;
	      this.b = b;
	      return output;
	    }
	  };
	  ARCFourCipher.prototype.decryptBlock = ARCFourCipher.prototype.encryptBlock;
	  return ARCFourCipher;
	}();
	var calculateMD5 = function calculateMD5Closure() {
	  var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);
	  var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);
	  function hash(data, offset, length) {
	    var h0 = 1732584193,
	        h1 = -271733879,
	        h2 = -1732584194,
	        h3 = 271733878;
	    var paddedLength = length + 72 & ~63;
	    var padded = new Uint8Array(paddedLength);
	    var i, j, n;
	    for (i = 0; i < length; ++i) {
	      padded[i] = data[offset++];
	    }
	    padded[i++] = 0x80;
	    n = paddedLength - 8;
	    while (i < n) {
	      padded[i++] = 0;
	    }
	    padded[i++] = length << 3 & 0xFF;
	    padded[i++] = length >> 5 & 0xFF;
	    padded[i++] = length >> 13 & 0xFF;
	    padded[i++] = length >> 21 & 0xFF;
	    padded[i++] = length >>> 29 & 0xFF;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    var w = new Int32Array(16);
	    for (i = 0; i < paddedLength;) {
	      for (j = 0; j < 16; ++j, i += 4) {
	        w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;
	      }
	      var a = h0,
	          b = h1,
	          c = h2,
	          d = h3,
	          f,
	          g;
	      for (j = 0; j < 64; ++j) {
	        if (j < 16) {
	          f = b & c | ~b & d;
	          g = j;
	        } else if (j < 32) {
	          f = d & b | ~d & c;
	          g = 5 * j + 1 & 15;
	        } else if (j < 48) {
	          f = b ^ c ^ d;
	          g = 3 * j + 5 & 15;
	        } else {
	          f = c ^ (b | ~d);
	          g = 7 * j & 15;
	        }
	        var tmp = d,
	            rotateArg = a + f + k[j] + w[g] | 0,
	            rotate = r[j];
	        d = c;
	        c = b;
	        b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;
	        a = tmp;
	      }
	      h0 = h0 + a | 0;
	      h1 = h1 + b | 0;
	      h2 = h2 + c | 0;
	      h3 = h3 + d | 0;
	    }
	    return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);
	  }
	  return hash;
	}();
	var Word64 = function Word64Closure() {
	  function Word64(highInteger, lowInteger) {
	    this.high = highInteger | 0;
	    this.low = lowInteger | 0;
	  }
	  Word64.prototype = {
	    and: function Word64_and(word) {
	      this.high &= word.high;
	      this.low &= word.low;
	    },
	    xor: function Word64_xor(word) {
	      this.high ^= word.high;
	      this.low ^= word.low;
	    },
	    or: function Word64_or(word) {
	      this.high |= word.high;
	      this.low |= word.low;
	    },
	    shiftRight: function Word64_shiftRight(places) {
	      if (places >= 32) {
	        this.low = this.high >>> places - 32 | 0;
	        this.high = 0;
	      } else {
	        this.low = this.low >>> places | this.high << 32 - places;
	        this.high = this.high >>> places | 0;
	      }
	    },
	    shiftLeft: function Word64_shiftLeft(places) {
	      if (places >= 32) {
	        this.high = this.low << places - 32;
	        this.low = 0;
	      } else {
	        this.high = this.high << places | this.low >>> 32 - places;
	        this.low = this.low << places;
	      }
	    },
	    rotateRight: function Word64_rotateRight(places) {
	      var low, high;
	      if (places & 32) {
	        high = this.low;
	        low = this.high;
	      } else {
	        low = this.low;
	        high = this.high;
	      }
	      places &= 31;
	      this.low = low >>> places | high << 32 - places;
	      this.high = high >>> places | low << 32 - places;
	    },
	    not: function Word64_not() {
	      this.high = ~this.high;
	      this.low = ~this.low;
	    },
	    add: function Word64_add(word) {
	      var lowAdd = (this.low >>> 0) + (word.low >>> 0);
	      var highAdd = (this.high >>> 0) + (word.high >>> 0);
	      if (lowAdd > 0xFFFFFFFF) {
	        highAdd += 1;
	      }
	      this.low = lowAdd | 0;
	      this.high = highAdd | 0;
	    },
	    copyTo: function Word64_copyTo(bytes, offset) {
	      bytes[offset] = this.high >>> 24 & 0xFF;
	      bytes[offset + 1] = this.high >> 16 & 0xFF;
	      bytes[offset + 2] = this.high >> 8 & 0xFF;
	      bytes[offset + 3] = this.high & 0xFF;
	      bytes[offset + 4] = this.low >>> 24 & 0xFF;
	      bytes[offset + 5] = this.low >> 16 & 0xFF;
	      bytes[offset + 6] = this.low >> 8 & 0xFF;
	      bytes[offset + 7] = this.low & 0xFF;
	    },
	    assign: function Word64_assign(word) {
	      this.high = word.high;
	      this.low = word.low;
	    }
	  };
	  return Word64;
	}();
	var calculateSHA256 = function calculateSHA256Closure() {
	  function rotr(x, n) {
	    return x >>> n | x << 32 - n;
	  }
	  function ch(x, y, z) {
	    return x & y ^ ~x & z;
	  }
	  function maj(x, y, z) {
	    return x & y ^ x & z ^ y & z;
	  }
	  function sigma(x) {
	    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
	  }
	  function sigmaPrime(x) {
	    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
	  }
	  function littleSigma(x) {
	    return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;
	  }
	  function littleSigmaPrime(x) {
	    return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;
	  }
	  var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
	  function hash(data, offset, length) {
	    var h0 = 0x6a09e667,
	        h1 = 0xbb67ae85,
	        h2 = 0x3c6ef372,
	        h3 = 0xa54ff53a,
	        h4 = 0x510e527f,
	        h5 = 0x9b05688c,
	        h6 = 0x1f83d9ab,
	        h7 = 0x5be0cd19;
	    var paddedLength = Math.ceil((length + 9) / 64) * 64;
	    var padded = new Uint8Array(paddedLength);
	    var i, j, n;
	    for (i = 0; i < length; ++i) {
	      padded[i] = data[offset++];
	    }
	    padded[i++] = 0x80;
	    n = paddedLength - 8;
	    while (i < n) {
	      padded[i++] = 0;
	    }
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = length >>> 29 & 0xFF;
	    padded[i++] = length >> 21 & 0xFF;
	    padded[i++] = length >> 13 & 0xFF;
	    padded[i++] = length >> 5 & 0xFF;
	    padded[i++] = length << 3 & 0xFF;
	    var w = new Uint32Array(64);
	    for (i = 0; i < paddedLength;) {
	      for (j = 0; j < 16; ++j) {
	        w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];
	        i += 4;
	      }
	      for (j = 16; j < 64; ++j) {
	        w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;
	      }
	      var a = h0,
	          b = h1,
	          c = h2,
	          d = h3,
	          e = h4,
	          f = h5,
	          g = h6,
	          h = h7,
	          t1,
	          t2;
	      for (j = 0; j < 64; ++j) {
	        t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];
	        t2 = sigma(a) + maj(a, b, c);
	        h = g;
	        g = f;
	        f = e;
	        e = d + t1 | 0;
	        d = c;
	        c = b;
	        b = a;
	        a = t1 + t2 | 0;
	      }
	      h0 = h0 + a | 0;
	      h1 = h1 + b | 0;
	      h2 = h2 + c | 0;
	      h3 = h3 + d | 0;
	      h4 = h4 + e | 0;
	      h5 = h5 + f | 0;
	      h6 = h6 + g | 0;
	      h7 = h7 + h | 0;
	    }
	    return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);
	  }
	  return hash;
	}();
	var calculateSHA512 = function calculateSHA512Closure() {
	  function ch(result, x, y, z, tmp) {
	    result.assign(x);
	    result.and(y);
	    tmp.assign(x);
	    tmp.not();
	    tmp.and(z);
	    result.xor(tmp);
	  }
	  function maj(result, x, y, z, tmp) {
	    result.assign(x);
	    result.and(y);
	    tmp.assign(x);
	    tmp.and(z);
	    result.xor(tmp);
	    tmp.assign(y);
	    tmp.and(z);
	    result.xor(tmp);
	  }
	  function sigma(result, x, tmp) {
	    result.assign(x);
	    result.rotateRight(28);
	    tmp.assign(x);
	    tmp.rotateRight(34);
	    result.xor(tmp);
	    tmp.assign(x);
	    tmp.rotateRight(39);
	    result.xor(tmp);
	  }
	  function sigmaPrime(result, x, tmp) {
	    result.assign(x);
	    result.rotateRight(14);
	    tmp.assign(x);
	    tmp.rotateRight(18);
	    result.xor(tmp);
	    tmp.assign(x);
	    tmp.rotateRight(41);
	    result.xor(tmp);
	  }
	  function littleSigma(result, x, tmp) {
	    result.assign(x);
	    result.rotateRight(1);
	    tmp.assign(x);
	    tmp.rotateRight(8);
	    result.xor(tmp);
	    tmp.assign(x);
	    tmp.shiftRight(7);
	    result.xor(tmp);
	  }
	  function littleSigmaPrime(result, x, tmp) {
	    result.assign(x);
	    result.rotateRight(19);
	    tmp.assign(x);
	    tmp.rotateRight(61);
	    result.xor(tmp);
	    tmp.assign(x);
	    tmp.shiftRight(6);
	    result.xor(tmp);
	  }
	  var k = [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];
	  function hash(data, offset, length, mode384) {
	    mode384 = !!mode384;
	    var h0, h1, h2, h3, h4, h5, h6, h7;
	    if (!mode384) {
	      h0 = new Word64(0x6a09e667, 0xf3bcc908);
	      h1 = new Word64(0xbb67ae85, 0x84caa73b);
	      h2 = new Word64(0x3c6ef372, 0xfe94f82b);
	      h3 = new Word64(0xa54ff53a, 0x5f1d36f1);
	      h4 = new Word64(0x510e527f, 0xade682d1);
	      h5 = new Word64(0x9b05688c, 0x2b3e6c1f);
	      h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);
	      h7 = new Word64(0x5be0cd19, 0x137e2179);
	    } else {
	      h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);
	      h1 = new Word64(0x629a292a, 0x367cd507);
	      h2 = new Word64(0x9159015a, 0x3070dd17);
	      h3 = new Word64(0x152fecd8, 0xf70e5939);
	      h4 = new Word64(0x67332667, 0xffc00b31);
	      h5 = new Word64(0x8eb44a87, 0x68581511);
	      h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);
	      h7 = new Word64(0x47b5481d, 0xbefa4fa4);
	    }
	    var paddedLength = Math.ceil((length + 17) / 128) * 128;
	    var padded = new Uint8Array(paddedLength);
	    var i, j, n;
	    for (i = 0; i < length; ++i) {
	      padded[i] = data[offset++];
	    }
	    padded[i++] = 0x80;
	    n = paddedLength - 16;
	    while (i < n) {
	      padded[i++] = 0;
	    }
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = 0;
	    padded[i++] = length >>> 29 & 0xFF;
	    padded[i++] = length >> 21 & 0xFF;
	    padded[i++] = length >> 13 & 0xFF;
	    padded[i++] = length >> 5 & 0xFF;
	    padded[i++] = length << 3 & 0xFF;
	    var w = new Array(80);
	    for (i = 0; i < 80; i++) {
	      w[i] = new Word64(0, 0);
	    }
	    var a = new Word64(0, 0),
	        b = new Word64(0, 0),
	        c = new Word64(0, 0);
	    var d = new Word64(0, 0),
	        e = new Word64(0, 0),
	        f = new Word64(0, 0);
	    var g = new Word64(0, 0),
	        h = new Word64(0, 0);
	    var t1 = new Word64(0, 0),
	        t2 = new Word64(0, 0);
	    var tmp1 = new Word64(0, 0),
	        tmp2 = new Word64(0, 0),
	        tmp3;
	    for (i = 0; i < paddedLength;) {
	      for (j = 0; j < 16; ++j) {
	        w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];
	        w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];
	        i += 8;
	      }
	      for (j = 16; j < 80; ++j) {
	        tmp3 = w[j];
	        littleSigmaPrime(tmp3, w[j - 2], tmp2);
	        tmp3.add(w[j - 7]);
	        littleSigma(tmp1, w[j - 15], tmp2);
	        tmp3.add(tmp1);
	        tmp3.add(w[j - 16]);
	      }
	      a.assign(h0);
	      b.assign(h1);
	      c.assign(h2);
	      d.assign(h3);
	      e.assign(h4);
	      f.assign(h5);
	      g.assign(h6);
	      h.assign(h7);
	      for (j = 0; j < 80; ++j) {
	        t1.assign(h);
	        sigmaPrime(tmp1, e, tmp2);
	        t1.add(tmp1);
	        ch(tmp1, e, f, g, tmp2);
	        t1.add(tmp1);
	        t1.add(k[j]);
	        t1.add(w[j]);
	        sigma(t2, a, tmp2);
	        maj(tmp1, a, b, c, tmp2);
	        t2.add(tmp1);
	        tmp3 = h;
	        h = g;
	        g = f;
	        f = e;
	        d.add(t1);
	        e = d;
	        d = c;
	        c = b;
	        b = a;
	        tmp3.assign(t1);
	        tmp3.add(t2);
	        a = tmp3;
	      }
	      h0.add(a);
	      h1.add(b);
	      h2.add(c);
	      h3.add(d);
	      h4.add(e);
	      h5.add(f);
	      h6.add(g);
	      h7.add(h);
	    }
	    var result;
	    if (!mode384) {
	      result = new Uint8Array(64);
	      h0.copyTo(result, 0);
	      h1.copyTo(result, 8);
	      h2.copyTo(result, 16);
	      h3.copyTo(result, 24);
	      h4.copyTo(result, 32);
	      h5.copyTo(result, 40);
	      h6.copyTo(result, 48);
	      h7.copyTo(result, 56);
	    } else {
	      result = new Uint8Array(48);
	      h0.copyTo(result, 0);
	      h1.copyTo(result, 8);
	      h2.copyTo(result, 16);
	      h3.copyTo(result, 24);
	      h4.copyTo(result, 32);
	      h5.copyTo(result, 40);
	    }
	    return result;
	  }
	  return hash;
	}();
	var calculateSHA384 = function calculateSHA384Closure() {
	  function hash(data, offset, length) {
	    return calculateSHA512(data, offset, length, true);
	  }
	  return hash;
	}();
	var NullCipher = function NullCipherClosure() {
	  function NullCipher() {}
	  NullCipher.prototype = {
	    decryptBlock: function NullCipher_decryptBlock(data) {
	      return data;
	    }
	  };
	  return NullCipher;
	}();
	var AES128Cipher = function AES128CipherClosure() {
	  var rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);
	  var s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);
	  var inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);
	  var mixCol = new Uint8Array(256);
	  for (var i = 0; i < 256; i++) {
	    if (i < 128) {
	      mixCol[i] = i << 1;
	    } else {
	      mixCol[i] = i << 1 ^ 0x1b;
	    }
	  }
	  var mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);
	  function expandKey128(cipherKey) {
	    var b = 176,
	        result = new Uint8Array(b);
	    result.set(cipherKey);
	    for (var j = 16, i = 1; j < b; ++i) {
	      var t1 = result[j - 3],
	          t2 = result[j - 2],
	          t3 = result[j - 1],
	          t4 = result[j - 4];
	      t1 = s[t1];
	      t2 = s[t2];
	      t3 = s[t3];
	      t4 = s[t4];
	      t1 = t1 ^ rcon[i];
	      for (var n = 0; n < 4; ++n) {
	        result[j] = t1 ^= result[j - 16];
	        j++;
	        result[j] = t2 ^= result[j - 16];
	        j++;
	        result[j] = t3 ^= result[j - 16];
	        j++;
	        result[j] = t4 ^= result[j - 16];
	        j++;
	      }
	    }
	    return result;
	  }
	  function decrypt128(input, key) {
	    var state = new Uint8Array(16);
	    state.set(input);
	    var i, j, k;
	    var t, u, v;
	    for (j = 0, k = 160; j < 16; ++j, ++k) {
	      state[j] ^= key[k];
	    }
	    for (i = 9; i >= 1; --i) {
	      t = state[13];
	      state[13] = state[9];
	      state[9] = state[5];
	      state[5] = state[1];
	      state[1] = t;
	      t = state[14];
	      u = state[10];
	      state[14] = state[6];
	      state[10] = state[2];
	      state[6] = t;
	      state[2] = u;
	      t = state[15];
	      u = state[11];
	      v = state[7];
	      state[15] = state[3];
	      state[11] = t;
	      state[7] = u;
	      state[3] = v;
	      for (j = 0; j < 16; ++j) {
	        state[j] = inv_s[state[j]];
	      }
	      for (j = 0, k = i * 16; j < 16; ++j, ++k) {
	        state[j] ^= key[k];
	      }
	      for (j = 0; j < 16; j += 4) {
	        var s0 = mix[state[j]],
	            s1 = mix[state[j + 1]],
	            s2 = mix[state[j + 2]],
	            s3 = mix[state[j + 3]];
	        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;
	        state[j] = t >>> 24 & 0xFF;
	        state[j + 1] = t >> 16 & 0xFF;
	        state[j + 2] = t >> 8 & 0xFF;
	        state[j + 3] = t & 0xFF;
	      }
	    }
	    t = state[13];
	    state[13] = state[9];
	    state[9] = state[5];
	    state[5] = state[1];
	    state[1] = t;
	    t = state[14];
	    u = state[10];
	    state[14] = state[6];
	    state[10] = state[2];
	    state[6] = t;
	    state[2] = u;
	    t = state[15];
	    u = state[11];
	    v = state[7];
	    state[15] = state[3];
	    state[11] = t;
	    state[7] = u;
	    state[3] = v;
	    for (j = 0; j < 16; ++j) {
	      state[j] = inv_s[state[j]];
	      state[j] ^= key[j];
	    }
	    return state;
	  }
	  function encrypt128(input, key) {
	    var t, u, v, k;
	    var state = new Uint8Array(16);
	    state.set(input);
	    for (j = 0; j < 16; ++j) {
	      state[j] ^= key[j];
	    }
	    for (i = 1; i < 10; i++) {
	      for (j = 0; j < 16; ++j) {
	        state[j] = s[state[j]];
	      }
	      v = state[1];
	      state[1] = state[5];
	      state[5] = state[9];
	      state[9] = state[13];
	      state[13] = v;
	      v = state[2];
	      u = state[6];
	      state[2] = state[10];
	      state[6] = state[14];
	      state[10] = v;
	      state[14] = u;
	      v = state[3];
	      u = state[7];
	      t = state[11];
	      state[3] = state[15];
	      state[7] = v;
	      state[11] = u;
	      state[15] = t;
	      for (var j = 0; j < 16; j += 4) {
	        var s0 = state[j + 0],
	            s1 = state[j + 1];
	        var s2 = state[j + 2],
	            s3 = state[j + 3];
	        t = s0 ^ s1 ^ s2 ^ s3;
	        state[j + 0] ^= t ^ mixCol[s0 ^ s1];
	        state[j + 1] ^= t ^ mixCol[s1 ^ s2];
	        state[j + 2] ^= t ^ mixCol[s2 ^ s3];
	        state[j + 3] ^= t ^ mixCol[s3 ^ s0];
	      }
	      for (j = 0, k = i * 16; j < 16; ++j, ++k) {
	        state[j] ^= key[k];
	      }
	    }
	    for (j = 0; j < 16; ++j) {
	      state[j] = s[state[j]];
	    }
	    v = state[1];
	    state[1] = state[5];
	    state[5] = state[9];
	    state[9] = state[13];
	    state[13] = v;
	    v = state[2];
	    u = state[6];
	    state[2] = state[10];
	    state[6] = state[14];
	    state[10] = v;
	    state[14] = u;
	    v = state[3];
	    u = state[7];
	    t = state[11];
	    state[3] = state[15];
	    state[7] = v;
	    state[11] = u;
	    state[15] = t;
	    for (j = 0, k = 160; j < 16; ++j, ++k) {
	      state[j] ^= key[k];
	    }
	    return state;
	  }
	  function AES128Cipher(key) {
	    this.key = expandKey128(key);
	    this.buffer = new Uint8Array(16);
	    this.bufferPosition = 0;
	  }
	  function decryptBlock2(data, finalize) {
	    var i,
	        j,
	        ii,
	        sourceLength = data.length,
	        buffer = this.buffer,
	        bufferLength = this.bufferPosition,
	        result = [],
	        iv = this.iv;
	    for (i = 0; i < sourceLength; ++i) {
	      buffer[bufferLength] = data[i];
	      ++bufferLength;
	      if (bufferLength < 16) {
	        continue;
	      }
	      var plain = decrypt128(buffer, this.key);
	      for (j = 0; j < 16; ++j) {
	        plain[j] ^= iv[j];
	      }
	      iv = buffer;
	      result.push(plain);
	      buffer = new Uint8Array(16);
	      bufferLength = 0;
	    }
	    this.buffer = buffer;
	    this.bufferLength = bufferLength;
	    this.iv = iv;
	    if (result.length === 0) {
	      return new Uint8Array([]);
	    }
	    var outputLength = 16 * result.length;
	    if (finalize) {
	      var lastBlock = result[result.length - 1];
	      var psLen = lastBlock[15];
	      if (psLen <= 16) {
	        for (i = 15, ii = 16 - psLen; i >= ii; --i) {
	          if (lastBlock[i] !== psLen) {
	            psLen = 0;
	            break;
	          }
	        }
	        outputLength -= psLen;
	        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);
	      }
	    }
	    var output = new Uint8Array(outputLength);
	    for (i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {
	      output.set(result[i], j);
	    }
	    return output;
	  }
	  AES128Cipher.prototype = {
	    decryptBlock: function AES128Cipher_decryptBlock(data, finalize) {
	      var i,
	          sourceLength = data.length;
	      var buffer = this.buffer,
	          bufferLength = this.bufferPosition;
	      for (i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {
	        buffer[bufferLength] = data[i];
	      }
	      if (bufferLength < 16) {
	        this.bufferLength = bufferLength;
	        return new Uint8Array([]);
	      }
	      this.iv = buffer;
	      this.buffer = new Uint8Array(16);
	      this.bufferLength = 0;
	      this.decryptBlock = decryptBlock2;
	      return this.decryptBlock(data.subarray(16), finalize);
	    },
	    encrypt: function AES128Cipher_encrypt(data, iv) {
	      var i,
	          j,
	          ii,
	          sourceLength = data.length,
	          buffer = this.buffer,
	          bufferLength = this.bufferPosition,
	          result = [];
	      if (!iv) {
	        iv = new Uint8Array(16);
	      }
	      for (i = 0; i < sourceLength; ++i) {
	        buffer[bufferLength] = data[i];
	        ++bufferLength;
	        if (bufferLength < 16) {
	          continue;
	        }
	        for (j = 0; j < 16; ++j) {
	          buffer[j] ^= iv[j];
	        }
	        var cipher = encrypt128(buffer, this.key);
	        iv = cipher;
	        result.push(cipher);
	        buffer = new Uint8Array(16);
	        bufferLength = 0;
	      }
	      this.buffer = buffer;
	      this.bufferLength = bufferLength;
	      this.iv = iv;
	      if (result.length === 0) {
	        return new Uint8Array([]);
	      }
	      var outputLength = 16 * result.length;
	      var output = new Uint8Array(outputLength);
	      for (i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {
	        output.set(result[i], j);
	      }
	      return output;
	    }
	  };
	  return AES128Cipher;
	}();
	var AES256Cipher = function AES256CipherClosure() {
	  var s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);
	  var inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);
	  var mixCol = new Uint8Array(256);
	  for (var i = 0; i < 256; i++) {
	    if (i < 128) {
	      mixCol[i] = i << 1;
	    } else {
	      mixCol[i] = i << 1 ^ 0x1b;
	    }
	  }
	  var mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);
	  function expandKey256(cipherKey) {
	    var b = 240,
	        result = new Uint8Array(b);
	    var r = 1;
	    result.set(cipherKey);
	    for (var j = 32, i = 1; j < b; ++i) {
	      if (j % 32 === 16) {
	        t1 = s[t1];
	        t2 = s[t2];
	        t3 = s[t3];
	        t4 = s[t4];
	      } else if (j % 32 === 0) {
	        var t1 = result[j - 3],
	            t2 = result[j - 2],
	            t3 = result[j - 1],
	            t4 = result[j - 4];
	        t1 = s[t1];
	        t2 = s[t2];
	        t3 = s[t3];
	        t4 = s[t4];
	        t1 = t1 ^ r;
	        if ((r <<= 1) >= 256) {
	          r = (r ^ 0x1b) & 0xFF;
	        }
	      }
	      for (var n = 0; n < 4; ++n) {
	        result[j] = t1 ^= result[j - 32];
	        j++;
	        result[j] = t2 ^= result[j - 32];
	        j++;
	        result[j] = t3 ^= result[j - 32];
	        j++;
	        result[j] = t4 ^= result[j - 32];
	        j++;
	      }
	    }
	    return result;
	  }
	  function decrypt256(input, key) {
	    var state = new Uint8Array(16);
	    state.set(input);
	    var i, j, k;
	    var t, u, v;
	    for (j = 0, k = 224; j < 16; ++j, ++k) {
	      state[j] ^= key[k];
	    }
	    for (i = 13; i >= 1; --i) {
	      t = state[13];
	      state[13] = state[9];
	      state[9] = state[5];
	      state[5] = state[1];
	      state[1] = t;
	      t = state[14];
	      u = state[10];
	      state[14] = state[6];
	      state[10] = state[2];
	      state[6] = t;
	      state[2] = u;
	      t = state[15];
	      u = state[11];
	      v = state[7];
	      state[15] = state[3];
	      state[11] = t;
	      state[7] = u;
	      state[3] = v;
	      for (j = 0; j < 16; ++j) {
	        state[j] = inv_s[state[j]];
	      }
	      for (j = 0, k = i * 16; j < 16; ++j, ++k) {
	        state[j] ^= key[k];
	      }
	      for (j = 0; j < 16; j += 4) {
	        var s0 = mix[state[j]],
	            s1 = mix[state[j + 1]],
	            s2 = mix[state[j + 2]],
	            s3 = mix[state[j + 3]];
	        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;
	        state[j] = t >>> 24 & 0xFF;
	        state[j + 1] = t >> 16 & 0xFF;
	        state[j + 2] = t >> 8 & 0xFF;
	        state[j + 3] = t & 0xFF;
	      }
	    }
	    t = state[13];
	    state[13] = state[9];
	    state[9] = state[5];
	    state[5] = state[1];
	    state[1] = t;
	    t = state[14];
	    u = state[10];
	    state[14] = state[6];
	    state[10] = state[2];
	    state[6] = t;
	    state[2] = u;
	    t = state[15];
	    u = state[11];
	    v = state[7];
	    state[15] = state[3];
	    state[11] = t;
	    state[7] = u;
	    state[3] = v;
	    for (j = 0; j < 16; ++j) {
	      state[j] = inv_s[state[j]];
	      state[j] ^= key[j];
	    }
	    return state;
	  }
	  function encrypt256(input, key) {
	    var t, u, v, k;
	    var state = new Uint8Array(16);
	    state.set(input);
	    for (j = 0; j < 16; ++j) {
	      state[j] ^= key[j];
	    }
	    for (i = 1; i < 14; i++) {
	      for (j = 0; j < 16; ++j) {
	        state[j] = s[state[j]];
	      }
	      v = state[1];
	      state[1] = state[5];
	      state[5] = state[9];
	      state[9] = state[13];
	      state[13] = v;
	      v = state[2];
	      u = state[6];
	      state[2] = state[10];
	      state[6] = state[14];
	      state[10] = v;
	      state[14] = u;
	      v = state[3];
	      u = state[7];
	      t = state[11];
	      state[3] = state[15];
	      state[7] = v;
	      state[11] = u;
	      state[15] = t;
	      for (var j = 0; j < 16; j += 4) {
	        var s0 = state[j + 0],
	            s1 = state[j + 1];
	        var s2 = state[j + 2],
	            s3 = state[j + 3];
	        t = s0 ^ s1 ^ s2 ^ s3;
	        state[j + 0] ^= t ^ mixCol[s0 ^ s1];
	        state[j + 1] ^= t ^ mixCol[s1 ^ s2];
	        state[j + 2] ^= t ^ mixCol[s2 ^ s3];
	        state[j + 3] ^= t ^ mixCol[s3 ^ s0];
	      }
	      for (j = 0, k = i * 16; j < 16; ++j, ++k) {
	        state[j] ^= key[k];
	      }
	    }
	    for (j = 0; j < 16; ++j) {
	      state[j] = s[state[j]];
	    }
	    v = state[1];
	    state[1] = state[5];
	    state[5] = state[9];
	    state[9] = state[13];
	    state[13] = v;
	    v = state[2];
	    u = state[6];
	    state[2] = state[10];
	    state[6] = state[14];
	    state[10] = v;
	    state[14] = u;
	    v = state[3];
	    u = state[7];
	    t = state[11];
	    state[3] = state[15];
	    state[7] = v;
	    state[11] = u;
	    state[15] = t;
	    for (j = 0, k = 224; j < 16; ++j, ++k) {
	      state[j] ^= key[k];
	    }
	    return state;
	  }
	  function AES256Cipher(key) {
	    this.key = expandKey256(key);
	    this.buffer = new Uint8Array(16);
	    this.bufferPosition = 0;
	  }
	  function decryptBlock2(data, finalize) {
	    var i,
	        j,
	        ii,
	        sourceLength = data.length,
	        buffer = this.buffer,
	        bufferLength = this.bufferPosition,
	        result = [],
	        iv = this.iv;
	    for (i = 0; i < sourceLength; ++i) {
	      buffer[bufferLength] = data[i];
	      ++bufferLength;
	      if (bufferLength < 16) {
	        continue;
	      }
	      var plain = decrypt256(buffer, this.key);
	      for (j = 0; j < 16; ++j) {
	        plain[j] ^= iv[j];
	      }
	      iv = buffer;
	      result.push(plain);
	      buffer = new Uint8Array(16);
	      bufferLength = 0;
	    }
	    this.buffer = buffer;
	    this.bufferLength = bufferLength;
	    this.iv = iv;
	    if (result.length === 0) {
	      return new Uint8Array([]);
	    }
	    var outputLength = 16 * result.length;
	    if (finalize) {
	      var lastBlock = result[result.length - 1];
	      var psLen = lastBlock[15];
	      if (psLen <= 16) {
	        for (i = 15, ii = 16 - psLen; i >= ii; --i) {
	          if (lastBlock[i] !== psLen) {
	            psLen = 0;
	            break;
	          }
	        }
	        outputLength -= psLen;
	        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);
	      }
	    }
	    var output = new Uint8Array(outputLength);
	    for (i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {
	      output.set(result[i], j);
	    }
	    return output;
	  }
	  AES256Cipher.prototype = {
	    decryptBlock: function AES256Cipher_decryptBlock(data, finalize, iv) {
	      var i,
	          sourceLength = data.length;
	      var buffer = this.buffer,
	          bufferLength = this.bufferPosition;
	      if (iv) {
	        this.iv = iv;
	      } else {
	        for (i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {
	          buffer[bufferLength] = data[i];
	        }
	        if (bufferLength < 16) {
	          this.bufferLength = bufferLength;
	          return new Uint8Array([]);
	        }
	        this.iv = buffer;
	        data = data.subarray(16);
	      }
	      this.buffer = new Uint8Array(16);
	      this.bufferLength = 0;
	      this.decryptBlock = decryptBlock2;
	      return this.decryptBlock(data, finalize);
	    },
	    encrypt: function AES256Cipher_encrypt(data, iv) {
	      var i,
	          j,
	          ii,
	          sourceLength = data.length,
	          buffer = this.buffer,
	          bufferLength = this.bufferPosition,
	          result = [];
	      if (!iv) {
	        iv = new Uint8Array(16);
	      }
	      for (i = 0; i < sourceLength; ++i) {
	        buffer[bufferLength] = data[i];
	        ++bufferLength;
	        if (bufferLength < 16) {
	          continue;
	        }
	        for (j = 0; j < 16; ++j) {
	          buffer[j] ^= iv[j];
	        }
	        var cipher = encrypt256(buffer, this.key);
	        this.iv = cipher;
	        result.push(cipher);
	        buffer = new Uint8Array(16);
	        bufferLength = 0;
	      }
	      this.buffer = buffer;
	      this.bufferLength = bufferLength;
	      this.iv = iv;
	      if (result.length === 0) {
	        return new Uint8Array([]);
	      }
	      var outputLength = 16 * result.length;
	      var output = new Uint8Array(outputLength);
	      for (i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {
	        output.set(result[i], j);
	      }
	      return output;
	    }
	  };
	  return AES256Cipher;
	}();
	var PDF17 = function PDF17Closure() {
	  function compareByteArrays(array1, array2) {
	    if (array1.length !== array2.length) {
	      return false;
	    }
	    for (var i = 0; i < array1.length; i++) {
	      if (array1[i] !== array2[i]) {
	        return false;
	      }
	    }
	    return true;
	  }
	  function PDF17() {}
	  PDF17.prototype = {
	    checkOwnerPassword: function PDF17_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {
	      var hashData = new Uint8Array(password.length + 56);
	      hashData.set(password, 0);
	      hashData.set(ownerValidationSalt, password.length);
	      hashData.set(userBytes, password.length + ownerValidationSalt.length);
	      var result = calculateSHA256(hashData, 0, hashData.length);
	      return compareByteArrays(result, ownerPassword);
	    },
	    checkUserPassword: function PDF17_checkUserPassword(password, userValidationSalt, userPassword) {
	      var hashData = new Uint8Array(password.length + 8);
	      hashData.set(password, 0);
	      hashData.set(userValidationSalt, password.length);
	      var result = calculateSHA256(hashData, 0, hashData.length);
	      return compareByteArrays(result, userPassword);
	    },
	    getOwnerKey: function PDF17_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {
	      var hashData = new Uint8Array(password.length + 56);
	      hashData.set(password, 0);
	      hashData.set(ownerKeySalt, password.length);
	      hashData.set(userBytes, password.length + ownerKeySalt.length);
	      var key = calculateSHA256(hashData, 0, hashData.length);
	      var cipher = new AES256Cipher(key);
	      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));
	    },
	    getUserKey: function PDF17_getUserKey(password, userKeySalt, userEncryption) {
	      var hashData = new Uint8Array(password.length + 8);
	      hashData.set(password, 0);
	      hashData.set(userKeySalt, password.length);
	      var key = calculateSHA256(hashData, 0, hashData.length);
	      var cipher = new AES256Cipher(key);
	      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));
	    }
	  };
	  return PDF17;
	}();
	var PDF20 = function PDF20Closure() {
	  function concatArrays(array1, array2) {
	    var t = new Uint8Array(array1.length + array2.length);
	    t.set(array1, 0);
	    t.set(array2, array1.length);
	    return t;
	  }
	  function calculatePDF20Hash(password, input, userBytes) {
	    var k = calculateSHA256(input, 0, input.length).subarray(0, 32);
	    var e = [0];
	    var i = 0;
	    while (i < 64 || e[e.length - 1] > i - 32) {
	      var arrayLength = password.length + k.length + userBytes.length;
	      var k1 = new Uint8Array(arrayLength * 64);
	      var array = concatArrays(password, k);
	      array = concatArrays(array, userBytes);
	      for (var j = 0, pos = 0; j < 64; j++, pos += arrayLength) {
	        k1.set(array, pos);
	      }
	      var cipher = new AES128Cipher(k.subarray(0, 16));
	      e = cipher.encrypt(k1, k.subarray(16, 32));
	      var remainder = 0;
	      for (var z = 0; z < 16; z++) {
	        remainder *= 256 % 3;
	        remainder %= 3;
	        remainder += (e[z] >>> 0) % 3;
	        remainder %= 3;
	      }
	      if (remainder === 0) {
	        k = calculateSHA256(e, 0, e.length);
	      } else if (remainder === 1) {
	        k = calculateSHA384(e, 0, e.length);
	      } else if (remainder === 2) {
	        k = calculateSHA512(e, 0, e.length);
	      }
	      i++;
	    }
	    return k.subarray(0, 32);
	  }
	  function PDF20() {}
	  function compareByteArrays(array1, array2) {
	    if (array1.length !== array2.length) {
	      return false;
	    }
	    for (var i = 0; i < array1.length; i++) {
	      if (array1[i] !== array2[i]) {
	        return false;
	      }
	    }
	    return true;
	  }
	  PDF20.prototype = {
	    hash: function PDF20_hash(password, concatBytes, userBytes) {
	      return calculatePDF20Hash(password, concatBytes, userBytes);
	    },
	    checkOwnerPassword: function PDF20_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {
	      var hashData = new Uint8Array(password.length + 56);
	      hashData.set(password, 0);
	      hashData.set(ownerValidationSalt, password.length);
	      hashData.set(userBytes, password.length + ownerValidationSalt.length);
	      var result = calculatePDF20Hash(password, hashData, userBytes);
	      return compareByteArrays(result, ownerPassword);
	    },
	    checkUserPassword: function PDF20_checkUserPassword(password, userValidationSalt, userPassword) {
	      var hashData = new Uint8Array(password.length + 8);
	      hashData.set(password, 0);
	      hashData.set(userValidationSalt, password.length);
	      var result = calculatePDF20Hash(password, hashData, []);
	      return compareByteArrays(result, userPassword);
	    },
	    getOwnerKey: function PDF20_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {
	      var hashData = new Uint8Array(password.length + 56);
	      hashData.set(password, 0);
	      hashData.set(ownerKeySalt, password.length);
	      hashData.set(userBytes, password.length + ownerKeySalt.length);
	      var key = calculatePDF20Hash(password, hashData, userBytes);
	      var cipher = new AES256Cipher(key);
	      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));
	    },
	    getUserKey: function PDF20_getUserKey(password, userKeySalt, userEncryption) {
	      var hashData = new Uint8Array(password.length + 8);
	      hashData.set(password, 0);
	      hashData.set(userKeySalt, password.length);
	      var key = calculatePDF20Hash(password, hashData, []);
	      var cipher = new AES256Cipher(key);
	      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));
	    }
	  };
	  return PDF20;
	}();
	var CipherTransform = function CipherTransformClosure() {
	  function CipherTransform(stringCipherConstructor, streamCipherConstructor) {
	    this.StringCipherConstructor = stringCipherConstructor;
	    this.StreamCipherConstructor = streamCipherConstructor;
	  }
	  CipherTransform.prototype = {
	    createStream: function CipherTransform_createStream(stream, length) {
	      var cipher = new this.StreamCipherConstructor();
	      return new DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {
	        return cipher.decryptBlock(data, finalize);
	      });
	    },
	    decryptString: function CipherTransform_decryptString(s) {
	      var cipher = new this.StringCipherConstructor();
	      var data = stringToBytes(s);
	      data = cipher.decryptBlock(data, true);
	      return bytesToString(data);
	    }
	  };
	  return CipherTransform;
	}();
	var CipherTransformFactory = function CipherTransformFactoryClosure() {
	  var defaultPasswordBytes = new Uint8Array([0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41, 0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08, 0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80, 0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A]);
	  function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {
	    if (password) {
	      var passwordLength = Math.min(127, password.length);
	      password = password.subarray(0, passwordLength);
	    } else {
	      password = [];
	    }
	    var pdfAlgorithm;
	    if (revision === 6) {
	      pdfAlgorithm = new PDF20();
	    } else {
	      pdfAlgorithm = new PDF17();
	    }
	    if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {
	      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);
	    } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {
	      return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);
	    }
	    return null;
	  }
	  function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {
	    var hashDataSize = 40 + ownerPassword.length + fileId.length;
	    var hashData = new Uint8Array(hashDataSize),
	        i = 0,
	        j,
	        n;
	    if (password) {
	      n = Math.min(32, password.length);
	      for (; i < n; ++i) {
	        hashData[i] = password[i];
	      }
	    }
	    j = 0;
	    while (i < 32) {
	      hashData[i++] = defaultPasswordBytes[j++];
	    }
	    for (j = 0, n = ownerPassword.length; j < n; ++j) {
	      hashData[i++] = ownerPassword[j];
	    }
	    hashData[i++] = flags & 0xFF;
	    hashData[i++] = flags >> 8 & 0xFF;
	    hashData[i++] = flags >> 16 & 0xFF;
	    hashData[i++] = flags >>> 24 & 0xFF;
	    for (j = 0, n = fileId.length; j < n; ++j) {
	      hashData[i++] = fileId[j];
	    }
	    if (revision >= 4 && !encryptMetadata) {
	      hashData[i++] = 0xFF;
	      hashData[i++] = 0xFF;
	      hashData[i++] = 0xFF;
	      hashData[i++] = 0xFF;
	    }
	    var hash = calculateMD5(hashData, 0, i);
	    var keyLengthInBytes = keyLength >> 3;
	    if (revision >= 3) {
	      for (j = 0; j < 50; ++j) {
	        hash = calculateMD5(hash, 0, keyLengthInBytes);
	      }
	    }
	    var encryptionKey = hash.subarray(0, keyLengthInBytes);
	    var cipher, checkData;
	    if (revision >= 3) {
	      for (i = 0; i < 32; ++i) {
	        hashData[i] = defaultPasswordBytes[i];
	      }
	      for (j = 0, n = fileId.length; j < n; ++j) {
	        hashData[i++] = fileId[j];
	      }
	      cipher = new ARCFourCipher(encryptionKey);
	      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));
	      n = encryptionKey.length;
	      var derivedKey = new Uint8Array(n),
	          k;
	      for (j = 1; j <= 19; ++j) {
	        for (k = 0; k < n; ++k) {
	          derivedKey[k] = encryptionKey[k] ^ j;
	        }
	        cipher = new ARCFourCipher(derivedKey);
	        checkData = cipher.encryptBlock(checkData);
	      }
	      for (j = 0, n = checkData.length; j < n; ++j) {
	        if (userPassword[j] !== checkData[j]) {
	          return null;
	        }
	      }
	    } else {
	      cipher = new ARCFourCipher(encryptionKey);
	      checkData = cipher.encryptBlock(defaultPasswordBytes);
	      for (j = 0, n = checkData.length; j < n; ++j) {
	        if (userPassword[j] !== checkData[j]) {
	          return null;
	        }
	      }
	    }
	    return encryptionKey;
	  }
	  function decodeUserPassword(password, ownerPassword, revision, keyLength) {
	    var hashData = new Uint8Array(32),
	        i = 0,
	        j,
	        n;
	    n = Math.min(32, password.length);
	    for (; i < n; ++i) {
	      hashData[i] = password[i];
	    }
	    j = 0;
	    while (i < 32) {
	      hashData[i++] = defaultPasswordBytes[j++];
	    }
	    var hash = calculateMD5(hashData, 0, i);
	    var keyLengthInBytes = keyLength >> 3;
	    if (revision >= 3) {
	      for (j = 0; j < 50; ++j) {
	        hash = calculateMD5(hash, 0, hash.length);
	      }
	    }
	    var cipher, userPassword;
	    if (revision >= 3) {
	      userPassword = ownerPassword;
	      var derivedKey = new Uint8Array(keyLengthInBytes),
	          k;
	      for (j = 19; j >= 0; j--) {
	        for (k = 0; k < keyLengthInBytes; ++k) {
	          derivedKey[k] = hash[k] ^ j;
	        }
	        cipher = new ARCFourCipher(derivedKey);
	        userPassword = cipher.encryptBlock(userPassword);
	      }
	    } else {
	      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));
	      userPassword = cipher.encryptBlock(ownerPassword);
	    }
	    return userPassword;
	  }
	  var identityName = Name.get('Identity');
	  function CipherTransformFactory(dict, fileId, password) {
	    var filter = dict.get('Filter');
	    if (!isName(filter, 'Standard')) {
	      error('unknown encryption method');
	    }
	    this.dict = dict;
	    var algorithm = dict.get('V');
	    if (!isInt(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {
	      error('unsupported encryption algorithm');
	    }
	    this.algorithm = algorithm;
	    var keyLength = dict.get('Length');
	    if (!keyLength) {
	      if (algorithm <= 3) {
	        keyLength = 40;
	      } else {
	        var cfDict = dict.get('CF');
	        var streamCryptoName = dict.get('StmF');
	        if (isDict(cfDict) && isName(streamCryptoName)) {
	          cfDict.suppressEncryption = true;
	          var handlerDict = cfDict.get(streamCryptoName.name);
	          keyLength = handlerDict && handlerDict.get('Length') || 128;
	          if (keyLength < 40) {
	            keyLength <<= 3;
	          }
	        }
	      }
	    }
	    if (!isInt(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {
	      error('invalid key length');
	    }
	    var ownerPassword = stringToBytes(dict.get('O')).subarray(0, 32);
	    var userPassword = stringToBytes(dict.get('U')).subarray(0, 32);
	    var flags = dict.get('P');
	    var revision = dict.get('R');
	    var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get('EncryptMetadata') !== false;
	    this.encryptMetadata = encryptMetadata;
	    var fileIdBytes = stringToBytes(fileId);
	    var passwordBytes;
	    if (password) {
	      if (revision === 6) {
	        try {
	          password = utf8StringToString(password);
	        } catch (ex) {
	          warn('CipherTransformFactory: ' + 'Unable to convert UTF8 encoded password.');
	        }
	      }
	      passwordBytes = stringToBytes(password);
	    }
	    var encryptionKey;
	    if (algorithm !== 5) {
	      encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);
	    } else {
	      var ownerValidationSalt = stringToBytes(dict.get('O')).subarray(32, 40);
	      var ownerKeySalt = stringToBytes(dict.get('O')).subarray(40, 48);
	      var uBytes = stringToBytes(dict.get('U')).subarray(0, 48);
	      var userValidationSalt = stringToBytes(dict.get('U')).subarray(32, 40);
	      var userKeySalt = stringToBytes(dict.get('U')).subarray(40, 48);
	      var ownerEncryption = stringToBytes(dict.get('OE'));
	      var userEncryption = stringToBytes(dict.get('UE'));
	      var perms = stringToBytes(dict.get('Perms'));
	      encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);
	    }
	    if (!encryptionKey && !password) {
	      throw new PasswordException('No password given', PasswordResponses.NEED_PASSWORD);
	    } else if (!encryptionKey && password) {
	      var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);
	      encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);
	    }
	    if (!encryptionKey) {
	      throw new PasswordException('Incorrect Password', PasswordResponses.INCORRECT_PASSWORD);
	    }
	    this.encryptionKey = encryptionKey;
	    if (algorithm >= 4) {
	      var cf = dict.get('CF');
	      if (isDict(cf)) {
	        cf.suppressEncryption = true;
	      }
	      this.cf = cf;
	      this.stmf = dict.get('StmF') || identityName;
	      this.strf = dict.get('StrF') || identityName;
	      this.eff = dict.get('EFF') || this.stmf;
	    }
	  }
	  function buildObjectKey(num, gen, encryptionKey, isAes) {
	    var key = new Uint8Array(encryptionKey.length + 9),
	        i,
	        n;
	    for (i = 0, n = encryptionKey.length; i < n; ++i) {
	      key[i] = encryptionKey[i];
	    }
	    key[i++] = num & 0xFF;
	    key[i++] = num >> 8 & 0xFF;
	    key[i++] = num >> 16 & 0xFF;
	    key[i++] = gen & 0xFF;
	    key[i++] = gen >> 8 & 0xFF;
	    if (isAes) {
	      key[i++] = 0x73;
	      key[i++] = 0x41;
	      key[i++] = 0x6C;
	      key[i++] = 0x54;
	    }
	    var hash = calculateMD5(key, 0, i);
	    return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));
	  }
	  function buildCipherConstructor(cf, name, num, gen, key) {
	    assert(isName(name), 'Invalid crypt filter name.');
	    var cryptFilter = cf.get(name.name);
	    var cfm;
	    if (cryptFilter !== null && cryptFilter !== undefined) {
	      cfm = cryptFilter.get('CFM');
	    }
	    if (!cfm || cfm.name === 'None') {
	      return function cipherTransformFactoryBuildCipherConstructorNone() {
	        return new NullCipher();
	      };
	    }
	    if (cfm.name === 'V2') {
	      return function cipherTransformFactoryBuildCipherConstructorV2() {
	        return new ARCFourCipher(buildObjectKey(num, gen, key, false));
	      };
	    }
	    if (cfm.name === 'AESV2') {
	      return function cipherTransformFactoryBuildCipherConstructorAESV2() {
	        return new AES128Cipher(buildObjectKey(num, gen, key, true));
	      };
	    }
	    if (cfm.name === 'AESV3') {
	      return function cipherTransformFactoryBuildCipherConstructorAESV3() {
	        return new AES256Cipher(key);
	      };
	    }
	    error('Unknown crypto method');
	  }
	  CipherTransformFactory.prototype = {
	    createCipherTransform: function CipherTransformFactory_createCipherTransform(num, gen) {
	      if (this.algorithm === 4 || this.algorithm === 5) {
	        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey));
	      }
	      var key = buildObjectKey(num, gen, this.encryptionKey, false);
	      var cipherConstructor = function buildCipherCipherConstructor() {
	        return new ARCFourCipher(key);
	      };
	      return new CipherTransform(cipherConstructor, cipherConstructor);
	    }
	  };
	  return CipherTransformFactory;
	}();
	exports.AES128Cipher = AES128Cipher;
	exports.AES256Cipher = AES256Cipher;
	exports.ARCFourCipher = ARCFourCipher;
	exports.CipherTransformFactory = CipherTransformFactory;
	exports.PDF17 = PDF17;
	exports.PDF20 = PDF20;
	exports.calculateMD5 = calculateMD5;
	exports.calculateSHA256 = calculateSHA256;
	exports.calculateSHA384 = calculateSHA384;
	exports.calculateSHA512 = calculateSHA512;

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var coreParser = __w_pdfjs_require__(5);
	var coreImage = __w_pdfjs_require__(27);
	var coreColorSpace = __w_pdfjs_require__(3);
	var coreMurmurHash3 = __w_pdfjs_require__(31);
	var coreFonts = __w_pdfjs_require__(26);
	var coreFunction = __w_pdfjs_require__(6);
	var corePattern = __w_pdfjs_require__(32);
	var coreCMap = __w_pdfjs_require__(23);
	var coreMetrics = __w_pdfjs_require__(30);
	var coreBidi = __w_pdfjs_require__(21);
	var coreEncodings = __w_pdfjs_require__(4);
	var coreStandardFonts = __w_pdfjs_require__(17);
	var coreUnicode = __w_pdfjs_require__(18);
	var coreGlyphList = __w_pdfjs_require__(7);
	var FONT_IDENTITY_MATRIX = sharedUtil.FONT_IDENTITY_MATRIX;
	var IDENTITY_MATRIX = sharedUtil.IDENTITY_MATRIX;
	var UNSUPPORTED_FEATURES = sharedUtil.UNSUPPORTED_FEATURES;
	var ImageKind = sharedUtil.ImageKind;
	var OPS = sharedUtil.OPS;
	var NativeImageDecoding = sharedUtil.NativeImageDecoding;
	var TextRenderingMode = sharedUtil.TextRenderingMode;
	var CMapCompressionType = sharedUtil.CMapCompressionType;
	var Util = sharedUtil.Util;
	var assert = sharedUtil.assert;
	var createPromiseCapability = sharedUtil.createPromiseCapability;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isNum = sharedUtil.isNum;
	var isString = sharedUtil.isString;
	var getLookupTableFactory = sharedUtil.getLookupTableFactory;
	var warn = sharedUtil.warn;
	var Dict = corePrimitives.Dict;
	var Name = corePrimitives.Name;
	var isEOF = corePrimitives.isEOF;
	var isCmd = corePrimitives.isCmd;
	var isDict = corePrimitives.isDict;
	var isName = corePrimitives.isName;
	var isRef = corePrimitives.isRef;
	var isStream = corePrimitives.isStream;
	var DecodeStream = coreStream.DecodeStream;
	var JpegStream = coreStream.JpegStream;
	var Stream = coreStream.Stream;
	var Lexer = coreParser.Lexer;
	var Parser = coreParser.Parser;
	var PDFImage = coreImage.PDFImage;
	var ColorSpace = coreColorSpace.ColorSpace;
	var MurmurHash3_64 = coreMurmurHash3.MurmurHash3_64;
	var ErrorFont = coreFonts.ErrorFont;
	var FontFlags = coreFonts.FontFlags;
	var Font = coreFonts.Font;
	var IdentityToUnicodeMap = coreFonts.IdentityToUnicodeMap;
	var ToUnicodeMap = coreFonts.ToUnicodeMap;
	var getFontType = coreFonts.getFontType;
	var isPDFFunction = coreFunction.isPDFFunction;
	var PDFFunction = coreFunction.PDFFunction;
	var Pattern = corePattern.Pattern;
	var getTilingPatternIR = corePattern.getTilingPatternIR;
	var CMapFactory = coreCMap.CMapFactory;
	var IdentityCMap = coreCMap.IdentityCMap;
	var getMetrics = coreMetrics.getMetrics;
	var bidi = coreBidi.bidi;
	var WinAnsiEncoding = coreEncodings.WinAnsiEncoding;
	var StandardEncoding = coreEncodings.StandardEncoding;
	var MacRomanEncoding = coreEncodings.MacRomanEncoding;
	var SymbolSetEncoding = coreEncodings.SymbolSetEncoding;
	var ZapfDingbatsEncoding = coreEncodings.ZapfDingbatsEncoding;
	var getEncoding = coreEncodings.getEncoding;
	var getStdFontMap = coreStandardFonts.getStdFontMap;
	var getSerifFonts = coreStandardFonts.getSerifFonts;
	var getSymbolsFonts = coreStandardFonts.getSymbolsFonts;
	var getNormalizedUnicodes = coreUnicode.getNormalizedUnicodes;
	var reverseIfRtl = coreUnicode.reverseIfRtl;
	var getUnicodeForGlyph = coreUnicode.getUnicodeForGlyph;
	var getGlyphsUnicode = coreGlyphList.getGlyphsUnicode;
	var PartialEvaluator = function PartialEvaluatorClosure() {
	  var DefaultPartialEvaluatorOptions = {
	    forceDataSchema: false,
	    maxImageSize: -1,
	    disableFontFace: false,
	    nativeImageDecoderSupport: NativeImageDecoding.DECODE,
	    ignoreErrors: false
	  };
	  function NativeImageDecoder(xref, resources, handler, forceDataSchema) {
	    this.xref = xref;
	    this.resources = resources;
	    this.handler = handler;
	    this.forceDataSchema = forceDataSchema;
	  }
	  NativeImageDecoder.prototype = {
	    canDecode: function canDecode(image) {
	      return image instanceof JpegStream && NativeImageDecoder.isDecodable(image, this.xref, this.resources);
	    },
	    decode: function decode(image) {
	      var dict = image.dict;
	      var colorSpace = dict.get('ColorSpace', 'CS');
	      colorSpace = ColorSpace.parse(colorSpace, this.xref, this.resources);
	      var numComps = colorSpace.numComps;
	      var decodePromise = this.handler.sendWithPromise('JpegDecode', [image.getIR(this.forceDataSchema), numComps]);
	      return decodePromise.then(function (message) {
	        var data = message.data;
	        return new Stream(data, 0, data.length, image.dict);
	      });
	    }
	  };
	  NativeImageDecoder.isSupported = function NativeImageDecoder_isSupported(image, xref, res) {
	    var dict = image.dict;
	    if (dict.has('DecodeParms') || dict.has('DP')) {
	      return false;
	    }
	    var cs = ColorSpace.parse(dict.get('ColorSpace', 'CS'), xref, res);
	    return (cs.name === 'DeviceGray' || cs.name === 'DeviceRGB') && cs.isDefaultDecode(dict.getArray('Decode', 'D'));
	  };
	  NativeImageDecoder.isDecodable = function NativeImageDecoder_isDecodable(image, xref, res) {
	    var dict = image.dict;
	    if (dict.has('DecodeParms') || dict.has('DP')) {
	      return false;
	    }
	    var cs = ColorSpace.parse(dict.get('ColorSpace', 'CS'), xref, res);
	    return (cs.numComps === 1 || cs.numComps === 3) && cs.isDefaultDecode(dict.getArray('Decode', 'D'));
	  };
	  function PartialEvaluator(_ref) {
	    var _this = this;

	    var pdfManager = _ref.pdfManager,
	        xref = _ref.xref,
	        handler = _ref.handler,
	        pageIndex = _ref.pageIndex,
	        idFactory = _ref.idFactory,
	        fontCache = _ref.fontCache,
	        builtInCMapCache = _ref.builtInCMapCache,
	        _ref$options = _ref.options,
	        options = _ref$options === undefined ? null : _ref$options;

	    this.pdfManager = pdfManager;
	    this.xref = xref;
	    this.handler = handler;
	    this.pageIndex = pageIndex;
	    this.idFactory = idFactory;
	    this.fontCache = fontCache;
	    this.builtInCMapCache = builtInCMapCache;
	    this.options = options || DefaultPartialEvaluatorOptions;
	    this.fetchBuiltInCMap = function (name) {
	      var cachedCMap = _this.builtInCMapCache[name];
	      if (cachedCMap) {
	        return Promise.resolve(cachedCMap);
	      }
	      return _this.handler.sendWithPromise('FetchBuiltInCMap', { name: name }).then(function (data) {
	        if (data.compressionType !== CMapCompressionType.NONE) {
	          _this.builtInCMapCache[name] = data;
	        }
	        return data;
	      });
	    };
	  }
	  var TIME_SLOT_DURATION_MS = 20;
	  var CHECK_TIME_EVERY = 100;
	  function TimeSlotManager() {
	    this.reset();
	  }
	  TimeSlotManager.prototype = {
	    check: function TimeSlotManager_check() {
	      if (++this.checked < CHECK_TIME_EVERY) {
	        return false;
	      }
	      this.checked = 0;
	      return this.endTime <= Date.now();
	    },
	    reset: function TimeSlotManager_reset() {
	      this.endTime = Date.now() + TIME_SLOT_DURATION_MS;
	      this.checked = 0;
	    }
	  };
	  function normalizeBlendMode(value) {
	    if (!isName(value)) {
	      return 'source-over';
	    }
	    switch (value.name) {
	      case 'Normal':
	      case 'Compatible':
	        return 'source-over';
	      case 'Multiply':
	        return 'multiply';
	      case 'Screen':
	        return 'screen';
	      case 'Overlay':
	        return 'overlay';
	      case 'Darken':
	        return 'darken';
	      case 'Lighten':
	        return 'lighten';
	      case 'ColorDodge':
	        return 'color-dodge';
	      case 'ColorBurn':
	        return 'color-burn';
	      case 'HardLight':
	        return 'hard-light';
	      case 'SoftLight':
	        return 'soft-light';
	      case 'Difference':
	        return 'difference';
	      case 'Exclusion':
	        return 'exclusion';
	      case 'Hue':
	        return 'hue';
	      case 'Saturation':
	        return 'saturation';
	      case 'Color':
	        return 'color';
	      case 'Luminosity':
	        return 'luminosity';
	    }
	    warn('Unsupported blend mode: ' + value.name);
	    return 'source-over';
	  }
	  var deferred = Promise.resolve();
	  var TILING_PATTERN = 1,
	      SHADING_PATTERN = 2;
	  PartialEvaluator.prototype = {
	    clone: function clone() {
	      var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultPartialEvaluatorOptions;

	      var newEvaluator = Object.create(this);
	      newEvaluator.options = newOptions;
	      return newEvaluator;
	    },

	    hasBlendModes: function PartialEvaluator_hasBlendModes(resources) {
	      if (!isDict(resources)) {
	        return false;
	      }
	      var processed = Object.create(null);
	      if (resources.objId) {
	        processed[resources.objId] = true;
	      }
	      var nodes = [resources],
	          xref = this.xref;
	      while (nodes.length) {
	        var key, i, ii;
	        var node = nodes.shift();
	        var graphicStates = node.get('ExtGState');
	        if (isDict(graphicStates)) {
	          var graphicStatesKeys = graphicStates.getKeys();
	          for (i = 0, ii = graphicStatesKeys.length; i < ii; i++) {
	            key = graphicStatesKeys[i];
	            var graphicState = graphicStates.get(key);
	            var bm = graphicState.get('BM');
	            if (isName(bm) && bm.name !== 'Normal') {
	              return true;
	            }
	          }
	        }
	        var xObjects = node.get('XObject');
	        if (!isDict(xObjects)) {
	          continue;
	        }
	        var xObjectsKeys = xObjects.getKeys();
	        for (i = 0, ii = xObjectsKeys.length; i < ii; i++) {
	          key = xObjectsKeys[i];
	          var xObject = xObjects.getRaw(key);
	          if (isRef(xObject)) {
	            if (processed[xObject.toString()]) {
	              continue;
	            }
	            xObject = xref.fetch(xObject);
	          }
	          if (!isStream(xObject)) {
	            continue;
	          }
	          if (xObject.dict.objId) {
	            if (processed[xObject.dict.objId]) {
	              continue;
	            }
	            processed[xObject.dict.objId] = true;
	          }
	          var xResources = xObject.dict.get('Resources');
	          if (isDict(xResources) && (!xResources.objId || !processed[xResources.objId])) {
	            nodes.push(xResources);
	            if (xResources.objId) {
	              processed[xResources.objId] = true;
	            }
	          }
	        }
	      }
	      return false;
	    },
	    buildFormXObject: function PartialEvaluator_buildFormXObject(resources, xobj, smask, operatorList, task, initialState) {
	      var dict = xobj.dict;
	      var matrix = dict.getArray('Matrix');
	      var bbox = dict.getArray('BBox');
	      var group = dict.get('Group');
	      if (group) {
	        var groupOptions = {
	          matrix: matrix,
	          bbox: bbox,
	          smask: smask,
	          isolated: false,
	          knockout: false
	        };
	        var groupSubtype = group.get('S');
	        var colorSpace;
	        if (isName(groupSubtype, 'Transparency')) {
	          groupOptions.isolated = group.get('I') || false;
	          groupOptions.knockout = group.get('K') || false;
	          colorSpace = group.has('CS') ? ColorSpace.parse(group.get('CS'), this.xref, resources) : null;
	        }
	        if (smask && smask.backdrop) {
	          colorSpace = colorSpace || ColorSpace.singletons.rgb;
	          smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);
	        }
	        operatorList.addOp(OPS.beginGroup, [groupOptions]);
	      }
	      operatorList.addOp(OPS.paintFormXObjectBegin, [matrix, bbox]);
	      return this.getOperatorList({
	        stream: xobj,
	        task: task,
	        resources: dict.get('Resources') || resources,
	        operatorList: operatorList,
	        initialState: initialState
	      }).then(function () {
	        operatorList.addOp(OPS.paintFormXObjectEnd, []);
	        if (group) {
	          operatorList.addOp(OPS.endGroup, [groupOptions]);
	        }
	      });
	    },
	    buildPaintImageXObject: function PartialEvaluator_buildPaintImageXObject(resources, image, inline, operatorList, cacheKey, imageCache) {
	      var _this2 = this;

	      var dict = image.dict;
	      var w = dict.get('Width', 'W');
	      var h = dict.get('Height', 'H');
	      if (!(w && isNum(w)) || !(h && isNum(h))) {
	        warn('Image dimensions are missing, or not numbers.');
	        return;
	      }
	      var maxImageSize = this.options.maxImageSize;
	      if (maxImageSize !== -1 && w * h > maxImageSize) {
	        warn('Image exceeded maximum allowed size and was removed.');
	        return;
	      }
	      var imageMask = dict.get('ImageMask', 'IM') || false;
	      var imgData, args;
	      if (imageMask) {
	        var width = dict.get('Width', 'W');
	        var height = dict.get('Height', 'H');
	        var bitStrideLength = width + 7 >> 3;
	        var imgArray = image.getBytes(bitStrideLength * height);
	        var decode = dict.getArray('Decode', 'D');
	        var inverseDecode = !!decode && decode[0] > 0;
	        imgData = PDFImage.createMask(imgArray, width, height, image instanceof DecodeStream, inverseDecode);
	        imgData.cached = true;
	        args = [imgData];
	        operatorList.addOp(OPS.paintImageMaskXObject, args);
	        if (cacheKey) {
	          imageCache[cacheKey] = {
	            fn: OPS.paintImageMaskXObject,
	            args: args
	          };
	        }
	        return;
	      }
	      var softMask = dict.get('SMask', 'SM') || false;
	      var mask = dict.get('Mask') || false;
	      var SMALL_IMAGE_DIMENSIONS = 200;
	      if (inline && !softMask && !mask && !(image instanceof JpegStream) && w + h < SMALL_IMAGE_DIMENSIONS) {
	        var imageObj = new PDFImage(this.xref, resources, image, inline, null, null);
	        imgData = imageObj.createImageData(true);
	        operatorList.addOp(OPS.paintInlineImageXObject, [imgData]);
	        return;
	      }
	      var nativeImageDecoderSupport = this.options.nativeImageDecoderSupport;
	      var objId = 'img_' + this.idFactory.createObjId();
	      operatorList.addDependency(objId);
	      args = [objId, w, h];
	      if (nativeImageDecoderSupport !== NativeImageDecoding.NONE && !softMask && !mask && image instanceof JpegStream && NativeImageDecoder.isSupported(image, this.xref, resources)) {
	        operatorList.addOp(OPS.paintJpegXObject, args);
	        this.handler.send('obj', [objId, this.pageIndex, 'JpegStream', image.getIR(this.options.forceDataSchema)]);
	        return;
	      }
	      var nativeImageDecoder = null;
	      if (nativeImageDecoderSupport === NativeImageDecoding.DECODE && (image instanceof JpegStream || mask instanceof JpegStream || softMask instanceof JpegStream)) {
	        nativeImageDecoder = new NativeImageDecoder(this.xref, resources, this.handler, this.options.forceDataSchema);
	      }
	      PDFImage.buildImage(this.handler, this.xref, resources, image, inline, nativeImageDecoder).then(function (imageObj) {
	        var imgData = imageObj.createImageData(false);
	        _this2.handler.send('obj', [objId, _this2.pageIndex, 'Image', imgData], [imgData.data.buffer]);
	      }).catch(function (reason) {
	        warn('Unable to decode image: ' + reason);
	        _this2.handler.send('obj', [objId, _this2.pageIndex, 'Image', null]);
	      });
	      operatorList.addOp(OPS.paintImageXObject, args);
	      if (cacheKey) {
	        imageCache[cacheKey] = {
	          fn: OPS.paintImageXObject,
	          args: args
	        };
	      }
	    },
	    handleSMask: function PartialEvaluator_handleSmask(smask, resources, operatorList, task, stateManager) {
	      var smaskContent = smask.get('G');
	      var smaskOptions = {
	        subtype: smask.get('S').name,
	        backdrop: smask.get('BC')
	      };
	      var transferObj = smask.get('TR');
	      if (isPDFFunction(transferObj)) {
	        var transferFn = PDFFunction.parse(this.xref, transferObj);
	        var transferMap = new Uint8Array(256);
	        var tmp = new Float32Array(1);
	        for (var i = 0; i < 256; i++) {
	          tmp[0] = i / 255;
	          transferFn(tmp, 0, tmp, 0);
	          transferMap[i] = tmp[0] * 255 | 0;
	        }
	        smaskOptions.transferMap = transferMap;
	      }
	      return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone());
	    },
	    handleTilingType: function PartialEvaluator_handleTilingType(fn, args, resources, pattern, patternDict, operatorList, task) {
	      var tilingOpList = new OperatorList();
	      var resourcesArray = [patternDict.get('Resources'), resources];
	      var patternResources = Dict.merge(this.xref, resourcesArray);
	      return this.getOperatorList({
	        stream: pattern,
	        task: task,
	        resources: patternResources,
	        operatorList: tilingOpList
	      }).then(function () {
	        operatorList.addDependencies(tilingOpList.dependencies);
	        operatorList.addOp(fn, getTilingPatternIR({
	          fnArray: tilingOpList.fnArray,
	          argsArray: tilingOpList.argsArray
	        }, patternDict, args));
	      });
	    },
	    handleSetFont: function PartialEvaluator_handleSetFont(resources, fontArgs, fontRef, operatorList, task, state) {
	      var _this3 = this;

	      var fontName;
	      if (fontArgs) {
	        fontArgs = fontArgs.slice();
	        fontName = fontArgs[0].name;
	      }
	      return this.loadFont(fontName, fontRef, resources).then(function (translated) {
	        if (!translated.font.isType3Font) {
	          return translated;
	        }
	        return translated.loadType3Data(_this3, resources, operatorList, task).then(function () {
	          return translated;
	        }).catch(function (reason) {
	          _this3.handler.send('UnsupportedFeature', { featureId: UNSUPPORTED_FEATURES.font });
	          return new TranslatedFont('g_font_error', new ErrorFont('Type3 font load error: ' + reason), translated.font);
	        });
	      }).then(function (translated) {
	        state.font = translated.font;
	        translated.send(_this3.handler);
	        return translated.loadedName;
	      });
	    },
	    handleText: function PartialEvaluator_handleText(chars, state) {
	      var _this4 = this;

	      var font = state.font;
	      var glyphs = font.charsToGlyphs(chars);
	      var isAddToPathSet = !!(state.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG);
	      if (font.data && (isAddToPathSet || this.options.disableFontFace)) {
	        var buildPath = function buildPath(fontChar) {
	          if (!font.renderer.hasBuiltPath(fontChar)) {
	            var path = font.renderer.getPathJs(fontChar);
	            _this4.handler.send('commonobj', [font.loadedName + '_path_' + fontChar, 'FontPath', path]);
	          }
	        };
	        for (var i = 0, ii = glyphs.length; i < ii; i++) {
	          var glyph = glyphs[i];
	          buildPath(glyph.fontChar);
	          var accent = glyph.accent;
	          if (accent && accent.fontChar) {
	            buildPath(accent.fontChar);
	          }
	        }
	      }
	      return glyphs;
	    },
	    setGState: function PartialEvaluator_setGState(resources, gState, operatorList, task, stateManager) {
	      var _this5 = this;

	      var gStateObj = [];
	      var gStateKeys = gState.getKeys();
	      var promise = Promise.resolve();

	      var _loop = function _loop() {
	        var key = gStateKeys[i];
	        var value = gState.get(key);
	        switch (key) {
	          case 'Type':
	            break;
	          case 'LW':
	          case 'LC':
	          case 'LJ':
	          case 'ML':
	          case 'D':
	          case 'RI':
	          case 'FL':
	          case 'CA':
	          case 'ca':
	            gStateObj.push([key, value]);
	            break;
	          case 'Font':
	            promise = promise.then(function () {
	              return _this5.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {
	                operatorList.addDependency(loadedName);
	                gStateObj.push([key, [loadedName, value[1]]]);
	              });
	            });
	            break;
	          case 'BM':
	            gStateObj.push([key, normalizeBlendMode(value)]);
	            break;
	          case 'SMask':
	            if (isName(value, 'None')) {
	              gStateObj.push([key, false]);
	              break;
	            }
	            if (isDict(value)) {
	              promise = promise.then(function () {
	                return _this5.handleSMask(value, resources, operatorList, task, stateManager);
	              });
	              gStateObj.push([key, true]);
	            } else {
	              warn('Unsupported SMask type');
	            }
	            break;
	          case 'OP':
	          case 'op':
	          case 'OPM':
	          case 'BG':
	          case 'BG2':
	          case 'UCR':
	          case 'UCR2':
	          case 'TR':
	          case 'TR2':
	          case 'HT':
	          case 'SM':
	          case 'SA':
	          case 'AIS':
	          case 'TK':
	            info('graphic state operator ' + key);
	            break;
	          default:
	            info('Unknown graphic state operator ' + key);
	            break;
	        }
	      };

	      for (var i = 0, ii = gStateKeys.length; i < ii; i++) {
	        _loop();
	      }
	      return promise.then(function () {
	        if (gStateObj.length > 0) {
	          operatorList.addOp(OPS.setGState, [gStateObj]);
	        }
	      });
	    },
	    loadFont: function PartialEvaluator_loadFont(fontName, font, resources) {
	      var _this6 = this;

	      function errorFont() {
	        return Promise.resolve(new TranslatedFont('g_font_error', new ErrorFont('Font ' + fontName + ' is not available'), font));
	      }
	      var fontRef,
	          xref = this.xref;
	      if (font) {
	        assert(isRef(font));
	        fontRef = font;
	      } else {
	        var fontRes = resources.get('Font');
	        if (fontRes) {
	          fontRef = fontRes.getRaw(fontName);
	        } else {
	          warn('fontRes not available');
	          return errorFont();
	        }
	      }
	      if (!fontRef) {
	        warn('fontRef not available');
	        return errorFont();
	      }
	      if (this.fontCache.has(fontRef)) {
	        return this.fontCache.get(fontRef);
	      }
	      font = xref.fetchIfRef(fontRef);
	      if (!isDict(font)) {
	        return errorFont();
	      }
	      if (font.translated) {
	        return font.translated;
	      }
	      var fontCapability = createPromiseCapability();
	      var preEvaluatedFont = this.preEvaluateFont(font);
	      var descriptor = preEvaluatedFont.descriptor;
	      var fontRefIsRef = isRef(fontRef),
	          fontID;
	      if (fontRefIsRef) {
	        fontID = fontRef.toString();
	      }
	      if (isDict(descriptor)) {
	        if (!descriptor.fontAliases) {
	          descriptor.fontAliases = Object.create(null);
	        }
	        var fontAliases = descriptor.fontAliases;
	        var hash = preEvaluatedFont.hash;
	        if (fontAliases[hash]) {
	          var aliasFontRef = fontAliases[hash].aliasRef;
	          if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {
	            this.fontCache.putAlias(fontRef, aliasFontRef);
	            return this.fontCache.get(fontRef);
	          }
	        } else {
	          fontAliases[hash] = { fontID: Font.getFontID() };
	        }
	        if (fontRefIsRef) {
	          fontAliases[hash].aliasRef = fontRef;
	        }
	        fontID = fontAliases[hash].fontID;
	      }
	      if (fontRefIsRef) {
	        this.fontCache.put(fontRef, fontCapability.promise);
	      } else {
	        if (!fontID) {
	          fontID = this.idFactory.createObjId();
	        }
	        this.fontCache.put('id_' + fontID, fontCapability.promise);
	      }
	      assert(fontID, 'The "fontID" must be defined.');
	      font.loadedName = 'g_' + this.pdfManager.docId + '_f' + fontID;
	      font.translated = fontCapability.promise;
	      var translatedPromise;
	      try {
	        translatedPromise = this.translateFont(preEvaluatedFont);
	      } catch (e) {
	        translatedPromise = Promise.reject(e);
	      }
	      translatedPromise.then(function (translatedFont) {
	        if (translatedFont.fontType !== undefined) {
	          var xrefFontStats = xref.stats.fontTypes;
	          xrefFontStats[translatedFont.fontType] = true;
	        }
	        fontCapability.resolve(new TranslatedFont(font.loadedName, translatedFont, font));
	      }).catch(function (reason) {
	        _this6.handler.send('UnsupportedFeature', { featureId: UNSUPPORTED_FEATURES.font });
	        try {
	          var descriptor = preEvaluatedFont.descriptor;
	          var fontFile3 = descriptor && descriptor.get('FontFile3');
	          var subtype = fontFile3 && fontFile3.get('Subtype');
	          var fontType = getFontType(preEvaluatedFont.type, subtype && subtype.name);
	          var xrefFontStats = xref.stats.fontTypes;
	          xrefFontStats[fontType] = true;
	        } catch (ex) {}
	        fontCapability.resolve(new TranslatedFont(font.loadedName, new ErrorFont(reason instanceof Error ? reason.message : reason), font));
	      });
	      return fontCapability.promise;
	    },
	    buildPath: function PartialEvaluator_buildPath(operatorList, fn, args) {
	      var lastIndex = operatorList.length - 1;
	      if (!args) {
	        args = [];
	      }
	      if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== OPS.constructPath) {
	        operatorList.addOp(OPS.constructPath, [[fn], args]);
	      } else {
	        var opArgs = operatorList.argsArray[lastIndex];
	        opArgs[0].push(fn);
	        Array.prototype.push.apply(opArgs[1], args);
	      }
	    },
	    handleColorN: function PartialEvaluator_handleColorN(operatorList, fn, args, cs, patterns, resources, task) {
	      var patternName = args[args.length - 1];
	      var pattern;
	      if (isName(patternName) && (pattern = patterns.get(patternName.name))) {
	        var dict = isStream(pattern) ? pattern.dict : pattern;
	        var typeNum = dict.get('PatternType');
	        if (typeNum === TILING_PATTERN) {
	          var color = cs.base ? cs.base.getRgb(args, 0) : null;
	          return this.handleTilingType(fn, color, resources, pattern, dict, operatorList, task);
	        } else if (typeNum === SHADING_PATTERN) {
	          var shading = dict.get('Shading');
	          var matrix = dict.getArray('Matrix');
	          pattern = Pattern.parseShading(shading, matrix, this.xref, resources, this.handler);
	          operatorList.addOp(fn, pattern.getIR());
	          return Promise.resolve();
	        }
	        return Promise.reject(new Error('Unknown PatternType: ' + typeNum));
	      }
	      operatorList.addOp(fn, args);
	      return Promise.resolve();
	    },
	    getOperatorList: function getOperatorList(_ref2) {
	      var _this7 = this;

	      var stream = _ref2.stream,
	          task = _ref2.task,
	          resources = _ref2.resources,
	          operatorList = _ref2.operatorList,
	          _ref2$initialState = _ref2.initialState,
	          initialState = _ref2$initialState === undefined ? null : _ref2$initialState;

	      resources = resources || Dict.empty;
	      initialState = initialState || new EvalState();
	      assert(operatorList, 'getOperatorList: missing "operatorList" parameter');
	      var self = this;
	      var xref = this.xref;
	      var imageCache = Object.create(null);
	      var xobjs = resources.get('XObject') || Dict.empty;
	      var patterns = resources.get('Pattern') || Dict.empty;
	      var stateManager = new StateManager(initialState);
	      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
	      var timeSlotManager = new TimeSlotManager();
	      function closePendingRestoreOPS(argument) {
	        for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
	          operatorList.addOp(OPS.restore, []);
	        }
	      }
	      return new Promise(function promiseBody(resolve, reject) {
	        var next = function next(promise) {
	          promise.then(function () {
	            try {
	              promiseBody(resolve, reject);
	            } catch (ex) {
	              reject(ex);
	            }
	          }, reject);
	        };
	        task.ensureNotTerminated();
	        timeSlotManager.reset();
	        var stop,
	            operation = {},
	            i,
	            ii,
	            cs;
	        while (!(stop = timeSlotManager.check())) {
	          operation.args = null;
	          if (!preprocessor.read(operation)) {
	            break;
	          }
	          var args = operation.args;
	          var fn = operation.fn;
	          switch (fn | 0) {
	            case OPS.paintXObject:
	              if (args[0].code) {
	                break;
	              }
	              var name = args[0].name;
	              if (!name) {
	                warn('XObject must be referred to by name.');
	                continue;
	              }
	              if (imageCache[name] !== undefined) {
	                operatorList.addOp(imageCache[name].fn, imageCache[name].args);
	                args = null;
	                continue;
	              }
	              var xobj = xobjs.get(name);
	              if (xobj) {
	                assert(isStream(xobj), 'XObject should be a stream');
	                var type = xobj.dict.get('Subtype');
	                assert(isName(type), 'XObject should have a Name subtype');
	                if (type.name === 'Form') {
	                  stateManager.save();
	                  next(self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone()).then(function () {
	                    stateManager.restore();
	                  }));
	                  return;
	                } else if (type.name === 'Image') {
	                  self.buildPaintImageXObject(resources, xobj, false, operatorList, name, imageCache);
	                  args = null;
	                  continue;
	                } else if (type.name === 'PS') {
	                  info('Ignored XObject subtype PS');
	                  continue;
	                } else {
	                  error('Unhandled XObject subtype ' + type.name);
	                }
	              }
	              break;
	            case OPS.setFont:
	              var fontSize = args[1];
	              next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state).then(function (loadedName) {
	                operatorList.addDependency(loadedName);
	                operatorList.addOp(OPS.setFont, [loadedName, fontSize]);
	              }));
	              return;
	            case OPS.endInlineImage:
	              var cacheKey = args[0].cacheKey;
	              if (cacheKey) {
	                var cacheEntry = imageCache[cacheKey];
	                if (cacheEntry !== undefined) {
	                  operatorList.addOp(cacheEntry.fn, cacheEntry.args);
	                  args = null;
	                  continue;
	                }
	              }
	              self.buildPaintImageXObject(resources, args[0], true, operatorList, cacheKey, imageCache);
	              args = null;
	              continue;
	            case OPS.showText:
	              args[0] = self.handleText(args[0], stateManager.state);
	              break;
	            case OPS.showSpacedText:
	              var arr = args[0];
	              var combinedGlyphs = [];
	              var arrLength = arr.length;
	              var state = stateManager.state;
	              for (i = 0; i < arrLength; ++i) {
	                var arrItem = arr[i];
	                if (isString(arrItem)) {
	                  Array.prototype.push.apply(combinedGlyphs, self.handleText(arrItem, state));
	                } else if (isNum(arrItem)) {
	                  combinedGlyphs.push(arrItem);
	                }
	              }
	              args[0] = combinedGlyphs;
	              fn = OPS.showText;
	              break;
	            case OPS.nextLineShowText:
	              operatorList.addOp(OPS.nextLine);
	              args[0] = self.handleText(args[0], stateManager.state);
	              fn = OPS.showText;
	              break;
	            case OPS.nextLineSetSpacingShowText:
	              operatorList.addOp(OPS.nextLine);
	              operatorList.addOp(OPS.setWordSpacing, [args.shift()]);
	              operatorList.addOp(OPS.setCharSpacing, [args.shift()]);
	              args[0] = self.handleText(args[0], stateManager.state);
	              fn = OPS.showText;
	              break;
	            case OPS.setTextRenderingMode:
	              stateManager.state.textRenderingMode = args[0];
	              break;
	            case OPS.setFillColorSpace:
	              stateManager.state.fillColorSpace = ColorSpace.parse(args[0], xref, resources);
	              continue;
	            case OPS.setStrokeColorSpace:
	              stateManager.state.strokeColorSpace = ColorSpace.parse(args[0], xref, resources);
	              continue;
	            case OPS.setFillColor:
	              cs = stateManager.state.fillColorSpace;
	              args = cs.getRgb(args, 0);
	              fn = OPS.setFillRGBColor;
	              break;
	            case OPS.setStrokeColor:
	              cs = stateManager.state.strokeColorSpace;
	              args = cs.getRgb(args, 0);
	              fn = OPS.setStrokeRGBColor;
	              break;
	            case OPS.setFillGray:
	              stateManager.state.fillColorSpace = ColorSpace.singletons.gray;
	              args = ColorSpace.singletons.gray.getRgb(args, 0);
	              fn = OPS.setFillRGBColor;
	              break;
	            case OPS.setStrokeGray:
	              stateManager.state.strokeColorSpace = ColorSpace.singletons.gray;
	              args = ColorSpace.singletons.gray.getRgb(args, 0);
	              fn = OPS.setStrokeRGBColor;
	              break;
	            case OPS.setFillCMYKColor:
	              stateManager.state.fillColorSpace = ColorSpace.singletons.cmyk;
	              args = ColorSpace.singletons.cmyk.getRgb(args, 0);
	              fn = OPS.setFillRGBColor;
	              break;
	            case OPS.setStrokeCMYKColor:
	              stateManager.state.strokeColorSpace = ColorSpace.singletons.cmyk;
	              args = ColorSpace.singletons.cmyk.getRgb(args, 0);
	              fn = OPS.setStrokeRGBColor;
	              break;
	            case OPS.setFillRGBColor:
	              stateManager.state.fillColorSpace = ColorSpace.singletons.rgb;
	              args = ColorSpace.singletons.rgb.getRgb(args, 0);
	              break;
	            case OPS.setStrokeRGBColor:
	              stateManager.state.strokeColorSpace = ColorSpace.singletons.rgb;
	              args = ColorSpace.singletons.rgb.getRgb(args, 0);
	              break;
	            case OPS.setFillColorN:
	              cs = stateManager.state.fillColorSpace;
	              if (cs.name === 'Pattern') {
	                next(self.handleColorN(operatorList, OPS.setFillColorN, args, cs, patterns, resources, task));
	                return;
	              }
	              args = cs.getRgb(args, 0);
	              fn = OPS.setFillRGBColor;
	              break;
	            case OPS.setStrokeColorN:
	              cs = stateManager.state.strokeColorSpace;
	              if (cs.name === 'Pattern') {
	                next(self.handleColorN(operatorList, OPS.setStrokeColorN, args, cs, patterns, resources, task));
	                return;
	              }
	              args = cs.getRgb(args, 0);
	              fn = OPS.setStrokeRGBColor;
	              break;
	            case OPS.shadingFill:
	              var shadingRes = resources.get('Shading');
	              assert(shadingRes, 'No shading resource found');
	              var shading = shadingRes.get(args[0].name);
	              assert(shading, 'No shading object found');
	              var shadingFill = Pattern.parseShading(shading, null, xref, resources, self.handler);
	              var patternIR = shadingFill.getIR();
	              args = [patternIR];
	              fn = OPS.shadingFill;
	              break;
	            case OPS.setGState:
	              var dictName = args[0];
	              var extGState = resources.get('ExtGState');
	              if (!isDict(extGState) || !extGState.has(dictName.name)) {
	                break;
	              }
	              var gState = extGState.get(dictName.name);
	              next(self.setGState(resources, gState, operatorList, task, stateManager));
	              return;
	            case OPS.moveTo:
	            case OPS.lineTo:
	            case OPS.curveTo:
	            case OPS.curveTo2:
	            case OPS.curveTo3:
	            case OPS.closePath:
	              self.buildPath(operatorList, fn, args);
	              continue;
	            case OPS.rectangle:
	              self.buildPath(operatorList, fn, args);
	              continue;
	            case OPS.markPoint:
	            case OPS.markPointProps:
	            case OPS.beginMarkedContent:
	            case OPS.beginMarkedContentProps:
	            case OPS.endMarkedContent:
	            case OPS.beginCompat:
	            case OPS.endCompat:
	              continue;
	            default:
	              if (args !== null) {
	                for (i = 0, ii = args.length; i < ii; i++) {
	                  if (args[i] instanceof Dict) {
	                    break;
	                  }
	                }
	                if (i < ii) {
	                  warn('getOperatorList - ignoring operator: ' + fn);
	                  continue;
	                }
	              }
	          }
	          operatorList.addOp(fn, args);
	        }
	        if (stop) {
	          next(deferred);
	          return;
	        }
	        closePendingRestoreOPS();
	        resolve();
	      }).catch(function (reason) {
	        if (_this7.options.ignoreErrors) {
	          _this7.handler.send('UnsupportedFeature', { featureId: UNSUPPORTED_FEATURES.unknown });
	          warn('getOperatorList - ignoring errors during task: ' + task.name);
	          closePendingRestoreOPS();
	          return;
	        }
	        throw reason;
	      });
	    },
	    getTextContent: function getTextContent(_ref3) {
	      var _this8 = this;

	      var stream = _ref3.stream,
	          task = _ref3.task,
	          resources = _ref3.resources,
	          _ref3$stateManager = _ref3.stateManager,
	          stateManager = _ref3$stateManager === undefined ? null : _ref3$stateManager,
	          _ref3$normalizeWhites = _ref3.normalizeWhitespace,
	          normalizeWhitespace = _ref3$normalizeWhites === undefined ? false : _ref3$normalizeWhites,
	          _ref3$combineTextItem = _ref3.combineTextItems,
	          combineTextItems = _ref3$combineTextItem === undefined ? false : _ref3$combineTextItem;

	      resources = resources || Dict.empty;
	      stateManager = stateManager || new StateManager(new TextState());
	      var WhitespaceRegexp = /\s/g;
	      var textContent = {
	        items: [],
	        styles: Object.create(null)
	      };
	      var textContentItem = {
	        initialized: false,
	        str: [],
	        width: 0,
	        height: 0,
	        vertical: false,
	        lastAdvanceWidth: 0,
	        lastAdvanceHeight: 0,
	        textAdvanceScale: 0,
	        spaceWidth: 0,
	        fakeSpaceMin: Infinity,
	        fakeMultiSpaceMin: Infinity,
	        fakeMultiSpaceMax: -0,
	        textRunBreakAllowed: false,
	        transform: null,
	        fontName: null
	      };
	      var SPACE_FACTOR = 0.3;
	      var MULTI_SPACE_FACTOR = 1.5;
	      var MULTI_SPACE_FACTOR_MAX = 4;
	      var self = this;
	      var xref = this.xref;
	      var xobjs = null;
	      var xobjsCache = Object.create(null);
	      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
	      var textState;
	      function ensureTextContentItem() {
	        if (textContentItem.initialized) {
	          return textContentItem;
	        }
	        var font = textState.font;
	        if (!(font.loadedName in textContent.styles)) {
	          textContent.styles[font.loadedName] = {
	            fontFamily: font.fallbackName,
	            ascent: font.ascent,
	            descent: font.descent,
	            vertical: font.vertical
	          };
	        }
	        textContentItem.fontName = font.loadedName;
	        var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];
	        if (font.isType3Font && textState.fontMatrix !== FONT_IDENTITY_MATRIX && textState.fontSize === 1) {
	          var glyphHeight = font.bbox[3] - font.bbox[1];
	          if (glyphHeight > 0) {
	            glyphHeight = glyphHeight * textState.fontMatrix[3];
	            tsm[3] *= glyphHeight;
	          }
	        }
	        var trm = Util.transform(textState.ctm, Util.transform(textState.textMatrix, tsm));
	        textContentItem.transform = trm;
	        if (!font.vertical) {
	          textContentItem.width = 0;
	          textContentItem.height = Math.sqrt(trm[2] * trm[2] + trm[3] * trm[3]);
	          textContentItem.vertical = false;
	        } else {
	          textContentItem.width = Math.sqrt(trm[0] * trm[0] + trm[1] * trm[1]);
	          textContentItem.height = 0;
	          textContentItem.vertical = true;
	        }
	        var a = textState.textLineMatrix[0];
	        var b = textState.textLineMatrix[1];
	        var scaleLineX = Math.sqrt(a * a + b * b);
	        a = textState.ctm[0];
	        b = textState.ctm[1];
	        var scaleCtmX = Math.sqrt(a * a + b * b);
	        textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
	        textContentItem.lastAdvanceWidth = 0;
	        textContentItem.lastAdvanceHeight = 0;
	        var spaceWidth = font.spaceWidth / 1000 * textState.fontSize;
	        if (spaceWidth) {
	          textContentItem.spaceWidth = spaceWidth;
	          textContentItem.fakeSpaceMin = spaceWidth * SPACE_FACTOR;
	          textContentItem.fakeMultiSpaceMin = spaceWidth * MULTI_SPACE_FACTOR;
	          textContentItem.fakeMultiSpaceMax = spaceWidth * MULTI_SPACE_FACTOR_MAX;
	          textContentItem.textRunBreakAllowed = !font.isMonospace;
	        } else {
	          textContentItem.spaceWidth = 0;
	          textContentItem.fakeSpaceMin = Infinity;
	          textContentItem.fakeMultiSpaceMin = Infinity;
	          textContentItem.fakeMultiSpaceMax = 0;
	          textContentItem.textRunBreakAllowed = false;
	        }
	        textContentItem.initialized = true;
	        return textContentItem;
	      }
	      function replaceWhitespace(str) {
	        var i = 0,
	            ii = str.length,
	            code;
	        while (i < ii && (code = str.charCodeAt(i)) >= 0x20 && code <= 0x7F) {
	          i++;
	        }
	        return i < ii ? str.replace(WhitespaceRegexp, ' ') : str;
	      }
	      function runBidiTransform(textChunk) {
	        var str = textChunk.str.join('');
	        var bidiResult = bidi(str, -1, textChunk.vertical);
	        return {
	          str: normalizeWhitespace ? replaceWhitespace(bidiResult.str) : bidiResult.str,
	          dir: bidiResult.dir,
	          width: textChunk.width,
	          height: textChunk.height,
	          transform: textChunk.transform,
	          fontName: textChunk.fontName
	        };
	      }
	      function handleSetFont(fontName, fontRef) {
	        return self.loadFont(fontName, fontRef, resources).then(function (translated) {
	          textState.font = translated.font;
	          textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
	        });
	      }
	      function buildTextContentItem(chars) {
	        var font = textState.font;
	        var textChunk = ensureTextContentItem();
	        var width = 0;
	        var height = 0;
	        var glyphs = font.charsToGlyphs(chars);
	        for (var i = 0; i < glyphs.length; i++) {
	          var glyph = glyphs[i];
	          var glyphWidth = null;
	          if (font.vertical && glyph.vmetric) {
	            glyphWidth = glyph.vmetric[0];
	          } else {
	            glyphWidth = glyph.width;
	          }
	          var glyphUnicode = glyph.unicode;
	          var NormalizedUnicodes = getNormalizedUnicodes();
	          if (NormalizedUnicodes[glyphUnicode] !== undefined) {
	            glyphUnicode = NormalizedUnicodes[glyphUnicode];
	          }
	          glyphUnicode = reverseIfRtl(glyphUnicode);
	          var charSpacing = textState.charSpacing;
	          if (glyph.isSpace) {
	            var wordSpacing = textState.wordSpacing;
	            charSpacing += wordSpacing;
	            if (wordSpacing > 0) {
	              addFakeSpaces(wordSpacing, textChunk.str);
	            }
	          }
	          var tx = 0;
	          var ty = 0;
	          if (!font.vertical) {
	            var w0 = glyphWidth * textState.fontMatrix[0];
	            tx = (w0 * textState.fontSize + charSpacing) * textState.textHScale;
	            width += tx;
	          } else {
	            var w1 = glyphWidth * textState.fontMatrix[0];
	            ty = w1 * textState.fontSize + charSpacing;
	            height += ty;
	          }
	          textState.translateTextMatrix(tx, ty);
	          textChunk.str.push(glyphUnicode);
	        }
	        if (!font.vertical) {
	          textChunk.lastAdvanceWidth = width;
	          textChunk.width += width;
	        } else {
	          textChunk.lastAdvanceHeight = height;
	          textChunk.height += Math.abs(height);
	        }
	        return textChunk;
	      }
	      function addFakeSpaces(width, strBuf) {
	        if (width < textContentItem.fakeSpaceMin) {
	          return;
	        }
	        if (width < textContentItem.fakeMultiSpaceMin) {
	          strBuf.push(' ');
	          return;
	        }
	        var fakeSpaces = Math.round(width / textContentItem.spaceWidth);
	        while (fakeSpaces-- > 0) {
	          strBuf.push(' ');
	        }
	      }
	      function flushTextContentItem() {
	        if (!textContentItem.initialized) {
	          return;
	        }
	        textContentItem.width *= textContentItem.textAdvanceScale;
	        textContentItem.height *= textContentItem.textAdvanceScale;
	        textContent.items.push(runBidiTransform(textContentItem));
	        textContentItem.initialized = false;
	        textContentItem.str.length = 0;
	      }
	      var timeSlotManager = new TimeSlotManager();
	      return new Promise(function promiseBody(resolve, reject) {
	        var next = function next(promise) {
	          promise.then(function () {
	            try {
	              promiseBody(resolve, reject);
	            } catch (ex) {
	              reject(ex);
	            }
	          }, reject);
	        };
	        task.ensureNotTerminated();
	        timeSlotManager.reset();
	        var stop,
	            operation = {},
	            args = [];
	        while (!(stop = timeSlotManager.check())) {
	          args.length = 0;
	          operation.args = args;
	          if (!preprocessor.read(operation)) {
	            break;
	          }
	          textState = stateManager.state;
	          var fn = operation.fn;
	          args = operation.args;
	          var advance, diff;
	          switch (fn | 0) {
	            case OPS.setFont:
	              var fontNameArg = args[0].name,
	                  fontSizeArg = args[1];
	              if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {
	                break;
	              }
	              flushTextContentItem();
	              textState.fontName = fontNameArg;
	              textState.fontSize = fontSizeArg;
	              next(handleSetFont(fontNameArg, null));
	              return;
	            case OPS.setTextRise:
	              flushTextContentItem();
	              textState.textRise = args[0];
	              break;
	            case OPS.setHScale:
	              flushTextContentItem();
	              textState.textHScale = args[0] / 100;
	              break;
	            case OPS.setLeading:
	              flushTextContentItem();
	              textState.leading = args[0];
	              break;
	            case OPS.moveText:
	              var isSameTextLine = !textState.font ? false : (textState.font.vertical ? args[0] : args[1]) === 0;
	              advance = args[0] - args[1];
	              if (combineTextItems && isSameTextLine && textContentItem.initialized && advance > 0 && advance <= textContentItem.fakeMultiSpaceMax) {
	                textState.translateTextLineMatrix(args[0], args[1]);
	                textContentItem.width += args[0] - textContentItem.lastAdvanceWidth;
	                textContentItem.height += args[1] - textContentItem.lastAdvanceHeight;
	                diff = args[0] - textContentItem.lastAdvanceWidth - (args[1] - textContentItem.lastAdvanceHeight);
	                addFakeSpaces(diff, textContentItem.str);
	                break;
	              }
	              flushTextContentItem();
	              textState.translateTextLineMatrix(args[0], args[1]);
	              textState.textMatrix = textState.textLineMatrix.slice();
	              break;
	            case OPS.setLeadingMoveText:
	              flushTextContentItem();
	              textState.leading = -args[1];
	              textState.translateTextLineMatrix(args[0], args[1]);
	              textState.textMatrix = textState.textLineMatrix.slice();
	              break;
	            case OPS.nextLine:
	              flushTextContentItem();
	              textState.carriageReturn();
	              break;
	            case OPS.setTextMatrix:
	              advance = textState.calcTextLineMatrixAdvance(args[0], args[1], args[2], args[3], args[4], args[5]);
	              if (combineTextItems && advance !== null && textContentItem.initialized && advance.value > 0 && advance.value <= textContentItem.fakeMultiSpaceMax) {
	                textState.translateTextLineMatrix(advance.width, advance.height);
	                textContentItem.width += advance.width - textContentItem.lastAdvanceWidth;
	                textContentItem.height += advance.height - textContentItem.lastAdvanceHeight;
	                diff = advance.width - textContentItem.lastAdvanceWidth - (advance.height - textContentItem.lastAdvanceHeight);
	                addFakeSpaces(diff, textContentItem.str);
	                break;
	              }
	              flushTextContentItem();
	              textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
	              textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
	              break;
	            case OPS.setCharSpacing:
	              textState.charSpacing = args[0];
	              break;
	            case OPS.setWordSpacing:
	              textState.wordSpacing = args[0];
	              break;
	            case OPS.beginText:
	              flushTextContentItem();
	              textState.textMatrix = IDENTITY_MATRIX.slice();
	              textState.textLineMatrix = IDENTITY_MATRIX.slice();
	              break;
	            case OPS.showSpacedText:
	              var items = args[0];
	              var offset;
	              for (var j = 0, jj = items.length; j < jj; j++) {
	                if (typeof items[j] === 'string') {
	                  buildTextContentItem(items[j]);
	                } else if (isNum(items[j])) {
	                  ensureTextContentItem();
	                  advance = items[j] * textState.fontSize / 1000;
	                  var breakTextRun = false;
	                  if (textState.font.vertical) {
	                    offset = advance;
	                    textState.translateTextMatrix(0, offset);
	                    breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;
	                    if (!breakTextRun) {
	                      textContentItem.height += offset;
	                    }
	                  } else {
	                    advance = -advance;
	                    offset = advance * textState.textHScale;
	                    textState.translateTextMatrix(offset, 0);
	                    breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;
	                    if (!breakTextRun) {
	                      textContentItem.width += offset;
	                    }
	                  }
	                  if (breakTextRun) {
	                    flushTextContentItem();
	                  } else if (advance > 0) {
	                    addFakeSpaces(advance, textContentItem.str);
	                  }
	                }
	              }
	              break;
	            case OPS.showText:
	              buildTextContentItem(args[0]);
	              break;
	            case OPS.nextLineShowText:
	              flushTextContentItem();
	              textState.carriageReturn();
	              buildTextContentItem(args[0]);
	              break;
	            case OPS.nextLineSetSpacingShowText:
	              flushTextContentItem();
	              textState.wordSpacing = args[0];
	              textState.charSpacing = args[1];
	              textState.carriageReturn();
	              buildTextContentItem(args[2]);
	              break;
	            case OPS.paintXObject:
	              flushTextContentItem();
	              if (args[0].code) {
	                break;
	              }
	              if (!xobjs) {
	                xobjs = resources.get('XObject') || Dict.empty;
	              }
	              var name = args[0].name;
	              if (xobjsCache.key === name) {
	                if (xobjsCache.texts) {
	                  Util.appendToArray(textContent.items, xobjsCache.texts.items);
	                  Util.extendObj(textContent.styles, xobjsCache.texts.styles);
	                }
	                break;
	              }
	              var xobj = xobjs.get(name);
	              if (!xobj) {
	                break;
	              }
	              assert(isStream(xobj), 'XObject should be a stream');
	              var type = xobj.dict.get('Subtype');
	              assert(isName(type), 'XObject should have a Name subtype');
	              if (type.name !== 'Form') {
	                xobjsCache.key = name;
	                xobjsCache.texts = null;
	                break;
	              }
	              var currentState = stateManager.state.clone();
	              var xObjStateManager = new StateManager(currentState);
	              var matrix = xobj.dict.getArray('Matrix');
	              if (isArray(matrix) && matrix.length === 6) {
	                xObjStateManager.transform(matrix);
	              }
	              next(self.getTextContent({
	                stream: xobj,
	                task: task,
	                resources: xobj.dict.get('Resources') || resources,
	                stateManager: xObjStateManager,
	                normalizeWhitespace: normalizeWhitespace,
	                combineTextItems: combineTextItems
	              }).then(function (formTextContent) {
	                Util.appendToArray(textContent.items, formTextContent.items);
	                Util.extendObj(textContent.styles, formTextContent.styles);
	                xobjsCache.key = name;
	                xobjsCache.texts = formTextContent;
	              }));
	              return;
	            case OPS.setGState:
	              flushTextContentItem();
	              var dictName = args[0];
	              var extGState = resources.get('ExtGState');
	              if (!isDict(extGState) || !isName(dictName)) {
	                break;
	              }
	              var gState = extGState.get(dictName.name);
	              if (!isDict(gState)) {
	                break;
	              }
	              var gStateFont = gState.get('Font');
	              if (gStateFont) {
	                textState.fontName = null;
	                textState.fontSize = gStateFont[1];
	                next(handleSetFont(null, gStateFont[0]));
	                return;
	              }
	              break;
	          }
	        }
	        if (stop) {
	          next(deferred);
	          return;
	        }
	        flushTextContentItem();
	        resolve(textContent);
	      }).catch(function (reason) {
	        if (_this8.options.ignoreErrors) {
	          warn('getTextContent - ignoring errors during task: ' + task.name);
	          flushTextContentItem();
	          return textContent;
	        }
	        throw reason;
	      });
	    },

	    extractDataStructures: function PartialEvaluator_extractDataStructures(dict, baseDict, properties) {
	      var _this9 = this;

	      var xref = this.xref;
	      var toUnicode = dict.get('ToUnicode') || baseDict.get('ToUnicode');
	      var toUnicodePromise = toUnicode ? this.readToUnicode(toUnicode) : Promise.resolve(undefined);
	      if (properties.composite) {
	        var cidSystemInfo = dict.get('CIDSystemInfo');
	        if (isDict(cidSystemInfo)) {
	          properties.cidSystemInfo = {
	            registry: cidSystemInfo.get('Registry'),
	            ordering: cidSystemInfo.get('Ordering'),
	            supplement: cidSystemInfo.get('Supplement')
	          };
	        }
	        var cidToGidMap = dict.get('CIDToGIDMap');
	        if (isStream(cidToGidMap)) {
	          properties.cidToGidMap = this.readCidToGidMap(cidToGidMap);
	        }
	      }
	      var differences = [];
	      var baseEncodingName = null;
	      var encoding;
	      if (dict.has('Encoding')) {
	        encoding = dict.get('Encoding');
	        if (isDict(encoding)) {
	          baseEncodingName = encoding.get('BaseEncoding');
	          baseEncodingName = isName(baseEncodingName) ? baseEncodingName.name : null;
	          if (encoding.has('Differences')) {
	            var diffEncoding = encoding.get('Differences');
	            var index = 0;
	            for (var j = 0, jj = diffEncoding.length; j < jj; j++) {
	              var data = xref.fetchIfRef(diffEncoding[j]);
	              if (isNum(data)) {
	                index = data;
	              } else if (isName(data)) {
	                differences[index++] = data.name;
	              } else {
	                error('Invalid entry in \'Differences\' array: ' + data);
	              }
	            }
	          }
	        } else if (isName(encoding)) {
	          baseEncodingName = encoding.name;
	        } else {
	          error('Encoding is not a Name nor a Dict');
	        }
	        if (baseEncodingName !== 'MacRomanEncoding' && baseEncodingName !== 'MacExpertEncoding' && baseEncodingName !== 'WinAnsiEncoding') {
	          baseEncodingName = null;
	        }
	      }
	      if (baseEncodingName) {
	        properties.defaultEncoding = getEncoding(baseEncodingName).slice();
	      } else {
	        var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
	        var isNonsymbolicFont = !!(properties.flags & FontFlags.Nonsymbolic);
	        encoding = StandardEncoding;
	        if (properties.type === 'TrueType' && !isNonsymbolicFont) {
	          encoding = WinAnsiEncoding;
	        }
	        if (isSymbolicFont) {
	          encoding = MacRomanEncoding;
	          if (!properties.file) {
	            if (/Symbol/i.test(properties.name)) {
	              encoding = SymbolSetEncoding;
	            } else if (/Dingbats/i.test(properties.name)) {
	              encoding = ZapfDingbatsEncoding;
	            }
	          }
	        }
	        properties.defaultEncoding = encoding;
	      }
	      properties.differences = differences;
	      properties.baseEncodingName = baseEncodingName;
	      properties.hasEncoding = !!baseEncodingName || differences.length > 0;
	      properties.dict = dict;
	      return toUnicodePromise.then(function (toUnicode) {
	        properties.toUnicode = toUnicode;
	        return _this9.buildToUnicode(properties);
	      }).then(function (toUnicode) {
	        properties.toUnicode = toUnicode;
	        return properties;
	      });
	    },
	    buildToUnicode: function PartialEvaluator_buildToUnicode(properties) {
	      properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;
	      if (properties.hasIncludedToUnicodeMap) {
	        return Promise.resolve(properties.toUnicode);
	      }
	      var toUnicode, charcode, glyphName;
	      if (!properties.composite) {
	        toUnicode = [];
	        var encoding = properties.defaultEncoding.slice();
	        var baseEncodingName = properties.baseEncodingName;
	        var differences = properties.differences;
	        for (charcode in differences) {
	          glyphName = differences[charcode];
	          if (glyphName === '.notdef') {
	            continue;
	          }
	          encoding[charcode] = glyphName;
	        }
	        var glyphsUnicodeMap = getGlyphsUnicode();
	        for (charcode in encoding) {
	          glyphName = encoding[charcode];
	          if (glyphName === '') {
	            continue;
	          } else if (glyphsUnicodeMap[glyphName] === undefined) {
	            var code = 0;
	            switch (glyphName[0]) {
	              case 'G':
	                if (glyphName.length === 3) {
	                  code = parseInt(glyphName.substr(1), 16);
	                }
	                break;
	              case 'g':
	                if (glyphName.length === 5) {
	                  code = parseInt(glyphName.substr(1), 16);
	                }
	                break;
	              case 'C':
	              case 'c':
	                if (glyphName.length >= 3) {
	                  code = +glyphName.substr(1);
	                }
	                break;
	              default:
	                var unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
	                if (unicode !== -1) {
	                  code = unicode;
	                }
	            }
	            if (code) {
	              if (baseEncodingName && code === +charcode) {
	                var baseEncoding = getEncoding(baseEncodingName);
	                if (baseEncoding && (glyphName = baseEncoding[charcode])) {
	                  toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);
	                  continue;
	                }
	              }
	              toUnicode[charcode] = String.fromCharCode(code);
	            }
	            continue;
	          }
	          toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);
	        }
	        return Promise.resolve(new ToUnicodeMap(toUnicode));
	      }
	      if (properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof IdentityCMap) || properties.cidSystemInfo.registry === 'Adobe' && (properties.cidSystemInfo.ordering === 'GB1' || properties.cidSystemInfo.ordering === 'CNS1' || properties.cidSystemInfo.ordering === 'Japan1' || properties.cidSystemInfo.ordering === 'Korea1'))) {
	        var registry = properties.cidSystemInfo.registry;
	        var ordering = properties.cidSystemInfo.ordering;
	        var ucs2CMapName = Name.get(registry + '-' + ordering + '-UCS2');
	        return CMapFactory.create({
	          encoding: ucs2CMapName,
	          fetchBuiltInCMap: this.fetchBuiltInCMap,
	          useCMap: null
	        }).then(function (ucs2CMap) {
	          var cMap = properties.cMap;
	          toUnicode = [];
	          cMap.forEach(function (charcode, cid) {
	            assert(cid <= 0xffff, 'Max size of CID is 65,535');
	            var ucs2 = ucs2CMap.lookup(cid);
	            if (ucs2) {
	              toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));
	            }
	          });
	          return new ToUnicodeMap(toUnicode);
	        });
	      }
	      return Promise.resolve(new IdentityToUnicodeMap(properties.firstChar, properties.lastChar));
	    },
	    readToUnicode: function PartialEvaluator_readToUnicode(toUnicode) {
	      var cmapObj = toUnicode;
	      if (isName(cmapObj)) {
	        return CMapFactory.create({
	          encoding: cmapObj,
	          fetchBuiltInCMap: this.fetchBuiltInCMap,
	          useCMap: null
	        }).then(function (cmap) {
	          if (cmap instanceof IdentityCMap) {
	            return new IdentityToUnicodeMap(0, 0xFFFF);
	          }
	          return new ToUnicodeMap(cmap.getMap());
	        });
	      } else if (isStream(cmapObj)) {
	        return CMapFactory.create({
	          encoding: cmapObj,
	          fetchBuiltInCMap: this.fetchBuiltInCMap,
	          useCMap: null
	        }).then(function (cmap) {
	          if (cmap instanceof IdentityCMap) {
	            return new IdentityToUnicodeMap(0, 0xFFFF);
	          }
	          var map = new Array(cmap.length);
	          cmap.forEach(function (charCode, token) {
	            var str = [];
	            for (var k = 0; k < token.length; k += 2) {
	              var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);
	              if ((w1 & 0xF800) !== 0xD800) {
	                str.push(w1);
	                continue;
	              }
	              k += 2;
	              var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);
	              str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);
	            }
	            map[charCode] = String.fromCharCode.apply(String, str);
	          });
	          return new ToUnicodeMap(map);
	        });
	      }
	      return Promise.resolve(null);
	    },
	    readCidToGidMap: function PartialEvaluator_readCidToGidMap(cidToGidStream) {
	      var glyphsData = cidToGidStream.getBytes();
	      var result = [];
	      for (var j = 0, jj = glyphsData.length; j < jj; j++) {
	        var glyphID = glyphsData[j++] << 8 | glyphsData[j];
	        if (glyphID === 0) {
	          continue;
	        }
	        var code = j >> 1;
	        result[code] = glyphID;
	      }
	      return result;
	    },
	    extractWidths: function PartialEvaluator_extractWidths(dict, descriptor, properties) {
	      var xref = this.xref;
	      var glyphsWidths = [];
	      var defaultWidth = 0;
	      var glyphsVMetrics = [];
	      var defaultVMetrics;
	      var i, ii, j, jj, start, code, widths;
	      if (properties.composite) {
	        defaultWidth = dict.get('DW') || 1000;
	        widths = dict.get('W');
	        if (widths) {
	          for (i = 0, ii = widths.length; i < ii; i++) {
	            start = xref.fetchIfRef(widths[i++]);
	            code = xref.fetchIfRef(widths[i]);
	            if (isArray(code)) {
	              for (j = 0, jj = code.length; j < jj; j++) {
	                glyphsWidths[start++] = xref.fetchIfRef(code[j]);
	              }
	            } else {
	              var width = xref.fetchIfRef(widths[++i]);
	              for (j = start; j <= code; j++) {
	                glyphsWidths[j] = width;
	              }
	            }
	          }
	        }
	        if (properties.vertical) {
	          var vmetrics = dict.getArray('DW2') || [880, -1000];
	          defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];
	          vmetrics = dict.get('W2');
	          if (vmetrics) {
	            for (i = 0, ii = vmetrics.length; i < ii; i++) {
	              start = xref.fetchIfRef(vmetrics[i++]);
	              code = xref.fetchIfRef(vmetrics[i]);
	              if (isArray(code)) {
	                for (j = 0, jj = code.length; j < jj; j++) {
	                  glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];
	                }
	              } else {
	                var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];
	                for (j = start; j <= code; j++) {
	                  glyphsVMetrics[j] = vmetric;
	                }
	              }
	            }
	          }
	        }
	      } else {
	        var firstChar = properties.firstChar;
	        widths = dict.get('Widths');
	        if (widths) {
	          j = firstChar;
	          for (i = 0, ii = widths.length; i < ii; i++) {
	            glyphsWidths[j++] = xref.fetchIfRef(widths[i]);
	          }
	          defaultWidth = parseFloat(descriptor.get('MissingWidth')) || 0;
	        } else {
	          var baseFontName = dict.get('BaseFont');
	          if (isName(baseFontName)) {
	            var metrics = this.getBaseFontMetrics(baseFontName.name);
	            glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);
	            defaultWidth = metrics.defaultWidth;
	          }
	        }
	      }
	      var isMonospace = true;
	      var firstWidth = defaultWidth;
	      for (var glyph in glyphsWidths) {
	        var glyphWidth = glyphsWidths[glyph];
	        if (!glyphWidth) {
	          continue;
	        }
	        if (!firstWidth) {
	          firstWidth = glyphWidth;
	          continue;
	        }
	        if (firstWidth !== glyphWidth) {
	          isMonospace = false;
	          break;
	        }
	      }
	      if (isMonospace) {
	        properties.flags |= FontFlags.FixedPitch;
	      }
	      properties.defaultWidth = defaultWidth;
	      properties.widths = glyphsWidths;
	      properties.defaultVMetrics = defaultVMetrics;
	      properties.vmetrics = glyphsVMetrics;
	    },
	    isSerifFont: function PartialEvaluator_isSerifFont(baseFontName) {
	      var fontNameWoStyle = baseFontName.split('-')[0];
	      return fontNameWoStyle in getSerifFonts() || fontNameWoStyle.search(/serif/gi) !== -1;
	    },
	    getBaseFontMetrics: function PartialEvaluator_getBaseFontMetrics(name) {
	      var defaultWidth = 0;
	      var widths = [];
	      var monospace = false;
	      var stdFontMap = getStdFontMap();
	      var lookupName = stdFontMap[name] || name;
	      var Metrics = getMetrics();
	      if (!(lookupName in Metrics)) {
	        if (this.isSerifFont(name)) {
	          lookupName = 'Times-Roman';
	        } else {
	          lookupName = 'Helvetica';
	        }
	      }
	      var glyphWidths = Metrics[lookupName];
	      if (isNum(glyphWidths)) {
	        defaultWidth = glyphWidths;
	        monospace = true;
	      } else {
	        widths = glyphWidths();
	      }
	      return {
	        defaultWidth: defaultWidth,
	        monospace: monospace,
	        widths: widths
	      };
	    },
	    buildCharCodeToWidth: function PartialEvaluator_bulildCharCodeToWidth(widthsByGlyphName, properties) {
	      var widths = Object.create(null);
	      var differences = properties.differences;
	      var encoding = properties.defaultEncoding;
	      for (var charCode = 0; charCode < 256; charCode++) {
	        if (charCode in differences && widthsByGlyphName[differences[charCode]]) {
	          widths[charCode] = widthsByGlyphName[differences[charCode]];
	          continue;
	        }
	        if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {
	          widths[charCode] = widthsByGlyphName[encoding[charCode]];
	          continue;
	        }
	      }
	      return widths;
	    },
	    preEvaluateFont: function PartialEvaluator_preEvaluateFont(dict) {
	      var baseDict = dict;
	      var type = dict.get('Subtype');
	      assert(isName(type), 'invalid font Subtype');
	      var composite = false;
	      var uint8array;
	      if (type.name === 'Type0') {
	        var df = dict.get('DescendantFonts');
	        assert(df, 'Descendant fonts are not specified');
	        dict = isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
	        type = dict.get('Subtype');
	        assert(isName(type), 'invalid font Subtype');
	        composite = true;
	      }
	      var descriptor = dict.get('FontDescriptor');
	      if (descriptor) {
	        var hash = new MurmurHash3_64();
	        var encoding = baseDict.getRaw('Encoding');
	        if (isName(encoding)) {
	          hash.update(encoding.name);
	        } else if (isRef(encoding)) {
	          hash.update(encoding.toString());
	        } else if (isDict(encoding)) {
	          var keys = encoding.getKeys();
	          for (var i = 0, ii = keys.length; i < ii; i++) {
	            var entry = encoding.getRaw(keys[i]);
	            if (isName(entry)) {
	              hash.update(entry.name);
	            } else if (isRef(entry)) {
	              hash.update(entry.toString());
	            } else if (isArray(entry)) {
	              var diffLength = entry.length,
	                  diffBuf = new Array(diffLength);
	              for (var j = 0; j < diffLength; j++) {
	                var diffEntry = entry[j];
	                if (isName(diffEntry)) {
	                  diffBuf[j] = diffEntry.name;
	                } else if (isNum(diffEntry) || isRef(diffEntry)) {
	                  diffBuf[j] = diffEntry.toString();
	                }
	              }
	              hash.update(diffBuf.join());
	            }
	          }
	        }
	        var toUnicode = dict.get('ToUnicode') || baseDict.get('ToUnicode');
	        if (isStream(toUnicode)) {
	          var stream = toUnicode.str || toUnicode;
	          uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);
	          hash.update(uint8array);
	        } else if (isName(toUnicode)) {
	          hash.update(toUnicode.name);
	        }
	        var widths = dict.get('Widths') || baseDict.get('Widths');
	        if (widths) {
	          uint8array = new Uint8Array(new Uint32Array(widths).buffer);
	          hash.update(uint8array);
	        }
	      }
	      return {
	        descriptor: descriptor,
	        dict: dict,
	        baseDict: baseDict,
	        composite: composite,
	        type: type.name,
	        hash: hash ? hash.hexdigest() : ''
	      };
	    },
	    translateFont: function PartialEvaluator_translateFont(preEvaluatedFont) {
	      var _this10 = this;

	      var baseDict = preEvaluatedFont.baseDict;
	      var dict = preEvaluatedFont.dict;
	      var composite = preEvaluatedFont.composite;
	      var descriptor = preEvaluatedFont.descriptor;
	      var type = preEvaluatedFont.type;
	      var maxCharIndex = composite ? 0xFFFF : 0xFF;
	      var properties;
	      if (!descriptor) {
	        if (type === 'Type3') {
	          descriptor = new Dict(null);
	          descriptor.set('FontName', Name.get(type));
	          descriptor.set('FontBBox', dict.getArray('FontBBox'));
	        } else {
	          var baseFontName = dict.get('BaseFont');
	          assert(isName(baseFontName), 'Base font is not specified');
	          baseFontName = baseFontName.name.replace(/[,_]/g, '-');
	          var metrics = this.getBaseFontMetrics(baseFontName);
	          var fontNameWoStyle = baseFontName.split('-')[0];
	          var flags = (this.isSerifFont(fontNameWoStyle) ? FontFlags.Serif : 0) | (metrics.monospace ? FontFlags.FixedPitch : 0) | (getSymbolsFonts()[fontNameWoStyle] ? FontFlags.Symbolic : FontFlags.Nonsymbolic);
	          properties = {
	            type: type,
	            name: baseFontName,
	            widths: metrics.widths,
	            defaultWidth: metrics.defaultWidth,
	            flags: flags,
	            firstChar: 0,
	            lastChar: maxCharIndex
	          };
	          return this.extractDataStructures(dict, dict, properties).then(function (properties) {
	            properties.widths = _this10.buildCharCodeToWidth(metrics.widths, properties);
	            return new Font(baseFontName, null, properties);
	          });
	        }
	      }
	      var firstChar = dict.get('FirstChar') || 0;
	      var lastChar = dict.get('LastChar') || maxCharIndex;
	      var fontName = descriptor.get('FontName');
	      var baseFont = dict.get('BaseFont');
	      if (isString(fontName)) {
	        fontName = Name.get(fontName);
	      }
	      if (isString(baseFont)) {
	        baseFont = Name.get(baseFont);
	      }
	      if (type !== 'Type3') {
	        var fontNameStr = fontName && fontName.name;
	        var baseFontStr = baseFont && baseFont.name;
	        if (fontNameStr !== baseFontStr) {
	          info('The FontDescriptor\'s FontName is "' + fontNameStr + '" but should be the same as the Font\'s BaseFont "' + baseFontStr + '"');
	          if (fontNameStr && baseFontStr && baseFontStr.indexOf(fontNameStr) === 0) {
	            fontName = baseFont;
	          }
	        }
	      }
	      fontName = fontName || baseFont;
	      assert(isName(fontName), 'invalid font name');
	      var fontFile = descriptor.get('FontFile', 'FontFile2', 'FontFile3');
	      if (fontFile) {
	        if (fontFile.dict) {
	          var subtype = fontFile.dict.get('Subtype');
	          if (subtype) {
	            subtype = subtype.name;
	          }
	          var length1 = fontFile.dict.get('Length1');
	          var length2 = fontFile.dict.get('Length2');
	          var length3 = fontFile.dict.get('Length3');
	        }
	      }
	      properties = {
	        type: type,
	        name: fontName.name,
	        subtype: subtype,
	        file: fontFile,
	        length1: length1,
	        length2: length2,
	        length3: length3,
	        loadedName: baseDict.loadedName,
	        composite: composite,
	        wideChars: composite,
	        fixedPitch: false,
	        fontMatrix: dict.getArray('FontMatrix') || FONT_IDENTITY_MATRIX,
	        firstChar: firstChar || 0,
	        lastChar: lastChar || maxCharIndex,
	        bbox: descriptor.getArray('FontBBox'),
	        ascent: descriptor.get('Ascent'),
	        descent: descriptor.get('Descent'),
	        xHeight: descriptor.get('XHeight'),
	        capHeight: descriptor.get('CapHeight'),
	        flags: descriptor.get('Flags'),
	        italicAngle: descriptor.get('ItalicAngle'),
	        coded: false
	      };
	      var cMapPromise;
	      if (composite) {
	        var cidEncoding = baseDict.get('Encoding');
	        if (isName(cidEncoding)) {
	          properties.cidEncoding = cidEncoding.name;
	        }
	        cMapPromise = CMapFactory.create({
	          encoding: cidEncoding,
	          fetchBuiltInCMap: this.fetchBuiltInCMap,
	          useCMap: null
	        }).then(function (cMap) {
	          properties.cMap = cMap;
	          properties.vertical = properties.cMap.vertical;
	        });
	      } else {
	        cMapPromise = Promise.resolve(undefined);
	      }
	      return cMapPromise.then(function () {
	        return _this10.extractDataStructures(dict, baseDict, properties);
	      }).then(function (properties) {
	        _this10.extractWidths(dict, descriptor, properties);
	        if (type === 'Type3') {
	          properties.isType3Font = true;
	        }
	        return new Font(fontName.name, fontFile, properties);
	      });
	    }
	  };
	  return PartialEvaluator;
	}();
	var TranslatedFont = function TranslatedFontClosure() {
	  function TranslatedFont(loadedName, font, dict) {
	    this.loadedName = loadedName;
	    this.font = font;
	    this.dict = dict;
	    this.type3Loaded = null;
	    this.sent = false;
	  }
	  TranslatedFont.prototype = {
	    send: function send(handler) {
	      if (this.sent) {
	        return;
	      }
	      var fontData = this.font.exportData();
	      handler.send('commonobj', [this.loadedName, 'Font', fontData]);
	      this.sent = true;
	    },
	    loadType3Data: function loadType3Data(evaluator, resources, parentOperatorList, task) {
	      assert(this.font.isType3Font);
	      if (this.type3Loaded) {
	        return this.type3Loaded;
	      }
	      var type3Options = Object.create(evaluator.options);
	      type3Options.ignoreErrors = false;
	      var type3Evaluator = evaluator.clone(type3Options);
	      var translatedFont = this.font;
	      var loadCharProcsPromise = Promise.resolve();
	      var charProcs = this.dict.get('CharProcs');
	      var fontResources = this.dict.get('Resources') || resources;
	      var charProcKeys = charProcs.getKeys();
	      var charProcOperatorList = Object.create(null);

	      var _loop2 = function _loop2() {
	        var key = charProcKeys[i];
	        loadCharProcsPromise = loadCharProcsPromise.then(function () {
	          var glyphStream = charProcs.get(key);
	          var operatorList = new OperatorList();
	          return type3Evaluator.getOperatorList({
	            stream: glyphStream,
	            task: task,
	            resources: fontResources,
	            operatorList: operatorList
	          }).then(function () {
	            charProcOperatorList[key] = operatorList.getIR();
	            parentOperatorList.addDependencies(operatorList.dependencies);
	          }).catch(function (reason) {
	            warn('Type3 font resource "' + key + '" is not available.');
	            var operatorList = new OperatorList();
	            charProcOperatorList[key] = operatorList.getIR();
	          });
	        });
	      };

	      for (var i = 0, n = charProcKeys.length; i < n; ++i) {
	        _loop2();
	      }
	      this.type3Loaded = loadCharProcsPromise.then(function () {
	        translatedFont.charProcOperatorList = charProcOperatorList;
	      });
	      return this.type3Loaded;
	    }
	  };
	  return TranslatedFont;
	}();
	var OperatorList = function OperatorListClosure() {
	  var CHUNK_SIZE = 1000;
	  var CHUNK_SIZE_ABOUT = CHUNK_SIZE - 5;
	  function getTransfers(queue) {
	    var transfers = [];
	    var fnArray = queue.fnArray,
	        argsArray = queue.argsArray;
	    for (var i = 0, ii = queue.length; i < ii; i++) {
	      switch (fnArray[i]) {
	        case OPS.paintInlineImageXObject:
	        case OPS.paintInlineImageXObjectGroup:
	        case OPS.paintImageMaskXObject:
	          var arg = argsArray[i][0];
	          if (!arg.cached) {
	            transfers.push(arg.data.buffer);
	          }
	          break;
	      }
	    }
	    return transfers;
	  }
	  function OperatorList(intent, messageHandler, pageIndex) {
	    this.messageHandler = messageHandler;
	    this.fnArray = [];
	    this.argsArray = [];
	    this.dependencies = Object.create(null);
	    this._totalLength = 0;
	    this.pageIndex = pageIndex;
	    this.intent = intent;
	  }
	  OperatorList.prototype = {
	    get length() {
	      return this.argsArray.length;
	    },
	    get totalLength() {
	      return this._totalLength + this.length;
	    },
	    addOp: function addOp(fn, args) {
	      this.fnArray.push(fn);
	      this.argsArray.push(args);
	      if (this.messageHandler) {
	        if (this.fnArray.length >= CHUNK_SIZE) {
	          this.flush();
	        } else if (this.fnArray.length >= CHUNK_SIZE_ABOUT && (fn === OPS.restore || fn === OPS.endText)) {
	          this.flush();
	        }
	      }
	    },
	    addDependency: function addDependency(dependency) {
	      if (dependency in this.dependencies) {
	        return;
	      }
	      this.dependencies[dependency] = true;
	      this.addOp(OPS.dependency, [dependency]);
	    },
	    addDependencies: function addDependencies(dependencies) {
	      for (var key in dependencies) {
	        this.addDependency(key);
	      }
	    },
	    addOpList: function addOpList(opList) {
	      Util.extendObj(this.dependencies, opList.dependencies);
	      for (var i = 0, ii = opList.length; i < ii; i++) {
	        this.addOp(opList.fnArray[i], opList.argsArray[i]);
	      }
	    },
	    getIR: function getIR() {
	      return {
	        fnArray: this.fnArray,
	        argsArray: this.argsArray,
	        length: this.length
	      };
	    },
	    flush: function flush(lastChunk) {
	      if (this.intent !== 'oplist') {
	        new QueueOptimizer().optimize(this);
	      }
	      var transfers = getTransfers(this);
	      var length = this.length;
	      this._totalLength += length;
	      this.messageHandler.send('RenderPageChunk', {
	        operatorList: {
	          fnArray: this.fnArray,
	          argsArray: this.argsArray,
	          lastChunk: lastChunk,
	          length: length
	        },
	        pageIndex: this.pageIndex,
	        intent: this.intent
	      }, transfers);
	      this.dependencies = Object.create(null);
	      this.fnArray.length = 0;
	      this.argsArray.length = 0;
	    }
	  };
	  return OperatorList;
	}();
	var StateManager = function StateManagerClosure() {
	  function StateManager(initialState) {
	    this.state = initialState;
	    this.stateStack = [];
	  }
	  StateManager.prototype = {
	    save: function save() {
	      var old = this.state;
	      this.stateStack.push(this.state);
	      this.state = old.clone();
	    },
	    restore: function restore() {
	      var prev = this.stateStack.pop();
	      if (prev) {
	        this.state = prev;
	      }
	    },
	    transform: function transform(args) {
	      this.state.ctm = Util.transform(this.state.ctm, args);
	    }
	  };
	  return StateManager;
	}();
	var TextState = function TextStateClosure() {
	  function TextState() {
	    this.ctm = new Float32Array(IDENTITY_MATRIX);
	    this.fontName = null;
	    this.fontSize = 0;
	    this.font = null;
	    this.fontMatrix = FONT_IDENTITY_MATRIX;
	    this.textMatrix = IDENTITY_MATRIX.slice();
	    this.textLineMatrix = IDENTITY_MATRIX.slice();
	    this.charSpacing = 0;
	    this.wordSpacing = 0;
	    this.leading = 0;
	    this.textHScale = 1;
	    this.textRise = 0;
	  }
	  TextState.prototype = {
	    setTextMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {
	      var m = this.textMatrix;
	      m[0] = a;
	      m[1] = b;
	      m[2] = c;
	      m[3] = d;
	      m[4] = e;
	      m[5] = f;
	    },
	    setTextLineMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {
	      var m = this.textLineMatrix;
	      m[0] = a;
	      m[1] = b;
	      m[2] = c;
	      m[3] = d;
	      m[4] = e;
	      m[5] = f;
	    },
	    translateTextMatrix: function TextState_translateTextMatrix(x, y) {
	      var m = this.textMatrix;
	      m[4] = m[0] * x + m[2] * y + m[4];
	      m[5] = m[1] * x + m[3] * y + m[5];
	    },
	    translateTextLineMatrix: function TextState_translateTextMatrix(x, y) {
	      var m = this.textLineMatrix;
	      m[4] = m[0] * x + m[2] * y + m[4];
	      m[5] = m[1] * x + m[3] * y + m[5];
	    },
	    calcTextLineMatrixAdvance: function TextState_calcTextLineMatrixAdvance(a, b, c, d, e, f) {
	      var font = this.font;
	      if (!font) {
	        return null;
	      }
	      var m = this.textLineMatrix;
	      if (!(a === m[0] && b === m[1] && c === m[2] && d === m[3])) {
	        return null;
	      }
	      var txDiff = e - m[4],
	          tyDiff = f - m[5];
	      if (font.vertical && txDiff !== 0 || !font.vertical && tyDiff !== 0) {
	        return null;
	      }
	      var tx,
	          ty,
	          denominator = a * d - b * c;
	      if (font.vertical) {
	        tx = -tyDiff * c / denominator;
	        ty = tyDiff * a / denominator;
	      } else {
	        tx = txDiff * d / denominator;
	        ty = -txDiff * b / denominator;
	      }
	      return {
	        width: tx,
	        height: ty,
	        value: font.vertical ? ty : tx
	      };
	    },
	    calcRenderMatrix: function TextState_calcRendeMatrix(ctm) {
	      var tsm = [this.fontSize * this.textHScale, 0, 0, this.fontSize, 0, this.textRise];
	      return Util.transform(ctm, Util.transform(this.textMatrix, tsm));
	    },
	    carriageReturn: function TextState_carriageReturn() {
	      this.translateTextLineMatrix(0, -this.leading);
	      this.textMatrix = this.textLineMatrix.slice();
	    },
	    clone: function TextState_clone() {
	      var clone = Object.create(this);
	      clone.textMatrix = this.textMatrix.slice();
	      clone.textLineMatrix = this.textLineMatrix.slice();
	      clone.fontMatrix = this.fontMatrix.slice();
	      return clone;
	    }
	  };
	  return TextState;
	}();
	var EvalState = function EvalStateClosure() {
	  function EvalState() {
	    this.ctm = new Float32Array(IDENTITY_MATRIX);
	    this.font = null;
	    this.textRenderingMode = TextRenderingMode.FILL;
	    this.fillColorSpace = ColorSpace.singletons.gray;
	    this.strokeColorSpace = ColorSpace.singletons.gray;
	  }
	  EvalState.prototype = {
	    clone: function CanvasExtraState_clone() {
	      return Object.create(this);
	    }
	  };
	  return EvalState;
	}();
	var EvaluatorPreprocessor = function EvaluatorPreprocessorClosure() {
	  var getOPMap = getLookupTableFactory(function (t) {
	    t['w'] = {
	      id: OPS.setLineWidth,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['J'] = {
	      id: OPS.setLineCap,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['j'] = {
	      id: OPS.setLineJoin,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['M'] = {
	      id: OPS.setMiterLimit,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['d'] = {
	      id: OPS.setDash,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['ri'] = {
	      id: OPS.setRenderingIntent,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['i'] = {
	      id: OPS.setFlatness,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['gs'] = {
	      id: OPS.setGState,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['q'] = {
	      id: OPS.save,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['Q'] = {
	      id: OPS.restore,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['cm'] = {
	      id: OPS.transform,
	      numArgs: 6,
	      variableArgs: false
	    };
	    t['m'] = {
	      id: OPS.moveTo,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['l'] = {
	      id: OPS.lineTo,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['c'] = {
	      id: OPS.curveTo,
	      numArgs: 6,
	      variableArgs: false
	    };
	    t['v'] = {
	      id: OPS.curveTo2,
	      numArgs: 4,
	      variableArgs: false
	    };
	    t['y'] = {
	      id: OPS.curveTo3,
	      numArgs: 4,
	      variableArgs: false
	    };
	    t['h'] = {
	      id: OPS.closePath,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['re'] = {
	      id: OPS.rectangle,
	      numArgs: 4,
	      variableArgs: false
	    };
	    t['S'] = {
	      id: OPS.stroke,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['s'] = {
	      id: OPS.closeStroke,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['f'] = {
	      id: OPS.fill,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['F'] = {
	      id: OPS.fill,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['f*'] = {
	      id: OPS.eoFill,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['B'] = {
	      id: OPS.fillStroke,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['B*'] = {
	      id: OPS.eoFillStroke,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['b'] = {
	      id: OPS.closeFillStroke,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['b*'] = {
	      id: OPS.closeEOFillStroke,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['n'] = {
	      id: OPS.endPath,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['W'] = {
	      id: OPS.clip,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['W*'] = {
	      id: OPS.eoClip,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['BT'] = {
	      id: OPS.beginText,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['ET'] = {
	      id: OPS.endText,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['Tc'] = {
	      id: OPS.setCharSpacing,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['Tw'] = {
	      id: OPS.setWordSpacing,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['Tz'] = {
	      id: OPS.setHScale,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['TL'] = {
	      id: OPS.setLeading,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['Tf'] = {
	      id: OPS.setFont,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['Tr'] = {
	      id: OPS.setTextRenderingMode,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['Ts'] = {
	      id: OPS.setTextRise,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['Td'] = {
	      id: OPS.moveText,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['TD'] = {
	      id: OPS.setLeadingMoveText,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['Tm'] = {
	      id: OPS.setTextMatrix,
	      numArgs: 6,
	      variableArgs: false
	    };
	    t['T*'] = {
	      id: OPS.nextLine,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['Tj'] = {
	      id: OPS.showText,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['TJ'] = {
	      id: OPS.showSpacedText,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['\''] = {
	      id: OPS.nextLineShowText,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['"'] = {
	      id: OPS.nextLineSetSpacingShowText,
	      numArgs: 3,
	      variableArgs: false
	    };
	    t['d0'] = {
	      id: OPS.setCharWidth,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['d1'] = {
	      id: OPS.setCharWidthAndBounds,
	      numArgs: 6,
	      variableArgs: false
	    };
	    t['CS'] = {
	      id: OPS.setStrokeColorSpace,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['cs'] = {
	      id: OPS.setFillColorSpace,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['SC'] = {
	      id: OPS.setStrokeColor,
	      numArgs: 4,
	      variableArgs: true
	    };
	    t['SCN'] = {
	      id: OPS.setStrokeColorN,
	      numArgs: 33,
	      variableArgs: true
	    };
	    t['sc'] = {
	      id: OPS.setFillColor,
	      numArgs: 4,
	      variableArgs: true
	    };
	    t['scn'] = {
	      id: OPS.setFillColorN,
	      numArgs: 33,
	      variableArgs: true
	    };
	    t['G'] = {
	      id: OPS.setStrokeGray,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['g'] = {
	      id: OPS.setFillGray,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['RG'] = {
	      id: OPS.setStrokeRGBColor,
	      numArgs: 3,
	      variableArgs: false
	    };
	    t['rg'] = {
	      id: OPS.setFillRGBColor,
	      numArgs: 3,
	      variableArgs: false
	    };
	    t['K'] = {
	      id: OPS.setStrokeCMYKColor,
	      numArgs: 4,
	      variableArgs: false
	    };
	    t['k'] = {
	      id: OPS.setFillCMYKColor,
	      numArgs: 4,
	      variableArgs: false
	    };
	    t['sh'] = {
	      id: OPS.shadingFill,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['BI'] = {
	      id: OPS.beginInlineImage,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['ID'] = {
	      id: OPS.beginImageData,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['EI'] = {
	      id: OPS.endInlineImage,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['Do'] = {
	      id: OPS.paintXObject,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['MP'] = {
	      id: OPS.markPoint,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['DP'] = {
	      id: OPS.markPointProps,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['BMC'] = {
	      id: OPS.beginMarkedContent,
	      numArgs: 1,
	      variableArgs: false
	    };
	    t['BDC'] = {
	      id: OPS.beginMarkedContentProps,
	      numArgs: 2,
	      variableArgs: false
	    };
	    t['EMC'] = {
	      id: OPS.endMarkedContent,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['BX'] = {
	      id: OPS.beginCompat,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['EX'] = {
	      id: OPS.endCompat,
	      numArgs: 0,
	      variableArgs: false
	    };
	    t['BM'] = null;
	    t['BD'] = null;
	    t['true'] = null;
	    t['fa'] = null;
	    t['fal'] = null;
	    t['fals'] = null;
	    t['false'] = null;
	    t['nu'] = null;
	    t['nul'] = null;
	    t['null'] = null;
	  });
	  function EvaluatorPreprocessor(stream, xref, stateManager) {
	    this.opMap = getOPMap();
	    this.parser = new Parser(new Lexer(stream, this.opMap), false, xref);
	    this.stateManager = stateManager;
	    this.nonProcessedArgs = [];
	  }
	  EvaluatorPreprocessor.prototype = {
	    get savedStatesDepth() {
	      return this.stateManager.stateStack.length;
	    },
	    read: function EvaluatorPreprocessor_read(operation) {
	      var args = operation.args;
	      while (true) {
	        var obj = this.parser.getObj();
	        if (isCmd(obj)) {
	          var cmd = obj.cmd;
	          var opSpec = this.opMap[cmd];
	          if (!opSpec) {
	            warn('Unknown command "' + cmd + '"');
	            continue;
	          }
	          var fn = opSpec.id;
	          var numArgs = opSpec.numArgs;
	          var argsLength = args !== null ? args.length : 0;
	          if (!opSpec.variableArgs) {
	            if (argsLength !== numArgs) {
	              var nonProcessedArgs = this.nonProcessedArgs;
	              while (argsLength > numArgs) {
	                nonProcessedArgs.push(args.shift());
	                argsLength--;
	              }
	              while (argsLength < numArgs && nonProcessedArgs.length !== 0) {
	                if (args === null) {
	                  args = [];
	                }
	                args.unshift(nonProcessedArgs.pop());
	                argsLength++;
	              }
	            }
	            if (argsLength < numArgs) {
	              warn('Skipping command ' + fn + ': expected ' + numArgs + ' args, but received ' + argsLength + ' args.');
	              if (args !== null) {
	                args.length = 0;
	              }
	              continue;
	            }
	          } else if (argsLength > numArgs) {
	            info('Command ' + fn + ': expected [0,' + numArgs + '] args, but received ' + argsLength + ' args.');
	          }
	          this.preprocessCommand(fn, args);
	          operation.fn = fn;
	          operation.args = args;
	          return true;
	        }
	        if (isEOF(obj)) {
	          return false;
	        }
	        if (obj !== null) {
	          if (args === null) {
	            args = [];
	          }
	          args.push(obj);
	          assert(args.length <= 33, 'Too many arguments');
	        }
	      }
	    },
	    preprocessCommand: function EvaluatorPreprocessor_preprocessCommand(fn, args) {
	      switch (fn | 0) {
	        case OPS.save:
	          this.stateManager.save();
	          break;
	        case OPS.restore:
	          this.stateManager.restore();
	          break;
	        case OPS.transform:
	          this.stateManager.transform(args);
	          break;
	      }
	    }
	  };
	  return EvaluatorPreprocessor;
	}();
	var QueueOptimizer = function QueueOptimizerClosure() {
	  function addState(parentState, pattern, fn) {
	    var state = parentState;
	    for (var i = 0, ii = pattern.length - 1; i < ii; i++) {
	      var item = pattern[i];
	      state = state[item] || (state[item] = []);
	    }
	    state[pattern[pattern.length - 1]] = fn;
	  }
	  function handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray) {
	    var iFirstPIMXO = iFirstSave + 2;
	    for (var i = 0; i < count; i++) {
	      var arg = argsArray[iFirstPIMXO + 4 * i];
	      var imageMask = arg.length === 1 && arg[0];
	      if (imageMask && imageMask.width === 1 && imageMask.height === 1 && (!imageMask.data.length || imageMask.data.length === 1 && imageMask.data[0] === 0)) {
	        fnArray[iFirstPIMXO + 4 * i] = OPS.paintSolidColorImageMask;
	        continue;
	      }
	      break;
	    }
	    return count - i;
	  }
	  var InitialState = [];
	  addState(InitialState, [OPS.save, OPS.transform, OPS.paintInlineImageXObject, OPS.restore], function foundInlineImageGroup(context) {
	    var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;
	    var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;
	    var MAX_WIDTH = 1000;
	    var IMAGE_PADDING = 1;
	    var fnArray = context.fnArray,
	        argsArray = context.argsArray;
	    var curr = context.iCurr;
	    var iFirstSave = curr - 3;
	    var iFirstTransform = curr - 2;
	    var iFirstPIIXO = curr - 1;
	    var i = iFirstSave + 4;
	    var ii = fnArray.length;
	    while (i + 3 < ii) {
	      if (fnArray[i] !== OPS.save || fnArray[i + 1] !== OPS.transform || fnArray[i + 2] !== OPS.paintInlineImageXObject || fnArray[i + 3] !== OPS.restore) {
	        break;
	      }
	      i += 4;
	    }
	    var count = Math.min((i - iFirstSave) / 4, MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);
	    if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {
	      return i;
	    }
	    var maxX = 0;
	    var map = [],
	        maxLineHeight = 0;
	    var currentX = IMAGE_PADDING,
	        currentY = IMAGE_PADDING;
	    var q;
	    for (q = 0; q < count; q++) {
	      var transform = argsArray[iFirstTransform + (q << 2)];
	      var img = argsArray[iFirstPIIXO + (q << 2)][0];
	      if (currentX + img.width > MAX_WIDTH) {
	        maxX = Math.max(maxX, currentX);
	        currentY += maxLineHeight + 2 * IMAGE_PADDING;
	        currentX = 0;
	        maxLineHeight = 0;
	      }
	      map.push({
	        transform: transform,
	        x: currentX,
	        y: currentY,
	        w: img.width,
	        h: img.height
	      });
	      currentX += img.width + 2 * IMAGE_PADDING;
	      maxLineHeight = Math.max(maxLineHeight, img.height);
	    }
	    var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;
	    var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;
	    var imgData = new Uint8Array(imgWidth * imgHeight * 4);
	    var imgRowSize = imgWidth << 2;
	    for (q = 0; q < count; q++) {
	      var data = argsArray[iFirstPIIXO + (q << 2)][0].data;
	      var rowSize = map[q].w << 2;
	      var dataOffset = 0;
	      var offset = map[q].x + map[q].y * imgWidth << 2;
	      imgData.set(data.subarray(0, rowSize), offset - imgRowSize);
	      for (var k = 0, kk = map[q].h; k < kk; k++) {
	        imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);
	        dataOffset += rowSize;
	        offset += imgRowSize;
	      }
	      imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);
	      while (offset >= 0) {
	        data[offset - 4] = data[offset];
	        data[offset - 3] = data[offset + 1];
	        data[offset - 2] = data[offset + 2];
	        data[offset - 1] = data[offset + 3];
	        data[offset + rowSize] = data[offset + rowSize - 4];
	        data[offset + rowSize + 1] = data[offset + rowSize - 3];
	        data[offset + rowSize + 2] = data[offset + rowSize - 2];
	        data[offset + rowSize + 3] = data[offset + rowSize - 1];
	        offset -= imgRowSize;
	      }
	    }
	    fnArray.splice(iFirstSave, count * 4, OPS.paintInlineImageXObjectGroup);
	    argsArray.splice(iFirstSave, count * 4, [{
	      width: imgWidth,
	      height: imgHeight,
	      kind: ImageKind.RGBA_32BPP,
	      data: imgData
	    }, map]);
	    return iFirstSave + 1;
	  });
	  addState(InitialState, [OPS.save, OPS.transform, OPS.paintImageMaskXObject, OPS.restore], function foundImageMaskGroup(context) {
	    var MIN_IMAGES_IN_MASKS_BLOCK = 10;
	    var MAX_IMAGES_IN_MASKS_BLOCK = 100;
	    var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;
	    var fnArray = context.fnArray,
	        argsArray = context.argsArray;
	    var curr = context.iCurr;
	    var iFirstSave = curr - 3;
	    var iFirstTransform = curr - 2;
	    var iFirstPIMXO = curr - 1;
	    var i = iFirstSave + 4;
	    var ii = fnArray.length;
	    while (i + 3 < ii) {
	      if (fnArray[i] !== OPS.save || fnArray[i + 1] !== OPS.transform || fnArray[i + 2] !== OPS.paintImageMaskXObject || fnArray[i + 3] !== OPS.restore) {
	        break;
	      }
	      i += 4;
	    }
	    var count = (i - iFirstSave) / 4;
	    count = handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray);
	    if (count < MIN_IMAGES_IN_MASKS_BLOCK) {
	      return i;
	    }
	    var q;
	    var isSameImage = false;
	    var iTransform, transformArgs;
	    var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];
	    if (argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0) {
	      isSameImage = true;
	      var firstTransformArg0 = argsArray[iFirstTransform][0];
	      var firstTransformArg3 = argsArray[iFirstTransform][3];
	      iTransform = iFirstTransform + 4;
	      var iPIMXO = iFirstPIMXO + 4;
	      for (q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {
	        transformArgs = argsArray[iTransform];
	        if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== 0 || transformArgs[2] !== 0 || transformArgs[3] !== firstTransformArg3) {
	          if (q < MIN_IMAGES_IN_MASKS_BLOCK) {
	            isSameImage = false;
	          } else {
	            count = q;
	          }
	          break;
	        }
	      }
	    }
	    if (isSameImage) {
	      count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);
	      var positions = new Float32Array(count * 2);
	      iTransform = iFirstTransform;
	      for (q = 0; q < count; q++, iTransform += 4) {
	        transformArgs = argsArray[iTransform];
	        positions[q << 1] = transformArgs[4];
	        positions[(q << 1) + 1] = transformArgs[5];
	      }
	      fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectRepeat);
	      argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg3, positions]);
	    } else {
	      count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);
	      var images = [];
	      for (q = 0; q < count; q++) {
	        transformArgs = argsArray[iFirstTransform + (q << 2)];
	        var maskParams = argsArray[iFirstPIMXO + (q << 2)][0];
	        images.push({
	          data: maskParams.data,
	          width: maskParams.width,
	          height: maskParams.height,
	          transform: transformArgs
	        });
	      }
	      fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectGroup);
	      argsArray.splice(iFirstSave, count * 4, [images]);
	    }
	    return iFirstSave + 1;
	  });
	  addState(InitialState, [OPS.save, OPS.transform, OPS.paintImageXObject, OPS.restore], function (context) {
	    var MIN_IMAGES_IN_BLOCK = 3;
	    var MAX_IMAGES_IN_BLOCK = 1000;
	    var fnArray = context.fnArray,
	        argsArray = context.argsArray;
	    var curr = context.iCurr;
	    var iFirstSave = curr - 3;
	    var iFirstTransform = curr - 2;
	    var iFirstPIXO = curr - 1;
	    var iFirstRestore = curr;
	    if (argsArray[iFirstTransform][1] !== 0 || argsArray[iFirstTransform][2] !== 0) {
	      return iFirstRestore + 1;
	    }
	    var firstPIXOArg0 = argsArray[iFirstPIXO][0];
	    var firstTransformArg0 = argsArray[iFirstTransform][0];
	    var firstTransformArg3 = argsArray[iFirstTransform][3];
	    var i = iFirstSave + 4;
	    var ii = fnArray.length;
	    while (i + 3 < ii) {
	      if (fnArray[i] !== OPS.save || fnArray[i + 1] !== OPS.transform || fnArray[i + 2] !== OPS.paintImageXObject || fnArray[i + 3] !== OPS.restore) {
	        break;
	      }
	      if (argsArray[i + 1][0] !== firstTransformArg0 || argsArray[i + 1][1] !== 0 || argsArray[i + 1][2] !== 0 || argsArray[i + 1][3] !== firstTransformArg3) {
	        break;
	      }
	      if (argsArray[i + 2][0] !== firstPIXOArg0) {
	        break;
	      }
	      i += 4;
	    }
	    var count = Math.min((i - iFirstSave) / 4, MAX_IMAGES_IN_BLOCK);
	    if (count < MIN_IMAGES_IN_BLOCK) {
	      return i;
	    }
	    var positions = new Float32Array(count * 2);
	    var iTransform = iFirstTransform;
	    for (var q = 0; q < count; q++, iTransform += 4) {
	      var transformArgs = argsArray[iTransform];
	      positions[q << 1] = transformArgs[4];
	      positions[(q << 1) + 1] = transformArgs[5];
	    }
	    var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];
	    fnArray.splice(iFirstSave, count * 4, OPS.paintImageXObjectRepeat);
	    argsArray.splice(iFirstSave, count * 4, args);
	    return iFirstSave + 1;
	  });
	  addState(InitialState, [OPS.beginText, OPS.setFont, OPS.setTextMatrix, OPS.showText, OPS.endText], function (context) {
	    var MIN_CHARS_IN_BLOCK = 3;
	    var MAX_CHARS_IN_BLOCK = 1000;
	    var fnArray = context.fnArray,
	        argsArray = context.argsArray;
	    var curr = context.iCurr;
	    var iFirstBeginText = curr - 4;
	    var iFirstSetFont = curr - 3;
	    var iFirstSetTextMatrix = curr - 2;
	    var iFirstShowText = curr - 1;
	    var iFirstEndText = curr;
	    var firstSetFontArg0 = argsArray[iFirstSetFont][0];
	    var firstSetFontArg1 = argsArray[iFirstSetFont][1];
	    var i = iFirstBeginText + 5;
	    var ii = fnArray.length;
	    while (i + 4 < ii) {
	      if (fnArray[i] !== OPS.beginText || fnArray[i + 1] !== OPS.setFont || fnArray[i + 2] !== OPS.setTextMatrix || fnArray[i + 3] !== OPS.showText || fnArray[i + 4] !== OPS.endText) {
	        break;
	      }
	      if (argsArray[i + 1][0] !== firstSetFontArg0 || argsArray[i + 1][1] !== firstSetFontArg1) {
	        break;
	      }
	      i += 5;
	    }
	    var count = Math.min((i - iFirstBeginText) / 5, MAX_CHARS_IN_BLOCK);
	    if (count < MIN_CHARS_IN_BLOCK) {
	      return i;
	    }
	    var iFirst = iFirstBeginText;
	    if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {
	      count++;
	      iFirst -= 5;
	    }
	    var iEndText = iFirst + 4;
	    for (var q = 1; q < count; q++) {
	      fnArray.splice(iEndText, 3);
	      argsArray.splice(iEndText, 3);
	      iEndText += 2;
	    }
	    return iEndText + 1;
	  });
	  function QueueOptimizer() {}
	  QueueOptimizer.prototype = {
	    optimize: function QueueOptimizer_optimize(queue) {
	      var fnArray = queue.fnArray,
	          argsArray = queue.argsArray;
	      var context = {
	        iCurr: 0,
	        fnArray: fnArray,
	        argsArray: argsArray
	      };
	      var state;
	      var i = 0,
	          ii = fnArray.length;
	      while (i < ii) {
	        state = (state || InitialState)[fnArray[i]];
	        if (typeof state === 'function') {
	          context.iCurr = i;
	          i = state(context);
	          state = undefined;
	          ii = context.fnArray.length;
	        } else {
	          i++;
	        }
	      }
	    }
	  };
	  return QueueOptimizer;
	}();
	exports.OperatorList = OperatorList;
	exports.PartialEvaluator = PartialEvaluator;

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreArithmeticDecoder = __w_pdfjs_require__(10);
	var info = sharedUtil.info;
	var warn = sharedUtil.warn;
	var error = sharedUtil.error;
	var log2 = sharedUtil.log2;
	var readUint16 = sharedUtil.readUint16;
	var readUint32 = sharedUtil.readUint32;
	var ArithmeticDecoder = coreArithmeticDecoder.ArithmeticDecoder;
	var JpxImage = function JpxImageClosure() {
	  var SubbandsGainLog2 = {
	    'LL': 0,
	    'LH': 1,
	    'HL': 1,
	    'HH': 2
	  };
	  function JpxImage() {
	    this.failOnCorruptedImage = false;
	  }
	  JpxImage.prototype = {
	    parse: function JpxImage_parse(data) {
	      var head = readUint16(data, 0);
	      if (head === 0xFF4F) {
	        this.parseCodestream(data, 0, data.length);
	        return;
	      }
	      var position = 0,
	          length = data.length;
	      while (position < length) {
	        var headerSize = 8;
	        var lbox = readUint32(data, position);
	        var tbox = readUint32(data, position + 4);
	        position += headerSize;
	        if (lbox === 1) {
	          lbox = readUint32(data, position) * 4294967296 + readUint32(data, position + 4);
	          position += 8;
	          headerSize += 8;
	        }
	        if (lbox === 0) {
	          lbox = length - position + headerSize;
	        }
	        if (lbox < headerSize) {
	          error('JPX Error: Invalid box field size');
	        }
	        var dataLength = lbox - headerSize;
	        var jumpDataLength = true;
	        switch (tbox) {
	          case 0x6A703268:
	            jumpDataLength = false;
	            break;
	          case 0x636F6C72:
	            var method = data[position];
	            if (method === 1) {
	              var colorspace = readUint32(data, position + 3);
	              switch (colorspace) {
	                case 16:
	                case 17:
	                case 18:
	                  break;
	                default:
	                  warn('Unknown colorspace ' + colorspace);
	                  break;
	              }
	            } else if (method === 2) {
	              info('ICC profile not supported');
	            }
	            break;
	          case 0x6A703263:
	            this.parseCodestream(data, position, position + dataLength);
	            break;
	          case 0x6A502020:
	            if (readUint32(data, position) !== 0x0d0a870a) {
	              warn('Invalid JP2 signature');
	            }
	            break;
	          case 0x6A501A1A:
	          case 0x66747970:
	          case 0x72726571:
	          case 0x72657320:
	          case 0x69686472:
	            break;
	          default:
	            var headerType = String.fromCharCode(tbox >> 24 & 0xFF, tbox >> 16 & 0xFF, tbox >> 8 & 0xFF, tbox & 0xFF);
	            warn('Unsupported header type ' + tbox + ' (' + headerType + ')');
	            break;
	        }
	        if (jumpDataLength) {
	          position += dataLength;
	        }
	      }
	    },
	    parseImageProperties: function JpxImage_parseImageProperties(stream) {
	      var newByte = stream.getByte();
	      while (newByte >= 0) {
	        var oldByte = newByte;
	        newByte = stream.getByte();
	        var code = oldByte << 8 | newByte;
	        if (code === 0xFF51) {
	          stream.skip(4);
	          var Xsiz = stream.getInt32() >>> 0;
	          var Ysiz = stream.getInt32() >>> 0;
	          var XOsiz = stream.getInt32() >>> 0;
	          var YOsiz = stream.getInt32() >>> 0;
	          stream.skip(16);
	          var Csiz = stream.getUint16();
	          this.width = Xsiz - XOsiz;
	          this.height = Ysiz - YOsiz;
	          this.componentsCount = Csiz;
	          this.bitsPerComponent = 8;
	          return;
	        }
	      }
	      error('JPX Error: No size marker found in JPX stream');
	    },
	    parseCodestream: function JpxImage_parseCodestream(data, start, end) {
	      var context = {};
	      var doNotRecover = false;
	      try {
	        var position = start;
	        while (position + 1 < end) {
	          var code = readUint16(data, position);
	          position += 2;
	          var length = 0,
	              j,
	              sqcd,
	              spqcds,
	              spqcdSize,
	              scalarExpounded,
	              tile;
	          switch (code) {
	            case 0xFF4F:
	              context.mainHeader = true;
	              break;
	            case 0xFFD9:
	              break;
	            case 0xFF51:
	              length = readUint16(data, position);
	              var siz = {};
	              siz.Xsiz = readUint32(data, position + 4);
	              siz.Ysiz = readUint32(data, position + 8);
	              siz.XOsiz = readUint32(data, position + 12);
	              siz.YOsiz = readUint32(data, position + 16);
	              siz.XTsiz = readUint32(data, position + 20);
	              siz.YTsiz = readUint32(data, position + 24);
	              siz.XTOsiz = readUint32(data, position + 28);
	              siz.YTOsiz = readUint32(data, position + 32);
	              var componentsCount = readUint16(data, position + 36);
	              siz.Csiz = componentsCount;
	              var components = [];
	              j = position + 38;
	              for (var i = 0; i < componentsCount; i++) {
	                var component = {
	                  precision: (data[j] & 0x7F) + 1,
	                  isSigned: !!(data[j] & 0x80),
	                  XRsiz: data[j + 1],
	                  YRsiz: data[j + 1]
	                };
	                calculateComponentDimensions(component, siz);
	                components.push(component);
	              }
	              context.SIZ = siz;
	              context.components = components;
	              calculateTileGrids(context, components);
	              context.QCC = [];
	              context.COC = [];
	              break;
	            case 0xFF5C:
	              length = readUint16(data, position);
	              var qcd = {};
	              j = position + 2;
	              sqcd = data[j++];
	              switch (sqcd & 0x1F) {
	                case 0:
	                  spqcdSize = 8;
	                  scalarExpounded = true;
	                  break;
	                case 1:
	                  spqcdSize = 16;
	                  scalarExpounded = false;
	                  break;
	                case 2:
	                  spqcdSize = 16;
	                  scalarExpounded = true;
	                  break;
	                default:
	                  throw new Error('Invalid SQcd value ' + sqcd);
	              }
	              qcd.noQuantization = spqcdSize === 8;
	              qcd.scalarExpounded = scalarExpounded;
	              qcd.guardBits = sqcd >> 5;
	              spqcds = [];
	              while (j < length + position) {
	                var spqcd = {};
	                if (spqcdSize === 8) {
	                  spqcd.epsilon = data[j++] >> 3;
	                  spqcd.mu = 0;
	                } else {
	                  spqcd.epsilon = data[j] >> 3;
	                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];
	                  j += 2;
	                }
	                spqcds.push(spqcd);
	              }
	              qcd.SPqcds = spqcds;
	              if (context.mainHeader) {
	                context.QCD = qcd;
	              } else {
	                context.currentTile.QCD = qcd;
	                context.currentTile.QCC = [];
	              }
	              break;
	            case 0xFF5D:
	              length = readUint16(data, position);
	              var qcc = {};
	              j = position + 2;
	              var cqcc;
	              if (context.SIZ.Csiz < 257) {
	                cqcc = data[j++];
	              } else {
	                cqcc = readUint16(data, j);
	                j += 2;
	              }
	              sqcd = data[j++];
	              switch (sqcd & 0x1F) {
	                case 0:
	                  spqcdSize = 8;
	                  scalarExpounded = true;
	                  break;
	                case 1:
	                  spqcdSize = 16;
	                  scalarExpounded = false;
	                  break;
	                case 2:
	                  spqcdSize = 16;
	                  scalarExpounded = true;
	                  break;
	                default:
	                  throw new Error('Invalid SQcd value ' + sqcd);
	              }
	              qcc.noQuantization = spqcdSize === 8;
	              qcc.scalarExpounded = scalarExpounded;
	              qcc.guardBits = sqcd >> 5;
	              spqcds = [];
	              while (j < length + position) {
	                spqcd = {};
	                if (spqcdSize === 8) {
	                  spqcd.epsilon = data[j++] >> 3;
	                  spqcd.mu = 0;
	                } else {
	                  spqcd.epsilon = data[j] >> 3;
	                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];
	                  j += 2;
	                }
	                spqcds.push(spqcd);
	              }
	              qcc.SPqcds = spqcds;
	              if (context.mainHeader) {
	                context.QCC[cqcc] = qcc;
	              } else {
	                context.currentTile.QCC[cqcc] = qcc;
	              }
	              break;
	            case 0xFF52:
	              length = readUint16(data, position);
	              var cod = {};
	              j = position + 2;
	              var scod = data[j++];
	              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
	              cod.sopMarkerUsed = !!(scod & 2);
	              cod.ephMarkerUsed = !!(scod & 4);
	              cod.progressionOrder = data[j++];
	              cod.layersCount = readUint16(data, j);
	              j += 2;
	              cod.multipleComponentTransform = data[j++];
	              cod.decompositionLevelsCount = data[j++];
	              cod.xcb = (data[j++] & 0xF) + 2;
	              cod.ycb = (data[j++] & 0xF) + 2;
	              var blockStyle = data[j++];
	              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
	              cod.resetContextProbabilities = !!(blockStyle & 2);
	              cod.terminationOnEachCodingPass = !!(blockStyle & 4);
	              cod.verticalyStripe = !!(blockStyle & 8);
	              cod.predictableTermination = !!(blockStyle & 16);
	              cod.segmentationSymbolUsed = !!(blockStyle & 32);
	              cod.reversibleTransformation = data[j++];
	              if (cod.entropyCoderWithCustomPrecincts) {
	                var precinctsSizes = [];
	                while (j < length + position) {
	                  var precinctsSize = data[j++];
	                  precinctsSizes.push({
	                    PPx: precinctsSize & 0xF,
	                    PPy: precinctsSize >> 4
	                  });
	                }
	                cod.precinctsSizes = precinctsSizes;
	              }
	              var unsupported = [];
	              if (cod.selectiveArithmeticCodingBypass) {
	                unsupported.push('selectiveArithmeticCodingBypass');
	              }
	              if (cod.resetContextProbabilities) {
	                unsupported.push('resetContextProbabilities');
	              }
	              if (cod.terminationOnEachCodingPass) {
	                unsupported.push('terminationOnEachCodingPass');
	              }
	              if (cod.verticalyStripe) {
	                unsupported.push('verticalyStripe');
	              }
	              if (cod.predictableTermination) {
	                unsupported.push('predictableTermination');
	              }
	              if (unsupported.length > 0) {
	                doNotRecover = true;
	                throw new Error('Unsupported COD options (' + unsupported.join(', ') + ')');
	              }
	              if (context.mainHeader) {
	                context.COD = cod;
	              } else {
	                context.currentTile.COD = cod;
	                context.currentTile.COC = [];
	              }
	              break;
	            case 0xFF90:
	              length = readUint16(data, position);
	              tile = {};
	              tile.index = readUint16(data, position + 2);
	              tile.length = readUint32(data, position + 4);
	              tile.dataEnd = tile.length + position - 2;
	              tile.partIndex = data[position + 8];
	              tile.partsCount = data[position + 9];
	              context.mainHeader = false;
	              if (tile.partIndex === 0) {
	                tile.COD = context.COD;
	                tile.COC = context.COC.slice(0);
	                tile.QCD = context.QCD;
	                tile.QCC = context.QCC.slice(0);
	              }
	              context.currentTile = tile;
	              break;
	            case 0xFF93:
	              tile = context.currentTile;
	              if (tile.partIndex === 0) {
	                initializeTile(context, tile.index);
	                buildPackets(context);
	              }
	              length = tile.dataEnd - position;
	              parseTilePackets(context, data, position, length);
	              break;
	            case 0xFF55:
	            case 0xFF57:
	            case 0xFF58:
	            case 0xFF64:
	              length = readUint16(data, position);
	              break;
	            case 0xFF53:
	              throw new Error('Codestream code 0xFF53 (COC) is ' + 'not implemented');
	            default:
	              throw new Error('Unknown codestream code: ' + code.toString(16));
	          }
	          position += length;
	        }
	      } catch (e) {
	        if (doNotRecover || this.failOnCorruptedImage) {
	          error('JPX Error: ' + e.message);
	        } else {
	          warn('JPX: Trying to recover from: ' + e.message);
	        }
	      }
	      this.tiles = transformComponents(context);
	      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
	      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
	      this.componentsCount = context.SIZ.Csiz;
	    }
	  };
	  function calculateComponentDimensions(component, siz) {
	    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
	    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
	    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
	    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
	    component.width = component.x1 - component.x0;
	    component.height = component.y1 - component.y0;
	  }
	  function calculateTileGrids(context, components) {
	    var siz = context.SIZ;
	    var tile,
	        tiles = [];
	    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
	    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
	    for (var q = 0; q < numYtiles; q++) {
	      for (var p = 0; p < numXtiles; p++) {
	        tile = {};
	        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
	        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
	        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
	        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
	        tile.width = tile.tx1 - tile.tx0;
	        tile.height = tile.ty1 - tile.ty0;
	        tile.components = [];
	        tiles.push(tile);
	      }
	    }
	    context.tiles = tiles;
	    var componentsCount = siz.Csiz;
	    for (var i = 0, ii = componentsCount; i < ii; i++) {
	      var component = components[i];
	      for (var j = 0, jj = tiles.length; j < jj; j++) {
	        var tileComponent = {};
	        tile = tiles[j];
	        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
	        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
	        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
	        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
	        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
	        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
	        tile.components[i] = tileComponent;
	      }
	    }
	  }
	  function getBlocksDimensions(context, component, r) {
	    var codOrCoc = component.codingStyleParameters;
	    var result = {};
	    if (!codOrCoc.entropyCoderWithCustomPrecincts) {
	      result.PPx = 15;
	      result.PPy = 15;
	    } else {
	      result.PPx = codOrCoc.precinctsSizes[r].PPx;
	      result.PPy = codOrCoc.precinctsSizes[r].PPy;
	    }
	    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);
	    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);
	    return result;
	  }
	  function buildPrecincts(context, resolution, dimensions) {
	    var precinctWidth = 1 << dimensions.PPx;
	    var precinctHeight = 1 << dimensions.PPy;
	    var isZeroRes = resolution.resLevel === 0;
	    var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);
	    var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);
	    var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;
	    var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;
	    var numprecincts = numprecinctswide * numprecinctshigh;
	    resolution.precinctParameters = {
	      precinctWidth: precinctWidth,
	      precinctHeight: precinctHeight,
	      numprecinctswide: numprecinctswide,
	      numprecinctshigh: numprecinctshigh,
	      numprecincts: numprecincts,
	      precinctWidthInSubband: precinctWidthInSubband,
	      precinctHeightInSubband: precinctHeightInSubband
	    };
	  }
	  function buildCodeblocks(context, subband, dimensions) {
	    var xcb_ = dimensions.xcb_;
	    var ycb_ = dimensions.ycb_;
	    var codeblockWidth = 1 << xcb_;
	    var codeblockHeight = 1 << ycb_;
	    var cbx0 = subband.tbx0 >> xcb_;
	    var cby0 = subband.tby0 >> ycb_;
	    var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;
	    var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;
	    var precinctParameters = subband.resolution.precinctParameters;
	    var codeblocks = [];
	    var precincts = [];
	    var i, j, codeblock, precinctNumber;
	    for (j = cby0; j < cby1; j++) {
	      for (i = cbx0; i < cbx1; i++) {
	        codeblock = {
	          cbx: i,
	          cby: j,
	          tbx0: codeblockWidth * i,
	          tby0: codeblockHeight * j,
	          tbx1: codeblockWidth * (i + 1),
	          tby1: codeblockHeight * (j + 1)
	        };
	        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
	        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
	        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
	        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);
	        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);
	        var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);
	        precinctNumber = pi + pj * precinctParameters.numprecinctswide;
	        codeblock.precinctNumber = precinctNumber;
	        codeblock.subbandType = subband.type;
	        codeblock.Lblock = 3;
	        if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {
	          continue;
	        }
	        codeblocks.push(codeblock);
	        var precinct = precincts[precinctNumber];
	        if (precinct !== undefined) {
	          if (i < precinct.cbxMin) {
	            precinct.cbxMin = i;
	          } else if (i > precinct.cbxMax) {
	            precinct.cbxMax = i;
	          }
	          if (j < precinct.cbyMin) {
	            precinct.cbxMin = j;
	          } else if (j > precinct.cbyMax) {
	            precinct.cbyMax = j;
	          }
	        } else {
	          precincts[precinctNumber] = precinct = {
	            cbxMin: i,
	            cbyMin: j,
	            cbxMax: i,
	            cbyMax: j
	          };
	        }
	        codeblock.precinct = precinct;
	      }
	    }
	    subband.codeblockParameters = {
	      codeblockWidth: xcb_,
	      codeblockHeight: ycb_,
	      numcodeblockwide: cbx1 - cbx0 + 1,
	      numcodeblockhigh: cby1 - cby0 + 1
	    };
	    subband.codeblocks = codeblocks;
	    subband.precincts = precincts;
	  }
	  function createPacket(resolution, precinctNumber, layerNumber) {
	    var precinctCodeblocks = [];
	    var subbands = resolution.subbands;
	    for (var i = 0, ii = subbands.length; i < ii; i++) {
	      var subband = subbands[i];
	      var codeblocks = subband.codeblocks;
	      for (var j = 0, jj = codeblocks.length; j < jj; j++) {
	        var codeblock = codeblocks[j];
	        if (codeblock.precinctNumber !== precinctNumber) {
	          continue;
	        }
	        precinctCodeblocks.push(codeblock);
	      }
	    }
	    return {
	      layerNumber: layerNumber,
	      codeblocks: precinctCodeblocks
	    };
	  }
	  function LayerResolutionComponentPositionIterator(context) {
	    var siz = context.SIZ;
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var layersCount = tile.codingStyleDefaultParameters.layersCount;
	    var componentsCount = siz.Csiz;
	    var maxDecompositionLevelsCount = 0;
	    for (var q = 0; q < componentsCount; q++) {
	      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
	    }
	    var l = 0,
	        r = 0,
	        i = 0,
	        k = 0;
	    this.nextPacket = function JpxImage_nextPacket() {
	      for (; l < layersCount; l++) {
	        for (; r <= maxDecompositionLevelsCount; r++) {
	          for (; i < componentsCount; i++) {
	            var component = tile.components[i];
	            if (r > component.codingStyleParameters.decompositionLevelsCount) {
	              continue;
	            }
	            var resolution = component.resolutions[r];
	            var numprecincts = resolution.precinctParameters.numprecincts;
	            for (; k < numprecincts;) {
	              var packet = createPacket(resolution, k, l);
	              k++;
	              return packet;
	            }
	            k = 0;
	          }
	          i = 0;
	        }
	        r = 0;
	      }
	      error('JPX Error: Out of packets');
	    };
	  }
	  function ResolutionLayerComponentPositionIterator(context) {
	    var siz = context.SIZ;
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var layersCount = tile.codingStyleDefaultParameters.layersCount;
	    var componentsCount = siz.Csiz;
	    var maxDecompositionLevelsCount = 0;
	    for (var q = 0; q < componentsCount; q++) {
	      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
	    }
	    var r = 0,
	        l = 0,
	        i = 0,
	        k = 0;
	    this.nextPacket = function JpxImage_nextPacket() {
	      for (; r <= maxDecompositionLevelsCount; r++) {
	        for (; l < layersCount; l++) {
	          for (; i < componentsCount; i++) {
	            var component = tile.components[i];
	            if (r > component.codingStyleParameters.decompositionLevelsCount) {
	              continue;
	            }
	            var resolution = component.resolutions[r];
	            var numprecincts = resolution.precinctParameters.numprecincts;
	            for (; k < numprecincts;) {
	              var packet = createPacket(resolution, k, l);
	              k++;
	              return packet;
	            }
	            k = 0;
	          }
	          i = 0;
	        }
	        l = 0;
	      }
	      error('JPX Error: Out of packets');
	    };
	  }
	  function ResolutionPositionComponentLayerIterator(context) {
	    var siz = context.SIZ;
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var layersCount = tile.codingStyleDefaultParameters.layersCount;
	    var componentsCount = siz.Csiz;
	    var l, r, c, p;
	    var maxDecompositionLevelsCount = 0;
	    for (c = 0; c < componentsCount; c++) {
	      var component = tile.components[c];
	      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);
	    }
	    var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);
	    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
	      var maxNumPrecincts = 0;
	      for (c = 0; c < componentsCount; ++c) {
	        var resolutions = tile.components[c].resolutions;
	        if (r < resolutions.length) {
	          maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);
	        }
	      }
	      maxNumPrecinctsInLevel[r] = maxNumPrecincts;
	    }
	    l = 0;
	    r = 0;
	    c = 0;
	    p = 0;
	    this.nextPacket = function JpxImage_nextPacket() {
	      for (; r <= maxDecompositionLevelsCount; r++) {
	        for (; p < maxNumPrecinctsInLevel[r]; p++) {
	          for (; c < componentsCount; c++) {
	            var component = tile.components[c];
	            if (r > component.codingStyleParameters.decompositionLevelsCount) {
	              continue;
	            }
	            var resolution = component.resolutions[r];
	            var numprecincts = resolution.precinctParameters.numprecincts;
	            if (p >= numprecincts) {
	              continue;
	            }
	            for (; l < layersCount;) {
	              var packet = createPacket(resolution, p, l);
	              l++;
	              return packet;
	            }
	            l = 0;
	          }
	          c = 0;
	        }
	        p = 0;
	      }
	      error('JPX Error: Out of packets');
	    };
	  }
	  function PositionComponentResolutionLayerIterator(context) {
	    var siz = context.SIZ;
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var layersCount = tile.codingStyleDefaultParameters.layersCount;
	    var componentsCount = siz.Csiz;
	    var precinctsSizes = getPrecinctSizesInImageScale(tile);
	    var precinctsIterationSizes = precinctsSizes;
	    var l = 0,
	        r = 0,
	        c = 0,
	        px = 0,
	        py = 0;
	    this.nextPacket = function JpxImage_nextPacket() {
	      for (; py < precinctsIterationSizes.maxNumHigh; py++) {
	        for (; px < precinctsIterationSizes.maxNumWide; px++) {
	          for (; c < componentsCount; c++) {
	            var component = tile.components[c];
	            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
	            for (; r <= decompositionLevelsCount; r++) {
	              var resolution = component.resolutions[r];
	              var sizeInImageScale = precinctsSizes.components[c].resolutions[r];
	              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
	              if (k === null) {
	                continue;
	              }
	              for (; l < layersCount;) {
	                var packet = createPacket(resolution, k, l);
	                l++;
	                return packet;
	              }
	              l = 0;
	            }
	            r = 0;
	          }
	          c = 0;
	        }
	        px = 0;
	      }
	      error('JPX Error: Out of packets');
	    };
	  }
	  function ComponentPositionResolutionLayerIterator(context) {
	    var siz = context.SIZ;
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var layersCount = tile.codingStyleDefaultParameters.layersCount;
	    var componentsCount = siz.Csiz;
	    var precinctsSizes = getPrecinctSizesInImageScale(tile);
	    var l = 0,
	        r = 0,
	        c = 0,
	        px = 0,
	        py = 0;
	    this.nextPacket = function JpxImage_nextPacket() {
	      for (; c < componentsCount; ++c) {
	        var component = tile.components[c];
	        var precinctsIterationSizes = precinctsSizes.components[c];
	        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
	        for (; py < precinctsIterationSizes.maxNumHigh; py++) {
	          for (; px < precinctsIterationSizes.maxNumWide; px++) {
	            for (; r <= decompositionLevelsCount; r++) {
	              var resolution = component.resolutions[r];
	              var sizeInImageScale = precinctsIterationSizes.resolutions[r];
	              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
	              if (k === null) {
	                continue;
	              }
	              for (; l < layersCount;) {
	                var packet = createPacket(resolution, k, l);
	                l++;
	                return packet;
	              }
	              l = 0;
	            }
	            r = 0;
	          }
	          px = 0;
	        }
	        py = 0;
	      }
	      error('JPX Error: Out of packets');
	    };
	  }
	  function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {
	    var posX = pxIndex * precinctIterationSizes.minWidth;
	    var posY = pyIndex * precinctIterationSizes.minHeight;
	    if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {
	      return null;
	    }
	    var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;
	    return posX / sizeInImageScale.height + startPrecinctRowIndex;
	  }
	  function getPrecinctSizesInImageScale(tile) {
	    var componentsCount = tile.components.length;
	    var minWidth = Number.MAX_VALUE;
	    var minHeight = Number.MAX_VALUE;
	    var maxNumWide = 0;
	    var maxNumHigh = 0;
	    var sizePerComponent = new Array(componentsCount);
	    for (var c = 0; c < componentsCount; c++) {
	      var component = tile.components[c];
	      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
	      var sizePerResolution = new Array(decompositionLevelsCount + 1);
	      var minWidthCurrentComponent = Number.MAX_VALUE;
	      var minHeightCurrentComponent = Number.MAX_VALUE;
	      var maxNumWideCurrentComponent = 0;
	      var maxNumHighCurrentComponent = 0;
	      var scale = 1;
	      for (var r = decompositionLevelsCount; r >= 0; --r) {
	        var resolution = component.resolutions[r];
	        var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;
	        var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;
	        minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);
	        minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);
	        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);
	        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);
	        sizePerResolution[r] = {
	          width: widthCurrentResolution,
	          height: heightCurrentResolution
	        };
	        scale <<= 1;
	      }
	      minWidth = Math.min(minWidth, minWidthCurrentComponent);
	      minHeight = Math.min(minHeight, minHeightCurrentComponent);
	      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
	      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
	      sizePerComponent[c] = {
	        resolutions: sizePerResolution,
	        minWidth: minWidthCurrentComponent,
	        minHeight: minHeightCurrentComponent,
	        maxNumWide: maxNumWideCurrentComponent,
	        maxNumHigh: maxNumHighCurrentComponent
	      };
	    }
	    return {
	      components: sizePerComponent,
	      minWidth: minWidth,
	      minHeight: minHeight,
	      maxNumWide: maxNumWide,
	      maxNumHigh: maxNumHigh
	    };
	  }
	  function buildPackets(context) {
	    var siz = context.SIZ;
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var componentsCount = siz.Csiz;
	    for (var c = 0; c < componentsCount; c++) {
	      var component = tile.components[c];
	      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
	      var resolutions = [];
	      var subbands = [];
	      for (var r = 0; r <= decompositionLevelsCount; r++) {
	        var blocksDimensions = getBlocksDimensions(context, component, r);
	        var resolution = {};
	        var scale = 1 << decompositionLevelsCount - r;
	        resolution.trx0 = Math.ceil(component.tcx0 / scale);
	        resolution.try0 = Math.ceil(component.tcy0 / scale);
	        resolution.trx1 = Math.ceil(component.tcx1 / scale);
	        resolution.try1 = Math.ceil(component.tcy1 / scale);
	        resolution.resLevel = r;
	        buildPrecincts(context, resolution, blocksDimensions);
	        resolutions.push(resolution);
	        var subband;
	        if (r === 0) {
	          subband = {};
	          subband.type = 'LL';
	          subband.tbx0 = Math.ceil(component.tcx0 / scale);
	          subband.tby0 = Math.ceil(component.tcy0 / scale);
	          subband.tbx1 = Math.ceil(component.tcx1 / scale);
	          subband.tby1 = Math.ceil(component.tcy1 / scale);
	          subband.resolution = resolution;
	          buildCodeblocks(context, subband, blocksDimensions);
	          subbands.push(subband);
	          resolution.subbands = [subband];
	        } else {
	          var bscale = 1 << decompositionLevelsCount - r + 1;
	          var resolutionSubbands = [];
	          subband = {};
	          subband.type = 'HL';
	          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
	          subband.tby0 = Math.ceil(component.tcy0 / bscale);
	          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
	          subband.tby1 = Math.ceil(component.tcy1 / bscale);
	          subband.resolution = resolution;
	          buildCodeblocks(context, subband, blocksDimensions);
	          subbands.push(subband);
	          resolutionSubbands.push(subband);
	          subband = {};
	          subband.type = 'LH';
	          subband.tbx0 = Math.ceil(component.tcx0 / bscale);
	          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
	          subband.tbx1 = Math.ceil(component.tcx1 / bscale);
	          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
	          subband.resolution = resolution;
	          buildCodeblocks(context, subband, blocksDimensions);
	          subbands.push(subband);
	          resolutionSubbands.push(subband);
	          subband = {};
	          subband.type = 'HH';
	          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
	          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
	          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
	          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
	          subband.resolution = resolution;
	          buildCodeblocks(context, subband, blocksDimensions);
	          subbands.push(subband);
	          resolutionSubbands.push(subband);
	          resolution.subbands = resolutionSubbands;
	        }
	      }
	      component.resolutions = resolutions;
	      component.subbands = subbands;
	    }
	    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;
	    switch (progressionOrder) {
	      case 0:
	        tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);
	        break;
	      case 1:
	        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);
	        break;
	      case 2:
	        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);
	        break;
	      case 3:
	        tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);
	        break;
	      case 4:
	        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);
	        break;
	      default:
	        error('JPX Error: Unsupported progression order ' + progressionOrder);
	    }
	  }
	  function parseTilePackets(context, data, offset, dataLength) {
	    var position = 0;
	    var buffer,
	        bufferSize = 0,
	        skipNextBit = false;
	    function readBits(count) {
	      while (bufferSize < count) {
	        var b = data[offset + position];
	        position++;
	        if (skipNextBit) {
	          buffer = buffer << 7 | b;
	          bufferSize += 7;
	          skipNextBit = false;
	        } else {
	          buffer = buffer << 8 | b;
	          bufferSize += 8;
	        }
	        if (b === 0xFF) {
	          skipNextBit = true;
	        }
	      }
	      bufferSize -= count;
	      return buffer >>> bufferSize & (1 << count) - 1;
	    }
	    function skipMarkerIfEqual(value) {
	      if (data[offset + position - 1] === 0xFF && data[offset + position] === value) {
	        skipBytes(1);
	        return true;
	      } else if (data[offset + position] === 0xFF && data[offset + position + 1] === value) {
	        skipBytes(2);
	        return true;
	      }
	      return false;
	    }
	    function skipBytes(count) {
	      position += count;
	    }
	    function alignToByte() {
	      bufferSize = 0;
	      if (skipNextBit) {
	        position++;
	        skipNextBit = false;
	      }
	    }
	    function readCodingpasses() {
	      if (readBits(1) === 0) {
	        return 1;
	      }
	      if (readBits(1) === 0) {
	        return 2;
	      }
	      var value = readBits(2);
	      if (value < 3) {
	        return value + 3;
	      }
	      value = readBits(5);
	      if (value < 31) {
	        return value + 6;
	      }
	      value = readBits(7);
	      return value + 37;
	    }
	    var tileIndex = context.currentTile.index;
	    var tile = context.tiles[tileIndex];
	    var sopMarkerUsed = context.COD.sopMarkerUsed;
	    var ephMarkerUsed = context.COD.ephMarkerUsed;
	    var packetsIterator = tile.packetsIterator;
	    while (position < dataLength) {
	      alignToByte();
	      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {
	        skipBytes(4);
	      }
	      var packet = packetsIterator.nextPacket();
	      if (!readBits(1)) {
	        continue;
	      }
	      var layerNumber = packet.layerNumber;
	      var queue = [],
	          codeblock;
	      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {
	        codeblock = packet.codeblocks[i];
	        var precinct = codeblock.precinct;
	        var codeblockColumn = codeblock.cbx - precinct.cbxMin;
	        var codeblockRow = codeblock.cby - precinct.cbyMin;
	        var codeblockIncluded = false;
	        var firstTimeInclusion = false;
	        var valueReady;
	        if (codeblock['included'] !== undefined) {
	          codeblockIncluded = !!readBits(1);
	        } else {
	          precinct = codeblock.precinct;
	          var inclusionTree, zeroBitPlanesTree;
	          if (precinct['inclusionTree'] !== undefined) {
	            inclusionTree = precinct.inclusionTree;
	          } else {
	            var width = precinct.cbxMax - precinct.cbxMin + 1;
	            var height = precinct.cbyMax - precinct.cbyMin + 1;
	            inclusionTree = new InclusionTree(width, height, layerNumber);
	            zeroBitPlanesTree = new TagTree(width, height);
	            precinct.inclusionTree = inclusionTree;
	            precinct.zeroBitPlanesTree = zeroBitPlanesTree;
	          }
	          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {
	            while (true) {
	              if (readBits(1)) {
	                valueReady = !inclusionTree.nextLevel();
	                if (valueReady) {
	                  codeblock.included = true;
	                  codeblockIncluded = firstTimeInclusion = true;
	                  break;
	                }
	              } else {
	                inclusionTree.incrementValue(layerNumber);
	                break;
	              }
	            }
	          }
	        }
	        if (!codeblockIncluded) {
	          continue;
	        }
	        if (firstTimeInclusion) {
	          zeroBitPlanesTree = precinct.zeroBitPlanesTree;
	          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
	          while (true) {
	            if (readBits(1)) {
	              valueReady = !zeroBitPlanesTree.nextLevel();
	              if (valueReady) {
	                break;
	              }
	            } else {
	              zeroBitPlanesTree.incrementValue();
	            }
	          }
	          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
	        }
	        var codingpasses = readCodingpasses();
	        while (readBits(1)) {
	          codeblock.Lblock++;
	        }
	        var codingpassesLog2 = log2(codingpasses);
	        var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;
	        var codedDataLength = readBits(bits);
	        queue.push({
	          codeblock: codeblock,
	          codingpasses: codingpasses,
	          dataLength: codedDataLength
	        });
	      }
	      alignToByte();
	      if (ephMarkerUsed) {
	        skipMarkerIfEqual(0x92);
	      }
	      while (queue.length > 0) {
	        var packetItem = queue.shift();
	        codeblock = packetItem.codeblock;
	        if (codeblock['data'] === undefined) {
	          codeblock.data = [];
	        }
	        codeblock.data.push({
	          data: data,
	          start: offset + position,
	          end: offset + position + packetItem.dataLength,
	          codingpasses: packetItem.codingpasses
	        });
	        position += packetItem.dataLength;
	      }
	    }
	    return position;
	  }
	  function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {
	    var x0 = subband.tbx0;
	    var y0 = subband.tby0;
	    var width = subband.tbx1 - subband.tbx0;
	    var codeblocks = subband.codeblocks;
	    var right = subband.type.charAt(0) === 'H' ? 1 : 0;
	    var bottom = subband.type.charAt(1) === 'H' ? levelWidth : 0;
	    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {
	      var codeblock = codeblocks[i];
	      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
	      var blockHeight = codeblock.tby1_ - codeblock.tby0_;
	      if (blockWidth === 0 || blockHeight === 0) {
	        continue;
	      }
	      if (codeblock['data'] === undefined) {
	        continue;
	      }
	      var bitModel, currentCodingpassType;
	      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);
	      currentCodingpassType = 2;
	      var data = codeblock.data,
	          totalLength = 0,
	          codingpasses = 0;
	      var j, jj, dataItem;
	      for (j = 0, jj = data.length; j < jj; j++) {
	        dataItem = data[j];
	        totalLength += dataItem.end - dataItem.start;
	        codingpasses += dataItem.codingpasses;
	      }
	      var encodedData = new Uint8Array(totalLength);
	      var position = 0;
	      for (j = 0, jj = data.length; j < jj; j++) {
	        dataItem = data[j];
	        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);
	        encodedData.set(chunk, position);
	        position += chunk.length;
	      }
	      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);
	      bitModel.setDecoder(decoder);
	      for (j = 0; j < codingpasses; j++) {
	        switch (currentCodingpassType) {
	          case 0:
	            bitModel.runSignificancePropagationPass();
	            break;
	          case 1:
	            bitModel.runMagnitudeRefinementPass();
	            break;
	          case 2:
	            bitModel.runCleanupPass();
	            if (segmentationSymbolUsed) {
	              bitModel.checkSegmentationSymbol();
	            }
	            break;
	        }
	        currentCodingpassType = (currentCodingpassType + 1) % 3;
	      }
	      var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;
	      var sign = bitModel.coefficentsSign;
	      var magnitude = bitModel.coefficentsMagnitude;
	      var bitsDecoded = bitModel.bitsDecoded;
	      var magnitudeCorrection = reversible ? 0 : 0.5;
	      var k, n, nb;
	      position = 0;
	      var interleave = subband.type !== 'LL';
	      for (j = 0; j < blockHeight; j++) {
	        var row = offset / width | 0;
	        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;
	        for (k = 0; k < blockWidth; k++) {
	          n = magnitude[position];
	          if (n !== 0) {
	            n = (n + magnitudeCorrection) * delta;
	            if (sign[position] !== 0) {
	              n = -n;
	            }
	            nb = bitsDecoded[position];
	            var pos = interleave ? levelOffset + (offset << 1) : offset;
	            if (reversible && nb >= mb) {
	              coefficients[pos] = n;
	            } else {
	              coefficients[pos] = n * (1 << mb - nb);
	            }
	          }
	          offset++;
	          position++;
	        }
	        offset += width - blockWidth;
	      }
	    }
	  }
	  function transformTile(context, tile, c) {
	    var component = tile.components[c];
	    var codingStyleParameters = component.codingStyleParameters;
	    var quantizationParameters = component.quantizationParameters;
	    var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;
	    var spqcds = quantizationParameters.SPqcds;
	    var scalarExpounded = quantizationParameters.scalarExpounded;
	    var guardBits = quantizationParameters.guardBits;
	    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
	    var precision = context.components[c].precision;
	    var reversible = codingStyleParameters.reversibleTransformation;
	    var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();
	    var subbandCoefficients = [];
	    var b = 0;
	    for (var i = 0; i <= decompositionLevelsCount; i++) {
	      var resolution = component.resolutions[i];
	      var width = resolution.trx1 - resolution.trx0;
	      var height = resolution.try1 - resolution.try0;
	      var coefficients = new Float32Array(width * height);
	      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {
	        var mu, epsilon;
	        if (!scalarExpounded) {
	          mu = spqcds[0].mu;
	          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);
	        } else {
	          mu = spqcds[b].mu;
	          epsilon = spqcds[b].epsilon;
	          b++;
	        }
	        var subband = resolution.subbands[j];
	        var gainLog2 = SubbandsGainLog2[subband.type];
	        var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);
	        var mb = guardBits + epsilon - 1;
	        copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);
	      }
	      subbandCoefficients.push({
	        width: width,
	        height: height,
	        items: coefficients
	      });
	    }
	    var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);
	    return {
	      left: component.tcx0,
	      top: component.tcy0,
	      width: result.width,
	      height: result.height,
	      items: result.items
	    };
	  }
	  function transformComponents(context) {
	    var siz = context.SIZ;
	    var components = context.components;
	    var componentsCount = siz.Csiz;
	    var resultImages = [];
	    for (var i = 0, ii = context.tiles.length; i < ii; i++) {
	      var tile = context.tiles[i];
	      var transformedTiles = [];
	      var c;
	      for (c = 0; c < componentsCount; c++) {
	        transformedTiles[c] = transformTile(context, tile, c);
	      }
	      var tile0 = transformedTiles[0];
	      var out = new Uint8Array(tile0.items.length * componentsCount);
	      var result = {
	        left: tile0.left,
	        top: tile0.top,
	        width: tile0.width,
	        height: tile0.height,
	        items: out
	      };
	      var shift, offset, max, min, maxK;
	      var pos = 0,
	          j,
	          jj,
	          y0,
	          y1,
	          y2,
	          r,
	          g,
	          b,
	          k,
	          val;
	      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
	        var fourComponents = componentsCount === 4;
	        var y0items = transformedTiles[0].items;
	        var y1items = transformedTiles[1].items;
	        var y2items = transformedTiles[2].items;
	        var y3items = fourComponents ? transformedTiles[3].items : null;
	        shift = components[0].precision - 8;
	        offset = (128 << shift) + 0.5;
	        max = 255 * (1 << shift);
	        maxK = max * 0.5;
	        min = -maxK;
	        var component0 = tile.components[0];
	        var alpha01 = componentsCount - 3;
	        jj = y0items.length;
	        if (!component0.codingStyleParameters.reversibleTransformation) {
	          for (j = 0; j < jj; j++, pos += alpha01) {
	            y0 = y0items[j] + offset;
	            y1 = y1items[j];
	            y2 = y2items[j];
	            r = y0 + 1.402 * y2;
	            g = y0 - 0.34413 * y1 - 0.71414 * y2;
	            b = y0 + 1.772 * y1;
	            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
	            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
	            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
	          }
	        } else {
	          for (j = 0; j < jj; j++, pos += alpha01) {
	            y0 = y0items[j] + offset;
	            y1 = y1items[j];
	            y2 = y2items[j];
	            g = y0 - (y2 + y1 >> 2);
	            r = g + y2;
	            b = g + y1;
	            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
	            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
	            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
	          }
	        }
	        if (fourComponents) {
	          for (j = 0, pos = 3; j < jj; j++, pos += 4) {
	            k = y3items[j];
	            out[pos] = k <= min ? 0 : k >= maxK ? 255 : k + offset >> shift;
	          }
	        }
	      } else {
	        for (c = 0; c < componentsCount; c++) {
	          var items = transformedTiles[c].items;
	          shift = components[c].precision - 8;
	          offset = (128 << shift) + 0.5;
	          max = 127.5 * (1 << shift);
	          min = -max;
	          for (pos = c, j = 0, jj = items.length; j < jj; j++) {
	            val = items[j];
	            out[pos] = val <= min ? 0 : val >= max ? 255 : val + offset >> shift;
	            pos += componentsCount;
	          }
	        }
	      }
	      resultImages.push(result);
	    }
	    return resultImages;
	  }
	  function initializeTile(context, tileIndex) {
	    var siz = context.SIZ;
	    var componentsCount = siz.Csiz;
	    var tile = context.tiles[tileIndex];
	    for (var c = 0; c < componentsCount; c++) {
	      var component = tile.components[c];
	      var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;
	      component.quantizationParameters = qcdOrQcc;
	      var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;
	      component.codingStyleParameters = codOrCoc;
	    }
	    tile.codingStyleDefaultParameters = context.currentTile.COD;
	  }
	  var TagTree = function TagTreeClosure() {
	    function TagTree(width, height) {
	      var levelsLength = log2(Math.max(width, height)) + 1;
	      this.levels = [];
	      for (var i = 0; i < levelsLength; i++) {
	        var level = {
	          width: width,
	          height: height,
	          items: []
	        };
	        this.levels.push(level);
	        width = Math.ceil(width / 2);
	        height = Math.ceil(height / 2);
	      }
	    }
	    TagTree.prototype = {
	      reset: function TagTree_reset(i, j) {
	        var currentLevel = 0,
	            value = 0,
	            level;
	        while (currentLevel < this.levels.length) {
	          level = this.levels[currentLevel];
	          var index = i + j * level.width;
	          if (level.items[index] !== undefined) {
	            value = level.items[index];
	            break;
	          }
	          level.index = index;
	          i >>= 1;
	          j >>= 1;
	          currentLevel++;
	        }
	        currentLevel--;
	        level = this.levels[currentLevel];
	        level.items[level.index] = value;
	        this.currentLevel = currentLevel;
	        delete this.value;
	      },
	      incrementValue: function TagTree_incrementValue() {
	        var level = this.levels[this.currentLevel];
	        level.items[level.index]++;
	      },
	      nextLevel: function TagTree_nextLevel() {
	        var currentLevel = this.currentLevel;
	        var level = this.levels[currentLevel];
	        var value = level.items[level.index];
	        currentLevel--;
	        if (currentLevel < 0) {
	          this.value = value;
	          return false;
	        }
	        this.currentLevel = currentLevel;
	        level = this.levels[currentLevel];
	        level.items[level.index] = value;
	        return true;
	      }
	    };
	    return TagTree;
	  }();
	  var InclusionTree = function InclusionTreeClosure() {
	    function InclusionTree(width, height, defaultValue) {
	      var levelsLength = log2(Math.max(width, height)) + 1;
	      this.levels = [];
	      for (var i = 0; i < levelsLength; i++) {
	        var items = new Uint8Array(width * height);
	        for (var j = 0, jj = items.length; j < jj; j++) {
	          items[j] = defaultValue;
	        }
	        var level = {
	          width: width,
	          height: height,
	          items: items
	        };
	        this.levels.push(level);
	        width = Math.ceil(width / 2);
	        height = Math.ceil(height / 2);
	      }
	    }
	    InclusionTree.prototype = {
	      reset: function InclusionTree_reset(i, j, stopValue) {
	        var currentLevel = 0;
	        while (currentLevel < this.levels.length) {
	          var level = this.levels[currentLevel];
	          var index = i + j * level.width;
	          level.index = index;
	          var value = level.items[index];
	          if (value === 0xFF) {
	            break;
	          }
	          if (value > stopValue) {
	            this.currentLevel = currentLevel;
	            this.propagateValues();
	            return false;
	          }
	          i >>= 1;
	          j >>= 1;
	          currentLevel++;
	        }
	        this.currentLevel = currentLevel - 1;
	        return true;
	      },
	      incrementValue: function InclusionTree_incrementValue(stopValue) {
	        var level = this.levels[this.currentLevel];
	        level.items[level.index] = stopValue + 1;
	        this.propagateValues();
	      },
	      propagateValues: function InclusionTree_propagateValues() {
	        var levelIndex = this.currentLevel;
	        var level = this.levels[levelIndex];
	        var currentValue = level.items[level.index];
	        while (--levelIndex >= 0) {
	          level = this.levels[levelIndex];
	          level.items[level.index] = currentValue;
	        }
	      },
	      nextLevel: function InclusionTree_nextLevel() {
	        var currentLevel = this.currentLevel;
	        var level = this.levels[currentLevel];
	        var value = level.items[level.index];
	        level.items[level.index] = 0xFF;
	        currentLevel--;
	        if (currentLevel < 0) {
	          return false;
	        }
	        this.currentLevel = currentLevel;
	        level = this.levels[currentLevel];
	        level.items[level.index] = value;
	        return true;
	      }
	    };
	    return InclusionTree;
	  }();
	  var BitModel = function BitModelClosure() {
	    var UNIFORM_CONTEXT = 17;
	    var RUNLENGTH_CONTEXT = 18;
	    var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);
	    var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);
	    var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);
	    function BitModel(width, height, subband, zeroBitPlanes, mb) {
	      this.width = width;
	      this.height = height;
	      this.contextLabelTable = subband === 'HH' ? HHContextLabel : subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel;
	      var coefficientCount = width * height;
	      this.neighborsSignificance = new Uint8Array(coefficientCount);
	      this.coefficentsSign = new Uint8Array(coefficientCount);
	      this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) : mb > 6 ? new Uint16Array(coefficientCount) : new Uint8Array(coefficientCount);
	      this.processingFlags = new Uint8Array(coefficientCount);
	      var bitsDecoded = new Uint8Array(coefficientCount);
	      if (zeroBitPlanes !== 0) {
	        for (var i = 0; i < coefficientCount; i++) {
	          bitsDecoded[i] = zeroBitPlanes;
	        }
	      }
	      this.bitsDecoded = bitsDecoded;
	      this.reset();
	    }
	    BitModel.prototype = {
	      setDecoder: function BitModel_setDecoder(decoder) {
	        this.decoder = decoder;
	      },
	      reset: function BitModel_reset() {
	        this.contexts = new Int8Array(19);
	        this.contexts[0] = 4 << 1 | 0;
	        this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;
	        this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;
	      },
	      setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {
	        var neighborsSignificance = this.neighborsSignificance;
	        var width = this.width,
	            height = this.height;
	        var left = column > 0;
	        var right = column + 1 < width;
	        var i;
	        if (row > 0) {
	          i = index - width;
	          if (left) {
	            neighborsSignificance[i - 1] += 0x10;
	          }
	          if (right) {
	            neighborsSignificance[i + 1] += 0x10;
	          }
	          neighborsSignificance[i] += 0x04;
	        }
	        if (row + 1 < height) {
	          i = index + width;
	          if (left) {
	            neighborsSignificance[i - 1] += 0x10;
	          }
	          if (right) {
	            neighborsSignificance[i + 1] += 0x10;
	          }
	          neighborsSignificance[i] += 0x04;
	        }
	        if (left) {
	          neighborsSignificance[index - 1] += 0x01;
	        }
	        if (right) {
	          neighborsSignificance[index + 1] += 0x01;
	        }
	        neighborsSignificance[index] |= 0x80;
	      },
	      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {
	        var decoder = this.decoder;
	        var width = this.width,
	            height = this.height;
	        var coefficentsMagnitude = this.coefficentsMagnitude;
	        var coefficentsSign = this.coefficentsSign;
	        var neighborsSignificance = this.neighborsSignificance;
	        var processingFlags = this.processingFlags;
	        var contexts = this.contexts;
	        var labels = this.contextLabelTable;
	        var bitsDecoded = this.bitsDecoded;
	        var processedInverseMask = ~1;
	        var processedMask = 1;
	        var firstMagnitudeBitMask = 2;
	        for (var i0 = 0; i0 < height; i0 += 4) {
	          for (var j = 0; j < width; j++) {
	            var index = i0 * width + j;
	            for (var i1 = 0; i1 < 4; i1++, index += width) {
	              var i = i0 + i1;
	              if (i >= height) {
	                break;
	              }
	              processingFlags[index] &= processedInverseMask;
	              if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {
	                continue;
	              }
	              var contextLabel = labels[neighborsSignificance[index]];
	              var decision = decoder.readBit(contexts, contextLabel);
	              if (decision) {
	                var sign = this.decodeSignBit(i, j, index);
	                coefficentsSign[index] = sign;
	                coefficentsMagnitude[index] = 1;
	                this.setNeighborsSignificance(i, j, index);
	                processingFlags[index] |= firstMagnitudeBitMask;
	              }
	              bitsDecoded[index]++;
	              processingFlags[index] |= processedMask;
	            }
	          }
	        }
	      },
	      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {
	        var width = this.width,
	            height = this.height;
	        var coefficentsMagnitude = this.coefficentsMagnitude;
	        var coefficentsSign = this.coefficentsSign;
	        var contribution, sign0, sign1, significance1;
	        var contextLabel, decoded;
	        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;
	        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
	          sign1 = coefficentsSign[index + 1];
	          if (significance1) {
	            sign0 = coefficentsSign[index - 1];
	            contribution = 1 - sign1 - sign0;
	          } else {
	            contribution = 1 - sign1 - sign1;
	          }
	        } else if (significance1) {
	          sign0 = coefficentsSign[index - 1];
	          contribution = 1 - sign0 - sign0;
	        } else {
	          contribution = 0;
	        }
	        var horizontalContribution = 3 * contribution;
	        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;
	        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
	          sign1 = coefficentsSign[index + width];
	          if (significance1) {
	            sign0 = coefficentsSign[index - width];
	            contribution = 1 - sign1 - sign0 + horizontalContribution;
	          } else {
	            contribution = 1 - sign1 - sign1 + horizontalContribution;
	          }
	        } else if (significance1) {
	          sign0 = coefficentsSign[index - width];
	          contribution = 1 - sign0 - sign0 + horizontalContribution;
	        } else {
	          contribution = horizontalContribution;
	        }
	        if (contribution >= 0) {
	          contextLabel = 9 + contribution;
	          decoded = this.decoder.readBit(this.contexts, contextLabel);
	        } else {
	          contextLabel = 9 - contribution;
	          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
	        }
	        return decoded;
	      },
	      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {
	        var decoder = this.decoder;
	        var width = this.width,
	            height = this.height;
	        var coefficentsMagnitude = this.coefficentsMagnitude;
	        var neighborsSignificance = this.neighborsSignificance;
	        var contexts = this.contexts;
	        var bitsDecoded = this.bitsDecoded;
	        var processingFlags = this.processingFlags;
	        var processedMask = 1;
	        var firstMagnitudeBitMask = 2;
	        var length = width * height;
	        var width4 = width * 4;
	        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {
	          indexNext = Math.min(length, index0 + width4);
	          for (var j = 0; j < width; j++) {
	            for (var index = index0 + j; index < indexNext; index += width) {
	              if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
	                continue;
	              }
	              var contextLabel = 16;
	              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
	                processingFlags[index] ^= firstMagnitudeBitMask;
	                var significance = neighborsSignificance[index] & 127;
	                contextLabel = significance === 0 ? 15 : 14;
	              }
	              var bit = decoder.readBit(contexts, contextLabel);
	              coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;
	              bitsDecoded[index]++;
	              processingFlags[index] |= processedMask;
	            }
	          }
	        }
	      },
	      runCleanupPass: function BitModel_runCleanupPass() {
	        var decoder = this.decoder;
	        var width = this.width,
	            height = this.height;
	        var neighborsSignificance = this.neighborsSignificance;
	        var coefficentsMagnitude = this.coefficentsMagnitude;
	        var coefficentsSign = this.coefficentsSign;
	        var contexts = this.contexts;
	        var labels = this.contextLabelTable;
	        var bitsDecoded = this.bitsDecoded;
	        var processingFlags = this.processingFlags;
	        var processedMask = 1;
	        var firstMagnitudeBitMask = 2;
	        var oneRowDown = width;
	        var twoRowsDown = width * 2;
	        var threeRowsDown = width * 3;
	        var iNext;
	        for (var i0 = 0; i0 < height; i0 = iNext) {
	          iNext = Math.min(i0 + 4, height);
	          var indexBase = i0 * width;
	          var checkAllEmpty = i0 + 3 < height;
	          for (var j = 0; j < width; j++) {
	            var index0 = indexBase + j;
	            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;
	            var i1 = 0,
	                index = index0;
	            var i = i0,
	                sign;
	            if (allEmpty) {
	              var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);
	              if (!hasSignificantCoefficent) {
	                bitsDecoded[index0]++;
	                bitsDecoded[index0 + oneRowDown]++;
	                bitsDecoded[index0 + twoRowsDown]++;
	                bitsDecoded[index0 + threeRowsDown]++;
	                continue;
	              }
	              i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
	              if (i1 !== 0) {
	                i = i0 + i1;
	                index += i1 * width;
	              }
	              sign = this.decodeSignBit(i, j, index);
	              coefficentsSign[index] = sign;
	              coefficentsMagnitude[index] = 1;
	              this.setNeighborsSignificance(i, j, index);
	              processingFlags[index] |= firstMagnitudeBitMask;
	              index = index0;
	              for (var i2 = i0; i2 <= i; i2++, index += width) {
	                bitsDecoded[index]++;
	              }
	              i1++;
	            }
	            for (i = i0 + i1; i < iNext; i++, index += width) {
	              if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
	                continue;
	              }
	              var contextLabel = labels[neighborsSignificance[index]];
	              var decision = decoder.readBit(contexts, contextLabel);
	              if (decision === 1) {
	                sign = this.decodeSignBit(i, j, index);
	                coefficentsSign[index] = sign;
	                coefficentsMagnitude[index] = 1;
	                this.setNeighborsSignificance(i, j, index);
	                processingFlags[index] |= firstMagnitudeBitMask;
	              }
	              bitsDecoded[index]++;
	            }
	          }
	        }
	      },
	      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {
	        var decoder = this.decoder;
	        var contexts = this.contexts;
	        var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
	        if (symbol !== 0xA) {
	          error('JPX Error: Invalid segmentation symbol');
	        }
	      }
	    };
	    return BitModel;
	  }();
	  var Transform = function TransformClosure() {
	    function Transform() {}
	    Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {
	      var ll = subbands[0];
	      for (var i = 1, ii = subbands.length; i < ii; i++) {
	        ll = this.iterate(ll, subbands[i], u0, v0);
	      }
	      return ll;
	    };
	    Transform.prototype.extend = function extend(buffer, offset, size) {
	      var i1 = offset - 1,
	          j1 = offset + 1;
	      var i2 = offset + size - 2,
	          j2 = offset + size;
	      buffer[i1--] = buffer[j1++];
	      buffer[j2++] = buffer[i2--];
	      buffer[i1--] = buffer[j1++];
	      buffer[j2++] = buffer[i2--];
	      buffer[i1--] = buffer[j1++];
	      buffer[j2++] = buffer[i2--];
	      buffer[i1] = buffer[j1];
	      buffer[j2] = buffer[i2];
	    };
	    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {
	      var llWidth = ll.width,
	          llHeight = ll.height,
	          llItems = ll.items;
	      var width = hl_lh_hh.width;
	      var height = hl_lh_hh.height;
	      var items = hl_lh_hh.items;
	      var i, j, k, l, u, v;
	      for (k = 0, i = 0; i < llHeight; i++) {
	        l = i * 2 * width;
	        for (j = 0; j < llWidth; j++, k++, l += 2) {
	          items[l] = llItems[k];
	        }
	      }
	      llItems = ll.items = null;
	      var bufferPadding = 4;
	      var rowBuffer = new Float32Array(width + 2 * bufferPadding);
	      if (width === 1) {
	        if ((u0 & 1) !== 0) {
	          for (v = 0, k = 0; v < height; v++, k += width) {
	            items[k] *= 0.5;
	          }
	        }
	      } else {
	        for (v = 0, k = 0; v < height; v++, k += width) {
	          rowBuffer.set(items.subarray(k, k + width), bufferPadding);
	          this.extend(rowBuffer, bufferPadding, width);
	          this.filter(rowBuffer, bufferPadding, width);
	          items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);
	        }
	      }
	      var numBuffers = 16;
	      var colBuffers = [];
	      for (i = 0; i < numBuffers; i++) {
	        colBuffers.push(new Float32Array(height + 2 * bufferPadding));
	      }
	      var b,
	          currentBuffer = 0;
	      ll = bufferPadding + height;
	      if (height === 1) {
	        if ((v0 & 1) !== 0) {
	          for (u = 0; u < width; u++) {
	            items[u] *= 0.5;
	          }
	        }
	      } else {
	        for (u = 0; u < width; u++) {
	          if (currentBuffer === 0) {
	            numBuffers = Math.min(width - u, numBuffers);
	            for (k = u, l = bufferPadding; l < ll; k += width, l++) {
	              for (b = 0; b < numBuffers; b++) {
	                colBuffers[b][l] = items[k + b];
	              }
	            }
	            currentBuffer = numBuffers;
	          }
	          currentBuffer--;
	          var buffer = colBuffers[currentBuffer];
	          this.extend(buffer, bufferPadding, height);
	          this.filter(buffer, bufferPadding, height);
	          if (currentBuffer === 0) {
	            k = u - numBuffers + 1;
	            for (l = bufferPadding; l < ll; k += width, l++) {
	              for (b = 0; b < numBuffers; b++) {
	                items[k + b] = colBuffers[b][l];
	              }
	            }
	          }
	        }
	      }
	      return {
	        width: width,
	        height: height,
	        items: items
	      };
	    };
	    return Transform;
	  }();
	  var IrreversibleTransform = function IrreversibleTransformClosure() {
	    function IrreversibleTransform() {
	      Transform.call(this);
	    }
	    IrreversibleTransform.prototype = Object.create(Transform.prototype);
	    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {
	      var len = length >> 1;
	      offset = offset | 0;
	      var j, n, current, next;
	      var alpha = -1.586134342059924;
	      var beta = -0.052980118572961;
	      var gamma = 0.882911075530934;
	      var delta = 0.443506852043971;
	      var K = 1.230174104914001;
	      var K_ = 1 / K;
	      j = offset - 3;
	      for (n = len + 4; n--; j += 2) {
	        x[j] *= K_;
	      }
	      j = offset - 2;
	      current = delta * x[j - 1];
	      for (n = len + 3; n--; j += 2) {
	        next = delta * x[j + 1];
	        x[j] = K * x[j] - current - next;
	        if (n--) {
	          j += 2;
	          current = delta * x[j + 1];
	          x[j] = K * x[j] - current - next;
	        } else {
	          break;
	        }
	      }
	      j = offset - 1;
	      current = gamma * x[j - 1];
	      for (n = len + 2; n--; j += 2) {
	        next = gamma * x[j + 1];
	        x[j] -= current + next;
	        if (n--) {
	          j += 2;
	          current = gamma * x[j + 1];
	          x[j] -= current + next;
	        } else {
	          break;
	        }
	      }
	      j = offset;
	      current = beta * x[j - 1];
	      for (n = len + 1; n--; j += 2) {
	        next = beta * x[j + 1];
	        x[j] -= current + next;
	        if (n--) {
	          j += 2;
	          current = beta * x[j + 1];
	          x[j] -= current + next;
	        } else {
	          break;
	        }
	      }
	      if (len !== 0) {
	        j = offset + 1;
	        current = alpha * x[j - 1];
	        for (n = len; n--; j += 2) {
	          next = alpha * x[j + 1];
	          x[j] -= current + next;
	          if (n--) {
	            j += 2;
	            current = alpha * x[j + 1];
	            x[j] -= current + next;
	          } else {
	            break;
	          }
	        }
	      }
	    };
	    return IrreversibleTransform;
	  }();
	  var ReversibleTransform = function ReversibleTransformClosure() {
	    function ReversibleTransform() {
	      Transform.call(this);
	    }
	    ReversibleTransform.prototype = Object.create(Transform.prototype);
	    ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {
	      var len = length >> 1;
	      offset = offset | 0;
	      var j, n;
	      for (j = offset, n = len + 1; n--; j += 2) {
	        x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;
	      }
	      for (j = offset + 1, n = len; n--; j += 2) {
	        x[j] += x[j - 1] + x[j + 1] >> 1;
	      }
	    };
	    return ReversibleTransform;
	  }();
	  return JpxImage;
	}();
	exports.JpxImage = JpxImage;

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreCrypto = __w_pdfjs_require__(13);
	var coreParser = __w_pdfjs_require__(5);
	var coreChunkedStream = __w_pdfjs_require__(12);
	var coreColorSpace = __w_pdfjs_require__(3);
	var InvalidPDFException = sharedUtil.InvalidPDFException;
	var MissingDataException = sharedUtil.MissingDataException;
	var XRefParseException = sharedUtil.XRefParseException;
	var assert = sharedUtil.assert;
	var bytesToString = sharedUtil.bytesToString;
	var createPromiseCapability = sharedUtil.createPromiseCapability;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isBool = sharedUtil.isBool;
	var isInt = sharedUtil.isInt;
	var isString = sharedUtil.isString;
	var shadow = sharedUtil.shadow;
	var stringToPDFString = sharedUtil.stringToPDFString;
	var stringToUTF8String = sharedUtil.stringToUTF8String;
	var warn = sharedUtil.warn;
	var createValidAbsoluteUrl = sharedUtil.createValidAbsoluteUrl;
	var Util = sharedUtil.Util;
	var Dict = corePrimitives.Dict;
	var Ref = corePrimitives.Ref;
	var RefSet = corePrimitives.RefSet;
	var RefSetCache = corePrimitives.RefSetCache;
	var isName = corePrimitives.isName;
	var isCmd = corePrimitives.isCmd;
	var isDict = corePrimitives.isDict;
	var isRef = corePrimitives.isRef;
	var isRefsEqual = corePrimitives.isRefsEqual;
	var isStream = corePrimitives.isStream;
	var CipherTransformFactory = coreCrypto.CipherTransformFactory;
	var Lexer = coreParser.Lexer;
	var Parser = coreParser.Parser;
	var ChunkedStream = coreChunkedStream.ChunkedStream;
	var ColorSpace = coreColorSpace.ColorSpace;
	var Catalog = function CatalogClosure() {
	  function Catalog(pdfManager, xref, pageFactory) {
	    this.pdfManager = pdfManager;
	    this.xref = xref;
	    this.catDict = xref.getCatalogObj();
	    assert(isDict(this.catDict), 'catalog object is not a dictionary');
	    this.fontCache = new RefSetCache();
	    this.builtInCMapCache = Object.create(null);
	    this.pageKidsCountCache = new RefSetCache();
	    this.pageFactory = pageFactory;
	    this.pagePromises = [];
	  }
	  Catalog.prototype = {
	    get metadata() {
	      var streamRef = this.catDict.getRaw('Metadata');
	      if (!isRef(streamRef)) {
	        return shadow(this, 'metadata', null);
	      }
	      var encryptMetadata = !this.xref.encrypt ? false : this.xref.encrypt.encryptMetadata;
	      var stream = this.xref.fetch(streamRef, !encryptMetadata);
	      var metadata;
	      if (stream && isDict(stream.dict)) {
	        var type = stream.dict.get('Type');
	        var subtype = stream.dict.get('Subtype');
	        if (isName(type, 'Metadata') && isName(subtype, 'XML')) {
	          try {
	            metadata = stringToUTF8String(bytesToString(stream.getBytes()));
	          } catch (e) {
	            if (e instanceof MissingDataException) {
	              throw e;
	            }
	            info('Skipping invalid metadata.');
	          }
	        }
	      }
	      return shadow(this, 'metadata', metadata);
	    },
	    get toplevelPagesDict() {
	      var pagesObj = this.catDict.get('Pages');
	      assert(isDict(pagesObj), 'invalid top-level pages dictionary');
	      return shadow(this, 'toplevelPagesDict', pagesObj);
	    },
	    get documentOutline() {
	      var obj = null;
	      try {
	        obj = this.readDocumentOutline();
	      } catch (ex) {
	        if (ex instanceof MissingDataException) {
	          throw ex;
	        }
	        warn('Unable to read document outline');
	      }
	      return shadow(this, 'documentOutline', obj);
	    },
	    readDocumentOutline: function Catalog_readDocumentOutline() {
	      var obj = this.catDict.get('Outlines');
	      if (!isDict(obj)) {
	        return null;
	      }
	      obj = obj.getRaw('First');
	      if (!isRef(obj)) {
	        return null;
	      }
	      var root = { items: [] };
	      var queue = [{
	        obj: obj,
	        parent: root
	      }];
	      var processed = new RefSet();
	      processed.put(obj);
	      var xref = this.xref,
	          blackColor = new Uint8Array(3);
	      while (queue.length > 0) {
	        var i = queue.shift();
	        var outlineDict = xref.fetchIfRef(i.obj);
	        if (outlineDict === null) {
	          continue;
	        }
	        assert(outlineDict.has('Title'), 'Invalid outline item');
	        var data = {
	          url: null,
	          dest: null
	        };
	        Catalog.parseDestDictionary({
	          destDict: outlineDict,
	          resultObj: data,
	          docBaseUrl: this.pdfManager.docBaseUrl
	        });
	        var title = outlineDict.get('Title');
	        var flags = outlineDict.get('F') || 0;
	        var color = outlineDict.getArray('C'),
	            rgbColor = blackColor;
	        if (isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {
	          rgbColor = ColorSpace.singletons.rgb.getRgb(color, 0);
	        }
	        var outlineItem = {
	          dest: data.dest,
	          url: data.url,
	          unsafeUrl: data.unsafeUrl,
	          newWindow: data.newWindow,
	          title: stringToPDFString(title),
	          color: rgbColor,
	          count: outlineDict.get('Count'),
	          bold: !!(flags & 2),
	          italic: !!(flags & 1),
	          items: []
	        };
	        i.parent.items.push(outlineItem);
	        obj = outlineDict.getRaw('First');
	        if (isRef(obj) && !processed.has(obj)) {
	          queue.push({
	            obj: obj,
	            parent: outlineItem
	          });
	          processed.put(obj);
	        }
	        obj = outlineDict.getRaw('Next');
	        if (isRef(obj) && !processed.has(obj)) {
	          queue.push({
	            obj: obj,
	            parent: i.parent
	          });
	          processed.put(obj);
	        }
	      }
	      return root.items.length > 0 ? root.items : null;
	    },
	    get numPages() {
	      var obj = this.toplevelPagesDict.get('Count');
	      assert(isInt(obj), 'page count in top level pages object is not an integer');
	      return shadow(this, 'num', obj);
	    },
	    get destinations() {
	      function fetchDestination(dest) {
	        return isDict(dest) ? dest.get('D') : dest;
	      }
	      var xref = this.xref;
	      var dests = {},
	          nameTreeRef,
	          nameDictionaryRef;
	      var obj = this.catDict.get('Names');
	      if (obj && obj.has('Dests')) {
	        nameTreeRef = obj.getRaw('Dests');
	      } else if (this.catDict.has('Dests')) {
	        nameDictionaryRef = this.catDict.get('Dests');
	      }
	      if (nameDictionaryRef) {
	        obj = nameDictionaryRef;
	        obj.forEach(function catalogForEach(key, value) {
	          if (!value) {
	            return;
	          }
	          dests[key] = fetchDestination(value);
	        });
	      }
	      if (nameTreeRef) {
	        var nameTree = new NameTree(nameTreeRef, xref);
	        var names = nameTree.getAll();
	        for (var name in names) {
	          dests[name] = fetchDestination(names[name]);
	        }
	      }
	      return shadow(this, 'destinations', dests);
	    },
	    getDestination: function Catalog_getDestination(destinationId) {
	      function fetchDestination(dest) {
	        return isDict(dest) ? dest.get('D') : dest;
	      }
	      var xref = this.xref;
	      var dest = null,
	          nameTreeRef,
	          nameDictionaryRef;
	      var obj = this.catDict.get('Names');
	      if (obj && obj.has('Dests')) {
	        nameTreeRef = obj.getRaw('Dests');
	      } else if (this.catDict.has('Dests')) {
	        nameDictionaryRef = this.catDict.get('Dests');
	      }
	      if (nameDictionaryRef) {
	        var value = nameDictionaryRef.get(destinationId);
	        if (value) {
	          dest = fetchDestination(value);
	        }
	      }
	      if (nameTreeRef) {
	        var nameTree = new NameTree(nameTreeRef, xref);
	        dest = fetchDestination(nameTree.get(destinationId));
	      }
	      return dest;
	    },
	    get pageLabels() {
	      var obj = null;
	      try {
	        obj = this.readPageLabels();
	      } catch (ex) {
	        if (ex instanceof MissingDataException) {
	          throw ex;
	        }
	        warn('Unable to read page labels.');
	      }
	      return shadow(this, 'pageLabels', obj);
	    },
	    readPageLabels: function Catalog_readPageLabels() {
	      var obj = this.catDict.getRaw('PageLabels');
	      if (!obj) {
	        return null;
	      }
	      var pageLabels = new Array(this.numPages);
	      var style = null;
	      var prefix = '';
	      var numberTree = new NumberTree(obj, this.xref);
	      var nums = numberTree.getAll();
	      var currentLabel = '',
	          currentIndex = 1;
	      for (var i = 0, ii = this.numPages; i < ii; i++) {
	        if (i in nums) {
	          var labelDict = nums[i];
	          assert(isDict(labelDict), 'The PageLabel is not a dictionary.');
	          var type = labelDict.get('Type');
	          assert(!type || isName(type, 'PageLabel'), 'Invalid type in PageLabel dictionary.');
	          var s = labelDict.get('S');
	          assert(!s || isName(s), 'Invalid style in PageLabel dictionary.');
	          style = s ? s.name : null;
	          var p = labelDict.get('P');
	          assert(!p || isString(p), 'Invalid prefix in PageLabel dictionary.');
	          prefix = p ? stringToPDFString(p) : '';
	          var st = labelDict.get('St');
	          assert(!st || isInt(st) && st >= 1, 'Invalid start in PageLabel dictionary.');
	          currentIndex = st || 1;
	        }
	        switch (style) {
	          case 'D':
	            currentLabel = currentIndex;
	            break;
	          case 'R':
	          case 'r':
	            currentLabel = Util.toRoman(currentIndex, style === 'r');
	            break;
	          case 'A':
	          case 'a':
	            var LIMIT = 26;
	            var A_UPPER_CASE = 0x41,
	                A_LOWER_CASE = 0x61;
	            var baseCharCode = style === 'a' ? A_LOWER_CASE : A_UPPER_CASE;
	            var letterIndex = currentIndex - 1;
	            var character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);
	            var charBuf = [];
	            for (var j = 0, jj = letterIndex / LIMIT | 0; j <= jj; j++) {
	              charBuf.push(character);
	            }
	            currentLabel = charBuf.join('');
	            break;
	          default:
	            assert(!style, 'Invalid style "' + style + '" in PageLabel dictionary.');
	        }
	        pageLabels[i] = prefix + currentLabel;
	        currentLabel = '';
	        currentIndex++;
	      }
	      return pageLabels;
	    },
	    get attachments() {
	      var xref = this.xref;
	      var attachments = null,
	          nameTreeRef;
	      var obj = this.catDict.get('Names');
	      if (obj) {
	        nameTreeRef = obj.getRaw('EmbeddedFiles');
	      }
	      if (nameTreeRef) {
	        var nameTree = new NameTree(nameTreeRef, xref);
	        var names = nameTree.getAll();
	        for (var name in names) {
	          var fs = new FileSpec(names[name], xref);
	          if (!attachments) {
	            attachments = Object.create(null);
	          }
	          attachments[stringToPDFString(name)] = fs.serializable;
	        }
	      }
	      return shadow(this, 'attachments', attachments);
	    },
	    get javaScript() {
	      var xref = this.xref;
	      var obj = this.catDict.get('Names');
	      var javaScript = [];
	      function appendIfJavaScriptDict(jsDict) {
	        var type = jsDict.get('S');
	        if (!isName(type, 'JavaScript')) {
	          return;
	        }
	        var js = jsDict.get('JS');
	        if (isStream(js)) {
	          js = bytesToString(js.getBytes());
	        } else if (!isString(js)) {
	          return;
	        }
	        javaScript.push(stringToPDFString(js));
	      }
	      if (obj && obj.has('JavaScript')) {
	        var nameTree = new NameTree(obj.getRaw('JavaScript'), xref);
	        var names = nameTree.getAll();
	        for (var name in names) {
	          var jsDict = names[name];
	          if (isDict(jsDict)) {
	            appendIfJavaScriptDict(jsDict);
	          }
	        }
	      }
	      var openactionDict = this.catDict.get('OpenAction');
	      if (isDict(openactionDict, 'Action')) {
	        var actionType = openactionDict.get('S');
	        if (isName(actionType, 'Named')) {
	          var action = openactionDict.get('N');
	          if (isName(action, 'Print')) {
	            javaScript.push('print({});');
	          }
	        } else {
	          appendIfJavaScriptDict(openactionDict);
	        }
	      }
	      return shadow(this, 'javaScript', javaScript);
	    },
	    cleanup: function Catalog_cleanup() {
	      var _this = this;

	      this.pageKidsCountCache.clear();
	      var promises = [];
	      this.fontCache.forEach(function (promise) {
	        promises.push(promise);
	      });
	      return Promise.all(promises).then(function (translatedFonts) {
	        for (var i = 0, ii = translatedFonts.length; i < ii; i++) {
	          var font = translatedFonts[i].dict;
	          delete font.translated;
	        }
	        _this.fontCache.clear();
	        _this.builtInCMapCache = Object.create(null);
	      });
	    },
	    getPage: function Catalog_getPage(pageIndex) {
	      var _this2 = this;

	      if (!(pageIndex in this.pagePromises)) {
	        this.pagePromises[pageIndex] = this.getPageDict(pageIndex).then(function (_ref) {
	          var _ref2 = _slicedToArray(_ref, 2),
	              dict = _ref2[0],
	              ref = _ref2[1];

	          return _this2.pageFactory.createPage(pageIndex, dict, ref, _this2.fontCache, _this2.builtInCMapCache);
	        });
	      }
	      return this.pagePromises[pageIndex];
	    },
	    getPageDict: function Catalog_getPageDict(pageIndex) {
	      var capability = createPromiseCapability();
	      var nodesToVisit = [this.catDict.getRaw('Pages')];
	      var count,
	          currentPageIndex = 0;
	      var xref = this.xref,
	          pageKidsCountCache = this.pageKidsCountCache;
	      function next() {
	        while (nodesToVisit.length) {
	          var currentNode = nodesToVisit.pop();
	          if (isRef(currentNode)) {
	            count = pageKidsCountCache.get(currentNode);
	            if (count > 0 && currentPageIndex + count < pageIndex) {
	              currentPageIndex += count;
	              continue;
	            }
	            xref.fetchAsync(currentNode).then(function (obj) {
	              if (isDict(obj, 'Page') || isDict(obj) && !obj.has('Kids')) {
	                if (pageIndex === currentPageIndex) {
	                  if (currentNode && !pageKidsCountCache.has(currentNode)) {
	                    pageKidsCountCache.put(currentNode, 1);
	                  }
	                  capability.resolve([obj, currentNode]);
	                } else {
	                  currentPageIndex++;
	                  next();
	                }
	                return;
	              }
	              nodesToVisit.push(obj);
	              next();
	            }, capability.reject);
	            return;
	          }
	          assert(isDict(currentNode), 'page dictionary kid reference points to wrong type of object');
	          count = currentNode.get('Count');
	          var objId = currentNode.objId;
	          if (objId && !pageKidsCountCache.has(objId)) {
	            pageKidsCountCache.put(objId, count);
	          }
	          if (currentPageIndex + count <= pageIndex) {
	            currentPageIndex += count;
	            continue;
	          }
	          var kids = currentNode.get('Kids');
	          assert(isArray(kids), 'page dictionary kids object is not an array');
	          for (var last = kids.length - 1; last >= 0; last--) {
	            nodesToVisit.push(kids[last]);
	          }
	        }
	        capability.reject('Page index ' + pageIndex + ' not found.');
	      }
	      next();
	      return capability.promise;
	    },
	    getPageIndex: function Catalog_getPageIndex(pageRef) {
	      var xref = this.xref;
	      function pagesBeforeRef(kidRef) {
	        var total = 0;
	        var parentRef;
	        return xref.fetchAsync(kidRef).then(function (node) {
	          if (isRefsEqual(kidRef, pageRef) && !isDict(node, 'Page') && !(isDict(node) && !node.has('Type') && node.has('Contents'))) {
	            throw new Error('The reference does not point to a /Page Dict.');
	          }
	          if (!node) {
	            return null;
	          }
	          assert(isDict(node), 'node must be a Dict.');
	          parentRef = node.getRaw('Parent');
	          return node.getAsync('Parent');
	        }).then(function (parent) {
	          if (!parent) {
	            return null;
	          }
	          assert(isDict(parent), 'parent must be a Dict.');
	          return parent.getAsync('Kids');
	        }).then(function (kids) {
	          if (!kids) {
	            return null;
	          }
	          var kidPromises = [];
	          var found = false;
	          for (var i = 0; i < kids.length; i++) {
	            var kid = kids[i];
	            assert(isRef(kid), 'kid must be a Ref.');
	            if (kid.num === kidRef.num) {
	              found = true;
	              break;
	            }
	            kidPromises.push(xref.fetchAsync(kid).then(function (kid) {
	              if (kid.has('Count')) {
	                var count = kid.get('Count');
	                total += count;
	              } else {
	                total++;
	              }
	            }));
	          }
	          if (!found) {
	            error('kid ref not found in parents kids');
	          }
	          return Promise.all(kidPromises).then(function () {
	            return [total, parentRef];
	          });
	        });
	      }
	      var total = 0;
	      function next(ref) {
	        return pagesBeforeRef(ref).then(function (args) {
	          if (!args) {
	            return total;
	          }
	          var count = args[0];
	          var parentRef = args[1];
	          total += count;
	          return next(parentRef);
	        });
	      }
	      return next(pageRef);
	    }
	  };
	  Catalog.parseDestDictionary = function Catalog_parseDestDictionary(params) {
	    function addDefaultProtocolToUrl(url) {
	      if (url.indexOf('www.') === 0) {
	        return 'http://' + url;
	      }
	      return url;
	    }
	    function tryConvertUrlEncoding(url) {
	      try {
	        return stringToUTF8String(url);
	      } catch (e) {
	        return url;
	      }
	    }
	    var destDict = params.destDict;
	    if (!isDict(destDict)) {
	      warn('Catalog_parseDestDictionary: "destDict" must be a dictionary.');
	      return;
	    }
	    var resultObj = params.resultObj;
	    if ((typeof resultObj === 'undefined' ? 'undefined' : _typeof(resultObj)) !== 'object') {
	      warn('Catalog_parseDestDictionary: "resultObj" must be an object.');
	      return;
	    }
	    var docBaseUrl = params.docBaseUrl || null;
	    var action = destDict.get('A'),
	        url,
	        dest;
	    if (isDict(action)) {
	      var linkType = action.get('S').name;
	      switch (linkType) {
	        case 'URI':
	          url = action.get('URI');
	          if (isName(url)) {
	            url = '/' + url.name;
	          } else if (isString(url)) {
	            url = addDefaultProtocolToUrl(url);
	          }
	          break;
	        case 'GoTo':
	          dest = action.get('D');
	          break;
	        case 'Launch':
	        case 'GoToR':
	          var urlDict = action.get('F');
	          if (isDict(urlDict)) {
	            url = urlDict.get('F') || null;
	          } else if (isString(urlDict)) {
	            url = urlDict;
	          }
	          var remoteDest = action.get('D');
	          if (remoteDest) {
	            if (isName(remoteDest)) {
	              remoteDest = remoteDest.name;
	            }
	            if (isString(url)) {
	              var baseUrl = url.split('#')[0];
	              if (isString(remoteDest)) {
	                url = baseUrl + '#' + (/^\d+$/.test(remoteDest) ? 'nameddest=' : '') + remoteDest;
	              } else if (isArray(remoteDest)) {
	                url = baseUrl + '#' + JSON.stringify(remoteDest);
	              }
	            }
	          }
	          var newWindow = action.get('NewWindow');
	          if (isBool(newWindow)) {
	            resultObj.newWindow = newWindow;
	          }
	          break;
	        case 'Named':
	          var namedAction = action.get('N');
	          if (isName(namedAction)) {
	            resultObj.action = namedAction.name;
	          }
	          break;
	        case 'JavaScript':
	          var jsAction = action.get('JS'),
	              js;
	          if (isStream(jsAction)) {
	            js = bytesToString(jsAction.getBytes());
	          } else if (isString(jsAction)) {
	            js = jsAction;
	          }
	          if (js) {
	            var URL_OPEN_METHODS = ['app.launchURL', 'window.open'];
	            var regex = new RegExp('^\\s*(' + URL_OPEN_METHODS.join('|').split('.').join('\\.') + ')\\((?:\'|\")([^\'\"]*)(?:\'|\")(?:,\\s*(\\w+)\\)|\\))', 'i');
	            var jsUrl = regex.exec(stringToPDFString(js));
	            if (jsUrl && jsUrl[2]) {
	              url = jsUrl[2];
	              if (jsUrl[3] === 'true' && jsUrl[1] === 'app.launchURL') {
	                resultObj.newWindow = true;
	              }
	              break;
	            }
	          }
	        default:
	          warn('Catalog_parseDestDictionary: Unrecognized link type "' + linkType + '".');
	          break;
	      }
	    } else if (destDict.has('Dest')) {
	      dest = destDict.get('Dest');
	    }
	    if (isString(url)) {
	      url = tryConvertUrlEncoding(url);
	      var absoluteUrl = createValidAbsoluteUrl(url, docBaseUrl);
	      if (absoluteUrl) {
	        resultObj.url = absoluteUrl.href;
	      }
	      resultObj.unsafeUrl = url;
	    }
	    if (dest) {
	      if (isName(dest)) {
	        dest = dest.name;
	      }
	      if (isString(dest) || isArray(dest)) {
	        resultObj.dest = dest;
	      }
	    }
	  };
	  return Catalog;
	}();
	var XRef = function XRefClosure() {
	  function XRef(stream, pdfManager) {
	    this.stream = stream;
	    this.pdfManager = pdfManager;
	    this.entries = [];
	    this.xrefstms = Object.create(null);
	    this.cache = [];
	    this.stats = {
	      streamTypes: [],
	      fontTypes: []
	    };
	  }
	  XRef.prototype = {
	    setStartXRef: function XRef_setStartXRef(startXRef) {
	      this.startXRefQueue = [startXRef];
	    },
	    parse: function XRef_parse(recoveryMode) {
	      var trailerDict;
	      if (!recoveryMode) {
	        trailerDict = this.readXRef();
	      } else {
	        warn('Indexing all PDF objects');
	        trailerDict = this.indexObjects();
	      }
	      trailerDict.assignXref(this);
	      this.trailer = trailerDict;
	      var encrypt = trailerDict.get('Encrypt');
	      if (isDict(encrypt)) {
	        var ids = trailerDict.get('ID');
	        var fileId = ids && ids.length ? ids[0] : '';
	        encrypt.suppressEncryption = true;
	        this.encrypt = new CipherTransformFactory(encrypt, fileId, this.pdfManager.password);
	      }
	      if (!(this.root = trailerDict.get('Root'))) {
	        error('Invalid root reference');
	      }
	    },
	    processXRefTable: function XRef_processXRefTable(parser) {
	      if (!('tableState' in this)) {
	        this.tableState = {
	          entryNum: 0,
	          streamPos: parser.lexer.stream.pos,
	          parserBuf1: parser.buf1,
	          parserBuf2: parser.buf2
	        };
	      }
	      var obj = this.readXRefTable(parser);
	      if (!isCmd(obj, 'trailer')) {
	        error('Invalid XRef table: could not find trailer dictionary');
	      }
	      var dict = parser.getObj();
	      if (!isDict(dict) && dict.dict) {
	        dict = dict.dict;
	      }
	      if (!isDict(dict)) {
	        error('Invalid XRef table: could not parse trailer dictionary');
	      }
	      delete this.tableState;
	      return dict;
	    },
	    readXRefTable: function XRef_readXRefTable(parser) {
	      var stream = parser.lexer.stream;
	      var tableState = this.tableState;
	      stream.pos = tableState.streamPos;
	      parser.buf1 = tableState.parserBuf1;
	      parser.buf2 = tableState.parserBuf2;
	      var obj;
	      while (true) {
	        if (!('firstEntryNum' in tableState) || !('entryCount' in tableState)) {
	          if (isCmd(obj = parser.getObj(), 'trailer')) {
	            break;
	          }
	          tableState.firstEntryNum = obj;
	          tableState.entryCount = parser.getObj();
	        }
	        var first = tableState.firstEntryNum;
	        var count = tableState.entryCount;
	        if (!isInt(first) || !isInt(count)) {
	          error('Invalid XRef table: wrong types in subsection header');
	        }
	        for (var i = tableState.entryNum; i < count; i++) {
	          tableState.streamPos = stream.pos;
	          tableState.entryNum = i;
	          tableState.parserBuf1 = parser.buf1;
	          tableState.parserBuf2 = parser.buf2;
	          var entry = {};
	          entry.offset = parser.getObj();
	          entry.gen = parser.getObj();
	          var type = parser.getObj();
	          if (isCmd(type, 'f')) {
	            entry.free = true;
	          } else if (isCmd(type, 'n')) {
	            entry.uncompressed = true;
	          }
	          if (!isInt(entry.offset) || !isInt(entry.gen) || !(entry.free || entry.uncompressed)) {
	            error('Invalid entry in XRef subsection: ' + first + ', ' + count);
	          }
	          if (i === 0 && entry.free && first === 1) {
	            first = 0;
	          }
	          if (!this.entries[i + first]) {
	            this.entries[i + first] = entry;
	          }
	        }
	        tableState.entryNum = 0;
	        tableState.streamPos = stream.pos;
	        tableState.parserBuf1 = parser.buf1;
	        tableState.parserBuf2 = parser.buf2;
	        delete tableState.firstEntryNum;
	        delete tableState.entryCount;
	      }
	      if (this.entries[0] && !this.entries[0].free) {
	        error('Invalid XRef table: unexpected first object');
	      }
	      return obj;
	    },
	    processXRefStream: function XRef_processXRefStream(stream) {
	      if (!('streamState' in this)) {
	        var streamParameters = stream.dict;
	        var byteWidths = streamParameters.get('W');
	        var range = streamParameters.get('Index');
	        if (!range) {
	          range = [0, streamParameters.get('Size')];
	        }
	        this.streamState = {
	          entryRanges: range,
	          byteWidths: byteWidths,
	          entryNum: 0,
	          streamPos: stream.pos
	        };
	      }
	      this.readXRefStream(stream);
	      delete this.streamState;
	      return stream.dict;
	    },
	    readXRefStream: function XRef_readXRefStream(stream) {
	      var i, j;
	      var streamState = this.streamState;
	      stream.pos = streamState.streamPos;
	      var byteWidths = streamState.byteWidths;
	      var typeFieldWidth = byteWidths[0];
	      var offsetFieldWidth = byteWidths[1];
	      var generationFieldWidth = byteWidths[2];
	      var entryRanges = streamState.entryRanges;
	      while (entryRanges.length > 0) {
	        var first = entryRanges[0];
	        var n = entryRanges[1];
	        if (!isInt(first) || !isInt(n)) {
	          error('Invalid XRef range fields: ' + first + ', ' + n);
	        }
	        if (!isInt(typeFieldWidth) || !isInt(offsetFieldWidth) || !isInt(generationFieldWidth)) {
	          error('Invalid XRef entry fields length: ' + first + ', ' + n);
	        }
	        for (i = streamState.entryNum; i < n; ++i) {
	          streamState.entryNum = i;
	          streamState.streamPos = stream.pos;
	          var type = 0,
	              offset = 0,
	              generation = 0;
	          for (j = 0; j < typeFieldWidth; ++j) {
	            type = type << 8 | stream.getByte();
	          }
	          if (typeFieldWidth === 0) {
	            type = 1;
	          }
	          for (j = 0; j < offsetFieldWidth; ++j) {
	            offset = offset << 8 | stream.getByte();
	          }
	          for (j = 0; j < generationFieldWidth; ++j) {
	            generation = generation << 8 | stream.getByte();
	          }
	          var entry = {};
	          entry.offset = offset;
	          entry.gen = generation;
	          switch (type) {
	            case 0:
	              entry.free = true;
	              break;
	            case 1:
	              entry.uncompressed = true;
	              break;
	            case 2:
	              break;
	            default:
	              error('Invalid XRef entry type: ' + type);
	          }
	          if (!this.entries[first + i]) {
	            this.entries[first + i] = entry;
	          }
	        }
	        streamState.entryNum = 0;
	        streamState.streamPos = stream.pos;
	        entryRanges.splice(0, 2);
	      }
	    },
	    indexObjects: function XRef_indexObjects() {
	      var TAB = 0x9,
	          LF = 0xA,
	          CR = 0xD,
	          SPACE = 0x20;
	      var PERCENT = 0x25,
	          LT = 0x3C;
	      function readToken(data, offset) {
	        var token = '',
	            ch = data[offset];
	        while (ch !== LF && ch !== CR && ch !== LT) {
	          if (++offset >= data.length) {
	            break;
	          }
	          token += String.fromCharCode(ch);
	          ch = data[offset];
	        }
	        return token;
	      }
	      function skipUntil(data, offset, what) {
	        var length = what.length,
	            dataLength = data.length;
	        var skipped = 0;
	        while (offset < dataLength) {
	          var i = 0;
	          while (i < length && data[offset + i] === what[i]) {
	            ++i;
	          }
	          if (i >= length) {
	            break;
	          }
	          offset++;
	          skipped++;
	        }
	        return skipped;
	      }
	      var objRegExp = /^(\d+)\s+(\d+)\s+obj\b/;
	      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);
	      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);
	      var endobjBytes = new Uint8Array([101, 110, 100, 111, 98, 106]);
	      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);
	      this.entries.length = 0;
	      var stream = this.stream;
	      stream.pos = 0;
	      var buffer = stream.getBytes();
	      var position = stream.start,
	          length = buffer.length;
	      var trailers = [],
	          xrefStms = [];
	      while (position < length) {
	        var ch = buffer[position];
	        if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {
	          ++position;
	          continue;
	        }
	        if (ch === PERCENT) {
	          do {
	            ++position;
	            if (position >= length) {
	              break;
	            }
	            ch = buffer[position];
	          } while (ch !== LF && ch !== CR);
	          continue;
	        }
	        var token = readToken(buffer, position);
	        var m;
	        if (token.indexOf('xref') === 0 && (token.length === 4 || /\s/.test(token[4]))) {
	          position += skipUntil(buffer, position, trailerBytes);
	          trailers.push(position);
	          position += skipUntil(buffer, position, startxrefBytes);
	        } else if (m = objRegExp.exec(token)) {
	          if (typeof this.entries[m[1]] === 'undefined') {
	            this.entries[m[1]] = {
	              offset: position - stream.start,
	              gen: m[2] | 0,
	              uncompressed: true
	            };
	          }
	          var contentLength = skipUntil(buffer, position, endobjBytes) + 7;
	          var content = buffer.subarray(position, position + contentLength);
	          var xrefTagOffset = skipUntil(content, 0, xrefBytes);
	          if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {
	            xrefStms.push(position - stream.start);
	            this.xrefstms[position - stream.start] = 1;
	          }
	          position += contentLength;
	        } else if (token.indexOf('trailer') === 0 && (token.length === 7 || /\s/.test(token[7]))) {
	          trailers.push(position);
	          position += skipUntil(buffer, position, startxrefBytes);
	        } else {
	          position += token.length + 1;
	        }
	      }
	      var i, ii;
	      for (i = 0, ii = xrefStms.length; i < ii; ++i) {
	        this.startXRefQueue.push(xrefStms[i]);
	        this.readXRef(true);
	      }
	      var dict;
	      for (i = 0, ii = trailers.length; i < ii; ++i) {
	        stream.pos = trailers[i];
	        var parser = new Parser(new Lexer(stream), true, this, true);
	        var obj = parser.getObj();
	        if (!isCmd(obj, 'trailer')) {
	          continue;
	        }
	        dict = parser.getObj();
	        if (!isDict(dict)) {
	          continue;
	        }
	        if (dict.has('ID')) {
	          return dict;
	        }
	      }
	      if (dict) {
	        return dict;
	      }
	      throw new InvalidPDFException('Invalid PDF structure');
	    },
	    readXRef: function XRef_readXRef(recoveryMode) {
	      var stream = this.stream;
	      try {
	        while (this.startXRefQueue.length) {
	          var startXRef = this.startXRefQueue[0];
	          stream.pos = startXRef + stream.start;
	          var parser = new Parser(new Lexer(stream), true, this);
	          var obj = parser.getObj();
	          var dict;
	          if (isCmd(obj, 'xref')) {
	            dict = this.processXRefTable(parser);
	            if (!this.topDict) {
	              this.topDict = dict;
	            }
	            obj = dict.get('XRefStm');
	            if (isInt(obj)) {
	              var pos = obj;
	              if (!(pos in this.xrefstms)) {
	                this.xrefstms[pos] = 1;
	                this.startXRefQueue.push(pos);
	              }
	            }
	          } else if (isInt(obj)) {
	            if (!isInt(parser.getObj()) || !isCmd(parser.getObj(), 'obj') || !isStream(obj = parser.getObj())) {
	              error('Invalid XRef stream');
	            }
	            dict = this.processXRefStream(obj);
	            if (!this.topDict) {
	              this.topDict = dict;
	            }
	            if (!dict) {
	              error('Failed to read XRef stream');
	            }
	          } else {
	            error('Invalid XRef stream header');
	          }
	          obj = dict.get('Prev');
	          if (isInt(obj)) {
	            this.startXRefQueue.push(obj);
	          } else if (isRef(obj)) {
	            this.startXRefQueue.push(obj.num);
	          }
	          this.startXRefQueue.shift();
	        }
	        return this.topDict;
	      } catch (e) {
	        if (e instanceof MissingDataException) {
	          throw e;
	        }
	        info('(while reading XRef): ' + e);
	      }
	      if (recoveryMode) {
	        return;
	      }
	      throw new XRefParseException();
	    },
	    getEntry: function XRef_getEntry(i) {
	      var xrefEntry = this.entries[i];
	      if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {
	        return xrefEntry;
	      }
	      return null;
	    },
	    fetchIfRef: function XRef_fetchIfRef(obj, suppressEncryption) {
	      if (!isRef(obj)) {
	        return obj;
	      }
	      return this.fetch(obj, suppressEncryption);
	    },
	    fetch: function XRef_fetch(ref, suppressEncryption) {
	      assert(isRef(ref), 'ref object is not a reference');
	      var num = ref.num;
	      if (num in this.cache) {
	        var cacheEntry = this.cache[num];
	        if (cacheEntry instanceof Dict && !cacheEntry.objId) {
	          cacheEntry.objId = ref.toString();
	        }
	        return cacheEntry;
	      }
	      var xrefEntry = this.getEntry(num);
	      if (xrefEntry === null) {
	        return this.cache[num] = null;
	      }
	      if (xrefEntry.uncompressed) {
	        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);
	      } else {
	        xrefEntry = this.fetchCompressed(xrefEntry, suppressEncryption);
	      }
	      if (isDict(xrefEntry)) {
	        xrefEntry.objId = ref.toString();
	      } else if (isStream(xrefEntry)) {
	        xrefEntry.dict.objId = ref.toString();
	      }
	      return xrefEntry;
	    },
	    fetchUncompressed: function XRef_fetchUncompressed(ref, xrefEntry, suppressEncryption) {
	      var gen = ref.gen;
	      var num = ref.num;
	      if (xrefEntry.gen !== gen) {
	        error('inconsistent generation in XRef');
	      }
	      var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);
	      var parser = new Parser(new Lexer(stream), true, this);
	      var obj1 = parser.getObj();
	      var obj2 = parser.getObj();
	      var obj3 = parser.getObj();
	      if (!isInt(obj1) || parseInt(obj1, 10) !== num || !isInt(obj2) || parseInt(obj2, 10) !== gen || !isCmd(obj3)) {
	        error('bad XRef entry');
	      }
	      if (!isCmd(obj3, 'obj')) {
	        if (obj3.cmd.indexOf('obj') === 0) {
	          num = parseInt(obj3.cmd.substring(3), 10);
	          if (!isNaN(num)) {
	            return num;
	          }
	        }
	        error('bad XRef entry');
	      }
	      if (this.encrypt && !suppressEncryption) {
	        xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));
	      } else {
	        xrefEntry = parser.getObj();
	      }
	      if (!isStream(xrefEntry)) {
	        this.cache[num] = xrefEntry;
	      }
	      return xrefEntry;
	    },
	    fetchCompressed: function XRef_fetchCompressed(xrefEntry, suppressEncryption) {
	      var tableOffset = xrefEntry.offset;
	      var stream = this.fetch(new Ref(tableOffset, 0));
	      if (!isStream(stream)) {
	        error('bad ObjStm stream');
	      }
	      var first = stream.dict.get('First');
	      var n = stream.dict.get('N');
	      if (!isInt(first) || !isInt(n)) {
	        error('invalid first and n parameters for ObjStm stream');
	      }
	      var parser = new Parser(new Lexer(stream), false, this);
	      parser.allowStreams = true;
	      var i,
	          entries = [],
	          num,
	          nums = [];
	      for (i = 0; i < n; ++i) {
	        num = parser.getObj();
	        if (!isInt(num)) {
	          error('invalid object number in the ObjStm stream: ' + num);
	        }
	        nums.push(num);
	        var offset = parser.getObj();
	        if (!isInt(offset)) {
	          error('invalid object offset in the ObjStm stream: ' + offset);
	        }
	      }
	      for (i = 0; i < n; ++i) {
	        entries.push(parser.getObj());
	        if (isCmd(parser.buf1, 'endobj')) {
	          parser.shift();
	        }
	        num = nums[i];
	        var entry = this.entries[num];
	        if (entry && entry.offset === tableOffset && entry.gen === i) {
	          this.cache[num] = entries[i];
	        }
	      }
	      xrefEntry = entries[xrefEntry.gen];
	      if (xrefEntry === undefined) {
	        error('bad XRef entry for compressed object');
	      }
	      return xrefEntry;
	    },
	    fetchIfRefAsync: function XRef_fetchIfRefAsync(obj, suppressEncryption) {
	      if (!isRef(obj)) {
	        return Promise.resolve(obj);
	      }
	      return this.fetchAsync(obj, suppressEncryption);
	    },
	    fetchAsync: function XRef_fetchAsync(ref, suppressEncryption) {
	      var streamManager = this.stream.manager;
	      var xref = this;
	      return new Promise(function tryFetch(resolve, reject) {
	        try {
	          resolve(xref.fetch(ref, suppressEncryption));
	        } catch (e) {
	          if (e instanceof MissingDataException) {
	            streamManager.requestRange(e.begin, e.end).then(function () {
	              tryFetch(resolve, reject);
	            }, reject);
	            return;
	          }
	          reject(e);
	        }
	      });
	    },
	    getCatalogObj: function XRef_getCatalogObj() {
	      return this.root;
	    }
	  };
	  return XRef;
	}();
	var NameOrNumberTree = function NameOrNumberTreeClosure() {
	  function NameOrNumberTree(root, xref) {
	    throw new Error('Cannot initialize NameOrNumberTree.');
	  }
	  NameOrNumberTree.prototype = {
	    getAll: function NameOrNumberTree_getAll() {
	      var dict = Object.create(null);
	      if (!this.root) {
	        return dict;
	      }
	      var xref = this.xref;
	      var processed = new RefSet();
	      processed.put(this.root);
	      var queue = [this.root];
	      while (queue.length > 0) {
	        var i, n;
	        var obj = xref.fetchIfRef(queue.shift());
	        if (!isDict(obj)) {
	          continue;
	        }
	        if (obj.has('Kids')) {
	          var kids = obj.get('Kids');
	          for (i = 0, n = kids.length; i < n; i++) {
	            var kid = kids[i];
	            assert(!processed.has(kid), 'Duplicate entry in "' + this._type + '" tree.');
	            queue.push(kid);
	            processed.put(kid);
	          }
	          continue;
	        }
	        var entries = obj.get(this._type);
	        if (isArray(entries)) {
	          for (i = 0, n = entries.length; i < n; i += 2) {
	            dict[xref.fetchIfRef(entries[i])] = xref.fetchIfRef(entries[i + 1]);
	          }
	        }
	      }
	      return dict;
	    },
	    get: function NameOrNumberTree_get(key) {
	      if (!this.root) {
	        return null;
	      }
	      var xref = this.xref;
	      var kidsOrEntries = xref.fetchIfRef(this.root);
	      var loopCount = 0;
	      var MAX_LEVELS = 10;
	      var l, r, m;
	      while (kidsOrEntries.has('Kids')) {
	        if (++loopCount > MAX_LEVELS) {
	          warn('Search depth limit reached for "' + this._type + '" tree.');
	          return null;
	        }
	        var kids = kidsOrEntries.get('Kids');
	        if (!isArray(kids)) {
	          return null;
	        }
	        l = 0;
	        r = kids.length - 1;
	        while (l <= r) {
	          m = l + r >> 1;
	          var kid = xref.fetchIfRef(kids[m]);
	          var limits = kid.get('Limits');
	          if (key < xref.fetchIfRef(limits[0])) {
	            r = m - 1;
	          } else if (key > xref.fetchIfRef(limits[1])) {
	            l = m + 1;
	          } else {
	            kidsOrEntries = xref.fetchIfRef(kids[m]);
	            break;
	          }
	        }
	        if (l > r) {
	          return null;
	        }
	      }
	      var entries = kidsOrEntries.get(this._type);
	      if (isArray(entries)) {
	        l = 0;
	        r = entries.length - 2;
	        while (l <= r) {
	          m = l + r & ~1;
	          var currentKey = xref.fetchIfRef(entries[m]);
	          if (key < currentKey) {
	            r = m - 2;
	          } else if (key > currentKey) {
	            l = m + 2;
	          } else {
	            return xref.fetchIfRef(entries[m + 1]);
	          }
	        }
	      }
	      return null;
	    }
	  };
	  return NameOrNumberTree;
	}();
	var NameTree = function NameTreeClosure() {
	  function NameTree(root, xref) {
	    this.root = root;
	    this.xref = xref;
	    this._type = 'Names';
	  }
	  Util.inherit(NameTree, NameOrNumberTree, {});
	  return NameTree;
	}();
	var NumberTree = function NumberTreeClosure() {
	  function NumberTree(root, xref) {
	    this.root = root;
	    this.xref = xref;
	    this._type = 'Nums';
	  }
	  Util.inherit(NumberTree, NameOrNumberTree, {});
	  return NumberTree;
	}();
	var FileSpec = function FileSpecClosure() {
	  function FileSpec(root, xref) {
	    if (!root || !isDict(root)) {
	      return;
	    }
	    this.xref = xref;
	    this.root = root;
	    if (root.has('FS')) {
	      this.fs = root.get('FS');
	    }
	    this.description = root.has('Desc') ? stringToPDFString(root.get('Desc')) : '';
	    if (root.has('RF')) {
	      warn('Related file specifications are not supported');
	    }
	    this.contentAvailable = true;
	    if (!root.has('EF')) {
	      this.contentAvailable = false;
	      warn('Non-embedded file specifications are not supported');
	    }
	  }
	  function pickPlatformItem(dict) {
	    if (dict.has('UF')) {
	      return dict.get('UF');
	    } else if (dict.has('F')) {
	      return dict.get('F');
	    } else if (dict.has('Unix')) {
	      return dict.get('Unix');
	    } else if (dict.has('Mac')) {
	      return dict.get('Mac');
	    } else if (dict.has('DOS')) {
	      return dict.get('DOS');
	    }
	    return null;
	  }
	  FileSpec.prototype = {
	    get filename() {
	      if (!this._filename && this.root) {
	        var filename = pickPlatformItem(this.root) || 'unnamed';
	        this._filename = stringToPDFString(filename).replace(/\\\\/g, '\\').replace(/\\\//g, '/').replace(/\\/g, '/');
	      }
	      return this._filename;
	    },
	    get content() {
	      if (!this.contentAvailable) {
	        return null;
	      }
	      if (!this.contentRef && this.root) {
	        this.contentRef = pickPlatformItem(this.root.get('EF'));
	      }
	      var content = null;
	      if (this.contentRef) {
	        var xref = this.xref;
	        var fileObj = xref.fetchIfRef(this.contentRef);
	        if (fileObj && isStream(fileObj)) {
	          content = fileObj.getBytes();
	        } else {
	          warn('Embedded file specification points to non-existing/invalid ' + 'content');
	        }
	      } else {
	        warn('Embedded file specification does not have a content');
	      }
	      return content;
	    },
	    get serializable() {
	      return {
	        filename: this.filename,
	        content: this.content
	      };
	    }
	  };
	  return FileSpec;
	}();
	var ObjectLoader = function () {
	  function mayHaveChildren(value) {
	    return isRef(value) || isDict(value) || isArray(value) || isStream(value);
	  }
	  function addChildren(node, nodesToVisit) {
	    var value;
	    if (isDict(node) || isStream(node)) {
	      var map;
	      if (isDict(node)) {
	        map = node.map;
	      } else {
	        map = node.dict.map;
	      }
	      for (var key in map) {
	        value = map[key];
	        if (mayHaveChildren(value)) {
	          nodesToVisit.push(value);
	        }
	      }
	    } else if (isArray(node)) {
	      for (var i = 0, ii = node.length; i < ii; i++) {
	        value = node[i];
	        if (mayHaveChildren(value)) {
	          nodesToVisit.push(value);
	        }
	      }
	    }
	  }
	  function ObjectLoader(obj, keys, xref) {
	    this.obj = obj;
	    this.keys = keys;
	    this.xref = xref;
	    this.refSet = null;
	    this.capability = null;
	  }
	  ObjectLoader.prototype = {
	    load: function ObjectLoader_load() {
	      var keys = this.keys;
	      this.capability = createPromiseCapability();
	      if (!(this.xref.stream instanceof ChunkedStream) || this.xref.stream.getMissingChunks().length === 0) {
	        this.capability.resolve();
	        return this.capability.promise;
	      }
	      this.refSet = new RefSet();
	      var nodesToVisit = [];
	      for (var i = 0; i < keys.length; i++) {
	        nodesToVisit.push(this.obj[keys[i]]);
	      }
	      this._walk(nodesToVisit);
	      return this.capability.promise;
	    },
	    _walk: function ObjectLoader_walk(nodesToVisit) {
	      var _this3 = this;

	      var nodesToRevisit = [];
	      var pendingRequests = [];
	      while (nodesToVisit.length) {
	        var currentNode = nodesToVisit.pop();
	        if (isRef(currentNode)) {
	          if (this.refSet.has(currentNode)) {
	            continue;
	          }
	          try {
	            var ref = currentNode;
	            this.refSet.put(ref);
	            currentNode = this.xref.fetch(currentNode);
	          } catch (e) {
	            if (!(e instanceof MissingDataException)) {
	              throw e;
	            }
	            nodesToRevisit.push(currentNode);
	            pendingRequests.push({
	              begin: e.begin,
	              end: e.end
	            });
	          }
	        }
	        if (currentNode && currentNode.getBaseStreams) {
	          var baseStreams = currentNode.getBaseStreams();
	          var foundMissingData = false;
	          for (var i = 0; i < baseStreams.length; i++) {
	            var stream = baseStreams[i];
	            if (stream.getMissingChunks && stream.getMissingChunks().length) {
	              foundMissingData = true;
	              pendingRequests.push({
	                begin: stream.start,
	                end: stream.end
	              });
	            }
	          }
	          if (foundMissingData) {
	            nodesToRevisit.push(currentNode);
	          }
	        }
	        addChildren(currentNode, nodesToVisit);
	      }
	      if (pendingRequests.length) {
	        this.xref.stream.manager.requestRanges(pendingRequests).then(function () {
	          nodesToVisit = nodesToRevisit;
	          for (var i = 0; i < nodesToRevisit.length; i++) {
	            var node = nodesToRevisit[i];
	            if (isRef(node)) {
	              _this3.refSet.remove(node);
	            }
	          }
	          _this3._walk(nodesToVisit);
	        }, this.capability.reject);
	        return;
	      }
	      this.refSet = null;
	      this.capability.resolve();
	    }
	  };
	  return ObjectLoader;
	}();
	exports.Catalog = Catalog;
	exports.ObjectLoader = ObjectLoader;
	exports.XRef = XRef;
	exports.FileSpec = FileSpec;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var getLookupTableFactory = sharedUtil.getLookupTableFactory;
	var getStdFontMap = getLookupTableFactory(function (t) {
	  t['ArialNarrow'] = 'Helvetica';
	  t['ArialNarrow-Bold'] = 'Helvetica-Bold';
	  t['ArialNarrow-BoldItalic'] = 'Helvetica-BoldOblique';
	  t['ArialNarrow-Italic'] = 'Helvetica-Oblique';
	  t['ArialBlack'] = 'Helvetica';
	  t['ArialBlack-Bold'] = 'Helvetica-Bold';
	  t['ArialBlack-BoldItalic'] = 'Helvetica-BoldOblique';
	  t['ArialBlack-Italic'] = 'Helvetica-Oblique';
	  t['Arial-Black'] = 'Helvetica';
	  t['Arial-Black-Bold'] = 'Helvetica-Bold';
	  t['Arial-Black-BoldItalic'] = 'Helvetica-BoldOblique';
	  t['Arial-Black-Italic'] = 'Helvetica-Oblique';
	  t['Arial'] = 'Helvetica';
	  t['Arial-Bold'] = 'Helvetica-Bold';
	  t['Arial-BoldItalic'] = 'Helvetica-BoldOblique';
	  t['Arial-Italic'] = 'Helvetica-Oblique';
	  t['Arial-BoldItalicMT'] = 'Helvetica-BoldOblique';
	  t['Arial-BoldMT'] = 'Helvetica-Bold';
	  t['Arial-ItalicMT'] = 'Helvetica-Oblique';
	  t['ArialMT'] = 'Helvetica';
	  t['Courier-Bold'] = 'Courier-Bold';
	  t['Courier-BoldItalic'] = 'Courier-BoldOblique';
	  t['Courier-Italic'] = 'Courier-Oblique';
	  t['CourierNew'] = 'Courier';
	  t['CourierNew-Bold'] = 'Courier-Bold';
	  t['CourierNew-BoldItalic'] = 'Courier-BoldOblique';
	  t['CourierNew-Italic'] = 'Courier-Oblique';
	  t['CourierNewPS-BoldItalicMT'] = 'Courier-BoldOblique';
	  t['CourierNewPS-BoldMT'] = 'Courier-Bold';
	  t['CourierNewPS-ItalicMT'] = 'Courier-Oblique';
	  t['CourierNewPSMT'] = 'Courier';
	  t['Helvetica'] = 'Helvetica';
	  t['Helvetica-Bold'] = 'Helvetica-Bold';
	  t['Helvetica-BoldItalic'] = 'Helvetica-BoldOblique';
	  t['Helvetica-BoldOblique'] = 'Helvetica-BoldOblique';
	  t['Helvetica-Italic'] = 'Helvetica-Oblique';
	  t['Helvetica-Oblique'] = 'Helvetica-Oblique';
	  t['Symbol-Bold'] = 'Symbol';
	  t['Symbol-BoldItalic'] = 'Symbol';
	  t['Symbol-Italic'] = 'Symbol';
	  t['TimesNewRoman'] = 'Times-Roman';
	  t['TimesNewRoman-Bold'] = 'Times-Bold';
	  t['TimesNewRoman-BoldItalic'] = 'Times-BoldItalic';
	  t['TimesNewRoman-Italic'] = 'Times-Italic';
	  t['TimesNewRomanPS'] = 'Times-Roman';
	  t['TimesNewRomanPS-Bold'] = 'Times-Bold';
	  t['TimesNewRomanPS-BoldItalic'] = 'Times-BoldItalic';
	  t['TimesNewRomanPS-BoldItalicMT'] = 'Times-BoldItalic';
	  t['TimesNewRomanPS-BoldMT'] = 'Times-Bold';
	  t['TimesNewRomanPS-Italic'] = 'Times-Italic';
	  t['TimesNewRomanPS-ItalicMT'] = 'Times-Italic';
	  t['TimesNewRomanPSMT'] = 'Times-Roman';
	  t['TimesNewRomanPSMT-Bold'] = 'Times-Bold';
	  t['TimesNewRomanPSMT-BoldItalic'] = 'Times-BoldItalic';
	  t['TimesNewRomanPSMT-Italic'] = 'Times-Italic';
	});
	var getNonStdFontMap = getLookupTableFactory(function (t) {
	  t['CenturyGothic'] = 'Helvetica';
	  t['CenturyGothic-Bold'] = 'Helvetica-Bold';
	  t['CenturyGothic-BoldItalic'] = 'Helvetica-BoldOblique';
	  t['CenturyGothic-Italic'] = 'Helvetica-Oblique';
	  t['ComicSansMS'] = 'Comic Sans MS';
	  t['ComicSansMS-Bold'] = 'Comic Sans MS-Bold';
	  t['ComicSansMS-BoldItalic'] = 'Comic Sans MS-BoldItalic';
	  t['ComicSansMS-Italic'] = 'Comic Sans MS-Italic';
	  t['LucidaConsole'] = 'Courier';
	  t['LucidaConsole-Bold'] = 'Courier-Bold';
	  t['LucidaConsole-BoldItalic'] = 'Courier-BoldOblique';
	  t['LucidaConsole-Italic'] = 'Courier-Oblique';
	  t['MS-Gothic'] = 'MS Gothic';
	  t['MS-Gothic-Bold'] = 'MS Gothic-Bold';
	  t['MS-Gothic-BoldItalic'] = 'MS Gothic-BoldItalic';
	  t['MS-Gothic-Italic'] = 'MS Gothic-Italic';
	  t['MS-Mincho'] = 'MS Mincho';
	  t['MS-Mincho-Bold'] = 'MS Mincho-Bold';
	  t['MS-Mincho-BoldItalic'] = 'MS Mincho-BoldItalic';
	  t['MS-Mincho-Italic'] = 'MS Mincho-Italic';
	  t['MS-PGothic'] = 'MS PGothic';
	  t['MS-PGothic-Bold'] = 'MS PGothic-Bold';
	  t['MS-PGothic-BoldItalic'] = 'MS PGothic-BoldItalic';
	  t['MS-PGothic-Italic'] = 'MS PGothic-Italic';
	  t['MS-PMincho'] = 'MS PMincho';
	  t['MS-PMincho-Bold'] = 'MS PMincho-Bold';
	  t['MS-PMincho-BoldItalic'] = 'MS PMincho-BoldItalic';
	  t['MS-PMincho-Italic'] = 'MS PMincho-Italic';
	  t['NuptialScript'] = 'Times-Italic';
	  t['Wingdings'] = 'ZapfDingbats';
	});
	var getSerifFonts = getLookupTableFactory(function (t) {
	  t['Adobe Jenson'] = true;
	  t['Adobe Text'] = true;
	  t['Albertus'] = true;
	  t['Aldus'] = true;
	  t['Alexandria'] = true;
	  t['Algerian'] = true;
	  t['American Typewriter'] = true;
	  t['Antiqua'] = true;
	  t['Apex'] = true;
	  t['Arno'] = true;
	  t['Aster'] = true;
	  t['Aurora'] = true;
	  t['Baskerville'] = true;
	  t['Bell'] = true;
	  t['Bembo'] = true;
	  t['Bembo Schoolbook'] = true;
	  t['Benguiat'] = true;
	  t['Berkeley Old Style'] = true;
	  t['Bernhard Modern'] = true;
	  t['Berthold City'] = true;
	  t['Bodoni'] = true;
	  t['Bauer Bodoni'] = true;
	  t['Book Antiqua'] = true;
	  t['Bookman'] = true;
	  t['Bordeaux Roman'] = true;
	  t['Californian FB'] = true;
	  t['Calisto'] = true;
	  t['Calvert'] = true;
	  t['Capitals'] = true;
	  t['Cambria'] = true;
	  t['Cartier'] = true;
	  t['Caslon'] = true;
	  t['Catull'] = true;
	  t['Centaur'] = true;
	  t['Century Old Style'] = true;
	  t['Century Schoolbook'] = true;
	  t['Chaparral'] = true;
	  t['Charis SIL'] = true;
	  t['Cheltenham'] = true;
	  t['Cholla Slab'] = true;
	  t['Clarendon'] = true;
	  t['Clearface'] = true;
	  t['Cochin'] = true;
	  t['Colonna'] = true;
	  t['Computer Modern'] = true;
	  t['Concrete Roman'] = true;
	  t['Constantia'] = true;
	  t['Cooper Black'] = true;
	  t['Corona'] = true;
	  t['Ecotype'] = true;
	  t['Egyptienne'] = true;
	  t['Elephant'] = true;
	  t['Excelsior'] = true;
	  t['Fairfield'] = true;
	  t['FF Scala'] = true;
	  t['Folkard'] = true;
	  t['Footlight'] = true;
	  t['FreeSerif'] = true;
	  t['Friz Quadrata'] = true;
	  t['Garamond'] = true;
	  t['Gentium'] = true;
	  t['Georgia'] = true;
	  t['Gloucester'] = true;
	  t['Goudy Old Style'] = true;
	  t['Goudy Schoolbook'] = true;
	  t['Goudy Pro Font'] = true;
	  t['Granjon'] = true;
	  t['Guardian Egyptian'] = true;
	  t['Heather'] = true;
	  t['Hercules'] = true;
	  t['High Tower Text'] = true;
	  t['Hiroshige'] = true;
	  t['Hoefler Text'] = true;
	  t['Humana Serif'] = true;
	  t['Imprint'] = true;
	  t['Ionic No. 5'] = true;
	  t['Janson'] = true;
	  t['Joanna'] = true;
	  t['Korinna'] = true;
	  t['Lexicon'] = true;
	  t['Liberation Serif'] = true;
	  t['Linux Libertine'] = true;
	  t['Literaturnaya'] = true;
	  t['Lucida'] = true;
	  t['Lucida Bright'] = true;
	  t['Melior'] = true;
	  t['Memphis'] = true;
	  t['Miller'] = true;
	  t['Minion'] = true;
	  t['Modern'] = true;
	  t['Mona Lisa'] = true;
	  t['Mrs Eaves'] = true;
	  t['MS Serif'] = true;
	  t['Museo Slab'] = true;
	  t['New York'] = true;
	  t['Nimbus Roman'] = true;
	  t['NPS Rawlinson Roadway'] = true;
	  t['NuptialScript'] = true;
	  t['Palatino'] = true;
	  t['Perpetua'] = true;
	  t['Plantin'] = true;
	  t['Plantin Schoolbook'] = true;
	  t['Playbill'] = true;
	  t['Poor Richard'] = true;
	  t['Rawlinson Roadway'] = true;
	  t['Renault'] = true;
	  t['Requiem'] = true;
	  t['Rockwell'] = true;
	  t['Roman'] = true;
	  t['Rotis Serif'] = true;
	  t['Sabon'] = true;
	  t['Scala'] = true;
	  t['Seagull'] = true;
	  t['Sistina'] = true;
	  t['Souvenir'] = true;
	  t['STIX'] = true;
	  t['Stone Informal'] = true;
	  t['Stone Serif'] = true;
	  t['Sylfaen'] = true;
	  t['Times'] = true;
	  t['Trajan'] = true;
	  t['Trinité'] = true;
	  t['Trump Mediaeval'] = true;
	  t['Utopia'] = true;
	  t['Vale Type'] = true;
	  t['Bitstream Vera'] = true;
	  t['Vera Serif'] = true;
	  t['Versailles'] = true;
	  t['Wanted'] = true;
	  t['Weiss'] = true;
	  t['Wide Latin'] = true;
	  t['Windsor'] = true;
	  t['XITS'] = true;
	});
	var getSymbolsFonts = getLookupTableFactory(function (t) {
	  t['Dingbats'] = true;
	  t['Symbol'] = true;
	  t['ZapfDingbats'] = true;
	});
	var getGlyphMapForStandardFonts = getLookupTableFactory(function (t) {
	  t[2] = 10;
	  t[3] = 32;
	  t[4] = 33;
	  t[5] = 34;
	  t[6] = 35;
	  t[7] = 36;
	  t[8] = 37;
	  t[9] = 38;
	  t[10] = 39;
	  t[11] = 40;
	  t[12] = 41;
	  t[13] = 42;
	  t[14] = 43;
	  t[15] = 44;
	  t[16] = 45;
	  t[17] = 46;
	  t[18] = 47;
	  t[19] = 48;
	  t[20] = 49;
	  t[21] = 50;
	  t[22] = 51;
	  t[23] = 52;
	  t[24] = 53;
	  t[25] = 54;
	  t[26] = 55;
	  t[27] = 56;
	  t[28] = 57;
	  t[29] = 58;
	  t[30] = 894;
	  t[31] = 60;
	  t[32] = 61;
	  t[33] = 62;
	  t[34] = 63;
	  t[35] = 64;
	  t[36] = 65;
	  t[37] = 66;
	  t[38] = 67;
	  t[39] = 68;
	  t[40] = 69;
	  t[41] = 70;
	  t[42] = 71;
	  t[43] = 72;
	  t[44] = 73;
	  t[45] = 74;
	  t[46] = 75;
	  t[47] = 76;
	  t[48] = 77;
	  t[49] = 78;
	  t[50] = 79;
	  t[51] = 80;
	  t[52] = 81;
	  t[53] = 82;
	  t[54] = 83;
	  t[55] = 84;
	  t[56] = 85;
	  t[57] = 86;
	  t[58] = 87;
	  t[59] = 88;
	  t[60] = 89;
	  t[61] = 90;
	  t[62] = 91;
	  t[63] = 92;
	  t[64] = 93;
	  t[65] = 94;
	  t[66] = 95;
	  t[67] = 96;
	  t[68] = 97;
	  t[69] = 98;
	  t[70] = 99;
	  t[71] = 100;
	  t[72] = 101;
	  t[73] = 102;
	  t[74] = 103;
	  t[75] = 104;
	  t[76] = 105;
	  t[77] = 106;
	  t[78] = 107;
	  t[79] = 108;
	  t[80] = 109;
	  t[81] = 110;
	  t[82] = 111;
	  t[83] = 112;
	  t[84] = 113;
	  t[85] = 114;
	  t[86] = 115;
	  t[87] = 116;
	  t[88] = 117;
	  t[89] = 118;
	  t[90] = 119;
	  t[91] = 120;
	  t[92] = 121;
	  t[93] = 122;
	  t[94] = 123;
	  t[95] = 124;
	  t[96] = 125;
	  t[97] = 126;
	  t[98] = 196;
	  t[99] = 197;
	  t[100] = 199;
	  t[101] = 201;
	  t[102] = 209;
	  t[103] = 214;
	  t[104] = 220;
	  t[105] = 225;
	  t[106] = 224;
	  t[107] = 226;
	  t[108] = 228;
	  t[109] = 227;
	  t[110] = 229;
	  t[111] = 231;
	  t[112] = 233;
	  t[113] = 232;
	  t[114] = 234;
	  t[115] = 235;
	  t[116] = 237;
	  t[117] = 236;
	  t[118] = 238;
	  t[119] = 239;
	  t[120] = 241;
	  t[121] = 243;
	  t[122] = 242;
	  t[123] = 244;
	  t[124] = 246;
	  t[125] = 245;
	  t[126] = 250;
	  t[127] = 249;
	  t[128] = 251;
	  t[129] = 252;
	  t[130] = 8224;
	  t[131] = 176;
	  t[132] = 162;
	  t[133] = 163;
	  t[134] = 167;
	  t[135] = 8226;
	  t[136] = 182;
	  t[137] = 223;
	  t[138] = 174;
	  t[139] = 169;
	  t[140] = 8482;
	  t[141] = 180;
	  t[142] = 168;
	  t[143] = 8800;
	  t[144] = 198;
	  t[145] = 216;
	  t[146] = 8734;
	  t[147] = 177;
	  t[148] = 8804;
	  t[149] = 8805;
	  t[150] = 165;
	  t[151] = 181;
	  t[152] = 8706;
	  t[153] = 8721;
	  t[154] = 8719;
	  t[156] = 8747;
	  t[157] = 170;
	  t[158] = 186;
	  t[159] = 8486;
	  t[160] = 230;
	  t[161] = 248;
	  t[162] = 191;
	  t[163] = 161;
	  t[164] = 172;
	  t[165] = 8730;
	  t[166] = 402;
	  t[167] = 8776;
	  t[168] = 8710;
	  t[169] = 171;
	  t[170] = 187;
	  t[171] = 8230;
	  t[210] = 218;
	  t[223] = 711;
	  t[224] = 321;
	  t[225] = 322;
	  t[227] = 353;
	  t[229] = 382;
	  t[234] = 253;
	  t[252] = 263;
	  t[253] = 268;
	  t[254] = 269;
	  t[258] = 258;
	  t[260] = 260;
	  t[261] = 261;
	  t[265] = 280;
	  t[266] = 281;
	  t[268] = 283;
	  t[269] = 313;
	  t[275] = 323;
	  t[276] = 324;
	  t[278] = 328;
	  t[284] = 345;
	  t[285] = 346;
	  t[286] = 347;
	  t[292] = 367;
	  t[295] = 377;
	  t[296] = 378;
	  t[298] = 380;
	  t[305] = 963;
	  t[306] = 964;
	  t[307] = 966;
	  t[308] = 8215;
	  t[309] = 8252;
	  t[310] = 8319;
	  t[311] = 8359;
	  t[312] = 8592;
	  t[313] = 8593;
	  t[337] = 9552;
	  t[493] = 1039;
	  t[494] = 1040;
	  t[705] = 1524;
	  t[706] = 8362;
	  t[710] = 64288;
	  t[711] = 64298;
	  t[759] = 1617;
	  t[761] = 1776;
	  t[763] = 1778;
	  t[775] = 1652;
	  t[777] = 1764;
	  t[778] = 1780;
	  t[779] = 1781;
	  t[780] = 1782;
	  t[782] = 771;
	  t[783] = 64726;
	  t[786] = 8363;
	  t[788] = 8532;
	  t[790] = 768;
	  t[791] = 769;
	  t[792] = 768;
	  t[795] = 803;
	  t[797] = 64336;
	  t[798] = 64337;
	  t[799] = 64342;
	  t[800] = 64343;
	  t[801] = 64344;
	  t[802] = 64345;
	  t[803] = 64362;
	  t[804] = 64363;
	  t[805] = 64364;
	  t[2424] = 7821;
	  t[2425] = 7822;
	  t[2426] = 7823;
	  t[2427] = 7824;
	  t[2428] = 7825;
	  t[2429] = 7826;
	  t[2430] = 7827;
	  t[2433] = 7682;
	  t[2678] = 8045;
	  t[2679] = 8046;
	  t[2830] = 1552;
	  t[2838] = 686;
	  t[2840] = 751;
	  t[2842] = 753;
	  t[2843] = 754;
	  t[2844] = 755;
	  t[2846] = 757;
	  t[2856] = 767;
	  t[2857] = 848;
	  t[2858] = 849;
	  t[2862] = 853;
	  t[2863] = 854;
	  t[2864] = 855;
	  t[2865] = 861;
	  t[2866] = 862;
	  t[2906] = 7460;
	  t[2908] = 7462;
	  t[2909] = 7463;
	  t[2910] = 7464;
	  t[2912] = 7466;
	  t[2913] = 7467;
	  t[2914] = 7468;
	  t[2916] = 7470;
	  t[2917] = 7471;
	  t[2918] = 7472;
	  t[2920] = 7474;
	  t[2921] = 7475;
	  t[2922] = 7476;
	  t[2924] = 7478;
	  t[2925] = 7479;
	  t[2926] = 7480;
	  t[2928] = 7482;
	  t[2929] = 7483;
	  t[2930] = 7484;
	  t[2932] = 7486;
	  t[2933] = 7487;
	  t[2934] = 7488;
	  t[2936] = 7490;
	  t[2937] = 7491;
	  t[2938] = 7492;
	  t[2940] = 7494;
	  t[2941] = 7495;
	  t[2942] = 7496;
	  t[2944] = 7498;
	  t[2946] = 7500;
	  t[2948] = 7502;
	  t[2950] = 7504;
	  t[2951] = 7505;
	  t[2952] = 7506;
	  t[2954] = 7508;
	  t[2955] = 7509;
	  t[2956] = 7510;
	  t[2958] = 7512;
	  t[2959] = 7513;
	  t[2960] = 7514;
	  t[2962] = 7516;
	  t[2963] = 7517;
	  t[2964] = 7518;
	  t[2966] = 7520;
	  t[2967] = 7521;
	  t[2968] = 7522;
	  t[2970] = 7524;
	  t[2971] = 7525;
	  t[2972] = 7526;
	  t[2974] = 7528;
	  t[2975] = 7529;
	  t[2976] = 7530;
	  t[2978] = 1537;
	  t[2979] = 1538;
	  t[2980] = 1539;
	  t[2982] = 1549;
	  t[2983] = 1551;
	  t[2984] = 1552;
	  t[2986] = 1554;
	  t[2987] = 1555;
	  t[2988] = 1556;
	  t[2990] = 1623;
	  t[2991] = 1624;
	  t[2995] = 1775;
	  t[2999] = 1791;
	  t[3002] = 64290;
	  t[3003] = 64291;
	  t[3004] = 64292;
	  t[3006] = 64294;
	  t[3007] = 64295;
	  t[3008] = 64296;
	  t[3011] = 1900;
	  t[3014] = 8223;
	  t[3015] = 8244;
	  t[3017] = 7532;
	  t[3018] = 7533;
	  t[3019] = 7534;
	  t[3075] = 7590;
	  t[3076] = 7591;
	  t[3079] = 7594;
	  t[3080] = 7595;
	  t[3083] = 7598;
	  t[3084] = 7599;
	  t[3087] = 7602;
	  t[3088] = 7603;
	  t[3091] = 7606;
	  t[3092] = 7607;
	  t[3095] = 7610;
	  t[3096] = 7611;
	  t[3099] = 7614;
	  t[3100] = 7615;
	  t[3103] = 7618;
	  t[3104] = 7619;
	  t[3107] = 8337;
	  t[3108] = 8338;
	  t[3116] = 1884;
	  t[3119] = 1885;
	  t[3120] = 1885;
	  t[3123] = 1886;
	  t[3124] = 1886;
	  t[3127] = 1887;
	  t[3128] = 1887;
	  t[3131] = 1888;
	  t[3132] = 1888;
	  t[3135] = 1889;
	  t[3136] = 1889;
	  t[3139] = 1890;
	  t[3140] = 1890;
	  t[3143] = 1891;
	  t[3144] = 1891;
	  t[3147] = 1892;
	  t[3148] = 1892;
	  t[3153] = 580;
	  t[3154] = 581;
	  t[3157] = 584;
	  t[3158] = 585;
	  t[3161] = 588;
	  t[3162] = 589;
	  t[3165] = 891;
	  t[3166] = 892;
	  t[3169] = 1274;
	  t[3170] = 1275;
	  t[3173] = 1278;
	  t[3174] = 1279;
	  t[3181] = 7622;
	  t[3182] = 7623;
	  t[3282] = 11799;
	  t[3316] = 578;
	  t[3379] = 42785;
	  t[3393] = 1159;
	  t[3416] = 8377;
	});
	var getSupplementalGlyphMapForArialBlack = getLookupTableFactory(function (t) {
	  t[227] = 322;
	  t[264] = 261;
	  t[291] = 346;
	});
	exports.getStdFontMap = getStdFontMap;
	exports.getNonStdFontMap = getNonStdFontMap;
	exports.getSerifFonts = getSerifFonts;
	exports.getSymbolsFonts = getSymbolsFonts;
	exports.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;
	exports.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var getLookupTableFactory = sharedUtil.getLookupTableFactory;
	var getSpecialPUASymbols = getLookupTableFactory(function (t) {
	  t[63721] = 0x00A9;
	  t[63193] = 0x00A9;
	  t[63720] = 0x00AE;
	  t[63194] = 0x00AE;
	  t[63722] = 0x2122;
	  t[63195] = 0x2122;
	  t[63729] = 0x23A7;
	  t[63730] = 0x23A8;
	  t[63731] = 0x23A9;
	  t[63740] = 0x23AB;
	  t[63741] = 0x23AC;
	  t[63742] = 0x23AD;
	  t[63726] = 0x23A1;
	  t[63727] = 0x23A2;
	  t[63728] = 0x23A3;
	  t[63737] = 0x23A4;
	  t[63738] = 0x23A5;
	  t[63739] = 0x23A6;
	  t[63723] = 0x239B;
	  t[63724] = 0x239C;
	  t[63725] = 0x239D;
	  t[63734] = 0x239E;
	  t[63735] = 0x239F;
	  t[63736] = 0x23A0;
	});
	function mapSpecialUnicodeValues(code) {
	  if (code >= 0xFFF0 && code <= 0xFFFF) {
	    return 0;
	  } else if (code >= 0xF600 && code <= 0xF8FF) {
	    return getSpecialPUASymbols()[code] || code;
	  }
	  return code;
	}
	function getUnicodeForGlyph(name, glyphsUnicodeMap) {
	  var unicode = glyphsUnicodeMap[name];
	  if (unicode !== undefined) {
	    return unicode;
	  }
	  if (!name) {
	    return -1;
	  }
	  if (name[0] === 'u') {
	    var nameLen = name.length,
	        hexStr;
	    if (nameLen === 7 && name[1] === 'n' && name[2] === 'i') {
	      hexStr = name.substr(3);
	    } else if (nameLen >= 5 && nameLen <= 7) {
	      hexStr = name.substr(1);
	    } else {
	      return -1;
	    }
	    if (hexStr === hexStr.toUpperCase()) {
	      unicode = parseInt(hexStr, 16);
	      if (unicode >= 0) {
	        return unicode;
	      }
	    }
	  }
	  return -1;
	}
	var UnicodeRanges = [{
	  'begin': 0x0000,
	  'end': 0x007F
	}, {
	  'begin': 0x0080,
	  'end': 0x00FF
	}, {
	  'begin': 0x0100,
	  'end': 0x017F
	}, {
	  'begin': 0x0180,
	  'end': 0x024F
	}, {
	  'begin': 0x0250,
	  'end': 0x02AF
	}, {
	  'begin': 0x02B0,
	  'end': 0x02FF
	}, {
	  'begin': 0x0300,
	  'end': 0x036F
	}, {
	  'begin': 0x0370,
	  'end': 0x03FF
	}, {
	  'begin': 0x2C80,
	  'end': 0x2CFF
	}, {
	  'begin': 0x0400,
	  'end': 0x04FF
	}, {
	  'begin': 0x0530,
	  'end': 0x058F
	}, {
	  'begin': 0x0590,
	  'end': 0x05FF
	}, {
	  'begin': 0xA500,
	  'end': 0xA63F
	}, {
	  'begin': 0x0600,
	  'end': 0x06FF
	}, {
	  'begin': 0x07C0,
	  'end': 0x07FF
	}, {
	  'begin': 0x0900,
	  'end': 0x097F
	}, {
	  'begin': 0x0980,
	  'end': 0x09FF
	}, {
	  'begin': 0x0A00,
	  'end': 0x0A7F
	}, {
	  'begin': 0x0A80,
	  'end': 0x0AFF
	}, {
	  'begin': 0x0B00,
	  'end': 0x0B7F
	}, {
	  'begin': 0x0B80,
	  'end': 0x0BFF
	}, {
	  'begin': 0x0C00,
	  'end': 0x0C7F
	}, {
	  'begin': 0x0C80,
	  'end': 0x0CFF
	}, {
	  'begin': 0x0D00,
	  'end': 0x0D7F
	}, {
	  'begin': 0x0E00,
	  'end': 0x0E7F
	}, {
	  'begin': 0x0E80,
	  'end': 0x0EFF
	}, {
	  'begin': 0x10A0,
	  'end': 0x10FF
	}, {
	  'begin': 0x1B00,
	  'end': 0x1B7F
	}, {
	  'begin': 0x1100,
	  'end': 0x11FF
	}, {
	  'begin': 0x1E00,
	  'end': 0x1EFF
	}, {
	  'begin': 0x1F00,
	  'end': 0x1FFF
	}, {
	  'begin': 0x2000,
	  'end': 0x206F
	}, {
	  'begin': 0x2070,
	  'end': 0x209F
	}, {
	  'begin': 0x20A0,
	  'end': 0x20CF
	}, {
	  'begin': 0x20D0,
	  'end': 0x20FF
	}, {
	  'begin': 0x2100,
	  'end': 0x214F
	}, {
	  'begin': 0x2150,
	  'end': 0x218F
	}, {
	  'begin': 0x2190,
	  'end': 0x21FF
	}, {
	  'begin': 0x2200,
	  'end': 0x22FF
	}, {
	  'begin': 0x2300,
	  'end': 0x23FF
	}, {
	  'begin': 0x2400,
	  'end': 0x243F
	}, {
	  'begin': 0x2440,
	  'end': 0x245F
	}, {
	  'begin': 0x2460,
	  'end': 0x24FF
	}, {
	  'begin': 0x2500,
	  'end': 0x257F
	}, {
	  'begin': 0x2580,
	  'end': 0x259F
	}, {
	  'begin': 0x25A0,
	  'end': 0x25FF
	}, {
	  'begin': 0x2600,
	  'end': 0x26FF
	}, {
	  'begin': 0x2700,
	  'end': 0x27BF
	}, {
	  'begin': 0x3000,
	  'end': 0x303F
	}, {
	  'begin': 0x3040,
	  'end': 0x309F
	}, {
	  'begin': 0x30A0,
	  'end': 0x30FF
	}, {
	  'begin': 0x3100,
	  'end': 0x312F
	}, {
	  'begin': 0x3130,
	  'end': 0x318F
	}, {
	  'begin': 0xA840,
	  'end': 0xA87F
	}, {
	  'begin': 0x3200,
	  'end': 0x32FF
	}, {
	  'begin': 0x3300,
	  'end': 0x33FF
	}, {
	  'begin': 0xAC00,
	  'end': 0xD7AF
	}, {
	  'begin': 0xD800,
	  'end': 0xDFFF
	}, {
	  'begin': 0x10900,
	  'end': 0x1091F
	}, {
	  'begin': 0x4E00,
	  'end': 0x9FFF
	}, {
	  'begin': 0xE000,
	  'end': 0xF8FF
	}, {
	  'begin': 0x31C0,
	  'end': 0x31EF
	}, {
	  'begin': 0xFB00,
	  'end': 0xFB4F
	}, {
	  'begin': 0xFB50,
	  'end': 0xFDFF
	}, {
	  'begin': 0xFE20,
	  'end': 0xFE2F
	}, {
	  'begin': 0xFE10,
	  'end': 0xFE1F
	}, {
	  'begin': 0xFE50,
	  'end': 0xFE6F
	}, {
	  'begin': 0xFE70,
	  'end': 0xFEFF
	}, {
	  'begin': 0xFF00,
	  'end': 0xFFEF
	}, {
	  'begin': 0xFFF0,
	  'end': 0xFFFF
	}, {
	  'begin': 0x0F00,
	  'end': 0x0FFF
	}, {
	  'begin': 0x0700,
	  'end': 0x074F
	}, {
	  'begin': 0x0780,
	  'end': 0x07BF
	}, {
	  'begin': 0x0D80,
	  'end': 0x0DFF
	}, {
	  'begin': 0x1000,
	  'end': 0x109F
	}, {
	  'begin': 0x1200,
	  'end': 0x137F
	}, {
	  'begin': 0x13A0,
	  'end': 0x13FF
	}, {
	  'begin': 0x1400,
	  'end': 0x167F
	}, {
	  'begin': 0x1680,
	  'end': 0x169F
	}, {
	  'begin': 0x16A0,
	  'end': 0x16FF
	}, {
	  'begin': 0x1780,
	  'end': 0x17FF
	}, {
	  'begin': 0x1800,
	  'end': 0x18AF
	}, {
	  'begin': 0x2800,
	  'end': 0x28FF
	}, {
	  'begin': 0xA000,
	  'end': 0xA48F
	}, {
	  'begin': 0x1700,
	  'end': 0x171F
	}, {
	  'begin': 0x10300,
	  'end': 0x1032F
	}, {
	  'begin': 0x10330,
	  'end': 0x1034F
	}, {
	  'begin': 0x10400,
	  'end': 0x1044F
	}, {
	  'begin': 0x1D000,
	  'end': 0x1D0FF
	}, {
	  'begin': 0x1D400,
	  'end': 0x1D7FF
	}, {
	  'begin': 0xFF000,
	  'end': 0xFFFFD
	}, {
	  'begin': 0xFE00,
	  'end': 0xFE0F
	}, {
	  'begin': 0xE0000,
	  'end': 0xE007F
	}, {
	  'begin': 0x1900,
	  'end': 0x194F
	}, {
	  'begin': 0x1950,
	  'end': 0x197F
	}, {
	  'begin': 0x1980,
	  'end': 0x19DF
	}, {
	  'begin': 0x1A00,
	  'end': 0x1A1F
	}, {
	  'begin': 0x2C00,
	  'end': 0x2C5F
	}, {
	  'begin': 0x2D30,
	  'end': 0x2D7F
	}, {
	  'begin': 0x4DC0,
	  'end': 0x4DFF
	}, {
	  'begin': 0xA800,
	  'end': 0xA82F
	}, {
	  'begin': 0x10000,
	  'end': 0x1007F
	}, {
	  'begin': 0x10140,
	  'end': 0x1018F
	}, {
	  'begin': 0x10380,
	  'end': 0x1039F
	}, {
	  'begin': 0x103A0,
	  'end': 0x103DF
	}, {
	  'begin': 0x10450,
	  'end': 0x1047F
	}, {
	  'begin': 0x10480,
	  'end': 0x104AF
	}, {
	  'begin': 0x10800,
	  'end': 0x1083F
	}, {
	  'begin': 0x10A00,
	  'end': 0x10A5F
	}, {
	  'begin': 0x1D300,
	  'end': 0x1D35F
	}, {
	  'begin': 0x12000,
	  'end': 0x123FF
	}, {
	  'begin': 0x1D360,
	  'end': 0x1D37F
	}, {
	  'begin': 0x1B80,
	  'end': 0x1BBF
	}, {
	  'begin': 0x1C00,
	  'end': 0x1C4F
	}, {
	  'begin': 0x1C50,
	  'end': 0x1C7F
	}, {
	  'begin': 0xA880,
	  'end': 0xA8DF
	}, {
	  'begin': 0xA900,
	  'end': 0xA92F
	}, {
	  'begin': 0xA930,
	  'end': 0xA95F
	}, {
	  'begin': 0xAA00,
	  'end': 0xAA5F
	}, {
	  'begin': 0x10190,
	  'end': 0x101CF
	}, {
	  'begin': 0x101D0,
	  'end': 0x101FF
	}, {
	  'begin': 0x102A0,
	  'end': 0x102DF
	}, {
	  'begin': 0x1F030,
	  'end': 0x1F09F
	}];
	function getUnicodeRangeFor(value) {
	  for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {
	    var range = UnicodeRanges[i];
	    if (value >= range.begin && value < range.end) {
	      return i;
	    }
	  }
	  return -1;
	}
	function isRTLRangeFor(value) {
	  var range = UnicodeRanges[13];
	  if (value >= range.begin && value < range.end) {
	    return true;
	  }
	  range = UnicodeRanges[11];
	  if (value >= range.begin && value < range.end) {
	    return true;
	  }
	  return false;
	}
	var getNormalizedUnicodes = getLookupTableFactory(function (t) {
	  t['\xA8'] = ' \u0308';
	  t['\xAF'] = ' \u0304';
	  t['\xB4'] = ' \u0301';
	  t['\xB5'] = '\u03BC';
	  t['\xB8'] = ' \u0327';
	  t['\u0132'] = 'IJ';
	  t['\u0133'] = 'ij';
	  t['\u013F'] = 'L\xB7';
	  t['\u0140'] = 'l\xB7';
	  t['\u0149'] = '\u02BCn';
	  t['\u017F'] = 's';
	  t['\u01C4'] = 'D\u017D';
	  t['\u01C5'] = 'D\u017E';
	  t['\u01C6'] = 'd\u017E';
	  t['\u01C7'] = 'LJ';
	  t['\u01C8'] = 'Lj';
	  t['\u01C9'] = 'lj';
	  t['\u01CA'] = 'NJ';
	  t['\u01CB'] = 'Nj';
	  t['\u01CC'] = 'nj';
	  t['\u01F1'] = 'DZ';
	  t['\u01F2'] = 'Dz';
	  t['\u01F3'] = 'dz';
	  t['\u02D8'] = ' \u0306';
	  t['\u02D9'] = ' \u0307';
	  t['\u02DA'] = ' \u030A';
	  t['\u02DB'] = ' \u0328';
	  t['\u02DC'] = ' \u0303';
	  t['\u02DD'] = ' \u030B';
	  t['\u037A'] = ' \u0345';
	  t['\u0384'] = ' \u0301';
	  t['\u03D0'] = '\u03B2';
	  t['\u03D1'] = '\u03B8';
	  t['\u03D2'] = '\u03A5';
	  t['\u03D5'] = '\u03C6';
	  t['\u03D6'] = '\u03C0';
	  t['\u03F0'] = '\u03BA';
	  t['\u03F1'] = '\u03C1';
	  t['\u03F2'] = '\u03C2';
	  t['\u03F4'] = '\u0398';
	  t['\u03F5'] = '\u03B5';
	  t['\u03F9'] = '\u03A3';
	  t['\u0587'] = '\u0565\u0582';
	  t['\u0675'] = '\u0627\u0674';
	  t['\u0676'] = '\u0648\u0674';
	  t['\u0677'] = '\u06C7\u0674';
	  t['\u0678'] = '\u064A\u0674';
	  t['\u0E33'] = '\u0E4D\u0E32';
	  t['\u0EB3'] = '\u0ECD\u0EB2';
	  t['\u0EDC'] = '\u0EAB\u0E99';
	  t['\u0EDD'] = '\u0EAB\u0EA1';
	  t['\u0F77'] = '\u0FB2\u0F81';
	  t['\u0F79'] = '\u0FB3\u0F81';
	  t['\u1E9A'] = 'a\u02BE';
	  t['\u1FBD'] = ' \u0313';
	  t['\u1FBF'] = ' \u0313';
	  t['\u1FC0'] = ' \u0342';
	  t['\u1FFE'] = ' \u0314';
	  t['\u2002'] = ' ';
	  t['\u2003'] = ' ';
	  t['\u2004'] = ' ';
	  t['\u2005'] = ' ';
	  t['\u2006'] = ' ';
	  t['\u2008'] = ' ';
	  t['\u2009'] = ' ';
	  t['\u200A'] = ' ';
	  t['\u2017'] = ' \u0333';
	  t['\u2024'] = '.';
	  t['\u2025'] = '..';
	  t['\u2026'] = '...';
	  t['\u2033'] = '\u2032\u2032';
	  t['\u2034'] = '\u2032\u2032\u2032';
	  t['\u2036'] = '\u2035\u2035';
	  t['\u2037'] = '\u2035\u2035\u2035';
	  t['\u203C'] = '!!';
	  t['\u203E'] = ' \u0305';
	  t['\u2047'] = '??';
	  t['\u2048'] = '?!';
	  t['\u2049'] = '!?';
	  t['\u2057'] = '\u2032\u2032\u2032\u2032';
	  t['\u205F'] = ' ';
	  t['\u20A8'] = 'Rs';
	  t['\u2100'] = 'a/c';
	  t['\u2101'] = 'a/s';
	  t['\u2103'] = '\xB0C';
	  t['\u2105'] = 'c/o';
	  t['\u2106'] = 'c/u';
	  t['\u2107'] = '\u0190';
	  t['\u2109'] = '\xB0F';
	  t['\u2116'] = 'No';
	  t['\u2121'] = 'TEL';
	  t['\u2135'] = '\u05D0';
	  t['\u2136'] = '\u05D1';
	  t['\u2137'] = '\u05D2';
	  t['\u2138'] = '\u05D3';
	  t['\u213B'] = 'FAX';
	  t['\u2160'] = 'I';
	  t['\u2161'] = 'II';
	  t['\u2162'] = 'III';
	  t['\u2163'] = 'IV';
	  t['\u2164'] = 'V';
	  t['\u2165'] = 'VI';
	  t['\u2166'] = 'VII';
	  t['\u2167'] = 'VIII';
	  t['\u2168'] = 'IX';
	  t['\u2169'] = 'X';
	  t['\u216A'] = 'XI';
	  t['\u216B'] = 'XII';
	  t['\u216C'] = 'L';
	  t['\u216D'] = 'C';
	  t['\u216E'] = 'D';
	  t['\u216F'] = 'M';
	  t['\u2170'] = 'i';
	  t['\u2171'] = 'ii';
	  t['\u2172'] = 'iii';
	  t['\u2173'] = 'iv';
	  t['\u2174'] = 'v';
	  t['\u2175'] = 'vi';
	  t['\u2176'] = 'vii';
	  t['\u2177'] = 'viii';
	  t['\u2178'] = 'ix';
	  t['\u2179'] = 'x';
	  t['\u217A'] = 'xi';
	  t['\u217B'] = 'xii';
	  t['\u217C'] = 'l';
	  t['\u217D'] = 'c';
	  t['\u217E'] = 'd';
	  t['\u217F'] = 'm';
	  t['\u222C'] = '\u222B\u222B';
	  t['\u222D'] = '\u222B\u222B\u222B';
	  t['\u222F'] = '\u222E\u222E';
	  t['\u2230'] = '\u222E\u222E\u222E';
	  t['\u2474'] = '(1)';
	  t['\u2475'] = '(2)';
	  t['\u2476'] = '(3)';
	  t['\u2477'] = '(4)';
	  t['\u2478'] = '(5)';
	  t['\u2479'] = '(6)';
	  t['\u247A'] = '(7)';
	  t['\u247B'] = '(8)';
	  t['\u247C'] = '(9)';
	  t['\u247D'] = '(10)';
	  t['\u247E'] = '(11)';
	  t['\u247F'] = '(12)';
	  t['\u2480'] = '(13)';
	  t['\u2481'] = '(14)';
	  t['\u2482'] = '(15)';
	  t['\u2483'] = '(16)';
	  t['\u2484'] = '(17)';
	  t['\u2485'] = '(18)';
	  t['\u2486'] = '(19)';
	  t['\u2487'] = '(20)';
	  t['\u2488'] = '1.';
	  t['\u2489'] = '2.';
	  t['\u248A'] = '3.';
	  t['\u248B'] = '4.';
	  t['\u248C'] = '5.';
	  t['\u248D'] = '6.';
	  t['\u248E'] = '7.';
	  t['\u248F'] = '8.';
	  t['\u2490'] = '9.';
	  t['\u2491'] = '10.';
	  t['\u2492'] = '11.';
	  t['\u2493'] = '12.';
	  t['\u2494'] = '13.';
	  t['\u2495'] = '14.';
	  t['\u2496'] = '15.';
	  t['\u2497'] = '16.';
	  t['\u2498'] = '17.';
	  t['\u2499'] = '18.';
	  t['\u249A'] = '19.';
	  t['\u249B'] = '20.';
	  t['\u249C'] = '(a)';
	  t['\u249D'] = '(b)';
	  t['\u249E'] = '(c)';
	  t['\u249F'] = '(d)';
	  t['\u24A0'] = '(e)';
	  t['\u24A1'] = '(f)';
	  t['\u24A2'] = '(g)';
	  t['\u24A3'] = '(h)';
	  t['\u24A4'] = '(i)';
	  t['\u24A5'] = '(j)';
	  t['\u24A6'] = '(k)';
	  t['\u24A7'] = '(l)';
	  t['\u24A8'] = '(m)';
	  t['\u24A9'] = '(n)';
	  t['\u24AA'] = '(o)';
	  t['\u24AB'] = '(p)';
	  t['\u24AC'] = '(q)';
	  t['\u24AD'] = '(r)';
	  t['\u24AE'] = '(s)';
	  t['\u24AF'] = '(t)';
	  t['\u24B0'] = '(u)';
	  t['\u24B1'] = '(v)';
	  t['\u24B2'] = '(w)';
	  t['\u24B3'] = '(x)';
	  t['\u24B4'] = '(y)';
	  t['\u24B5'] = '(z)';
	  t['\u2A0C'] = '\u222B\u222B\u222B\u222B';
	  t['\u2A74'] = '::=';
	  t['\u2A75'] = '==';
	  t['\u2A76'] = '===';
	  t['\u2E9F'] = '\u6BCD';
	  t['\u2EF3'] = '\u9F9F';
	  t['\u2F00'] = '\u4E00';
	  t['\u2F01'] = '\u4E28';
	  t['\u2F02'] = '\u4E36';
	  t['\u2F03'] = '\u4E3F';
	  t['\u2F04'] = '\u4E59';
	  t['\u2F05'] = '\u4E85';
	  t['\u2F06'] = '\u4E8C';
	  t['\u2F07'] = '\u4EA0';
	  t['\u2F08'] = '\u4EBA';
	  t['\u2F09'] = '\u513F';
	  t['\u2F0A'] = '\u5165';
	  t['\u2F0B'] = '\u516B';
	  t['\u2F0C'] = '\u5182';
	  t['\u2F0D'] = '\u5196';
	  t['\u2F0E'] = '\u51AB';
	  t['\u2F0F'] = '\u51E0';
	  t['\u2F10'] = '\u51F5';
	  t['\u2F11'] = '\u5200';
	  t['\u2F12'] = '\u529B';
	  t['\u2F13'] = '\u52F9';
	  t['\u2F14'] = '\u5315';
	  t['\u2F15'] = '\u531A';
	  t['\u2F16'] = '\u5338';
	  t['\u2F17'] = '\u5341';
	  t['\u2F18'] = '\u535C';
	  t['\u2F19'] = '\u5369';
	  t['\u2F1A'] = '\u5382';
	  t['\u2F1B'] = '\u53B6';
	  t['\u2F1C'] = '\u53C8';
	  t['\u2F1D'] = '\u53E3';
	  t['\u2F1E'] = '\u56D7';
	  t['\u2F1F'] = '\u571F';
	  t['\u2F20'] = '\u58EB';
	  t['\u2F21'] = '\u5902';
	  t['\u2F22'] = '\u590A';
	  t['\u2F23'] = '\u5915';
	  t['\u2F24'] = '\u5927';
	  t['\u2F25'] = '\u5973';
	  t['\u2F26'] = '\u5B50';
	  t['\u2F27'] = '\u5B80';
	  t['\u2F28'] = '\u5BF8';
	  t['\u2F29'] = '\u5C0F';
	  t['\u2F2A'] = '\u5C22';
	  t['\u2F2B'] = '\u5C38';
	  t['\u2F2C'] = '\u5C6E';
	  t['\u2F2D'] = '\u5C71';
	  t['\u2F2E'] = '\u5DDB';
	  t['\u2F2F'] = '\u5DE5';
	  t['\u2F30'] = '\u5DF1';
	  t['\u2F31'] = '\u5DFE';
	  t['\u2F32'] = '\u5E72';
	  t['\u2F33'] = '\u5E7A';
	  t['\u2F34'] = '\u5E7F';
	  t['\u2F35'] = '\u5EF4';
	  t['\u2F36'] = '\u5EFE';
	  t['\u2F37'] = '\u5F0B';
	  t['\u2F38'] = '\u5F13';
	  t['\u2F39'] = '\u5F50';
	  t['\u2F3A'] = '\u5F61';
	  t['\u2F3B'] = '\u5F73';
	  t['\u2F3C'] = '\u5FC3';
	  t['\u2F3D'] = '\u6208';
	  t['\u2F3E'] = '\u6236';
	  t['\u2F3F'] = '\u624B';
	  t['\u2F40'] = '\u652F';
	  t['\u2F41'] = '\u6534';
	  t['\u2F42'] = '\u6587';
	  t['\u2F43'] = '\u6597';
	  t['\u2F44'] = '\u65A4';
	  t['\u2F45'] = '\u65B9';
	  t['\u2F46'] = '\u65E0';
	  t['\u2F47'] = '\u65E5';
	  t['\u2F48'] = '\u66F0';
	  t['\u2F49'] = '\u6708';
	  t['\u2F4A'] = '\u6728';
	  t['\u2F4B'] = '\u6B20';
	  t['\u2F4C'] = '\u6B62';
	  t['\u2F4D'] = '\u6B79';
	  t['\u2F4E'] = '\u6BB3';
	  t['\u2F4F'] = '\u6BCB';
	  t['\u2F50'] = '\u6BD4';
	  t['\u2F51'] = '\u6BDB';
	  t['\u2F52'] = '\u6C0F';
	  t['\u2F53'] = '\u6C14';
	  t['\u2F54'] = '\u6C34';
	  t['\u2F55'] = '\u706B';
	  t['\u2F56'] = '\u722A';
	  t['\u2F57'] = '\u7236';
	  t['\u2F58'] = '\u723B';
	  t['\u2F59'] = '\u723F';
	  t['\u2F5A'] = '\u7247';
	  t['\u2F5B'] = '\u7259';
	  t['\u2F5C'] = '\u725B';
	  t['\u2F5D'] = '\u72AC';
	  t['\u2F5E'] = '\u7384';
	  t['\u2F5F'] = '\u7389';
	  t['\u2F60'] = '\u74DC';
	  t['\u2F61'] = '\u74E6';
	  t['\u2F62'] = '\u7518';
	  t['\u2F63'] = '\u751F';
	  t['\u2F64'] = '\u7528';
	  t['\u2F65'] = '\u7530';
	  t['\u2F66'] = '\u758B';
	  t['\u2F67'] = '\u7592';
	  t['\u2F68'] = '\u7676';
	  t['\u2F69'] = '\u767D';
	  t['\u2F6A'] = '\u76AE';
	  t['\u2F6B'] = '\u76BF';
	  t['\u2F6C'] = '\u76EE';
	  t['\u2F6D'] = '\u77DB';
	  t['\u2F6E'] = '\u77E2';
	  t['\u2F6F'] = '\u77F3';
	  t['\u2F70'] = '\u793A';
	  t['\u2F71'] = '\u79B8';
	  t['\u2F72'] = '\u79BE';
	  t['\u2F73'] = '\u7A74';
	  t['\u2F74'] = '\u7ACB';
	  t['\u2F75'] = '\u7AF9';
	  t['\u2F76'] = '\u7C73';
	  t['\u2F77'] = '\u7CF8';
	  t['\u2F78'] = '\u7F36';
	  t['\u2F79'] = '\u7F51';
	  t['\u2F7A'] = '\u7F8A';
	  t['\u2F7B'] = '\u7FBD';
	  t['\u2F7C'] = '\u8001';
	  t['\u2F7D'] = '\u800C';
	  t['\u2F7E'] = '\u8012';
	  t['\u2F7F'] = '\u8033';
	  t['\u2F80'] = '\u807F';
	  t['\u2F81'] = '\u8089';
	  t['\u2F82'] = '\u81E3';
	  t['\u2F83'] = '\u81EA';
	  t['\u2F84'] = '\u81F3';
	  t['\u2F85'] = '\u81FC';
	  t['\u2F86'] = '\u820C';
	  t['\u2F87'] = '\u821B';
	  t['\u2F88'] = '\u821F';
	  t['\u2F89'] = '\u826E';
	  t['\u2F8A'] = '\u8272';
	  t['\u2F8B'] = '\u8278';
	  t['\u2F8C'] = '\u864D';
	  t['\u2F8D'] = '\u866B';
	  t['\u2F8E'] = '\u8840';
	  t['\u2F8F'] = '\u884C';
	  t['\u2F90'] = '\u8863';
	  t['\u2F91'] = '\u897E';
	  t['\u2F92'] = '\u898B';
	  t['\u2F93'] = '\u89D2';
	  t['\u2F94'] = '\u8A00';
	  t['\u2F95'] = '\u8C37';
	  t['\u2F96'] = '\u8C46';
	  t['\u2F97'] = '\u8C55';
	  t['\u2F98'] = '\u8C78';
	  t['\u2F99'] = '\u8C9D';
	  t['\u2F9A'] = '\u8D64';
	  t['\u2F9B'] = '\u8D70';
	  t['\u2F9C'] = '\u8DB3';
	  t['\u2F9D'] = '\u8EAB';
	  t['\u2F9E'] = '\u8ECA';
	  t['\u2F9F'] = '\u8F9B';
	  t['\u2FA0'] = '\u8FB0';
	  t['\u2FA1'] = '\u8FB5';
	  t['\u2FA2'] = '\u9091';
	  t['\u2FA3'] = '\u9149';
	  t['\u2FA4'] = '\u91C6';
	  t['\u2FA5'] = '\u91CC';
	  t['\u2FA6'] = '\u91D1';
	  t['\u2FA7'] = '\u9577';
	  t['\u2FA8'] = '\u9580';
	  t['\u2FA9'] = '\u961C';
	  t['\u2FAA'] = '\u96B6';
	  t['\u2FAB'] = '\u96B9';
	  t['\u2FAC'] = '\u96E8';
	  t['\u2FAD'] = '\u9751';
	  t['\u2FAE'] = '\u975E';
	  t['\u2FAF'] = '\u9762';
	  t['\u2FB0'] = '\u9769';
	  t['\u2FB1'] = '\u97CB';
	  t['\u2FB2'] = '\u97ED';
	  t['\u2FB3'] = '\u97F3';
	  t['\u2FB4'] = '\u9801';
	  t['\u2FB5'] = '\u98A8';
	  t['\u2FB6'] = '\u98DB';
	  t['\u2FB7'] = '\u98DF';
	  t['\u2FB8'] = '\u9996';
	  t['\u2FB9'] = '\u9999';
	  t['\u2FBA'] = '\u99AC';
	  t['\u2FBB'] = '\u9AA8';
	  t['\u2FBC'] = '\u9AD8';
	  t['\u2FBD'] = '\u9ADF';
	  t['\u2FBE'] = '\u9B25';
	  t['\u2FBF'] = '\u9B2F';
	  t['\u2FC0'] = '\u9B32';
	  t['\u2FC1'] = '\u9B3C';
	  t['\u2FC2'] = '\u9B5A';
	  t['\u2FC3'] = '\u9CE5';
	  t['\u2FC4'] = '\u9E75';
	  t['\u2FC5'] = '\u9E7F';
	  t['\u2FC6'] = '\u9EA5';
	  t['\u2FC7'] = '\u9EBB';
	  t['\u2FC8'] = '\u9EC3';
	  t['\u2FC9'] = '\u9ECD';
	  t['\u2FCA'] = '\u9ED1';
	  t['\u2FCB'] = '\u9EF9';
	  t['\u2FCC'] = '\u9EFD';
	  t['\u2FCD'] = '\u9F0E';
	  t['\u2FCE'] = '\u9F13';
	  t['\u2FCF'] = '\u9F20';
	  t['\u2FD0'] = '\u9F3B';
	  t['\u2FD1'] = '\u9F4A';
	  t['\u2FD2'] = '\u9F52';
	  t['\u2FD3'] = '\u9F8D';
	  t['\u2FD4'] = '\u9F9C';
	  t['\u2FD5'] = '\u9FA0';
	  t['\u3036'] = '\u3012';
	  t['\u3038'] = '\u5341';
	  t['\u3039'] = '\u5344';
	  t['\u303A'] = '\u5345';
	  t['\u309B'] = ' \u3099';
	  t['\u309C'] = ' \u309A';
	  t['\u3131'] = '\u1100';
	  t['\u3132'] = '\u1101';
	  t['\u3133'] = '\u11AA';
	  t['\u3134'] = '\u1102';
	  t['\u3135'] = '\u11AC';
	  t['\u3136'] = '\u11AD';
	  t['\u3137'] = '\u1103';
	  t['\u3138'] = '\u1104';
	  t['\u3139'] = '\u1105';
	  t['\u313A'] = '\u11B0';
	  t['\u313B'] = '\u11B1';
	  t['\u313C'] = '\u11B2';
	  t['\u313D'] = '\u11B3';
	  t['\u313E'] = '\u11B4';
	  t['\u313F'] = '\u11B5';
	  t['\u3140'] = '\u111A';
	  t['\u3141'] = '\u1106';
	  t['\u3142'] = '\u1107';
	  t['\u3143'] = '\u1108';
	  t['\u3144'] = '\u1121';
	  t['\u3145'] = '\u1109';
	  t['\u3146'] = '\u110A';
	  t['\u3147'] = '\u110B';
	  t['\u3148'] = '\u110C';
	  t['\u3149'] = '\u110D';
	  t['\u314A'] = '\u110E';
	  t['\u314B'] = '\u110F';
	  t['\u314C'] = '\u1110';
	  t['\u314D'] = '\u1111';
	  t['\u314E'] = '\u1112';
	  t['\u314F'] = '\u1161';
	  t['\u3150'] = '\u1162';
	  t['\u3151'] = '\u1163';
	  t['\u3152'] = '\u1164';
	  t['\u3153'] = '\u1165';
	  t['\u3154'] = '\u1166';
	  t['\u3155'] = '\u1167';
	  t['\u3156'] = '\u1168';
	  t['\u3157'] = '\u1169';
	  t['\u3158'] = '\u116A';
	  t['\u3159'] = '\u116B';
	  t['\u315A'] = '\u116C';
	  t['\u315B'] = '\u116D';
	  t['\u315C'] = '\u116E';
	  t['\u315D'] = '\u116F';
	  t['\u315E'] = '\u1170';
	  t['\u315F'] = '\u1171';
	  t['\u3160'] = '\u1172';
	  t['\u3161'] = '\u1173';
	  t['\u3162'] = '\u1174';
	  t['\u3163'] = '\u1175';
	  t['\u3164'] = '\u1160';
	  t['\u3165'] = '\u1114';
	  t['\u3166'] = '\u1115';
	  t['\u3167'] = '\u11C7';
	  t['\u3168'] = '\u11C8';
	  t['\u3169'] = '\u11CC';
	  t['\u316A'] = '\u11CE';
	  t['\u316B'] = '\u11D3';
	  t['\u316C'] = '\u11D7';
	  t['\u316D'] = '\u11D9';
	  t['\u316E'] = '\u111C';
	  t['\u316F'] = '\u11DD';
	  t['\u3170'] = '\u11DF';
	  t['\u3171'] = '\u111D';
	  t['\u3172'] = '\u111E';
	  t['\u3173'] = '\u1120';
	  t['\u3174'] = '\u1122';
	  t['\u3175'] = '\u1123';
	  t['\u3176'] = '\u1127';
	  t['\u3177'] = '\u1129';
	  t['\u3178'] = '\u112B';
	  t['\u3179'] = '\u112C';
	  t['\u317A'] = '\u112D';
	  t['\u317B'] = '\u112E';
	  t['\u317C'] = '\u112F';
	  t['\u317D'] = '\u1132';
	  t['\u317E'] = '\u1136';
	  t['\u317F'] = '\u1140';
	  t['\u3180'] = '\u1147';
	  t['\u3181'] = '\u114C';
	  t['\u3182'] = '\u11F1';
	  t['\u3183'] = '\u11F2';
	  t['\u3184'] = '\u1157';
	  t['\u3185'] = '\u1158';
	  t['\u3186'] = '\u1159';
	  t['\u3187'] = '\u1184';
	  t['\u3188'] = '\u1185';
	  t['\u3189'] = '\u1188';
	  t['\u318A'] = '\u1191';
	  t['\u318B'] = '\u1192';
	  t['\u318C'] = '\u1194';
	  t['\u318D'] = '\u119E';
	  t['\u318E'] = '\u11A1';
	  t['\u3200'] = '(\u1100)';
	  t['\u3201'] = '(\u1102)';
	  t['\u3202'] = '(\u1103)';
	  t['\u3203'] = '(\u1105)';
	  t['\u3204'] = '(\u1106)';
	  t['\u3205'] = '(\u1107)';
	  t['\u3206'] = '(\u1109)';
	  t['\u3207'] = '(\u110B)';
	  t['\u3208'] = '(\u110C)';
	  t['\u3209'] = '(\u110E)';
	  t['\u320A'] = '(\u110F)';
	  t['\u320B'] = '(\u1110)';
	  t['\u320C'] = '(\u1111)';
	  t['\u320D'] = '(\u1112)';
	  t['\u320E'] = '(\u1100\u1161)';
	  t['\u320F'] = '(\u1102\u1161)';
	  t['\u3210'] = '(\u1103\u1161)';
	  t['\u3211'] = '(\u1105\u1161)';
	  t['\u3212'] = '(\u1106\u1161)';
	  t['\u3213'] = '(\u1107\u1161)';
	  t['\u3214'] = '(\u1109\u1161)';
	  t['\u3215'] = '(\u110B\u1161)';
	  t['\u3216'] = '(\u110C\u1161)';
	  t['\u3217'] = '(\u110E\u1161)';
	  t['\u3218'] = '(\u110F\u1161)';
	  t['\u3219'] = '(\u1110\u1161)';
	  t['\u321A'] = '(\u1111\u1161)';
	  t['\u321B'] = '(\u1112\u1161)';
	  t['\u321C'] = '(\u110C\u116E)';
	  t['\u321D'] = '(\u110B\u1169\u110C\u1165\u11AB)';
	  t['\u321E'] = '(\u110B\u1169\u1112\u116E)';
	  t['\u3220'] = '(\u4E00)';
	  t['\u3221'] = '(\u4E8C)';
	  t['\u3222'] = '(\u4E09)';
	  t['\u3223'] = '(\u56DB)';
	  t['\u3224'] = '(\u4E94)';
	  t['\u3225'] = '(\u516D)';
	  t['\u3226'] = '(\u4E03)';
	  t['\u3227'] = '(\u516B)';
	  t['\u3228'] = '(\u4E5D)';
	  t['\u3229'] = '(\u5341)';
	  t['\u322A'] = '(\u6708)';
	  t['\u322B'] = '(\u706B)';
	  t['\u322C'] = '(\u6C34)';
	  t['\u322D'] = '(\u6728)';
	  t['\u322E'] = '(\u91D1)';
	  t['\u322F'] = '(\u571F)';
	  t['\u3230'] = '(\u65E5)';
	  t['\u3231'] = '(\u682A)';
	  t['\u3232'] = '(\u6709)';
	  t['\u3233'] = '(\u793E)';
	  t['\u3234'] = '(\u540D)';
	  t['\u3235'] = '(\u7279)';
	  t['\u3236'] = '(\u8CA1)';
	  t['\u3237'] = '(\u795D)';
	  t['\u3238'] = '(\u52B4)';
	  t['\u3239'] = '(\u4EE3)';
	  t['\u323A'] = '(\u547C)';
	  t['\u323B'] = '(\u5B66)';
	  t['\u323C'] = '(\u76E3)';
	  t['\u323D'] = '(\u4F01)';
	  t['\u323E'] = '(\u8CC7)';
	  t['\u323F'] = '(\u5354)';
	  t['\u3240'] = '(\u796D)';
	  t['\u3241'] = '(\u4F11)';
	  t['\u3242'] = '(\u81EA)';
	  t['\u3243'] = '(\u81F3)';
	  t['\u32C0'] = '1\u6708';
	  t['\u32C1'] = '2\u6708';
	  t['\u32C2'] = '3\u6708';
	  t['\u32C3'] = '4\u6708';
	  t['\u32C4'] = '5\u6708';
	  t['\u32C5'] = '6\u6708';
	  t['\u32C6'] = '7\u6708';
	  t['\u32C7'] = '8\u6708';
	  t['\u32C8'] = '9\u6708';
	  t['\u32C9'] = '10\u6708';
	  t['\u32CA'] = '11\u6708';
	  t['\u32CB'] = '12\u6708';
	  t['\u3358'] = '0\u70B9';
	  t['\u3359'] = '1\u70B9';
	  t['\u335A'] = '2\u70B9';
	  t['\u335B'] = '3\u70B9';
	  t['\u335C'] = '4\u70B9';
	  t['\u335D'] = '5\u70B9';
	  t['\u335E'] = '6\u70B9';
	  t['\u335F'] = '7\u70B9';
	  t['\u3360'] = '8\u70B9';
	  t['\u3361'] = '9\u70B9';
	  t['\u3362'] = '10\u70B9';
	  t['\u3363'] = '11\u70B9';
	  t['\u3364'] = '12\u70B9';
	  t['\u3365'] = '13\u70B9';
	  t['\u3366'] = '14\u70B9';
	  t['\u3367'] = '15\u70B9';
	  t['\u3368'] = '16\u70B9';
	  t['\u3369'] = '17\u70B9';
	  t['\u336A'] = '18\u70B9';
	  t['\u336B'] = '19\u70B9';
	  t['\u336C'] = '20\u70B9';
	  t['\u336D'] = '21\u70B9';
	  t['\u336E'] = '22\u70B9';
	  t['\u336F'] = '23\u70B9';
	  t['\u3370'] = '24\u70B9';
	  t['\u33E0'] = '1\u65E5';
	  t['\u33E1'] = '2\u65E5';
	  t['\u33E2'] = '3\u65E5';
	  t['\u33E3'] = '4\u65E5';
	  t['\u33E4'] = '5\u65E5';
	  t['\u33E5'] = '6\u65E5';
	  t['\u33E6'] = '7\u65E5';
	  t['\u33E7'] = '8\u65E5';
	  t['\u33E8'] = '9\u65E5';
	  t['\u33E9'] = '10\u65E5';
	  t['\u33EA'] = '11\u65E5';
	  t['\u33EB'] = '12\u65E5';
	  t['\u33EC'] = '13\u65E5';
	  t['\u33ED'] = '14\u65E5';
	  t['\u33EE'] = '15\u65E5';
	  t['\u33EF'] = '16\u65E5';
	  t['\u33F0'] = '17\u65E5';
	  t['\u33F1'] = '18\u65E5';
	  t['\u33F2'] = '19\u65E5';
	  t['\u33F3'] = '20\u65E5';
	  t['\u33F4'] = '21\u65E5';
	  t['\u33F5'] = '22\u65E5';
	  t['\u33F6'] = '23\u65E5';
	  t['\u33F7'] = '24\u65E5';
	  t['\u33F8'] = '25\u65E5';
	  t['\u33F9'] = '26\u65E5';
	  t['\u33FA'] = '27\u65E5';
	  t['\u33FB'] = '28\u65E5';
	  t['\u33FC'] = '29\u65E5';
	  t['\u33FD'] = '30\u65E5';
	  t['\u33FE'] = '31\u65E5';
	  t['\uFB00'] = 'ff';
	  t['\uFB01'] = 'fi';
	  t['\uFB02'] = 'fl';
	  t['\uFB03'] = 'ffi';
	  t['\uFB04'] = 'ffl';
	  t['\uFB05'] = '\u017Ft';
	  t['\uFB06'] = 'st';
	  t['\uFB13'] = '\u0574\u0576';
	  t['\uFB14'] = '\u0574\u0565';
	  t['\uFB15'] = '\u0574\u056B';
	  t['\uFB16'] = '\u057E\u0576';
	  t['\uFB17'] = '\u0574\u056D';
	  t['\uFB4F'] = '\u05D0\u05DC';
	  t['\uFB50'] = '\u0671';
	  t['\uFB51'] = '\u0671';
	  t['\uFB52'] = '\u067B';
	  t['\uFB53'] = '\u067B';
	  t['\uFB54'] = '\u067B';
	  t['\uFB55'] = '\u067B';
	  t['\uFB56'] = '\u067E';
	  t['\uFB57'] = '\u067E';
	  t['\uFB58'] = '\u067E';
	  t['\uFB59'] = '\u067E';
	  t['\uFB5A'] = '\u0680';
	  t['\uFB5B'] = '\u0680';
	  t['\uFB5C'] = '\u0680';
	  t['\uFB5D'] = '\u0680';
	  t['\uFB5E'] = '\u067A';
	  t['\uFB5F'] = '\u067A';
	  t['\uFB60'] = '\u067A';
	  t['\uFB61'] = '\u067A';
	  t['\uFB62'] = '\u067F';
	  t['\uFB63'] = '\u067F';
	  t['\uFB64'] = '\u067F';
	  t['\uFB65'] = '\u067F';
	  t['\uFB66'] = '\u0679';
	  t['\uFB67'] = '\u0679';
	  t['\uFB68'] = '\u0679';
	  t['\uFB69'] = '\u0679';
	  t['\uFB6A'] = '\u06A4';
	  t['\uFB6B'] = '\u06A4';
	  t['\uFB6C'] = '\u06A4';
	  t['\uFB6D'] = '\u06A4';
	  t['\uFB6E'] = '\u06A6';
	  t['\uFB6F'] = '\u06A6';
	  t['\uFB70'] = '\u06A6';
	  t['\uFB71'] = '\u06A6';
	  t['\uFB72'] = '\u0684';
	  t['\uFB73'] = '\u0684';
	  t['\uFB74'] = '\u0684';
	  t['\uFB75'] = '\u0684';
	  t['\uFB76'] = '\u0683';
	  t['\uFB77'] = '\u0683';
	  t['\uFB78'] = '\u0683';
	  t['\uFB79'] = '\u0683';
	  t['\uFB7A'] = '\u0686';
	  t['\uFB7B'] = '\u0686';
	  t['\uFB7C'] = '\u0686';
	  t['\uFB7D'] = '\u0686';
	  t['\uFB7E'] = '\u0687';
	  t['\uFB7F'] = '\u0687';
	  t['\uFB80'] = '\u0687';
	  t['\uFB81'] = '\u0687';
	  t['\uFB82'] = '\u068D';
	  t['\uFB83'] = '\u068D';
	  t['\uFB84'] = '\u068C';
	  t['\uFB85'] = '\u068C';
	  t['\uFB86'] = '\u068E';
	  t['\uFB87'] = '\u068E';
	  t['\uFB88'] = '\u0688';
	  t['\uFB89'] = '\u0688';
	  t['\uFB8A'] = '\u0698';
	  t['\uFB8B'] = '\u0698';
	  t['\uFB8C'] = '\u0691';
	  t['\uFB8D'] = '\u0691';
	  t['\uFB8E'] = '\u06A9';
	  t['\uFB8F'] = '\u06A9';
	  t['\uFB90'] = '\u06A9';
	  t['\uFB91'] = '\u06A9';
	  t['\uFB92'] = '\u06AF';
	  t['\uFB93'] = '\u06AF';
	  t['\uFB94'] = '\u06AF';
	  t['\uFB95'] = '\u06AF';
	  t['\uFB96'] = '\u06B3';
	  t['\uFB97'] = '\u06B3';
	  t['\uFB98'] = '\u06B3';
	  t['\uFB99'] = '\u06B3';
	  t['\uFB9A'] = '\u06B1';
	  t['\uFB9B'] = '\u06B1';
	  t['\uFB9C'] = '\u06B1';
	  t['\uFB9D'] = '\u06B1';
	  t['\uFB9E'] = '\u06BA';
	  t['\uFB9F'] = '\u06BA';
	  t['\uFBA0'] = '\u06BB';
	  t['\uFBA1'] = '\u06BB';
	  t['\uFBA2'] = '\u06BB';
	  t['\uFBA3'] = '\u06BB';
	  t['\uFBA4'] = '\u06C0';
	  t['\uFBA5'] = '\u06C0';
	  t['\uFBA6'] = '\u06C1';
	  t['\uFBA7'] = '\u06C1';
	  t['\uFBA8'] = '\u06C1';
	  t['\uFBA9'] = '\u06C1';
	  t['\uFBAA'] = '\u06BE';
	  t['\uFBAB'] = '\u06BE';
	  t['\uFBAC'] = '\u06BE';
	  t['\uFBAD'] = '\u06BE';
	  t['\uFBAE'] = '\u06D2';
	  t['\uFBAF'] = '\u06D2';
	  t['\uFBB0'] = '\u06D3';
	  t['\uFBB1'] = '\u06D3';
	  t['\uFBD3'] = '\u06AD';
	  t['\uFBD4'] = '\u06AD';
	  t['\uFBD5'] = '\u06AD';
	  t['\uFBD6'] = '\u06AD';
	  t['\uFBD7'] = '\u06C7';
	  t['\uFBD8'] = '\u06C7';
	  t['\uFBD9'] = '\u06C6';
	  t['\uFBDA'] = '\u06C6';
	  t['\uFBDB'] = '\u06C8';
	  t['\uFBDC'] = '\u06C8';
	  t['\uFBDD'] = '\u0677';
	  t['\uFBDE'] = '\u06CB';
	  t['\uFBDF'] = '\u06CB';
	  t['\uFBE0'] = '\u06C5';
	  t['\uFBE1'] = '\u06C5';
	  t['\uFBE2'] = '\u06C9';
	  t['\uFBE3'] = '\u06C9';
	  t['\uFBE4'] = '\u06D0';
	  t['\uFBE5'] = '\u06D0';
	  t['\uFBE6'] = '\u06D0';
	  t['\uFBE7'] = '\u06D0';
	  t['\uFBE8'] = '\u0649';
	  t['\uFBE9'] = '\u0649';
	  t['\uFBEA'] = '\u0626\u0627';
	  t['\uFBEB'] = '\u0626\u0627';
	  t['\uFBEC'] = '\u0626\u06D5';
	  t['\uFBED'] = '\u0626\u06D5';
	  t['\uFBEE'] = '\u0626\u0648';
	  t['\uFBEF'] = '\u0626\u0648';
	  t['\uFBF0'] = '\u0626\u06C7';
	  t['\uFBF1'] = '\u0626\u06C7';
	  t['\uFBF2'] = '\u0626\u06C6';
	  t['\uFBF3'] = '\u0626\u06C6';
	  t['\uFBF4'] = '\u0626\u06C8';
	  t['\uFBF5'] = '\u0626\u06C8';
	  t['\uFBF6'] = '\u0626\u06D0';
	  t['\uFBF7'] = '\u0626\u06D0';
	  t['\uFBF8'] = '\u0626\u06D0';
	  t['\uFBF9'] = '\u0626\u0649';
	  t['\uFBFA'] = '\u0626\u0649';
	  t['\uFBFB'] = '\u0626\u0649';
	  t['\uFBFC'] = '\u06CC';
	  t['\uFBFD'] = '\u06CC';
	  t['\uFBFE'] = '\u06CC';
	  t['\uFBFF'] = '\u06CC';
	  t['\uFC00'] = '\u0626\u062C';
	  t['\uFC01'] = '\u0626\u062D';
	  t['\uFC02'] = '\u0626\u0645';
	  t['\uFC03'] = '\u0626\u0649';
	  t['\uFC04'] = '\u0626\u064A';
	  t['\uFC05'] = '\u0628\u062C';
	  t['\uFC06'] = '\u0628\u062D';
	  t['\uFC07'] = '\u0628\u062E';
	  t['\uFC08'] = '\u0628\u0645';
	  t['\uFC09'] = '\u0628\u0649';
	  t['\uFC0A'] = '\u0628\u064A';
	  t['\uFC0B'] = '\u062A\u062C';
	  t['\uFC0C'] = '\u062A\u062D';
	  t['\uFC0D'] = '\u062A\u062E';
	  t['\uFC0E'] = '\u062A\u0645';
	  t['\uFC0F'] = '\u062A\u0649';
	  t['\uFC10'] = '\u062A\u064A';
	  t['\uFC11'] = '\u062B\u062C';
	  t['\uFC12'] = '\u062B\u0645';
	  t['\uFC13'] = '\u062B\u0649';
	  t['\uFC14'] = '\u062B\u064A';
	  t['\uFC15'] = '\u062C\u062D';
	  t['\uFC16'] = '\u062C\u0645';
	  t['\uFC17'] = '\u062D\u062C';
	  t['\uFC18'] = '\u062D\u0645';
	  t['\uFC19'] = '\u062E\u062C';
	  t['\uFC1A'] = '\u062E\u062D';
	  t['\uFC1B'] = '\u062E\u0645';
	  t['\uFC1C'] = '\u0633\u062C';
	  t['\uFC1D'] = '\u0633\u062D';
	  t['\uFC1E'] = '\u0633\u062E';
	  t['\uFC1F'] = '\u0633\u0645';
	  t['\uFC20'] = '\u0635\u062D';
	  t['\uFC21'] = '\u0635\u0645';
	  t['\uFC22'] = '\u0636\u062C';
	  t['\uFC23'] = '\u0636\u062D';
	  t['\uFC24'] = '\u0636\u062E';
	  t['\uFC25'] = '\u0636\u0645';
	  t['\uFC26'] = '\u0637\u062D';
	  t['\uFC27'] = '\u0637\u0645';
	  t['\uFC28'] = '\u0638\u0645';
	  t['\uFC29'] = '\u0639\u062C';
	  t['\uFC2A'] = '\u0639\u0645';
	  t['\uFC2B'] = '\u063A\u062C';
	  t['\uFC2C'] = '\u063A\u0645';
	  t['\uFC2D'] = '\u0641\u062C';
	  t['\uFC2E'] = '\u0641\u062D';
	  t['\uFC2F'] = '\u0641\u062E';
	  t['\uFC30'] = '\u0641\u0645';
	  t['\uFC31'] = '\u0641\u0649';
	  t['\uFC32'] = '\u0641\u064A';
	  t['\uFC33'] = '\u0642\u062D';
	  t['\uFC34'] = '\u0642\u0645';
	  t['\uFC35'] = '\u0642\u0649';
	  t['\uFC36'] = '\u0642\u064A';
	  t['\uFC37'] = '\u0643\u0627';
	  t['\uFC38'] = '\u0643\u062C';
	  t['\uFC39'] = '\u0643\u062D';
	  t['\uFC3A'] = '\u0643\u062E';
	  t['\uFC3B'] = '\u0643\u0644';
	  t['\uFC3C'] = '\u0643\u0645';
	  t['\uFC3D'] = '\u0643\u0649';
	  t['\uFC3E'] = '\u0643\u064A';
	  t['\uFC3F'] = '\u0644\u062C';
	  t['\uFC40'] = '\u0644\u062D';
	  t['\uFC41'] = '\u0644\u062E';
	  t['\uFC42'] = '\u0644\u0645';
	  t['\uFC43'] = '\u0644\u0649';
	  t['\uFC44'] = '\u0644\u064A';
	  t['\uFC45'] = '\u0645\u062C';
	  t['\uFC46'] = '\u0645\u062D';
	  t['\uFC47'] = '\u0645\u062E';
	  t['\uFC48'] = '\u0645\u0645';
	  t['\uFC49'] = '\u0645\u0649';
	  t['\uFC4A'] = '\u0645\u064A';
	  t['\uFC4B'] = '\u0646\u062C';
	  t['\uFC4C'] = '\u0646\u062D';
	  t['\uFC4D'] = '\u0646\u062E';
	  t['\uFC4E'] = '\u0646\u0645';
	  t['\uFC4F'] = '\u0646\u0649';
	  t['\uFC50'] = '\u0646\u064A';
	  t['\uFC51'] = '\u0647\u062C';
	  t['\uFC52'] = '\u0647\u0645';
	  t['\uFC53'] = '\u0647\u0649';
	  t['\uFC54'] = '\u0647\u064A';
	  t['\uFC55'] = '\u064A\u062C';
	  t['\uFC56'] = '\u064A\u062D';
	  t['\uFC57'] = '\u064A\u062E';
	  t['\uFC58'] = '\u064A\u0645';
	  t['\uFC59'] = '\u064A\u0649';
	  t['\uFC5A'] = '\u064A\u064A';
	  t['\uFC5B'] = '\u0630\u0670';
	  t['\uFC5C'] = '\u0631\u0670';
	  t['\uFC5D'] = '\u0649\u0670';
	  t['\uFC5E'] = ' \u064C\u0651';
	  t['\uFC5F'] = ' \u064D\u0651';
	  t['\uFC60'] = ' \u064E\u0651';
	  t['\uFC61'] = ' \u064F\u0651';
	  t['\uFC62'] = ' \u0650\u0651';
	  t['\uFC63'] = ' \u0651\u0670';
	  t['\uFC64'] = '\u0626\u0631';
	  t['\uFC65'] = '\u0626\u0632';
	  t['\uFC66'] = '\u0626\u0645';
	  t['\uFC67'] = '\u0626\u0646';
	  t['\uFC68'] = '\u0626\u0649';
	  t['\uFC69'] = '\u0626\u064A';
	  t['\uFC6A'] = '\u0628\u0631';
	  t['\uFC6B'] = '\u0628\u0632';
	  t['\uFC6C'] = '\u0628\u0645';
	  t['\uFC6D'] = '\u0628\u0646';
	  t['\uFC6E'] = '\u0628\u0649';
	  t['\uFC6F'] = '\u0628\u064A';
	  t['\uFC70'] = '\u062A\u0631';
	  t['\uFC71'] = '\u062A\u0632';
	  t['\uFC72'] = '\u062A\u0645';
	  t['\uFC73'] = '\u062A\u0646';
	  t['\uFC74'] = '\u062A\u0649';
	  t['\uFC75'] = '\u062A\u064A';
	  t['\uFC76'] = '\u062B\u0631';
	  t['\uFC77'] = '\u062B\u0632';
	  t['\uFC78'] = '\u062B\u0645';
	  t['\uFC79'] = '\u062B\u0646';
	  t['\uFC7A'] = '\u062B\u0649';
	  t['\uFC7B'] = '\u062B\u064A';
	  t['\uFC7C'] = '\u0641\u0649';
	  t['\uFC7D'] = '\u0641\u064A';
	  t['\uFC7E'] = '\u0642\u0649';
	  t['\uFC7F'] = '\u0642\u064A';
	  t['\uFC80'] = '\u0643\u0627';
	  t['\uFC81'] = '\u0643\u0644';
	  t['\uFC82'] = '\u0643\u0645';
	  t['\uFC83'] = '\u0643\u0649';
	  t['\uFC84'] = '\u0643\u064A';
	  t['\uFC85'] = '\u0644\u0645';
	  t['\uFC86'] = '\u0644\u0649';
	  t['\uFC87'] = '\u0644\u064A';
	  t['\uFC88'] = '\u0645\u0627';
	  t['\uFC89'] = '\u0645\u0645';
	  t['\uFC8A'] = '\u0646\u0631';
	  t['\uFC8B'] = '\u0646\u0632';
	  t['\uFC8C'] = '\u0646\u0645';
	  t['\uFC8D'] = '\u0646\u0646';
	  t['\uFC8E'] = '\u0646\u0649';
	  t['\uFC8F'] = '\u0646\u064A';
	  t['\uFC90'] = '\u0649\u0670';
	  t['\uFC91'] = '\u064A\u0631';
	  t['\uFC92'] = '\u064A\u0632';
	  t['\uFC93'] = '\u064A\u0645';
	  t['\uFC94'] = '\u064A\u0646';
	  t['\uFC95'] = '\u064A\u0649';
	  t['\uFC96'] = '\u064A\u064A';
	  t['\uFC97'] = '\u0626\u062C';
	  t['\uFC98'] = '\u0626\u062D';
	  t['\uFC99'] = '\u0626\u062E';
	  t['\uFC9A'] = '\u0626\u0645';
	  t['\uFC9B'] = '\u0626\u0647';
	  t['\uFC9C'] = '\u0628\u062C';
	  t['\uFC9D'] = '\u0628\u062D';
	  t['\uFC9E'] = '\u0628\u062E';
	  t['\uFC9F'] = '\u0628\u0645';
	  t['\uFCA0'] = '\u0628\u0647';
	  t['\uFCA1'] = '\u062A\u062C';
	  t['\uFCA2'] = '\u062A\u062D';
	  t['\uFCA3'] = '\u062A\u062E';
	  t['\uFCA4'] = '\u062A\u0645';
	  t['\uFCA5'] = '\u062A\u0647';
	  t['\uFCA6'] = '\u062B\u0645';
	  t['\uFCA7'] = '\u062C\u062D';
	  t['\uFCA8'] = '\u062C\u0645';
	  t['\uFCA9'] = '\u062D\u062C';
	  t['\uFCAA'] = '\u062D\u0645';
	  t['\uFCAB'] = '\u062E\u062C';
	  t['\uFCAC'] = '\u062E\u0645';
	  t['\uFCAD'] = '\u0633\u062C';
	  t['\uFCAE'] = '\u0633\u062D';
	  t['\uFCAF'] = '\u0633\u062E';
	  t['\uFCB0'] = '\u0633\u0645';
	  t['\uFCB1'] = '\u0635\u062D';
	  t['\uFCB2'] = '\u0635\u062E';
	  t['\uFCB3'] = '\u0635\u0645';
	  t['\uFCB4'] = '\u0636\u062C';
	  t['\uFCB5'] = '\u0636\u062D';
	  t['\uFCB6'] = '\u0636\u062E';
	  t['\uFCB7'] = '\u0636\u0645';
	  t['\uFCB8'] = '\u0637\u062D';
	  t['\uFCB9'] = '\u0638\u0645';
	  t['\uFCBA'] = '\u0639\u062C';
	  t['\uFCBB'] = '\u0639\u0645';
	  t['\uFCBC'] = '\u063A\u062C';
	  t['\uFCBD'] = '\u063A\u0645';
	  t['\uFCBE'] = '\u0641\u062C';
	  t['\uFCBF'] = '\u0641\u062D';
	  t['\uFCC0'] = '\u0641\u062E';
	  t['\uFCC1'] = '\u0641\u0645';
	  t['\uFCC2'] = '\u0642\u062D';
	  t['\uFCC3'] = '\u0642\u0645';
	  t['\uFCC4'] = '\u0643\u062C';
	  t['\uFCC5'] = '\u0643\u062D';
	  t['\uFCC6'] = '\u0643\u062E';
	  t['\uFCC7'] = '\u0643\u0644';
	  t['\uFCC8'] = '\u0643\u0645';
	  t['\uFCC9'] = '\u0644\u062C';
	  t['\uFCCA'] = '\u0644\u062D';
	  t['\uFCCB'] = '\u0644\u062E';
	  t['\uFCCC'] = '\u0644\u0645';
	  t['\uFCCD'] = '\u0644\u0647';
	  t['\uFCCE'] = '\u0645\u062C';
	  t['\uFCCF'] = '\u0645\u062D';
	  t['\uFCD0'] = '\u0645\u062E';
	  t['\uFCD1'] = '\u0645\u0645';
	  t['\uFCD2'] = '\u0646\u062C';
	  t['\uFCD3'] = '\u0646\u062D';
	  t['\uFCD4'] = '\u0646\u062E';
	  t['\uFCD5'] = '\u0646\u0645';
	  t['\uFCD6'] = '\u0646\u0647';
	  t['\uFCD7'] = '\u0647\u062C';
	  t['\uFCD8'] = '\u0647\u0645';
	  t['\uFCD9'] = '\u0647\u0670';
	  t['\uFCDA'] = '\u064A\u062C';
	  t['\uFCDB'] = '\u064A\u062D';
	  t['\uFCDC'] = '\u064A\u062E';
	  t['\uFCDD'] = '\u064A\u0645';
	  t['\uFCDE'] = '\u064A\u0647';
	  t['\uFCDF'] = '\u0626\u0645';
	  t['\uFCE0'] = '\u0626\u0647';
	  t['\uFCE1'] = '\u0628\u0645';
	  t['\uFCE2'] = '\u0628\u0647';
	  t['\uFCE3'] = '\u062A\u0645';
	  t['\uFCE4'] = '\u062A\u0647';
	  t['\uFCE5'] = '\u062B\u0645';
	  t['\uFCE6'] = '\u062B\u0647';
	  t['\uFCE7'] = '\u0633\u0645';
	  t['\uFCE8'] = '\u0633\u0647';
	  t['\uFCE9'] = '\u0634\u0645';
	  t['\uFCEA'] = '\u0634\u0647';
	  t['\uFCEB'] = '\u0643\u0644';
	  t['\uFCEC'] = '\u0643\u0645';
	  t['\uFCED'] = '\u0644\u0645';
	  t['\uFCEE'] = '\u0646\u0645';
	  t['\uFCEF'] = '\u0646\u0647';
	  t['\uFCF0'] = '\u064A\u0645';
	  t['\uFCF1'] = '\u064A\u0647';
	  t['\uFCF2'] = '\u0640\u064E\u0651';
	  t['\uFCF3'] = '\u0640\u064F\u0651';
	  t['\uFCF4'] = '\u0640\u0650\u0651';
	  t['\uFCF5'] = '\u0637\u0649';
	  t['\uFCF6'] = '\u0637\u064A';
	  t['\uFCF7'] = '\u0639\u0649';
	  t['\uFCF8'] = '\u0639\u064A';
	  t['\uFCF9'] = '\u063A\u0649';
	  t['\uFCFA'] = '\u063A\u064A';
	  t['\uFCFB'] = '\u0633\u0649';
	  t['\uFCFC'] = '\u0633\u064A';
	  t['\uFCFD'] = '\u0634\u0649';
	  t['\uFCFE'] = '\u0634\u064A';
	  t['\uFCFF'] = '\u062D\u0649';
	  t['\uFD00'] = '\u062D\u064A';
	  t['\uFD01'] = '\u062C\u0649';
	  t['\uFD02'] = '\u062C\u064A';
	  t['\uFD03'] = '\u062E\u0649';
	  t['\uFD04'] = '\u062E\u064A';
	  t['\uFD05'] = '\u0635\u0649';
	  t['\uFD06'] = '\u0635\u064A';
	  t['\uFD07'] = '\u0636\u0649';
	  t['\uFD08'] = '\u0636\u064A';
	  t['\uFD09'] = '\u0634\u062C';
	  t['\uFD0A'] = '\u0634\u062D';
	  t['\uFD0B'] = '\u0634\u062E';
	  t['\uFD0C'] = '\u0634\u0645';
	  t['\uFD0D'] = '\u0634\u0631';
	  t['\uFD0E'] = '\u0633\u0631';
	  t['\uFD0F'] = '\u0635\u0631';
	  t['\uFD10'] = '\u0636\u0631';
	  t['\uFD11'] = '\u0637\u0649';
	  t['\uFD12'] = '\u0637\u064A';
	  t['\uFD13'] = '\u0639\u0649';
	  t['\uFD14'] = '\u0639\u064A';
	  t['\uFD15'] = '\u063A\u0649';
	  t['\uFD16'] = '\u063A\u064A';
	  t['\uFD17'] = '\u0633\u0649';
	  t['\uFD18'] = '\u0633\u064A';
	  t['\uFD19'] = '\u0634\u0649';
	  t['\uFD1A'] = '\u0634\u064A';
	  t['\uFD1B'] = '\u062D\u0649';
	  t['\uFD1C'] = '\u062D\u064A';
	  t['\uFD1D'] = '\u062C\u0649';
	  t['\uFD1E'] = '\u062C\u064A';
	  t['\uFD1F'] = '\u062E\u0649';
	  t['\uFD20'] = '\u062E\u064A';
	  t['\uFD21'] = '\u0635\u0649';
	  t['\uFD22'] = '\u0635\u064A';
	  t['\uFD23'] = '\u0636\u0649';
	  t['\uFD24'] = '\u0636\u064A';
	  t['\uFD25'] = '\u0634\u062C';
	  t['\uFD26'] = '\u0634\u062D';
	  t['\uFD27'] = '\u0634\u062E';
	  t['\uFD28'] = '\u0634\u0645';
	  t['\uFD29'] = '\u0634\u0631';
	  t['\uFD2A'] = '\u0633\u0631';
	  t['\uFD2B'] = '\u0635\u0631';
	  t['\uFD2C'] = '\u0636\u0631';
	  t['\uFD2D'] = '\u0634\u062C';
	  t['\uFD2E'] = '\u0634\u062D';
	  t['\uFD2F'] = '\u0634\u062E';
	  t['\uFD30'] = '\u0634\u0645';
	  t['\uFD31'] = '\u0633\u0647';
	  t['\uFD32'] = '\u0634\u0647';
	  t['\uFD33'] = '\u0637\u0645';
	  t['\uFD34'] = '\u0633\u062C';
	  t['\uFD35'] = '\u0633\u062D';
	  t['\uFD36'] = '\u0633\u062E';
	  t['\uFD37'] = '\u0634\u062C';
	  t['\uFD38'] = '\u0634\u062D';
	  t['\uFD39'] = '\u0634\u062E';
	  t['\uFD3A'] = '\u0637\u0645';
	  t['\uFD3B'] = '\u0638\u0645';
	  t['\uFD3C'] = '\u0627\u064B';
	  t['\uFD3D'] = '\u0627\u064B';
	  t['\uFD50'] = '\u062A\u062C\u0645';
	  t['\uFD51'] = '\u062A\u062D\u062C';
	  t['\uFD52'] = '\u062A\u062D\u062C';
	  t['\uFD53'] = '\u062A\u062D\u0645';
	  t['\uFD54'] = '\u062A\u062E\u0645';
	  t['\uFD55'] = '\u062A\u0645\u062C';
	  t['\uFD56'] = '\u062A\u0645\u062D';
	  t['\uFD57'] = '\u062A\u0645\u062E';
	  t['\uFD58'] = '\u062C\u0645\u062D';
	  t['\uFD59'] = '\u062C\u0645\u062D';
	  t['\uFD5A'] = '\u062D\u0645\u064A';
	  t['\uFD5B'] = '\u062D\u0645\u0649';
	  t['\uFD5C'] = '\u0633\u062D\u062C';
	  t['\uFD5D'] = '\u0633\u062C\u062D';
	  t['\uFD5E'] = '\u0633\u062C\u0649';
	  t['\uFD5F'] = '\u0633\u0645\u062D';
	  t['\uFD60'] = '\u0633\u0645\u062D';
	  t['\uFD61'] = '\u0633\u0645\u062C';
	  t['\uFD62'] = '\u0633\u0645\u0645';
	  t['\uFD63'] = '\u0633\u0645\u0645';
	  t['\uFD64'] = '\u0635\u062D\u062D';
	  t['\uFD65'] = '\u0635\u062D\u062D';
	  t['\uFD66'] = '\u0635\u0645\u0645';
	  t['\uFD67'] = '\u0634\u062D\u0645';
	  t['\uFD68'] = '\u0634\u062D\u0645';
	  t['\uFD69'] = '\u0634\u062C\u064A';
	  t['\uFD6A'] = '\u0634\u0645\u062E';
	  t['\uFD6B'] = '\u0634\u0645\u062E';
	  t['\uFD6C'] = '\u0634\u0645\u0645';
	  t['\uFD6D'] = '\u0634\u0645\u0645';
	  t['\uFD6E'] = '\u0636\u062D\u0649';
	  t['\uFD6F'] = '\u0636\u062E\u0645';
	  t['\uFD70'] = '\u0636\u062E\u0645';
	  t['\uFD71'] = '\u0637\u0645\u062D';
	  t['\uFD72'] = '\u0637\u0645\u062D';
	  t['\uFD73'] = '\u0637\u0645\u0645';
	  t['\uFD74'] = '\u0637\u0645\u064A';
	  t['\uFD75'] = '\u0639\u062C\u0645';
	  t['\uFD76'] = '\u0639\u0645\u0645';
	  t['\uFD77'] = '\u0639\u0645\u0645';
	  t['\uFD78'] = '\u0639\u0645\u0649';
	  t['\uFD79'] = '\u063A\u0645\u0645';
	  t['\uFD7A'] = '\u063A\u0645\u064A';
	  t['\uFD7B'] = '\u063A\u0645\u0649';
	  t['\uFD7C'] = '\u0641\u062E\u0645';
	  t['\uFD7D'] = '\u0641\u062E\u0645';
	  t['\uFD7E'] = '\u0642\u0645\u062D';
	  t['\uFD7F'] = '\u0642\u0645\u0645';
	  t['\uFD80'] = '\u0644\u062D\u0645';
	  t['\uFD81'] = '\u0644\u062D\u064A';
	  t['\uFD82'] = '\u0644\u062D\u0649';
	  t['\uFD83'] = '\u0644\u062C\u062C';
	  t['\uFD84'] = '\u0644\u062C\u062C';
	  t['\uFD85'] = '\u0644\u062E\u0645';
	  t['\uFD86'] = '\u0644\u062E\u0645';
	  t['\uFD87'] = '\u0644\u0645\u062D';
	  t['\uFD88'] = '\u0644\u0645\u062D';
	  t['\uFD89'] = '\u0645\u062D\u062C';
	  t['\uFD8A'] = '\u0645\u062D\u0645';
	  t['\uFD8B'] = '\u0645\u062D\u064A';
	  t['\uFD8C'] = '\u0645\u062C\u062D';
	  t['\uFD8D'] = '\u0645\u062C\u0645';
	  t['\uFD8E'] = '\u0645\u062E\u062C';
	  t['\uFD8F'] = '\u0645\u062E\u0645';
	  t['\uFD92'] = '\u0645\u062C\u062E';
	  t['\uFD93'] = '\u0647\u0645\u062C';
	  t['\uFD94'] = '\u0647\u0645\u0645';
	  t['\uFD95'] = '\u0646\u062D\u0645';
	  t['\uFD96'] = '\u0646\u062D\u0649';
	  t['\uFD97'] = '\u0646\u062C\u0645';
	  t['\uFD98'] = '\u0646\u062C\u0645';
	  t['\uFD99'] = '\u0646\u062C\u0649';
	  t['\uFD9A'] = '\u0646\u0645\u064A';
	  t['\uFD9B'] = '\u0646\u0645\u0649';
	  t['\uFD9C'] = '\u064A\u0645\u0645';
	  t['\uFD9D'] = '\u064A\u0645\u0645';
	  t['\uFD9E'] = '\u0628\u062E\u064A';
	  t['\uFD9F'] = '\u062A\u062C\u064A';
	  t['\uFDA0'] = '\u062A\u062C\u0649';
	  t['\uFDA1'] = '\u062A\u062E\u064A';
	  t['\uFDA2'] = '\u062A\u062E\u0649';
	  t['\uFDA3'] = '\u062A\u0645\u064A';
	  t['\uFDA4'] = '\u062A\u0645\u0649';
	  t['\uFDA5'] = '\u062C\u0645\u064A';
	  t['\uFDA6'] = '\u062C\u062D\u0649';
	  t['\uFDA7'] = '\u062C\u0645\u0649';
	  t['\uFDA8'] = '\u0633\u062E\u0649';
	  t['\uFDA9'] = '\u0635\u062D\u064A';
	  t['\uFDAA'] = '\u0634\u062D\u064A';
	  t['\uFDAB'] = '\u0636\u062D\u064A';
	  t['\uFDAC'] = '\u0644\u062C\u064A';
	  t['\uFDAD'] = '\u0644\u0645\u064A';
	  t['\uFDAE'] = '\u064A\u062D\u064A';
	  t['\uFDAF'] = '\u064A\u062C\u064A';
	  t['\uFDB0'] = '\u064A\u0645\u064A';
	  t['\uFDB1'] = '\u0645\u0645\u064A';
	  t['\uFDB2'] = '\u0642\u0645\u064A';
	  t['\uFDB3'] = '\u0646\u062D\u064A';
	  t['\uFDB4'] = '\u0642\u0645\u062D';
	  t['\uFDB5'] = '\u0644\u062D\u0645';
	  t['\uFDB6'] = '\u0639\u0645\u064A';
	  t['\uFDB7'] = '\u0643\u0645\u064A';
	  t['\uFDB8'] = '\u0646\u062C\u062D';
	  t['\uFDB9'] = '\u0645\u062E\u064A';
	  t['\uFDBA'] = '\u0644\u062C\u0645';
	  t['\uFDBB'] = '\u0643\u0645\u0645';
	  t['\uFDBC'] = '\u0644\u062C\u0645';
	  t['\uFDBD'] = '\u0646\u062C\u062D';
	  t['\uFDBE'] = '\u062C\u062D\u064A';
	  t['\uFDBF'] = '\u062D\u062C\u064A';
	  t['\uFDC0'] = '\u0645\u062C\u064A';
	  t['\uFDC1'] = '\u0641\u0645\u064A';
	  t['\uFDC2'] = '\u0628\u062D\u064A';
	  t['\uFDC3'] = '\u0643\u0645\u0645';
	  t['\uFDC4'] = '\u0639\u062C\u0645';
	  t['\uFDC5'] = '\u0635\u0645\u0645';
	  t['\uFDC6'] = '\u0633\u062E\u064A';
	  t['\uFDC7'] = '\u0646\u062C\u064A';
	  t['\uFE49'] = '\u203E';
	  t['\uFE4A'] = '\u203E';
	  t['\uFE4B'] = '\u203E';
	  t['\uFE4C'] = '\u203E';
	  t['\uFE4D'] = '_';
	  t['\uFE4E'] = '_';
	  t['\uFE4F'] = '_';
	  t['\uFE80'] = '\u0621';
	  t['\uFE81'] = '\u0622';
	  t['\uFE82'] = '\u0622';
	  t['\uFE83'] = '\u0623';
	  t['\uFE84'] = '\u0623';
	  t['\uFE85'] = '\u0624';
	  t['\uFE86'] = '\u0624';
	  t['\uFE87'] = '\u0625';
	  t['\uFE88'] = '\u0625';
	  t['\uFE89'] = '\u0626';
	  t['\uFE8A'] = '\u0626';
	  t['\uFE8B'] = '\u0626';
	  t['\uFE8C'] = '\u0626';
	  t['\uFE8D'] = '\u0627';
	  t['\uFE8E'] = '\u0627';
	  t['\uFE8F'] = '\u0628';
	  t['\uFE90'] = '\u0628';
	  t['\uFE91'] = '\u0628';
	  t['\uFE92'] = '\u0628';
	  t['\uFE93'] = '\u0629';
	  t['\uFE94'] = '\u0629';
	  t['\uFE95'] = '\u062A';
	  t['\uFE96'] = '\u062A';
	  t['\uFE97'] = '\u062A';
	  t['\uFE98'] = '\u062A';
	  t['\uFE99'] = '\u062B';
	  t['\uFE9A'] = '\u062B';
	  t['\uFE9B'] = '\u062B';
	  t['\uFE9C'] = '\u062B';
	  t['\uFE9D'] = '\u062C';
	  t['\uFE9E'] = '\u062C';
	  t['\uFE9F'] = '\u062C';
	  t['\uFEA0'] = '\u062C';
	  t['\uFEA1'] = '\u062D';
	  t['\uFEA2'] = '\u062D';
	  t['\uFEA3'] = '\u062D';
	  t['\uFEA4'] = '\u062D';
	  t['\uFEA5'] = '\u062E';
	  t['\uFEA6'] = '\u062E';
	  t['\uFEA7'] = '\u062E';
	  t['\uFEA8'] = '\u062E';
	  t['\uFEA9'] = '\u062F';
	  t['\uFEAA'] = '\u062F';
	  t['\uFEAB'] = '\u0630';
	  t['\uFEAC'] = '\u0630';
	  t['\uFEAD'] = '\u0631';
	  t['\uFEAE'] = '\u0631';
	  t['\uFEAF'] = '\u0632';
	  t['\uFEB0'] = '\u0632';
	  t['\uFEB1'] = '\u0633';
	  t['\uFEB2'] = '\u0633';
	  t['\uFEB3'] = '\u0633';
	  t['\uFEB4'] = '\u0633';
	  t['\uFEB5'] = '\u0634';
	  t['\uFEB6'] = '\u0634';
	  t['\uFEB7'] = '\u0634';
	  t['\uFEB8'] = '\u0634';
	  t['\uFEB9'] = '\u0635';
	  t['\uFEBA'] = '\u0635';
	  t['\uFEBB'] = '\u0635';
	  t['\uFEBC'] = '\u0635';
	  t['\uFEBD'] = '\u0636';
	  t['\uFEBE'] = '\u0636';
	  t['\uFEBF'] = '\u0636';
	  t['\uFEC0'] = '\u0636';
	  t['\uFEC1'] = '\u0637';
	  t['\uFEC2'] = '\u0637';
	  t['\uFEC3'] = '\u0637';
	  t['\uFEC4'] = '\u0637';
	  t['\uFEC5'] = '\u0638';
	  t['\uFEC6'] = '\u0638';
	  t['\uFEC7'] = '\u0638';
	  t['\uFEC8'] = '\u0638';
	  t['\uFEC9'] = '\u0639';
	  t['\uFECA'] = '\u0639';
	  t['\uFECB'] = '\u0639';
	  t['\uFECC'] = '\u0639';
	  t['\uFECD'] = '\u063A';
	  t['\uFECE'] = '\u063A';
	  t['\uFECF'] = '\u063A';
	  t['\uFED0'] = '\u063A';
	  t['\uFED1'] = '\u0641';
	  t['\uFED2'] = '\u0641';
	  t['\uFED3'] = '\u0641';
	  t['\uFED4'] = '\u0641';
	  t['\uFED5'] = '\u0642';
	  t['\uFED6'] = '\u0642';
	  t['\uFED7'] = '\u0642';
	  t['\uFED8'] = '\u0642';
	  t['\uFED9'] = '\u0643';
	  t['\uFEDA'] = '\u0643';
	  t['\uFEDB'] = '\u0643';
	  t['\uFEDC'] = '\u0643';
	  t['\uFEDD'] = '\u0644';
	  t['\uFEDE'] = '\u0644';
	  t['\uFEDF'] = '\u0644';
	  t['\uFEE0'] = '\u0644';
	  t['\uFEE1'] = '\u0645';
	  t['\uFEE2'] = '\u0645';
	  t['\uFEE3'] = '\u0645';
	  t['\uFEE4'] = '\u0645';
	  t['\uFEE5'] = '\u0646';
	  t['\uFEE6'] = '\u0646';
	  t['\uFEE7'] = '\u0646';
	  t['\uFEE8'] = '\u0646';
	  t['\uFEE9'] = '\u0647';
	  t['\uFEEA'] = '\u0647';
	  t['\uFEEB'] = '\u0647';
	  t['\uFEEC'] = '\u0647';
	  t['\uFEED'] = '\u0648';
	  t['\uFEEE'] = '\u0648';
	  t['\uFEEF'] = '\u0649';
	  t['\uFEF0'] = '\u0649';
	  t['\uFEF1'] = '\u064A';
	  t['\uFEF2'] = '\u064A';
	  t['\uFEF3'] = '\u064A';
	  t['\uFEF4'] = '\u064A';
	  t['\uFEF5'] = '\u0644\u0622';
	  t['\uFEF6'] = '\u0644\u0622';
	  t['\uFEF7'] = '\u0644\u0623';
	  t['\uFEF8'] = '\u0644\u0623';
	  t['\uFEF9'] = '\u0644\u0625';
	  t['\uFEFA'] = '\u0644\u0625';
	  t['\uFEFB'] = '\u0644\u0627';
	  t['\uFEFC'] = '\u0644\u0627';
	});
	function reverseIfRtl(chars) {
	  var charsLength = chars.length;
	  if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {
	    return chars;
	  }
	  var s = '';
	  for (var ii = charsLength - 1; ii >= 0; ii--) {
	    s += chars[ii];
	  }
	  return s;
	}
	exports.mapSpecialUnicodeValues = mapSpecialUnicodeValues;
	exports.reverseIfRtl = reverseIfRtl;
	exports.getUnicodeRangeFor = getUnicodeRangeFor;
	exports.getNormalizedUnicodes = getNormalizedUnicodes;
	exports.getUnicodeForGlyph = getUnicodeForGlyph;

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreWorker = __w_pdfjs_require__(8);
	var globalScope = sharedUtil.globalScope;
	var OK_RESPONSE = 200;
	var PARTIAL_CONTENT_RESPONSE = 206;
	function NetworkManager(url, args) {
	  this.url = url;
	  args = args || {};
	  this.isHttp = /^https?:/i.test(url);
	  this.httpHeaders = this.isHttp && args.httpHeaders || {};
	  this.withCredentials = args.withCredentials || false;
	  this.getXhr = args.getXhr || function NetworkManager_getXhr() {
	    return new XMLHttpRequest();
	  };
	  this.currXhrId = 0;
	  this.pendingRequests = Object.create(null);
	  this.loadedRequests = Object.create(null);
	}
	function getArrayBuffer(xhr) {
	  var data = xhr.response;
	  if (typeof data !== 'string') {
	    return data;
	  }
	  var length = data.length;
	  var array = new Uint8Array(length);
	  for (var i = 0; i < length; i++) {
	    array[i] = data.charCodeAt(i) & 0xFF;
	  }
	  return array.buffer;
	}
	var supportsMozChunked = function supportsMozChunkedClosure() {
	  try {
	    var x = new XMLHttpRequest();
	    x.open('GET', globalScope.location.href);
	    x.responseType = 'moz-chunked-arraybuffer';
	    return x.responseType === 'moz-chunked-arraybuffer';
	  } catch (e) {
	    return false;
	  }
	}();
	NetworkManager.prototype = {
	  requestRange: function NetworkManager_requestRange(begin, end, listeners) {
	    var args = {
	      begin: begin,
	      end: end
	    };
	    for (var prop in listeners) {
	      args[prop] = listeners[prop];
	    }
	    return this.request(args);
	  },
	  requestFull: function NetworkManager_requestFull(listeners) {
	    return this.request(listeners);
	  },
	  request: function NetworkManager_request(args) {
	    var xhr = this.getXhr();
	    var xhrId = this.currXhrId++;
	    var pendingRequest = this.pendingRequests[xhrId] = { xhr: xhr };
	    xhr.open('GET', this.url);
	    xhr.withCredentials = this.withCredentials;
	    for (var property in this.httpHeaders) {
	      var value = this.httpHeaders[property];
	      if (typeof value === 'undefined') {
	        continue;
	      }
	      xhr.setRequestHeader(property, value);
	    }
	    if (this.isHttp && 'begin' in args && 'end' in args) {
	      var rangeStr = args.begin + '-' + (args.end - 1);
	      xhr.setRequestHeader('Range', 'bytes=' + rangeStr);
	      pendingRequest.expectedStatus = 206;
	    } else {
	      pendingRequest.expectedStatus = 200;
	    }
	    var useMozChunkedLoading = supportsMozChunked && !!args.onProgressiveData;
	    if (useMozChunkedLoading) {
	      xhr.responseType = 'moz-chunked-arraybuffer';
	      pendingRequest.onProgressiveData = args.onProgressiveData;
	      pendingRequest.mozChunked = true;
	    } else {
	      xhr.responseType = 'arraybuffer';
	    }
	    if (args.onError) {
	      xhr.onerror = function (evt) {
	        args.onError(xhr.status);
	      };
	    }
	    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
	    xhr.onprogress = this.onProgress.bind(this, xhrId);
	    pendingRequest.onHeadersReceived = args.onHeadersReceived;
	    pendingRequest.onDone = args.onDone;
	    pendingRequest.onError = args.onError;
	    pendingRequest.onProgress = args.onProgress;
	    xhr.send(null);
	    return xhrId;
	  },
	  onProgress: function NetworkManager_onProgress(xhrId, evt) {
	    var pendingRequest = this.pendingRequests[xhrId];
	    if (!pendingRequest) {
	      return;
	    }
	    if (pendingRequest.mozChunked) {
	      var chunk = getArrayBuffer(pendingRequest.xhr);
	      pendingRequest.onProgressiveData(chunk);
	    }
	    var onProgress = pendingRequest.onProgress;
	    if (onProgress) {
	      onProgress(evt);
	    }
	  },
	  onStateChange: function NetworkManager_onStateChange(xhrId, evt) {
	    var pendingRequest = this.pendingRequests[xhrId];
	    if (!pendingRequest) {
	      return;
	    }
	    var xhr = pendingRequest.xhr;
	    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
	      pendingRequest.onHeadersReceived();
	      delete pendingRequest.onHeadersReceived;
	    }
	    if (xhr.readyState !== 4) {
	      return;
	    }
	    if (!(xhrId in this.pendingRequests)) {
	      return;
	    }
	    delete this.pendingRequests[xhrId];
	    if (xhr.status === 0 && this.isHttp) {
	      if (pendingRequest.onError) {
	        pendingRequest.onError(xhr.status);
	      }
	      return;
	    }
	    var xhrStatus = xhr.status || OK_RESPONSE;
	    var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
	    if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
	      if (pendingRequest.onError) {
	        pendingRequest.onError(xhr.status);
	      }
	      return;
	    }
	    this.loadedRequests[xhrId] = true;
	    var chunk = getArrayBuffer(xhr);
	    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
	      var rangeHeader = xhr.getResponseHeader('Content-Range');
	      var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
	      var begin = parseInt(matches[1], 10);
	      pendingRequest.onDone({
	        begin: begin,
	        chunk: chunk
	      });
	    } else if (pendingRequest.onProgressiveData) {
	      pendingRequest.onDone(null);
	    } else if (chunk) {
	      pendingRequest.onDone({
	        begin: 0,
	        chunk: chunk
	      });
	    } else if (pendingRequest.onError) {
	      pendingRequest.onError(xhr.status);
	    }
	  },
	  hasPendingRequests: function NetworkManager_hasPendingRequests() {
	    for (var xhrId in this.pendingRequests) {
	      return true;
	    }
	    return false;
	  },
	  getRequestXhr: function NetworkManager_getXhr(xhrId) {
	    return this.pendingRequests[xhrId].xhr;
	  },
	  isStreamingRequest: function NetworkManager_isStreamingRequest(xhrId) {
	    return !!this.pendingRequests[xhrId].onProgressiveData;
	  },
	  isPendingRequest: function NetworkManager_isPendingRequest(xhrId) {
	    return xhrId in this.pendingRequests;
	  },
	  isLoadedRequest: function NetworkManager_isLoadedRequest(xhrId) {
	    return xhrId in this.loadedRequests;
	  },
	  abortAllRequests: function NetworkManager_abortAllRequests() {
	    for (var xhrId in this.pendingRequests) {
	      this.abortRequest(xhrId | 0);
	    }
	  },
	  abortRequest: function NetworkManager_abortRequest(xhrId) {
	    var xhr = this.pendingRequests[xhrId].xhr;
	    delete this.pendingRequests[xhrId];
	    xhr.abort();
	  }
	};
	var assert = sharedUtil.assert;
	var createPromiseCapability = sharedUtil.createPromiseCapability;
	var isInt = sharedUtil.isInt;
	var MissingPDFException = sharedUtil.MissingPDFException;
	var UnexpectedResponseException = sharedUtil.UnexpectedResponseException;
	function PDFNetworkStream(options) {
	  this._options = options;
	  var source = options.source;
	  this._manager = new NetworkManager(source.url, {
	    httpHeaders: source.httpHeaders,
	    withCredentials: source.withCredentials
	  });
	  this._rangeChunkSize = source.rangeChunkSize;
	  this._fullRequestReader = null;
	  this._rangeRequestReaders = [];
	}
	PDFNetworkStream.prototype = {
	  _onRangeRequestReaderClosed: function PDFNetworkStream_onRangeRequestReaderClosed(reader) {
	    var i = this._rangeRequestReaders.indexOf(reader);
	    if (i >= 0) {
	      this._rangeRequestReaders.splice(i, 1);
	    }
	  },
	  getFullReader: function PDFNetworkStream_getFullReader() {
	    assert(!this._fullRequestReader);
	    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._options);
	    return this._fullRequestReader;
	  },
	  getRangeReader: function PDFNetworkStream_getRangeReader(begin, end) {
	    var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
	    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
	    this._rangeRequestReaders.push(reader);
	    return reader;
	  },
	  cancelAllRequests: function PDFNetworkStream_cancelAllRequests(reason) {
	    if (this._fullRequestReader) {
	      this._fullRequestReader.cancel(reason);
	    }
	    var readers = this._rangeRequestReaders.slice(0);
	    readers.forEach(function (reader) {
	      reader.cancel(reason);
	    });
	  }
	};
	function PDFNetworkStreamFullRequestReader(manager, options) {
	  this._manager = manager;
	  var source = options.source;
	  var args = {
	    onHeadersReceived: this._onHeadersReceived.bind(this),
	    onProgressiveData: source.disableStream ? null : this._onProgressiveData.bind(this),
	    onDone: this._onDone.bind(this),
	    onError: this._onError.bind(this),
	    onProgress: this._onProgress.bind(this)
	  };
	  this._url = source.url;
	  this._fullRequestId = manager.requestFull(args);
	  this._headersReceivedCapability = createPromiseCapability();
	  this._disableRange = options.disableRange || false;
	  this._contentLength = source.length;
	  this._rangeChunkSize = source.rangeChunkSize;
	  if (!this._rangeChunkSize && !this._disableRange) {
	    this._disableRange = true;
	  }
	  this._isStreamingSupported = false;
	  this._isRangeSupported = false;
	  this._cachedChunks = [];
	  this._requests = [];
	  this._done = false;
	  this._storedError = undefined;
	  this.onProgress = null;
	}
	PDFNetworkStreamFullRequestReader.prototype = {
	  _validateRangeRequestCapabilities: function PDFNetworkStreamFullRequestReader_validateRangeRequestCapabilities() {
	    if (this._disableRange) {
	      return false;
	    }
	    var networkManager = this._manager;
	    if (!networkManager.isHttp) {
	      return false;
	    }
	    var fullRequestXhrId = this._fullRequestId;
	    var fullRequestXhr = networkManager.getRequestXhr(fullRequestXhrId);
	    if (fullRequestXhr.getResponseHeader('Accept-Ranges') !== 'bytes') {
	      return false;
	    }
	    var contentEncoding = fullRequestXhr.getResponseHeader('Content-Encoding') || 'identity';
	    if (contentEncoding !== 'identity') {
	      return false;
	    }
	    var length = fullRequestXhr.getResponseHeader('Content-Length');
	    length = parseInt(length, 10);
	    if (!isInt(length)) {
	      return false;
	    }
	    this._contentLength = length;
	    if (length <= 2 * this._rangeChunkSize) {
	      return false;
	    }
	    return true;
	  },
	  _onHeadersReceived: function PDFNetworkStreamFullRequestReader_onHeadersReceived() {
	    if (this._validateRangeRequestCapabilities()) {
	      this._isRangeSupported = true;
	    }
	    var networkManager = this._manager;
	    var fullRequestXhrId = this._fullRequestId;
	    if (networkManager.isStreamingRequest(fullRequestXhrId)) {
	      this._isStreamingSupported = true;
	    } else if (this._isRangeSupported) {
	      networkManager.abortRequest(fullRequestXhrId);
	    }
	    this._headersReceivedCapability.resolve();
	  },
	  _onProgressiveData: function PDFNetworkStreamFullRequestReader_onProgressiveData(chunk) {
	    if (this._requests.length > 0) {
	      var requestCapability = this._requests.shift();
	      requestCapability.resolve({
	        value: chunk,
	        done: false
	      });
	    } else {
	      this._cachedChunks.push(chunk);
	    }
	  },
	  _onDone: function PDFNetworkStreamFullRequestReader_onDone(args) {
	    if (args) {
	      this._onProgressiveData(args.chunk);
	    }
	    this._done = true;
	    if (this._cachedChunks.length > 0) {
	      return;
	    }
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	  },
	  _onError: function PDFNetworkStreamFullRequestReader_onError(status) {
	    var url = this._url;
	    var exception;
	    if (status === 404 || status === 0 && /^file:/.test(url)) {
	      exception = new MissingPDFException('Missing PDF "' + url + '".');
	    } else {
	      exception = new UnexpectedResponseException('Unexpected server response (' + status + ') while retrieving PDF "' + url + '".', status);
	    }
	    this._storedError = exception;
	    this._headersReceivedCapability.reject(exception);
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.reject(exception);
	    });
	    this._requests = [];
	    this._cachedChunks = [];
	  },
	  _onProgress: function PDFNetworkStreamFullRequestReader_onProgress(data) {
	    if (this.onProgress) {
	      this.onProgress({
	        loaded: data.loaded,
	        total: data.lengthComputable ? data.total : this._contentLength
	      });
	    }
	  },
	  get isRangeSupported() {
	    return this._isRangeSupported;
	  },
	  get isStreamingSupported() {
	    return this._isStreamingSupported;
	  },
	  get contentLength() {
	    return this._contentLength;
	  },
	  get headersReady() {
	    return this._headersReceivedCapability.promise;
	  },
	  read: function PDFNetworkStreamFullRequestReader_read() {
	    if (this._storedError) {
	      return Promise.reject(this._storedError);
	    }
	    if (this._cachedChunks.length > 0) {
	      var chunk = this._cachedChunks.shift();
	      return Promise.resolve(chunk);
	    }
	    if (this._done) {
	      return Promise.resolve({
	        value: undefined,
	        done: true
	      });
	    }
	    var requestCapability = createPromiseCapability();
	    this._requests.push(requestCapability);
	    return requestCapability.promise;
	  },
	  cancel: function PDFNetworkStreamFullRequestReader_cancel(reason) {
	    this._done = true;
	    this._headersReceivedCapability.reject(reason);
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	    if (this._manager.isPendingRequest(this._fullRequestId)) {
	      this._manager.abortRequest(this._fullRequestId);
	    }
	    this._fullRequestReader = null;
	  }
	};
	function PDFNetworkStreamRangeRequestReader(manager, begin, end) {
	  this._manager = manager;
	  var args = {
	    onDone: this._onDone.bind(this),
	    onProgress: this._onProgress.bind(this)
	  };
	  this._requestId = manager.requestRange(begin, end, args);
	  this._requests = [];
	  this._queuedChunk = null;
	  this._done = false;
	  this.onProgress = null;
	  this.onClosed = null;
	}
	PDFNetworkStreamRangeRequestReader.prototype = {
	  _close: function PDFNetworkStreamRangeRequestReader_close() {
	    if (this.onClosed) {
	      this.onClosed(this);
	    }
	  },
	  _onDone: function PDFNetworkStreamRangeRequestReader_onDone(data) {
	    var chunk = data.chunk;
	    if (this._requests.length > 0) {
	      var requestCapability = this._requests.shift();
	      requestCapability.resolve({
	        value: chunk,
	        done: false
	      });
	    } else {
	      this._queuedChunk = chunk;
	    }
	    this._done = true;
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	    this._close();
	  },
	  _onProgress: function PDFNetworkStreamRangeRequestReader_onProgress(evt) {
	    if (!this.isStreamingSupported && this.onProgress) {
	      this.onProgress({ loaded: evt.loaded });
	    }
	  },
	  get isStreamingSupported() {
	    return false;
	  },
	  read: function PDFNetworkStreamRangeRequestReader_read() {
	    if (this._queuedChunk !== null) {
	      var chunk = this._queuedChunk;
	      this._queuedChunk = null;
	      return Promise.resolve({
	        value: chunk,
	        done: false
	      });
	    }
	    if (this._done) {
	      return Promise.resolve({
	        value: undefined,
	        done: true
	      });
	    }
	    var requestCapability = createPromiseCapability();
	    this._requests.push(requestCapability);
	    return requestCapability.promise;
	  },
	  cancel: function PDFNetworkStreamRangeRequestReader_cancel(reason) {
	    this._done = true;
	    this._requests.forEach(function (requestCapability) {
	      requestCapability.resolve({
	        value: undefined,
	        done: true
	      });
	    });
	    this._requests = [];
	    if (this._manager.isPendingRequest(this._requestId)) {
	      this._manager.abortRequest(this._requestId);
	    }
	    this._close();
	  }
	};
	coreWorker.setPDFNetworkStreamClass(PDFNetworkStream);
	exports.PDFNetworkStream = PDFNetworkStream;
	exports.NetworkManager = NetworkManager;

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var coreColorSpace = __w_pdfjs_require__(3);
	var coreObj = __w_pdfjs_require__(16);
	var coreEvaluator = __w_pdfjs_require__(14);
	var AnnotationBorderStyleType = sharedUtil.AnnotationBorderStyleType;
	var AnnotationFieldFlag = sharedUtil.AnnotationFieldFlag;
	var AnnotationFlag = sharedUtil.AnnotationFlag;
	var AnnotationType = sharedUtil.AnnotationType;
	var OPS = sharedUtil.OPS;
	var Util = sharedUtil.Util;
	var isArray = sharedUtil.isArray;
	var isInt = sharedUtil.isInt;
	var stringToBytes = sharedUtil.stringToBytes;
	var stringToPDFString = sharedUtil.stringToPDFString;
	var warn = sharedUtil.warn;
	var Dict = corePrimitives.Dict;
	var isDict = corePrimitives.isDict;
	var isName = corePrimitives.isName;
	var isRef = corePrimitives.isRef;
	var isStream = corePrimitives.isStream;
	var Stream = coreStream.Stream;
	var ColorSpace = coreColorSpace.ColorSpace;
	var Catalog = coreObj.Catalog;
	var ObjectLoader = coreObj.ObjectLoader;
	var FileSpec = coreObj.FileSpec;
	var OperatorList = coreEvaluator.OperatorList;
	function AnnotationFactory() {}
	AnnotationFactory.prototype = {
	  create: function AnnotationFactory_create(xref, ref, pdfManager, idFactory) {
	    var dict = xref.fetchIfRef(ref);
	    if (!isDict(dict)) {
	      return;
	    }
	    var id = isRef(ref) ? ref.toString() : 'annot_' + idFactory.createObjId();
	    var subtype = dict.get('Subtype');
	    subtype = isName(subtype) ? subtype.name : null;
	    var parameters = {
	      xref: xref,
	      dict: dict,
	      ref: isRef(ref) ? ref : null,
	      subtype: subtype,
	      id: id,
	      pdfManager: pdfManager
	    };
	    switch (subtype) {
	      case 'Link':
	        return new LinkAnnotation(parameters);
	      case 'Text':
	        return new TextAnnotation(parameters);
	      case 'Widget':
	        var fieldType = Util.getInheritableProperty(dict, 'FT');
	        fieldType = isName(fieldType) ? fieldType.name : null;
	        switch (fieldType) {
	          case 'Tx':
	            return new TextWidgetAnnotation(parameters);
	          case 'Btn':
	            return new ButtonWidgetAnnotation(parameters);
	          case 'Ch':
	            return new ChoiceWidgetAnnotation(parameters);
	        }
	        warn('Unimplemented widget field type "' + fieldType + '", ' + 'falling back to base field type.');
	        return new WidgetAnnotation(parameters);
	      case 'Popup':
	        return new PopupAnnotation(parameters);
	      case 'Line':
	        return new LineAnnotation(parameters);
	      case 'Highlight':
	        return new HighlightAnnotation(parameters);
	      case 'Underline':
	        return new UnderlineAnnotation(parameters);
	      case 'Squiggly':
	        return new SquigglyAnnotation(parameters);
	      case 'StrikeOut':
	        return new StrikeOutAnnotation(parameters);
	      case 'FileAttachment':
	        return new FileAttachmentAnnotation(parameters);
	      default:
	        if (!subtype) {
	          warn('Annotation is missing the required /Subtype.');
	        } else {
	          warn('Unimplemented annotation type "' + subtype + '", ' + 'falling back to base annotation.');
	        }
	        return new Annotation(parameters);
	    }
	  }
	};
	var Annotation = function AnnotationClosure() {
	  function getTransformMatrix(rect, bbox, matrix) {
	    var bounds = Util.getAxialAlignedBoundingBox(bbox, matrix);
	    var minX = bounds[0];
	    var minY = bounds[1];
	    var maxX = bounds[2];
	    var maxY = bounds[3];
	    if (minX === maxX || minY === maxY) {
	      return [1, 0, 0, 1, rect[0], rect[1]];
	    }
	    var xRatio = (rect[2] - rect[0]) / (maxX - minX);
	    var yRatio = (rect[3] - rect[1]) / (maxY - minY);
	    return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];
	  }
	  function Annotation(params) {
	    var dict = params.dict;
	    this.setFlags(dict.get('F'));
	    this.setRectangle(dict.getArray('Rect'));
	    this.setColor(dict.getArray('C'));
	    this.setBorderStyle(dict);
	    this.setAppearance(dict);
	    this.data = {};
	    this.data.id = params.id;
	    this.data.subtype = params.subtype;
	    this.data.annotationFlags = this.flags;
	    this.data.rect = this.rectangle;
	    this.data.color = this.color;
	    this.data.borderStyle = this.borderStyle;
	    this.data.hasAppearance = !!this.appearance;
	  }
	  Annotation.prototype = {
	    _hasFlag: function Annotation_hasFlag(flags, flag) {
	      return !!(flags & flag);
	    },
	    _isViewable: function Annotation_isViewable(flags) {
	      return !this._hasFlag(flags, AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, AnnotationFlag.HIDDEN) && !this._hasFlag(flags, AnnotationFlag.NOVIEW);
	    },
	    _isPrintable: function AnnotationFlag_isPrintable(flags) {
	      return this._hasFlag(flags, AnnotationFlag.PRINT) && !this._hasFlag(flags, AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, AnnotationFlag.HIDDEN);
	    },
	    get viewable() {
	      if (this.flags === 0) {
	        return true;
	      }
	      return this._isViewable(this.flags);
	    },
	    get printable() {
	      if (this.flags === 0) {
	        return false;
	      }
	      return this._isPrintable(this.flags);
	    },
	    setFlags: function Annotation_setFlags(flags) {
	      this.flags = isInt(flags) && flags > 0 ? flags : 0;
	    },
	    hasFlag: function Annotation_hasFlag(flag) {
	      return this._hasFlag(this.flags, flag);
	    },
	    setRectangle: function Annotation_setRectangle(rectangle) {
	      if (isArray(rectangle) && rectangle.length === 4) {
	        this.rectangle = Util.normalizeRect(rectangle);
	      } else {
	        this.rectangle = [0, 0, 0, 0];
	      }
	    },
	    setColor: function Annotation_setColor(color) {
	      var rgbColor = new Uint8Array(3);
	      if (!isArray(color)) {
	        this.color = rgbColor;
	        return;
	      }
	      switch (color.length) {
	        case 0:
	          this.color = null;
	          break;
	        case 1:
	          ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);
	          this.color = rgbColor;
	          break;
	        case 3:
	          ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);
	          this.color = rgbColor;
	          break;
	        case 4:
	          ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);
	          this.color = rgbColor;
	          break;
	        default:
	          this.color = rgbColor;
	          break;
	      }
	    },
	    setBorderStyle: function Annotation_setBorderStyle(borderStyle) {
	      this.borderStyle = new AnnotationBorderStyle();
	      if (!isDict(borderStyle)) {
	        return;
	      }
	      if (borderStyle.has('BS')) {
	        var dict = borderStyle.get('BS');
	        var dictType = dict.get('Type');
	        if (!dictType || isName(dictType, 'Border')) {
	          this.borderStyle.setWidth(dict.get('W'));
	          this.borderStyle.setStyle(dict.get('S'));
	          this.borderStyle.setDashArray(dict.getArray('D'));
	        }
	      } else if (borderStyle.has('Border')) {
	        var array = borderStyle.getArray('Border');
	        if (isArray(array) && array.length >= 3) {
	          this.borderStyle.setHorizontalCornerRadius(array[0]);
	          this.borderStyle.setVerticalCornerRadius(array[1]);
	          this.borderStyle.setWidth(array[2]);
	          if (array.length === 4) {
	            this.borderStyle.setDashArray(array[3]);
	          }
	        }
	      } else {
	        this.borderStyle.setWidth(0);
	      }
	    },
	    setAppearance: function Annotation_setAppearance(dict) {
	      this.appearance = null;
	      var appearanceStates = dict.get('AP');
	      if (!isDict(appearanceStates)) {
	        return;
	      }
	      var normalAppearanceState = appearanceStates.get('N');
	      if (isStream(normalAppearanceState)) {
	        this.appearance = normalAppearanceState;
	        return;
	      }
	      if (!isDict(normalAppearanceState)) {
	        return;
	      }
	      var as = dict.get('AS');
	      if (!isName(as) || !normalAppearanceState.has(as.name)) {
	        return;
	      }
	      this.appearance = normalAppearanceState.get(as.name);
	    },
	    _preparePopup: function Annotation_preparePopup(dict) {
	      if (!dict.has('C')) {
	        this.data.color = null;
	      }
	      this.data.hasPopup = dict.has('Popup');
	      this.data.title = stringToPDFString(dict.get('T') || '');
	      this.data.contents = stringToPDFString(dict.get('Contents') || '');
	    },
	    loadResources: function Annotation_loadResources(keys) {
	      return this.appearance.dict.getAsync('Resources').then(function (resources) {
	        if (!resources) {
	          return;
	        }
	        var objectLoader = new ObjectLoader(resources.map, keys, resources.xref);
	        return objectLoader.load().then(function () {
	          return resources;
	        });
	      });
	    },
	    getOperatorList: function Annotation_getOperatorList(evaluator, task, renderForms) {
	      var _this = this;

	      if (!this.appearance) {
	        return Promise.resolve(new OperatorList());
	      }
	      var data = this.data;
	      var appearanceDict = this.appearance.dict;
	      var resourcesPromise = this.loadResources(['ExtGState', 'ColorSpace', 'Pattern', 'Shading', 'XObject', 'Font']);
	      var bbox = appearanceDict.getArray('BBox') || [0, 0, 1, 1];
	      var matrix = appearanceDict.getArray('Matrix') || [1, 0, 0, 1, 0, 0];
	      var transform = getTransformMatrix(data.rect, bbox, matrix);
	      return resourcesPromise.then(function (resources) {
	        var opList = new OperatorList();
	        opList.addOp(OPS.beginAnnotation, [data.rect, transform, matrix]);
	        return evaluator.getOperatorList({
	          stream: _this.appearance,
	          task: task,
	          resources: resources,
	          operatorList: opList
	        }).then(function () {
	          opList.addOp(OPS.endAnnotation, []);
	          _this.appearance.reset();
	          return opList;
	        });
	      });
	    }
	  };
	  return Annotation;
	}();
	var AnnotationBorderStyle = function AnnotationBorderStyleClosure() {
	  function AnnotationBorderStyle() {
	    this.width = 1;
	    this.style = AnnotationBorderStyleType.SOLID;
	    this.dashArray = [3];
	    this.horizontalCornerRadius = 0;
	    this.verticalCornerRadius = 0;
	  }
	  AnnotationBorderStyle.prototype = {
	    setWidth: function AnnotationBorderStyle_setWidth(width) {
	      if (width === (width | 0)) {
	        this.width = width;
	      }
	    },
	    setStyle: function AnnotationBorderStyle_setStyle(style) {
	      if (!style) {
	        return;
	      }
	      switch (style.name) {
	        case 'S':
	          this.style = AnnotationBorderStyleType.SOLID;
	          break;
	        case 'D':
	          this.style = AnnotationBorderStyleType.DASHED;
	          break;
	        case 'B':
	          this.style = AnnotationBorderStyleType.BEVELED;
	          break;
	        case 'I':
	          this.style = AnnotationBorderStyleType.INSET;
	          break;
	        case 'U':
	          this.style = AnnotationBorderStyleType.UNDERLINE;
	          break;
	        default:
	          break;
	      }
	    },
	    setDashArray: function AnnotationBorderStyle_setDashArray(dashArray) {
	      if (isArray(dashArray) && dashArray.length > 0) {
	        var isValid = true;
	        var allZeros = true;
	        for (var i = 0, len = dashArray.length; i < len; i++) {
	          var element = dashArray[i];
	          var validNumber = +element >= 0;
	          if (!validNumber) {
	            isValid = false;
	            break;
	          } else if (element > 0) {
	            allZeros = false;
	          }
	        }
	        if (isValid && !allZeros) {
	          this.dashArray = dashArray;
	        } else {
	          this.width = 0;
	        }
	      } else if (dashArray) {
	        this.width = 0;
	      }
	    },
	    setHorizontalCornerRadius: function AnnotationBorderStyle_setHorizontalCornerRadius(radius) {
	      if (radius === (radius | 0)) {
	        this.horizontalCornerRadius = radius;
	      }
	    },
	    setVerticalCornerRadius: function AnnotationBorderStyle_setVerticalCornerRadius(radius) {
	      if (radius === (radius | 0)) {
	        this.verticalCornerRadius = radius;
	      }
	    }
	  };
	  return AnnotationBorderStyle;
	}();
	var WidgetAnnotation = function WidgetAnnotationClosure() {
	  function WidgetAnnotation(params) {
	    Annotation.call(this, params);
	    var dict = params.dict;
	    var data = this.data;
	    data.annotationType = AnnotationType.WIDGET;
	    data.fieldName = this._constructFieldName(dict);
	    data.fieldValue = Util.getInheritableProperty(dict, 'V', true);
	    data.alternativeText = stringToPDFString(dict.get('TU') || '');
	    data.defaultAppearance = Util.getInheritableProperty(dict, 'DA') || '';
	    var fieldType = Util.getInheritableProperty(dict, 'FT');
	    data.fieldType = isName(fieldType) ? fieldType.name : null;
	    this.fieldResources = Util.getInheritableProperty(dict, 'DR') || Dict.empty;
	    data.fieldFlags = Util.getInheritableProperty(dict, 'Ff');
	    if (!isInt(data.fieldFlags) || data.fieldFlags < 0) {
	      data.fieldFlags = 0;
	    }
	    data.readOnly = this.hasFieldFlag(AnnotationFieldFlag.READONLY);
	    if (data.fieldType === 'Sig') {
	      this.setFlags(AnnotationFlag.HIDDEN);
	    }
	  }
	  Util.inherit(WidgetAnnotation, Annotation, {
	    _constructFieldName: function WidgetAnnotation_constructFieldName(dict) {
	      if (!dict.has('T') && !dict.has('Parent')) {
	        warn('Unknown field name, falling back to empty field name.');
	        return '';
	      }
	      if (!dict.has('Parent')) {
	        return stringToPDFString(dict.get('T'));
	      }
	      var fieldName = [];
	      if (dict.has('T')) {
	        fieldName.unshift(stringToPDFString(dict.get('T')));
	      }
	      var loopDict = dict;
	      while (loopDict.has('Parent')) {
	        loopDict = loopDict.get('Parent');
	        if (!isDict(loopDict)) {
	          break;
	        }
	        if (loopDict.has('T')) {
	          fieldName.unshift(stringToPDFString(loopDict.get('T')));
	        }
	      }
	      return fieldName.join('.');
	    },
	    hasFieldFlag: function WidgetAnnotation_hasFieldFlag(flag) {
	      return !!(this.data.fieldFlags & flag);
	    }
	  });
	  return WidgetAnnotation;
	}();
	var TextWidgetAnnotation = function TextWidgetAnnotationClosure() {
	  function TextWidgetAnnotation(params) {
	    WidgetAnnotation.call(this, params);
	    this.data.fieldValue = stringToPDFString(this.data.fieldValue || '');
	    var alignment = Util.getInheritableProperty(params.dict, 'Q');
	    if (!isInt(alignment) || alignment < 0 || alignment > 2) {
	      alignment = null;
	    }
	    this.data.textAlignment = alignment;
	    var maximumLength = Util.getInheritableProperty(params.dict, 'MaxLen');
	    if (!isInt(maximumLength) || maximumLength < 0) {
	      maximumLength = null;
	    }
	    this.data.maxLen = maximumLength;
	    this.data.multiLine = this.hasFieldFlag(AnnotationFieldFlag.MULTILINE);
	    this.data.comb = this.hasFieldFlag(AnnotationFieldFlag.COMB) && !this.hasFieldFlag(AnnotationFieldFlag.MULTILINE) && !this.hasFieldFlag(AnnotationFieldFlag.PASSWORD) && !this.hasFieldFlag(AnnotationFieldFlag.FILESELECT) && this.data.maxLen !== null;
	  }
	  Util.inherit(TextWidgetAnnotation, WidgetAnnotation, {
	    getOperatorList: function TextWidgetAnnotation_getOperatorList(evaluator, task, renderForms) {
	      var operatorList = new OperatorList();
	      if (renderForms) {
	        return Promise.resolve(operatorList);
	      }
	      if (this.appearance) {
	        return Annotation.prototype.getOperatorList.call(this, evaluator, task, renderForms);
	      }
	      if (!this.data.defaultAppearance) {
	        return Promise.resolve(operatorList);
	      }
	      var stream = new Stream(stringToBytes(this.data.defaultAppearance));
	      return evaluator.getOperatorList({
	        stream: stream,
	        task: task,
	        resources: this.fieldResources,
	        operatorList: operatorList
	      }).then(function () {
	        return operatorList;
	      });
	    }
	  });
	  return TextWidgetAnnotation;
	}();
	var ButtonWidgetAnnotation = function ButtonWidgetAnnotationClosure() {
	  function ButtonWidgetAnnotation(params) {
	    WidgetAnnotation.call(this, params);
	    this.data.checkBox = !this.hasFieldFlag(AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);
	    if (this.data.checkBox) {
	      if (!isName(this.data.fieldValue)) {
	        return;
	      }
	      this.data.fieldValue = this.data.fieldValue.name;
	    }
	    this.data.radioButton = this.hasFieldFlag(AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);
	    if (this.data.radioButton) {
	      this.data.fieldValue = this.data.buttonValue = null;
	      var fieldParent = params.dict.get('Parent');
	      if (isDict(fieldParent) && fieldParent.has('V')) {
	        var fieldParentValue = fieldParent.get('V');
	        if (isName(fieldParentValue)) {
	          this.data.fieldValue = fieldParentValue.name;
	        }
	      }
	      var appearanceStates = params.dict.get('AP');
	      if (!isDict(appearanceStates)) {
	        return;
	      }
	      var normalAppearanceState = appearanceStates.get('N');
	      if (!isDict(normalAppearanceState)) {
	        return;
	      }
	      var keys = normalAppearanceState.getKeys();
	      for (var i = 0, ii = keys.length; i < ii; i++) {
	        if (keys[i] !== 'Off') {
	          this.data.buttonValue = keys[i];
	          break;
	        }
	      }
	    }
	  }
	  Util.inherit(ButtonWidgetAnnotation, WidgetAnnotation, {
	    getOperatorList: function ButtonWidgetAnnotation_getOperatorList(evaluator, task, renderForms) {
	      var operatorList = new OperatorList();
	      if (renderForms) {
	        return Promise.resolve(operatorList);
	      }
	      if (this.appearance) {
	        return Annotation.prototype.getOperatorList.call(this, evaluator, task, renderForms);
	      }
	      return Promise.resolve(operatorList);
	    }
	  });
	  return ButtonWidgetAnnotation;
	}();
	var ChoiceWidgetAnnotation = function ChoiceWidgetAnnotationClosure() {
	  function ChoiceWidgetAnnotation(params) {
	    WidgetAnnotation.call(this, params);
	    this.data.options = [];
	    var options = Util.getInheritableProperty(params.dict, 'Opt');
	    if (isArray(options)) {
	      var xref = params.xref;
	      for (var i = 0, ii = options.length; i < ii; i++) {
	        var option = xref.fetchIfRef(options[i]);
	        var isOptionArray = isArray(option);
	        this.data.options[i] = {
	          exportValue: isOptionArray ? xref.fetchIfRef(option[0]) : option,
	          displayValue: isOptionArray ? xref.fetchIfRef(option[1]) : option
	        };
	      }
	    }
	    if (!isArray(this.data.fieldValue)) {
	      this.data.fieldValue = [this.data.fieldValue];
	    }
	    this.data.combo = this.hasFieldFlag(AnnotationFieldFlag.COMBO);
	    this.data.multiSelect = this.hasFieldFlag(AnnotationFieldFlag.MULTISELECT);
	  }
	  Util.inherit(ChoiceWidgetAnnotation, WidgetAnnotation, {
	    getOperatorList: function ChoiceWidgetAnnotation_getOperatorList(evaluator, task, renderForms) {
	      var operatorList = new OperatorList();
	      if (renderForms) {
	        return Promise.resolve(operatorList);
	      }
	      return Annotation.prototype.getOperatorList.call(this, evaluator, task, renderForms);
	    }
	  });
	  return ChoiceWidgetAnnotation;
	}();
	var TextAnnotation = function TextAnnotationClosure() {
	  var DEFAULT_ICON_SIZE = 22;
	  function TextAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.TEXT;
	    if (this.data.hasAppearance) {
	      this.data.name = 'NoIcon';
	    } else {
	      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;
	      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;
	      this.data.name = parameters.dict.has('Name') ? parameters.dict.get('Name').name : 'Note';
	    }
	    this._preparePopup(parameters.dict);
	  }
	  Util.inherit(TextAnnotation, Annotation, {});
	  return TextAnnotation;
	}();
	var LinkAnnotation = function LinkAnnotationClosure() {
	  function LinkAnnotation(params) {
	    Annotation.call(this, params);
	    var data = this.data;
	    data.annotationType = AnnotationType.LINK;
	    Catalog.parseDestDictionary({
	      destDict: params.dict,
	      resultObj: data,
	      docBaseUrl: params.pdfManager.docBaseUrl
	    });
	  }
	  Util.inherit(LinkAnnotation, Annotation, {});
	  return LinkAnnotation;
	}();
	var PopupAnnotation = function PopupAnnotationClosure() {
	  function PopupAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.POPUP;
	    var dict = parameters.dict;
	    var parentItem = dict.get('Parent');
	    if (!parentItem) {
	      warn('Popup annotation has a missing or invalid parent annotation.');
	      return;
	    }
	    var parentSubtype = parentItem.get('Subtype');
	    this.data.parentType = isName(parentSubtype) ? parentSubtype.name : null;
	    this.data.parentId = dict.getRaw('Parent').toString();
	    this.data.title = stringToPDFString(parentItem.get('T') || '');
	    this.data.contents = stringToPDFString(parentItem.get('Contents') || '');
	    if (!parentItem.has('C')) {
	      this.data.color = null;
	    } else {
	      this.setColor(parentItem.getArray('C'));
	      this.data.color = this.color;
	    }
	    if (!this.viewable) {
	      var parentFlags = parentItem.get('F');
	      if (this._isViewable(parentFlags)) {
	        this.setFlags(parentFlags);
	      }
	    }
	  }
	  Util.inherit(PopupAnnotation, Annotation, {});
	  return PopupAnnotation;
	}();
	var LineAnnotation = function LineAnnotationClosure() {
	  function LineAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.LINE;
	    var dict = parameters.dict;
	    this.data.lineCoordinates = Util.normalizeRect(dict.getArray('L'));
	    this._preparePopup(dict);
	  }
	  Util.inherit(LineAnnotation, Annotation, {});
	  return LineAnnotation;
	}();
	var HighlightAnnotation = function HighlightAnnotationClosure() {
	  function HighlightAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.HIGHLIGHT;
	    this._preparePopup(parameters.dict);
	  }
	  Util.inherit(HighlightAnnotation, Annotation, {});
	  return HighlightAnnotation;
	}();
	var UnderlineAnnotation = function UnderlineAnnotationClosure() {
	  function UnderlineAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.UNDERLINE;
	    this._preparePopup(parameters.dict);
	  }
	  Util.inherit(UnderlineAnnotation, Annotation, {});
	  return UnderlineAnnotation;
	}();
	var SquigglyAnnotation = function SquigglyAnnotationClosure() {
	  function SquigglyAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.SQUIGGLY;
	    this._preparePopup(parameters.dict);
	  }
	  Util.inherit(SquigglyAnnotation, Annotation, {});
	  return SquigglyAnnotation;
	}();
	var StrikeOutAnnotation = function StrikeOutAnnotationClosure() {
	  function StrikeOutAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    this.data.annotationType = AnnotationType.STRIKEOUT;
	    this._preparePopup(parameters.dict);
	  }
	  Util.inherit(StrikeOutAnnotation, Annotation, {});
	  return StrikeOutAnnotation;
	}();
	var FileAttachmentAnnotation = function FileAttachmentAnnotationClosure() {
	  function FileAttachmentAnnotation(parameters) {
	    Annotation.call(this, parameters);
	    var file = new FileSpec(parameters.dict.get('FS'), parameters.xref);
	    this.data.annotationType = AnnotationType.FILEATTACHMENT;
	    this.data.file = file.serializable;
	    this._preparePopup(parameters.dict);
	  }
	  Util.inherit(FileAttachmentAnnotation, Annotation, {});
	  return FileAttachmentAnnotation;
	}();
	exports.Annotation = Annotation;
	exports.AnnotationBorderStyle = AnnotationBorderStyle;
	exports.AnnotationFactory = AnnotationFactory;

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var warn = sharedUtil.warn;
	var baseTypes = ['BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'S', 'B', 'S', 'WS', 'B', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'B', 'B', 'B', 'S', 'WS', 'ON', 'ON', 'ET', 'ET', 'ET', 'ON', 'ON', 'ON', 'ON', 'ON', 'ES', 'CS', 'ES', 'CS', 'CS', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'CS', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'ON', 'ON', 'ON', 'ON', 'ON', 'ON', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'ON', 'ON', 'ON', 'ON', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'B', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'BN', 'CS', 'ON', 'ET', 'ET', 'ET', 'ET', 'ON', 'ON', 'ON', 'ON', 'L', 'ON', 'ON', 'BN', 'ON', 'ON', 'ET', 'ET', 'EN', 'EN', 'ON', 'L', 'ON', 'ON', 'ON', 'EN', 'L', 'ON', 'ON', 'ON', 'ON', 'ON', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'ON', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'ON', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L'];
	var arabicTypes = ['AN', 'AN', 'AN', 'AN', 'AN', 'AN', 'ON', 'ON', 'AL', 'ET', 'ET', 'AL', 'CS', 'AL', 'ON', 'ON', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'AL', 'AL', '', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'AN', 'AN', 'AN', 'AN', 'AN', 'AN', 'AN', 'AN', 'AN', 'AN', 'ET', 'AN', 'AN', 'AL', 'AL', 'AL', 'NSM', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'AN', 'ON', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'NSM', 'AL', 'AL', 'NSM', 'NSM', 'ON', 'NSM', 'NSM', 'NSM', 'NSM', 'AL', 'AL', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'EN', 'AL', 'AL', 'AL', 'AL', 'AL', 'AL'];
	function isOdd(i) {
	  return (i & 1) !== 0;
	}
	function isEven(i) {
	  return (i & 1) === 0;
	}
	function findUnequal(arr, start, value) {
	  for (var j = start, jj = arr.length; j < jj; ++j) {
	    if (arr[j] !== value) {
	      return j;
	    }
	  }
	  return j;
	}
	function setValues(arr, start, end, value) {
	  for (var j = start; j < end; ++j) {
	    arr[j] = value;
	  }
	}
	function reverseValues(arr, start, end) {
	  for (var i = start, j = end - 1; i < j; ++i, --j) {
	    var temp = arr[i];
	    arr[i] = arr[j];
	    arr[j] = temp;
	  }
	}
	function createBidiText(str, isLTR, vertical) {
	  return {
	    str: str,
	    dir: vertical ? 'ttb' : isLTR ? 'ltr' : 'rtl'
	  };
	}
	var chars = [];
	var types = [];
	function bidi(str, startLevel, vertical) {
	  var isLTR = true;
	  var strLength = str.length;
	  if (strLength === 0 || vertical) {
	    return createBidiText(str, isLTR, vertical);
	  }
	  chars.length = strLength;
	  types.length = strLength;
	  var numBidi = 0;
	  var i, ii;
	  for (i = 0; i < strLength; ++i) {
	    chars[i] = str.charAt(i);
	    var charCode = str.charCodeAt(i);
	    var charType = 'L';
	    if (charCode <= 0x00ff) {
	      charType = baseTypes[charCode];
	    } else if (0x0590 <= charCode && charCode <= 0x05f4) {
	      charType = 'R';
	    } else if (0x0600 <= charCode && charCode <= 0x06ff) {
	      charType = arabicTypes[charCode & 0xff];
	      if (!charType) {
	        warn('Bidi: invalid Unicode character ' + charCode.toString(16));
	      }
	    } else if (0x0700 <= charCode && charCode <= 0x08AC) {
	      charType = 'AL';
	    }
	    if (charType === 'R' || charType === 'AL' || charType === 'AN') {
	      numBidi++;
	    }
	    types[i] = charType;
	  }
	  if (numBidi === 0) {
	    isLTR = true;
	    return createBidiText(str, isLTR);
	  }
	  if (startLevel === -1) {
	    if (numBidi / strLength < 0.3) {
	      isLTR = true;
	      startLevel = 0;
	    } else {
	      isLTR = false;
	      startLevel = 1;
	    }
	  }
	  var levels = [];
	  for (i = 0; i < strLength; ++i) {
	    levels[i] = startLevel;
	  }
	  var e = isOdd(startLevel) ? 'R' : 'L';
	  var sor = e;
	  var eor = sor;
	  var lastType = sor;
	  for (i = 0; i < strLength; ++i) {
	    if (types[i] === 'NSM') {
	      types[i] = lastType;
	    } else {
	      lastType = types[i];
	    }
	  }
	  lastType = sor;
	  var t;
	  for (i = 0; i < strLength; ++i) {
	    t = types[i];
	    if (t === 'EN') {
	      types[i] = lastType === 'AL' ? 'AN' : 'EN';
	    } else if (t === 'R' || t === 'L' || t === 'AL') {
	      lastType = t;
	    }
	  }
	  for (i = 0; i < strLength; ++i) {
	    t = types[i];
	    if (t === 'AL') {
	      types[i] = 'R';
	    }
	  }
	  for (i = 1; i < strLength - 1; ++i) {
	    if (types[i] === 'ES' && types[i - 1] === 'EN' && types[i + 1] === 'EN') {
	      types[i] = 'EN';
	    }
	    if (types[i] === 'CS' && (types[i - 1] === 'EN' || types[i - 1] === 'AN') && types[i + 1] === types[i - 1]) {
	      types[i] = types[i - 1];
	    }
	  }
	  for (i = 0; i < strLength; ++i) {
	    if (types[i] === 'EN') {
	      var j;
	      for (j = i - 1; j >= 0; --j) {
	        if (types[j] !== 'ET') {
	          break;
	        }
	        types[j] = 'EN';
	      }
	      for (j = i + 1; j < strLength; ++j) {
	        if (types[j] !== 'ET') {
	          break;
	        }
	        types[j] = 'EN';
	      }
	    }
	  }
	  for (i = 0; i < strLength; ++i) {
	    t = types[i];
	    if (t === 'WS' || t === 'ES' || t === 'ET' || t === 'CS') {
	      types[i] = 'ON';
	    }
	  }
	  lastType = sor;
	  for (i = 0; i < strLength; ++i) {
	    t = types[i];
	    if (t === 'EN') {
	      types[i] = lastType === 'L' ? 'L' : 'EN';
	    } else if (t === 'R' || t === 'L') {
	      lastType = t;
	    }
	  }
	  for (i = 0; i < strLength; ++i) {
	    if (types[i] === 'ON') {
	      var end = findUnequal(types, i + 1, 'ON');
	      var before = sor;
	      if (i > 0) {
	        before = types[i - 1];
	      }
	      var after = eor;
	      if (end + 1 < strLength) {
	        after = types[end + 1];
	      }
	      if (before !== 'L') {
	        before = 'R';
	      }
	      if (after !== 'L') {
	        after = 'R';
	      }
	      if (before === after) {
	        setValues(types, i, end, before);
	      }
	      i = end - 1;
	    }
	  }
	  for (i = 0; i < strLength; ++i) {
	    if (types[i] === 'ON') {
	      types[i] = e;
	    }
	  }
	  for (i = 0; i < strLength; ++i) {
	    t = types[i];
	    if (isEven(levels[i])) {
	      if (t === 'R') {
	        levels[i] += 1;
	      } else if (t === 'AN' || t === 'EN') {
	        levels[i] += 2;
	      }
	    } else {
	      if (t === 'L' || t === 'AN' || t === 'EN') {
	        levels[i] += 1;
	      }
	    }
	  }
	  var highestLevel = -1;
	  var lowestOddLevel = 99;
	  var level;
	  for (i = 0, ii = levels.length; i < ii; ++i) {
	    level = levels[i];
	    if (highestLevel < level) {
	      highestLevel = level;
	    }
	    if (lowestOddLevel > level && isOdd(level)) {
	      lowestOddLevel = level;
	    }
	  }
	  for (level = highestLevel; level >= lowestOddLevel; --level) {
	    var start = -1;
	    for (i = 0, ii = levels.length; i < ii; ++i) {
	      if (levels[i] < level) {
	        if (start >= 0) {
	          reverseValues(chars, start, i);
	          start = -1;
	        }
	      } else if (start < 0) {
	        start = i;
	      }
	    }
	    if (start >= 0) {
	      reverseValues(chars, start, levels.length);
	    }
	  }
	  for (i = 0, ii = chars.length; i < ii; ++i) {
	    var ch = chars[i];
	    if (ch === '<' || ch === '>') {
	      chars[i] = '';
	    }
	  }
	  return createBidiText(chars.join(''), isLTR);
	}
	exports.bidi = bidi;

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];
	var ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
	var ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];
	exports.ISOAdobeCharset = ISOAdobeCharset;
	exports.ExpertCharset = ExpertCharset;
	exports.ExpertSubsetCharset = ExpertSubsetCharset;

	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var coreParser = __w_pdfjs_require__(5);
	var Util = sharedUtil.Util;
	var assert = sharedUtil.assert;
	var warn = sharedUtil.warn;
	var error = sharedUtil.error;
	var isInt = sharedUtil.isInt;
	var isString = sharedUtil.isString;
	var MissingDataException = sharedUtil.MissingDataException;
	var CMapCompressionType = sharedUtil.CMapCompressionType;
	var isEOF = corePrimitives.isEOF;
	var isName = corePrimitives.isName;
	var isCmd = corePrimitives.isCmd;
	var isStream = corePrimitives.isStream;
	var Stream = coreStream.Stream;
	var Lexer = coreParser.Lexer;
	var BUILT_IN_CMAPS = ['Adobe-GB1-UCS2', 'Adobe-CNS1-UCS2', 'Adobe-Japan1-UCS2', 'Adobe-Korea1-UCS2', '78-EUC-H', '78-EUC-V', '78-H', '78-RKSJ-H', '78-RKSJ-V', '78-V', '78ms-RKSJ-H', '78ms-RKSJ-V', '83pv-RKSJ-H', '90ms-RKSJ-H', '90ms-RKSJ-V', '90msp-RKSJ-H', '90msp-RKSJ-V', '90pv-RKSJ-H', '90pv-RKSJ-V', 'Add-H', 'Add-RKSJ-H', 'Add-RKSJ-V', 'Add-V', 'Adobe-CNS1-0', 'Adobe-CNS1-1', 'Adobe-CNS1-2', 'Adobe-CNS1-3', 'Adobe-CNS1-4', 'Adobe-CNS1-5', 'Adobe-CNS1-6', 'Adobe-GB1-0', 'Adobe-GB1-1', 'Adobe-GB1-2', 'Adobe-GB1-3', 'Adobe-GB1-4', 'Adobe-GB1-5', 'Adobe-Japan1-0', 'Adobe-Japan1-1', 'Adobe-Japan1-2', 'Adobe-Japan1-3', 'Adobe-Japan1-4', 'Adobe-Japan1-5', 'Adobe-Japan1-6', 'Adobe-Korea1-0', 'Adobe-Korea1-1', 'Adobe-Korea1-2', 'B5-H', 'B5-V', 'B5pc-H', 'B5pc-V', 'CNS-EUC-H', 'CNS-EUC-V', 'CNS1-H', 'CNS1-V', 'CNS2-H', 'CNS2-V', 'ETHK-B5-H', 'ETHK-B5-V', 'ETen-B5-H', 'ETen-B5-V', 'ETenms-B5-H', 'ETenms-B5-V', 'EUC-H', 'EUC-V', 'Ext-H', 'Ext-RKSJ-H', 'Ext-RKSJ-V', 'Ext-V', 'GB-EUC-H', 'GB-EUC-V', 'GB-H', 'GB-V', 'GBK-EUC-H', 'GBK-EUC-V', 'GBK2K-H', 'GBK2K-V', 'GBKp-EUC-H', 'GBKp-EUC-V', 'GBT-EUC-H', 'GBT-EUC-V', 'GBT-H', 'GBT-V', 'GBTpc-EUC-H', 'GBTpc-EUC-V', 'GBpc-EUC-H', 'GBpc-EUC-V', 'H', 'HKdla-B5-H', 'HKdla-B5-V', 'HKdlb-B5-H', 'HKdlb-B5-V', 'HKgccs-B5-H', 'HKgccs-B5-V', 'HKm314-B5-H', 'HKm314-B5-V', 'HKm471-B5-H', 'HKm471-B5-V', 'HKscs-B5-H', 'HKscs-B5-V', 'Hankaku', 'Hiragana', 'KSC-EUC-H', 'KSC-EUC-V', 'KSC-H', 'KSC-Johab-H', 'KSC-Johab-V', 'KSC-V', 'KSCms-UHC-H', 'KSCms-UHC-HW-H', 'KSCms-UHC-HW-V', 'KSCms-UHC-V', 'KSCpc-EUC-H', 'KSCpc-EUC-V', 'Katakana', 'NWP-H', 'NWP-V', 'RKSJ-H', 'RKSJ-V', 'Roman', 'UniCNS-UCS2-H', 'UniCNS-UCS2-V', 'UniCNS-UTF16-H', 'UniCNS-UTF16-V', 'UniCNS-UTF32-H', 'UniCNS-UTF32-V', 'UniCNS-UTF8-H', 'UniCNS-UTF8-V', 'UniGB-UCS2-H', 'UniGB-UCS2-V', 'UniGB-UTF16-H', 'UniGB-UTF16-V', 'UniGB-UTF32-H', 'UniGB-UTF32-V', 'UniGB-UTF8-H', 'UniGB-UTF8-V', 'UniJIS-UCS2-H', 'UniJIS-UCS2-HW-H', 'UniJIS-UCS2-HW-V', 'UniJIS-UCS2-V', 'UniJIS-UTF16-H', 'UniJIS-UTF16-V', 'UniJIS-UTF32-H', 'UniJIS-UTF32-V', 'UniJIS-UTF8-H', 'UniJIS-UTF8-V', 'UniJIS2004-UTF16-H', 'UniJIS2004-UTF16-V', 'UniJIS2004-UTF32-H', 'UniJIS2004-UTF32-V', 'UniJIS2004-UTF8-H', 'UniJIS2004-UTF8-V', 'UniJISPro-UCS2-HW-V', 'UniJISPro-UCS2-V', 'UniJISPro-UTF8-V', 'UniJISX0213-UTF32-H', 'UniJISX0213-UTF32-V', 'UniJISX02132004-UTF32-H', 'UniJISX02132004-UTF32-V', 'UniKS-UCS2-H', 'UniKS-UCS2-V', 'UniKS-UTF16-H', 'UniKS-UTF16-V', 'UniKS-UTF32-H', 'UniKS-UTF32-V', 'UniKS-UTF8-H', 'UniKS-UTF8-V', 'V', 'WP-Symbol'];
	var CMap = function CMapClosure() {
	  function CMap(builtInCMap) {
	    this.codespaceRanges = [[], [], [], []];
	    this.numCodespaceRanges = 0;
	    this._map = [];
	    this.name = '';
	    this.vertical = false;
	    this.useCMap = null;
	    this.builtInCMap = builtInCMap;
	  }
	  CMap.prototype = {
	    addCodespaceRange: function addCodespaceRange(n, low, high) {
	      this.codespaceRanges[n - 1].push(low, high);
	      this.numCodespaceRanges++;
	    },
	    mapCidRange: function mapCidRange(low, high, dstLow) {
	      while (low <= high) {
	        this._map[low++] = dstLow++;
	      }
	    },
	    mapBfRange: function mapBfRange(low, high, dstLow) {
	      var lastByte = dstLow.length - 1;
	      while (low <= high) {
	        this._map[low++] = dstLow;
	        dstLow = dstLow.substr(0, lastByte) + String.fromCharCode(dstLow.charCodeAt(lastByte) + 1);
	      }
	    },
	    mapBfRangeToArray: function mapBfRangeToArray(low, high, array) {
	      var i = 0,
	          ii = array.length;
	      while (low <= high && i < ii) {
	        this._map[low] = array[i++];
	        ++low;
	      }
	    },
	    mapOne: function mapOne(src, dst) {
	      this._map[src] = dst;
	    },
	    lookup: function lookup(code) {
	      return this._map[code];
	    },
	    contains: function contains(code) {
	      return this._map[code] !== undefined;
	    },
	    forEach: function forEach(callback) {
	      var map = this._map;
	      var length = map.length;
	      var i;
	      if (length <= 0x10000) {
	        for (i = 0; i < length; i++) {
	          if (map[i] !== undefined) {
	            callback(i, map[i]);
	          }
	        }
	      } else {
	        for (i in this._map) {
	          callback(i, map[i]);
	        }
	      }
	    },
	    charCodeOf: function charCodeOf(value) {
	      return this._map.indexOf(value);
	    },
	    getMap: function getMap() {
	      return this._map;
	    },
	    readCharCode: function readCharCode(str, offset, out) {
	      var c = 0;
	      var codespaceRanges = this.codespaceRanges;
	      var codespaceRangesLen = this.codespaceRanges.length;
	      for (var n = 0; n < codespaceRangesLen; n++) {
	        c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;
	        var codespaceRange = codespaceRanges[n];
	        for (var k = 0, kk = codespaceRange.length; k < kk;) {
	          var low = codespaceRange[k++];
	          var high = codespaceRange[k++];
	          if (c >= low && c <= high) {
	            out.charcode = c;
	            out.length = n + 1;
	            return;
	          }
	        }
	      }
	      out.charcode = 0;
	      out.length = 1;
	    },

	    get length() {
	      return this._map.length;
	    },
	    get isIdentityCMap() {
	      if (!(this.name === 'Identity-H' || this.name === 'Identity-V')) {
	        return false;
	      }
	      if (this._map.length !== 0x10000) {
	        return false;
	      }
	      for (var i = 0; i < 0x10000; i++) {
	        if (this._map[i] !== i) {
	          return false;
	        }
	      }
	      return true;
	    }
	  };
	  return CMap;
	}();
	var IdentityCMap = function IdentityCMapClosure() {
	  function IdentityCMap(vertical, n) {
	    CMap.call(this);
	    this.vertical = vertical;
	    this.addCodespaceRange(n, 0, 0xffff);
	  }
	  Util.inherit(IdentityCMap, CMap, {});
	  IdentityCMap.prototype = {
	    addCodespaceRange: CMap.prototype.addCodespaceRange,
	    mapCidRange: function mapCidRange(low, high, dstLow) {
	      error('should not call mapCidRange');
	    },
	    mapBfRange: function mapBfRange(low, high, dstLow) {
	      error('should not call mapBfRange');
	    },
	    mapBfRangeToArray: function mapBfRangeToArray(low, high, array) {
	      error('should not call mapBfRangeToArray');
	    },
	    mapOne: function mapOne(src, dst) {
	      error('should not call mapCidOne');
	    },
	    lookup: function lookup(code) {
	      return isInt(code) && code <= 0xffff ? code : undefined;
	    },
	    contains: function contains(code) {
	      return isInt(code) && code <= 0xffff;
	    },
	    forEach: function forEach(callback) {
	      for (var i = 0; i <= 0xffff; i++) {
	        callback(i, i);
	      }
	    },
	    charCodeOf: function charCodeOf(value) {
	      return isInt(value) && value <= 0xffff ? value : -1;
	    },
	    getMap: function getMap() {
	      var map = new Array(0x10000);
	      for (var i = 0; i <= 0xffff; i++) {
	        map[i] = i;
	      }
	      return map;
	    },

	    readCharCode: CMap.prototype.readCharCode,
	    get length() {
	      return 0x10000;
	    },
	    get isIdentityCMap() {
	      error('should not access .isIdentityCMap');
	    }
	  };
	  return IdentityCMap;
	}();
	var BinaryCMapReader = function BinaryCMapReaderClosure() {
	  function hexToInt(a, size) {
	    var n = 0;
	    for (var i = 0; i <= size; i++) {
	      n = n << 8 | a[i];
	    }
	    return n >>> 0;
	  }
	  function hexToStr(a, size) {
	    if (size === 1) {
	      return String.fromCharCode(a[0], a[1]);
	    }
	    if (size === 3) {
	      return String.fromCharCode(a[0], a[1], a[2], a[3]);
	    }
	    return String.fromCharCode.apply(null, a.subarray(0, size + 1));
	  }
	  function addHex(a, b, size) {
	    var c = 0;
	    for (var i = size; i >= 0; i--) {
	      c += a[i] + b[i];
	      a[i] = c & 255;
	      c >>= 8;
	    }
	  }
	  function incHex(a, size) {
	    var c = 1;
	    for (var i = size; i >= 0 && c > 0; i--) {
	      c += a[i];
	      a[i] = c & 255;
	      c >>= 8;
	    }
	  }
	  var MAX_NUM_SIZE = 16;
	  var MAX_ENCODED_NUM_SIZE = 19;
	  function BinaryCMapStream(data) {
	    this.buffer = data;
	    this.pos = 0;
	    this.end = data.length;
	    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);
	  }
	  BinaryCMapStream.prototype = {
	    readByte: function readByte() {
	      if (this.pos >= this.end) {
	        return -1;
	      }
	      return this.buffer[this.pos++];
	    },
	    readNumber: function readNumber() {
	      var n = 0;
	      var last;
	      do {
	        var b = this.readByte();
	        if (b < 0) {
	          error('unexpected EOF in bcmap');
	        }
	        last = !(b & 0x80);
	        n = n << 7 | b & 0x7F;
	      } while (!last);
	      return n;
	    },
	    readSigned: function readSigned() {
	      var n = this.readNumber();
	      return n & 1 ? ~(n >>> 1) : n >>> 1;
	    },
	    readHex: function readHex(num, size) {
	      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));
	      this.pos += size + 1;
	    },
	    readHexNumber: function readHexNumber(num, size) {
	      var last;
	      var stack = this.tmpBuf,
	          sp = 0;
	      do {
	        var b = this.readByte();
	        if (b < 0) {
	          error('unexpected EOF in bcmap');
	        }
	        last = !(b & 0x80);
	        stack[sp++] = b & 0x7F;
	      } while (!last);
	      var i = size,
	          buffer = 0,
	          bufferSize = 0;
	      while (i >= 0) {
	        while (bufferSize < 8 && stack.length > 0) {
	          buffer = stack[--sp] << bufferSize | buffer;
	          bufferSize += 7;
	        }
	        num[i] = buffer & 255;
	        i--;
	        buffer >>= 8;
	        bufferSize -= 8;
	      }
	    },
	    readHexSigned: function readHexSigned(num, size) {
	      this.readHexNumber(num, size);
	      var sign = num[size] & 1 ? 255 : 0;
	      var c = 0;
	      for (var i = 0; i <= size; i++) {
	        c = (c & 1) << 8 | num[i];
	        num[i] = c >> 1 ^ sign;
	      }
	    },
	    readString: function readString() {
	      var len = this.readNumber();
	      var s = '';
	      for (var i = 0; i < len; i++) {
	        s += String.fromCharCode(this.readNumber());
	      }
	      return s;
	    }
	  };
	  function processBinaryCMap(data, cMap, extend) {
	    return new Promise(function (resolve, reject) {
	      var stream = new BinaryCMapStream(data);
	      var header = stream.readByte();
	      cMap.vertical = !!(header & 1);
	      var useCMap = null;
	      var start = new Uint8Array(MAX_NUM_SIZE);
	      var end = new Uint8Array(MAX_NUM_SIZE);
	      var char = new Uint8Array(MAX_NUM_SIZE);
	      var charCode = new Uint8Array(MAX_NUM_SIZE);
	      var tmp = new Uint8Array(MAX_NUM_SIZE);
	      var code;
	      var b;
	      while ((b = stream.readByte()) >= 0) {
	        var type = b >> 5;
	        if (type === 7) {
	          switch (b & 0x1F) {
	            case 0:
	              stream.readString();
	              break;
	            case 1:
	              useCMap = stream.readString();
	              break;
	          }
	          continue;
	        }
	        var sequence = !!(b & 0x10);
	        var dataSize = b & 15;
	        assert(dataSize + 1 <= MAX_NUM_SIZE);
	        var ucs2DataSize = 1;
	        var subitemsCount = stream.readNumber();
	        var i;
	        switch (type) {
	          case 0:
	            stream.readHex(start, dataSize);
	            stream.readHexNumber(end, dataSize);
	            addHex(end, start, dataSize);
	            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));
	            for (i = 1; i < subitemsCount; i++) {
	              incHex(end, dataSize);
	              stream.readHexNumber(start, dataSize);
	              addHex(start, end, dataSize);
	              stream.readHexNumber(end, dataSize);
	              addHex(end, start, dataSize);
	              cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));
	            }
	            break;
	          case 1:
	            stream.readHex(start, dataSize);
	            stream.readHexNumber(end, dataSize);
	            addHex(end, start, dataSize);
	            code = stream.readNumber();
	            for (i = 1; i < subitemsCount; i++) {
	              incHex(end, dataSize);
	              stream.readHexNumber(start, dataSize);
	              addHex(start, end, dataSize);
	              stream.readHexNumber(end, dataSize);
	              addHex(end, start, dataSize);
	              code = stream.readNumber();
	            }
	            break;
	          case 2:
	            stream.readHex(char, dataSize);
	            code = stream.readNumber();
	            cMap.mapOne(hexToInt(char, dataSize), code);
	            for (i = 1; i < subitemsCount; i++) {
	              incHex(char, dataSize);
	              if (!sequence) {
	                stream.readHexNumber(tmp, dataSize);
	                addHex(char, tmp, dataSize);
	              }
	              code = stream.readSigned() + (code + 1);
	              cMap.mapOne(hexToInt(char, dataSize), code);
	            }
	            break;
	          case 3:
	            stream.readHex(start, dataSize);
	            stream.readHexNumber(end, dataSize);
	            addHex(end, start, dataSize);
	            code = stream.readNumber();
	            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);
	            for (i = 1; i < subitemsCount; i++) {
	              incHex(end, dataSize);
	              if (!sequence) {
	                stream.readHexNumber(start, dataSize);
	                addHex(start, end, dataSize);
	              } else {
	                start.set(end);
	              }
	              stream.readHexNumber(end, dataSize);
	              addHex(end, start, dataSize);
	              code = stream.readNumber();
	              cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);
	            }
	            break;
	          case 4:
	            stream.readHex(char, ucs2DataSize);
	            stream.readHex(charCode, dataSize);
	            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));
	            for (i = 1; i < subitemsCount; i++) {
	              incHex(char, ucs2DataSize);
	              if (!sequence) {
	                stream.readHexNumber(tmp, ucs2DataSize);
	                addHex(char, tmp, ucs2DataSize);
	              }
	              incHex(charCode, dataSize);
	              stream.readHexSigned(tmp, dataSize);
	              addHex(charCode, tmp, dataSize);
	              cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));
	            }
	            break;
	          case 5:
	            stream.readHex(start, ucs2DataSize);
	            stream.readHexNumber(end, ucs2DataSize);
	            addHex(end, start, ucs2DataSize);
	            stream.readHex(charCode, dataSize);
	            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));
	            for (i = 1; i < subitemsCount; i++) {
	              incHex(end, ucs2DataSize);
	              if (!sequence) {
	                stream.readHexNumber(start, ucs2DataSize);
	                addHex(start, end, ucs2DataSize);
	              } else {
	                start.set(end);
	              }
	              stream.readHexNumber(end, ucs2DataSize);
	              addHex(end, start, ucs2DataSize);
	              stream.readHex(charCode, dataSize);
	              cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));
	            }
	            break;
	          default:
	            reject(new Error('processBinaryCMap: Unknown type: ' + type));
	            return;
	        }
	      }
	      if (useCMap) {
	        resolve(extend(useCMap));
	        return;
	      }
	      resolve(cMap);
	    });
	  }
	  function BinaryCMapReader() {}
	  BinaryCMapReader.prototype = { process: processBinaryCMap };
	  return BinaryCMapReader;
	}();
	var CMapFactory = function CMapFactoryClosure() {
	  function strToInt(str) {
	    var a = 0;
	    for (var i = 0; i < str.length; i++) {
	      a = a << 8 | str.charCodeAt(i);
	    }
	    return a >>> 0;
	  }
	  function expectString(obj) {
	    if (!isString(obj)) {
	      error('Malformed CMap: expected string.');
	    }
	  }
	  function expectInt(obj) {
	    if (!isInt(obj)) {
	      error('Malformed CMap: expected int.');
	    }
	  }
	  function parseBfChar(cMap, lexer) {
	    while (true) {
	      var obj = lexer.getObj();
	      if (isEOF(obj)) {
	        break;
	      }
	      if (isCmd(obj, 'endbfchar')) {
	        return;
	      }
	      expectString(obj);
	      var src = strToInt(obj);
	      obj = lexer.getObj();
	      expectString(obj);
	      var dst = obj;
	      cMap.mapOne(src, dst);
	    }
	  }
	  function parseBfRange(cMap, lexer) {
	    while (true) {
	      var obj = lexer.getObj();
	      if (isEOF(obj)) {
	        break;
	      }
	      if (isCmd(obj, 'endbfrange')) {
	        return;
	      }
	      expectString(obj);
	      var low = strToInt(obj);
	      obj = lexer.getObj();
	      expectString(obj);
	      var high = strToInt(obj);
	      obj = lexer.getObj();
	      if (isInt(obj) || isString(obj)) {
	        var dstLow = isInt(obj) ? String.fromCharCode(obj) : obj;
	        cMap.mapBfRange(low, high, dstLow);
	      } else if (isCmd(obj, '[')) {
	        obj = lexer.getObj();
	        var array = [];
	        while (!isCmd(obj, ']') && !isEOF(obj)) {
	          array.push(obj);
	          obj = lexer.getObj();
	        }
	        cMap.mapBfRangeToArray(low, high, array);
	      } else {
	        break;
	      }
	    }
	    error('Invalid bf range.');
	  }
	  function parseCidChar(cMap, lexer) {
	    while (true) {
	      var obj = lexer.getObj();
	      if (isEOF(obj)) {
	        break;
	      }
	      if (isCmd(obj, 'endcidchar')) {
	        return;
	      }
	      expectString(obj);
	      var src = strToInt(obj);
	      obj = lexer.getObj();
	      expectInt(obj);
	      var dst = obj;
	      cMap.mapOne(src, dst);
	    }
	  }
	  function parseCidRange(cMap, lexer) {
	    while (true) {
	      var obj = lexer.getObj();
	      if (isEOF(obj)) {
	        break;
	      }
	      if (isCmd(obj, 'endcidrange')) {
	        return;
	      }
	      expectString(obj);
	      var low = strToInt(obj);
	      obj = lexer.getObj();
	      expectString(obj);
	      var high = strToInt(obj);
	      obj = lexer.getObj();
	      expectInt(obj);
	      var dstLow = obj;
	      cMap.mapCidRange(low, high, dstLow);
	    }
	  }
	  function parseCodespaceRange(cMap, lexer) {
	    while (true) {
	      var obj = lexer.getObj();
	      if (isEOF(obj)) {
	        break;
	      }
	      if (isCmd(obj, 'endcodespacerange')) {
	        return;
	      }
	      if (!isString(obj)) {
	        break;
	      }
	      var low = strToInt(obj);
	      obj = lexer.getObj();
	      if (!isString(obj)) {
	        break;
	      }
	      var high = strToInt(obj);
	      cMap.addCodespaceRange(obj.length, low, high);
	    }
	    error('Invalid codespace range.');
	  }
	  function parseWMode(cMap, lexer) {
	    var obj = lexer.getObj();
	    if (isInt(obj)) {
	      cMap.vertical = !!obj;
	    }
	  }
	  function parseCMapName(cMap, lexer) {
	    var obj = lexer.getObj();
	    if (isName(obj) && isString(obj.name)) {
	      cMap.name = obj.name;
	    }
	  }
	  function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {
	    var previous;
	    var embededUseCMap;
	    objLoop: while (true) {
	      try {
	        var obj = lexer.getObj();
	        if (isEOF(obj)) {
	          break;
	        } else if (isName(obj)) {
	          if (obj.name === 'WMode') {
	            parseWMode(cMap, lexer);
	          } else if (obj.name === 'CMapName') {
	            parseCMapName(cMap, lexer);
	          }
	          previous = obj;
	        } else if (isCmd(obj)) {
	          switch (obj.cmd) {
	            case 'endcmap':
	              break objLoop;
	            case 'usecmap':
	              if (isName(previous)) {
	                embededUseCMap = previous.name;
	              }
	              break;
	            case 'begincodespacerange':
	              parseCodespaceRange(cMap, lexer);
	              break;
	            case 'beginbfchar':
	              parseBfChar(cMap, lexer);
	              break;
	            case 'begincidchar':
	              parseCidChar(cMap, lexer);
	              break;
	            case 'beginbfrange':
	              parseBfRange(cMap, lexer);
	              break;
	            case 'begincidrange':
	              parseCidRange(cMap, lexer);
	              break;
	          }
	        }
	      } catch (ex) {
	        if (ex instanceof MissingDataException) {
	          throw ex;
	        }
	        warn('Invalid cMap data: ' + ex);
	        continue;
	      }
	    }
	    if (!useCMap && embededUseCMap) {
	      useCMap = embededUseCMap;
	    }
	    if (useCMap) {
	      return extendCMap(cMap, fetchBuiltInCMap, useCMap);
	    }
	    return Promise.resolve(cMap);
	  }
	  function extendCMap(cMap, fetchBuiltInCMap, useCMap) {
	    return createBuiltInCMap(useCMap, fetchBuiltInCMap).then(function (newCMap) {
	      cMap.useCMap = newCMap;
	      if (cMap.numCodespaceRanges === 0) {
	        var useCodespaceRanges = cMap.useCMap.codespaceRanges;
	        for (var i = 0; i < useCodespaceRanges.length; i++) {
	          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();
	        }
	        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;
	      }
	      cMap.useCMap.forEach(function (key, value) {
	        if (!cMap.contains(key)) {
	          cMap.mapOne(key, cMap.useCMap.lookup(key));
	        }
	      });
	      return cMap;
	    });
	  }
	  function createBuiltInCMap(name, fetchBuiltInCMap) {
	    if (name === 'Identity-H') {
	      return Promise.resolve(new IdentityCMap(false, 2));
	    } else if (name === 'Identity-V') {
	      return Promise.resolve(new IdentityCMap(true, 2));
	    }
	    if (BUILT_IN_CMAPS.indexOf(name) === -1) {
	      return Promise.reject(new Error('Unknown CMap name: ' + name));
	    }
	    assert(fetchBuiltInCMap, 'Built-in CMap parameters are not provided.');
	    return fetchBuiltInCMap(name).then(function (data) {
	      var cMapData = data.cMapData,
	          compressionType = data.compressionType;
	      var cMap = new CMap(true);
	      if (compressionType === CMapCompressionType.BINARY) {
	        return new BinaryCMapReader().process(cMapData, cMap, function (useCMap) {
	          return extendCMap(cMap, fetchBuiltInCMap, useCMap);
	        });
	      }
	      assert(compressionType === CMapCompressionType.NONE, 'TODO: Only BINARY/NONE CMap compression is currently supported.');
	      var lexer = new Lexer(new Stream(cMapData));
	      return parseCMap(cMap, lexer, fetchBuiltInCMap, null);
	    });
	  }
	  return {
	    create: function create(params) {
	      var encoding = params.encoding;
	      var fetchBuiltInCMap = params.fetchBuiltInCMap;
	      var useCMap = params.useCMap;
	      if (isName(encoding)) {
	        return createBuiltInCMap(encoding.name, fetchBuiltInCMap);
	      } else if (isStream(encoding)) {
	        var cMap = new CMap();
	        var lexer = new Lexer(encoding);
	        return parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap).then(function (parsedCMap) {
	          if (parsedCMap.isIdentityCMap) {
	            return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);
	          }
	          return parsedCMap;
	        });
	      }
	      return Promise.reject(new Error('Encoding required.'));
	    }
	  };
	}();
	exports.CMap = CMap;
	exports.CMapFactory = CMapFactory;
	exports.IdentityCMap = IdentityCMap;

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var coreObj = __w_pdfjs_require__(16);
	var coreParser = __w_pdfjs_require__(5);
	var coreCrypto = __w_pdfjs_require__(13);
	var coreEvaluator = __w_pdfjs_require__(14);
	var coreAnnotation = __w_pdfjs_require__(20);
	var OPS = sharedUtil.OPS;
	var MissingDataException = sharedUtil.MissingDataException;
	var Util = sharedUtil.Util;
	var assert = sharedUtil.assert;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isArrayBuffer = sharedUtil.isArrayBuffer;
	var isNum = sharedUtil.isNum;
	var isString = sharedUtil.isString;
	var shadow = sharedUtil.shadow;
	var stringToBytes = sharedUtil.stringToBytes;
	var stringToPDFString = sharedUtil.stringToPDFString;
	var warn = sharedUtil.warn;
	var isSpace = sharedUtil.isSpace;
	var Dict = corePrimitives.Dict;
	var isDict = corePrimitives.isDict;
	var isName = corePrimitives.isName;
	var isStream = corePrimitives.isStream;
	var NullStream = coreStream.NullStream;
	var Stream = coreStream.Stream;
	var StreamsSequenceStream = coreStream.StreamsSequenceStream;
	var Catalog = coreObj.Catalog;
	var ObjectLoader = coreObj.ObjectLoader;
	var XRef = coreObj.XRef;
	var Linearization = coreParser.Linearization;
	var calculateMD5 = coreCrypto.calculateMD5;
	var OperatorList = coreEvaluator.OperatorList;
	var PartialEvaluator = coreEvaluator.PartialEvaluator;
	var AnnotationFactory = coreAnnotation.AnnotationFactory;
	var Page = function PageClosure() {
	  var DEFAULT_USER_UNIT = 1.0;
	  var LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];
	  function isAnnotationRenderable(annotation, intent) {
	    return intent === 'display' && annotation.viewable || intent === 'print' && annotation.printable;
	  }
	  function Page(pdfManager, xref, pageIndex, pageDict, ref, fontCache, builtInCMapCache) {
	    this.pdfManager = pdfManager;
	    this.pageIndex = pageIndex;
	    this.pageDict = pageDict;
	    this.xref = xref;
	    this.ref = ref;
	    this.fontCache = fontCache;
	    this.builtInCMapCache = builtInCMapCache;
	    this.evaluatorOptions = pdfManager.evaluatorOptions;
	    this.resourcesPromise = null;
	    var uniquePrefix = 'p' + this.pageIndex + '_';
	    var idCounters = { obj: 0 };
	    this.idFactory = {
	      createObjId: function createObjId() {
	        return uniquePrefix + ++idCounters.obj;
	      }
	    };
	  }
	  Page.prototype = {
	    getPageProp: function Page_getPageProp(key) {
	      return this.pageDict.get(key);
	    },
	    getInheritedPageProp: function Page_getInheritedPageProp(key, getArray) {
	      var dict = this.pageDict,
	          valueArray = null,
	          loopCount = 0;
	      var MAX_LOOP_COUNT = 100;
	      getArray = getArray || false;
	      while (dict) {
	        var value = getArray ? dict.getArray(key) : dict.get(key);
	        if (value !== undefined) {
	          if (!valueArray) {
	            valueArray = [];
	          }
	          valueArray.push(value);
	        }
	        if (++loopCount > MAX_LOOP_COUNT) {
	          warn('getInheritedPageProp: maximum loop count exceeded for ' + key);
	          return valueArray ? valueArray[0] : undefined;
	        }
	        dict = dict.get('Parent');
	      }
	      if (!valueArray) {
	        return undefined;
	      }
	      if (valueArray.length === 1 || !isDict(valueArray[0])) {
	        return valueArray[0];
	      }
	      return Dict.merge(this.xref, valueArray);
	    },
	    get content() {
	      return this.getPageProp('Contents');
	    },
	    get resources() {
	      return shadow(this, 'resources', this.getInheritedPageProp('Resources') || Dict.empty);
	    },
	    get mediaBox() {
	      var mediaBox = this.getInheritedPageProp('MediaBox', true);
	      if (!isArray(mediaBox) || mediaBox.length !== 4) {
	        return shadow(this, 'mediaBox', LETTER_SIZE_MEDIABOX);
	      }
	      return shadow(this, 'mediaBox', mediaBox);
	    },
	    get cropBox() {
	      var cropBox = this.getInheritedPageProp('CropBox', true);
	      if (!isArray(cropBox) || cropBox.length !== 4) {
	        return shadow(this, 'cropBox', this.mediaBox);
	      }
	      return shadow(this, 'cropBox', cropBox);
	    },
	    get userUnit() {
	      var obj = this.getPageProp('UserUnit');
	      if (!isNum(obj) || obj <= 0) {
	        obj = DEFAULT_USER_UNIT;
	      }
	      return shadow(this, 'userUnit', obj);
	    },
	    get view() {
	      var mediaBox = this.mediaBox,
	          cropBox = this.cropBox;
	      if (mediaBox === cropBox) {
	        return shadow(this, 'view', mediaBox);
	      }
	      var intersection = Util.intersect(cropBox, mediaBox);
	      return shadow(this, 'view', intersection || mediaBox);
	    },
	    get rotate() {
	      var rotate = this.getInheritedPageProp('Rotate') || 0;
	      if (rotate % 90 !== 0) {
	        rotate = 0;
	      } else if (rotate >= 360) {
	        rotate = rotate % 360;
	      } else if (rotate < 0) {
	        rotate = (rotate % 360 + 360) % 360;
	      }
	      return shadow(this, 'rotate', rotate);
	    },
	    getContentStream: function Page_getContentStream() {
	      var content = this.content;
	      var stream;
	      if (isArray(content)) {
	        var xref = this.xref;
	        var i,
	            n = content.length;
	        var streams = [];
	        for (i = 0; i < n; ++i) {
	          streams.push(xref.fetchIfRef(content[i]));
	        }
	        stream = new StreamsSequenceStream(streams);
	      } else if (isStream(content)) {
	        stream = content;
	      } else {
	        stream = new NullStream();
	      }
	      return stream;
	    },
	    loadResources: function Page_loadResources(keys) {
	      var _this = this;

	      if (!this.resourcesPromise) {
	        this.resourcesPromise = this.pdfManager.ensure(this, 'resources');
	      }
	      return this.resourcesPromise.then(function () {
	        var objectLoader = new ObjectLoader(_this.resources.map, keys, _this.xref);
	        return objectLoader.load();
	      });
	    },
	    getOperatorList: function getOperatorList(_ref) {
	      var _this2 = this;

	      var handler = _ref.handler,
	          task = _ref.task,
	          intent = _ref.intent,
	          renderInteractiveForms = _ref.renderInteractiveForms;

	      var contentStreamPromise = this.pdfManager.ensure(this, 'getContentStream');
	      var resourcesPromise = this.loadResources(['ExtGState', 'ColorSpace', 'Pattern', 'Shading', 'XObject', 'Font']);
	      var partialEvaluator = new PartialEvaluator({
	        pdfManager: this.pdfManager,
	        xref: this.xref,
	        handler: handler,
	        pageIndex: this.pageIndex,
	        idFactory: this.idFactory,
	        fontCache: this.fontCache,
	        builtInCMapCache: this.builtInCMapCache,
	        options: this.evaluatorOptions
	      });
	      var dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);
	      var pageListPromise = dataPromises.then(function (_ref2) {
	        var _ref3 = _slicedToArray(_ref2, 1),
	            contentStream = _ref3[0];

	        var opList = new OperatorList(intent, handler, _this2.pageIndex);
	        handler.send('StartRenderPage', {
	          transparency: partialEvaluator.hasBlendModes(_this2.resources),
	          pageIndex: _this2.pageIndex,
	          intent: intent
	        });
	        return partialEvaluator.getOperatorList({
	          stream: contentStream,
	          task: task,
	          resources: _this2.resources,
	          operatorList: opList
	        }).then(function () {
	          return opList;
	        });
	      });
	      var annotationsPromise = this.pdfManager.ensure(this, 'annotations');
	      return Promise.all([pageListPromise, annotationsPromise]).then(function (_ref4) {
	        var _ref5 = _slicedToArray(_ref4, 2),
	            pageOpList = _ref5[0],
	            annotations = _ref5[1];

	        if (annotations.length === 0) {
	          pageOpList.flush(true);
	          return pageOpList;
	        }
	        var i,
	            ii,
	            opListPromises = [];
	        for (i = 0, ii = annotations.length; i < ii; i++) {
	          if (isAnnotationRenderable(annotations[i], intent)) {
	            opListPromises.push(annotations[i].getOperatorList(partialEvaluator, task, renderInteractiveForms));
	          }
	        }
	        return Promise.all(opListPromises).then(function (opLists) {
	          pageOpList.addOp(OPS.beginAnnotations, []);
	          for (i = 0, ii = opLists.length; i < ii; i++) {
	            pageOpList.addOpList(opLists[i]);
	          }
	          pageOpList.addOp(OPS.endAnnotations, []);
	          pageOpList.flush(true);
	          return pageOpList;
	        });
	      });
	    },
	    extractTextContent: function extractTextContent(_ref6) {
	      var _this3 = this;

	      var handler = _ref6.handler,
	          task = _ref6.task,
	          normalizeWhitespace = _ref6.normalizeWhitespace,
	          combineTextItems = _ref6.combineTextItems;

	      var contentStreamPromise = this.pdfManager.ensure(this, 'getContentStream');
	      var resourcesPromise = this.loadResources(['ExtGState', 'XObject', 'Font']);
	      var dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);
	      return dataPromises.then(function (_ref7) {
	        var _ref8 = _slicedToArray(_ref7, 1),
	            contentStream = _ref8[0];

	        var partialEvaluator = new PartialEvaluator({
	          pdfManager: _this3.pdfManager,
	          xref: _this3.xref,
	          handler: handler,
	          pageIndex: _this3.pageIndex,
	          idFactory: _this3.idFactory,
	          fontCache: _this3.fontCache,
	          builtInCMapCache: _this3.builtInCMapCache,
	          options: _this3.evaluatorOptions
	        });
	        return partialEvaluator.getTextContent({
	          stream: contentStream,
	          task: task,
	          resources: _this3.resources,
	          normalizeWhitespace: normalizeWhitespace,
	          combineTextItems: combineTextItems
	        });
	      });
	    },

	    getAnnotationsData: function Page_getAnnotationsData(intent) {
	      var annotations = this.annotations;
	      var annotationsData = [];
	      for (var i = 0, n = annotations.length; i < n; ++i) {
	        if (!intent || isAnnotationRenderable(annotations[i], intent)) {
	          annotationsData.push(annotations[i].data);
	        }
	      }
	      return annotationsData;
	    },
	    get annotations() {
	      var annotations = [];
	      var annotationRefs = this.getInheritedPageProp('Annots') || [];
	      var annotationFactory = new AnnotationFactory();
	      for (var i = 0, n = annotationRefs.length; i < n; ++i) {
	        var annotationRef = annotationRefs[i];
	        var annotation = annotationFactory.create(this.xref, annotationRef, this.pdfManager, this.idFactory);
	        if (annotation) {
	          annotations.push(annotation);
	        }
	      }
	      return shadow(this, 'annotations', annotations);
	    }
	  };
	  return Page;
	}();
	var PDFDocument = function PDFDocumentClosure() {
	  var FINGERPRINT_FIRST_BYTES = 1024;
	  var EMPTY_FINGERPRINT = '\x00\x00\x00\x00\x00\x00\x00' + '\x00\x00\x00\x00\x00\x00\x00\x00\x00';
	  function PDFDocument(pdfManager, arg) {
	    var stream;
	    if (isStream(arg)) {
	      stream = arg;
	    } else if (isArrayBuffer(arg)) {
	      stream = new Stream(arg);
	    } else {
	      error('PDFDocument: Unknown argument type');
	    }
	    assert(stream.length > 0, 'stream must have data');
	    this.pdfManager = pdfManager;
	    this.stream = stream;
	    this.xref = new XRef(stream, pdfManager);
	  }
	  function find(stream, needle, limit, backwards) {
	    var pos = stream.pos;
	    var end = stream.end;
	    var strBuf = [];
	    if (pos + limit > end) {
	      limit = end - pos;
	    }
	    for (var n = 0; n < limit; ++n) {
	      strBuf.push(String.fromCharCode(stream.getByte()));
	    }
	    var str = strBuf.join('');
	    stream.pos = pos;
	    var index = backwards ? str.lastIndexOf(needle) : str.indexOf(needle);
	    if (index === -1) {
	      return false;
	    }
	    stream.pos += index;
	    return true;
	  }
	  var DocumentInfoValidators = {
	    get entries() {
	      return shadow(this, 'entries', {
	        Title: isString,
	        Author: isString,
	        Subject: isString,
	        Keywords: isString,
	        Creator: isString,
	        Producer: isString,
	        CreationDate: isString,
	        ModDate: isString,
	        Trapped: isName
	      });
	    }
	  };
	  PDFDocument.prototype = {
	    parse: function PDFDocument_parse(recoveryMode) {
	      this.setup(recoveryMode);
	      var version = this.catalog.catDict.get('Version');
	      if (isName(version)) {
	        this.pdfFormatVersion = version.name;
	      }
	      try {
	        this.acroForm = this.catalog.catDict.get('AcroForm');
	        if (this.acroForm) {
	          this.xfa = this.acroForm.get('XFA');
	          var fields = this.acroForm.get('Fields');
	          if ((!fields || !isArray(fields) || fields.length === 0) && !this.xfa) {
	            this.acroForm = null;
	          }
	        }
	      } catch (ex) {
	        if (ex instanceof MissingDataException) {
	          throw ex;
	        }
	        info('Something wrong with AcroForm entry');
	        this.acroForm = null;
	      }
	    },
	    get linearization() {
	      var linearization = null;
	      if (this.stream.length) {
	        try {
	          linearization = Linearization.create(this.stream);
	        } catch (err) {
	          if (err instanceof MissingDataException) {
	            throw err;
	          }
	          info(err);
	        }
	      }
	      return shadow(this, 'linearization', linearization);
	    },
	    get startXRef() {
	      var stream = this.stream;
	      var startXRef = 0;
	      var linearization = this.linearization;
	      if (linearization) {
	        stream.reset();
	        if (find(stream, 'endobj', 1024)) {
	          startXRef = stream.pos + 6;
	        }
	      } else {
	        var step = 1024;
	        var found = false,
	            pos = stream.end;
	        while (!found && pos > 0) {
	          pos -= step - 'startxref'.length;
	          if (pos < 0) {
	            pos = 0;
	          }
	          stream.pos = pos;
	          found = find(stream, 'startxref', step, true);
	        }
	        if (found) {
	          stream.skip(9);
	          var ch;
	          do {
	            ch = stream.getByte();
	          } while (isSpace(ch));
	          var str = '';
	          while (ch >= 0x20 && ch <= 0x39) {
	            str += String.fromCharCode(ch);
	            ch = stream.getByte();
	          }
	          startXRef = parseInt(str, 10);
	          if (isNaN(startXRef)) {
	            startXRef = 0;
	          }
	        }
	      }
	      return shadow(this, 'startXRef', startXRef);
	    },
	    get mainXRefEntriesOffset() {
	      var mainXRefEntriesOffset = 0;
	      var linearization = this.linearization;
	      if (linearization) {
	        mainXRefEntriesOffset = linearization.mainXRefEntriesOffset;
	      }
	      return shadow(this, 'mainXRefEntriesOffset', mainXRefEntriesOffset);
	    },
	    checkHeader: function PDFDocument_checkHeader() {
	      var stream = this.stream;
	      stream.reset();
	      if (find(stream, '%PDF-', 1024)) {
	        stream.moveStart();
	        var MAX_VERSION_LENGTH = 12;
	        var version = '',
	            ch;
	        while ((ch = stream.getByte()) > 0x20) {
	          if (version.length >= MAX_VERSION_LENGTH) {
	            break;
	          }
	          version += String.fromCharCode(ch);
	        }
	        if (!this.pdfFormatVersion) {
	          this.pdfFormatVersion = version.substring(5);
	        }
	        return;
	      }
	    },
	    parseStartXRef: function PDFDocument_parseStartXRef() {
	      var startXRef = this.startXRef;
	      this.xref.setStartXRef(startXRef);
	    },
	    setup: function PDFDocument_setup(recoveryMode) {
	      var _this4 = this;

	      this.xref.parse(recoveryMode);
	      var pageFactory = {
	        createPage: function createPage(pageIndex, dict, ref, fontCache, builtInCMapCache) {
	          return new Page(_this4.pdfManager, _this4.xref, pageIndex, dict, ref, fontCache, builtInCMapCache);
	        }
	      };
	      this.catalog = new Catalog(this.pdfManager, this.xref, pageFactory);
	    },
	    get numPages() {
	      var linearization = this.linearization;
	      var num = linearization ? linearization.numPages : this.catalog.numPages;
	      return shadow(this, 'numPages', num);
	    },
	    get documentInfo() {
	      var docInfo = {
	        PDFFormatVersion: this.pdfFormatVersion,
	        IsAcroFormPresent: !!this.acroForm,
	        IsXFAPresent: !!this.xfa
	      };
	      var infoDict;
	      try {
	        infoDict = this.xref.trailer.get('Info');
	      } catch (err) {
	        if (err instanceof MissingDataException) {
	          throw err;
	        }
	        info('The document information dictionary is invalid.');
	      }
	      if (infoDict) {
	        var validEntries = DocumentInfoValidators.entries;
	        for (var key in validEntries) {
	          if (infoDict.has(key)) {
	            var value = infoDict.get(key);
	            if (validEntries[key](value)) {
	              docInfo[key] = typeof value !== 'string' ? value : stringToPDFString(value);
	            } else {
	              info('Bad value in document info for "' + key + '"');
	            }
	          }
	        }
	      }
	      return shadow(this, 'documentInfo', docInfo);
	    },
	    get fingerprint() {
	      var xref = this.xref,
	          hash,
	          fileID = '';
	      var idArray = xref.trailer.get('ID');
	      if (idArray && isArray(idArray) && idArray[0] && isString(idArray[0]) && idArray[0] !== EMPTY_FINGERPRINT) {
	        hash = stringToBytes(idArray[0]);
	      } else {
	        if (this.stream.ensureRange) {
	          this.stream.ensureRange(0, Math.min(FINGERPRINT_FIRST_BYTES, this.stream.end));
	        }
	        hash = calculateMD5(this.stream.bytes.subarray(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);
	      }
	      for (var i = 0, n = hash.length; i < n; i++) {
	        var hex = hash[i].toString(16);
	        fileID += hex.length === 1 ? '0' + hex : hex;
	      }
	      return shadow(this, 'fingerprint', fileID);
	    },
	    getPage: function PDFDocument_getPage(pageIndex) {
	      return this.catalog.getPage(pageIndex);
	    },
	    cleanup: function PDFDocument_cleanup() {
	      return this.catalog.cleanup();
	    }
	  };
	  return PDFDocument;
	}();
	exports.Page = Page;
	exports.PDFDocument = PDFDocument;

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreStream = __w_pdfjs_require__(2);
	var coreGlyphList = __w_pdfjs_require__(7);
	var coreEncodings = __w_pdfjs_require__(4);
	var coreCFFParser = __w_pdfjs_require__(11);
	var Util = sharedUtil.Util;
	var bytesToString = sharedUtil.bytesToString;
	var error = sharedUtil.error;
	var Stream = coreStream.Stream;
	var getGlyphsUnicode = coreGlyphList.getGlyphsUnicode;
	var StandardEncoding = coreEncodings.StandardEncoding;
	var CFFParser = coreCFFParser.CFFParser;
	var FontRendererFactory = function FontRendererFactoryClosure() {
	  function getLong(data, offset) {
	    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
	  }
	  function getUshort(data, offset) {
	    return data[offset] << 8 | data[offset + 1];
	  }
	  function parseCmap(data, start, end) {
	    var offset = getUshort(data, start + 2) === 1 ? getLong(data, start + 8) : getLong(data, start + 16);
	    var format = getUshort(data, start + offset);
	    var ranges, p, i;
	    if (format === 4) {
	      getUshort(data, start + offset + 2);
	      var segCount = getUshort(data, start + offset + 6) >> 1;
	      p = start + offset + 14;
	      ranges = [];
	      for (i = 0; i < segCount; i++, p += 2) {
	        ranges[i] = { end: getUshort(data, p) };
	      }
	      p += 2;
	      for (i = 0; i < segCount; i++, p += 2) {
	        ranges[i].start = getUshort(data, p);
	      }
	      for (i = 0; i < segCount; i++, p += 2) {
	        ranges[i].idDelta = getUshort(data, p);
	      }
	      for (i = 0; i < segCount; i++, p += 2) {
	        var idOffset = getUshort(data, p);
	        if (idOffset === 0) {
	          continue;
	        }
	        ranges[i].ids = [];
	        for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {
	          ranges[i].ids[j] = getUshort(data, p + idOffset);
	          idOffset += 2;
	        }
	      }
	      return ranges;
	    } else if (format === 12) {
	      getLong(data, start + offset + 4);
	      var groups = getLong(data, start + offset + 12);
	      p = start + offset + 16;
	      ranges = [];
	      for (i = 0; i < groups; i++) {
	        ranges.push({
	          start: getLong(data, p),
	          end: getLong(data, p + 4),
	          idDelta: getLong(data, p + 8) - getLong(data, p)
	        });
	        p += 12;
	      }
	      return ranges;
	    }
	    error('not supported cmap: ' + format);
	  }
	  function parseCff(data, start, end, seacAnalysisEnabled) {
	    var properties = {};
	    var parser = new CFFParser(new Stream(data, start, end - start), properties, seacAnalysisEnabled);
	    var cff = parser.parse();
	    return {
	      glyphs: cff.charStrings.objects,
	      subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,
	      gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects
	    };
	  }
	  function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {
	    var itemSize, itemDecode;
	    if (isGlyphLocationsLong) {
	      itemSize = 4;
	      itemDecode = function fontItemDecodeLong(data, offset) {
	        return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
	      };
	    } else {
	      itemSize = 2;
	      itemDecode = function fontItemDecode(data, offset) {
	        return data[offset] << 9 | data[offset + 1] << 1;
	      };
	    }
	    var glyphs = [];
	    var startOffset = itemDecode(loca, 0);
	    for (var j = itemSize; j < loca.length; j += itemSize) {
	      var endOffset = itemDecode(loca, j);
	      glyphs.push(glyf.subarray(startOffset, endOffset));
	      startOffset = endOffset;
	    }
	    return glyphs;
	  }
	  function lookupCmap(ranges, unicode) {
	    var code = unicode.charCodeAt(0),
	        gid = 0;
	    var l = 0,
	        r = ranges.length - 1;
	    while (l < r) {
	      var c = l + r + 1 >> 1;
	      if (code < ranges[c].start) {
	        r = c - 1;
	      } else {
	        l = c;
	      }
	    }
	    if (ranges[l].start <= code && code <= ranges[l].end) {
	      gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xFFFF;
	    }
	    return {
	      charCode: code,
	      glyphId: gid
	    };
	  }
	  function compileGlyf(code, cmds, font) {
	    function moveTo(x, y) {
	      cmds.push({
	        cmd: 'moveTo',
	        args: [x, y]
	      });
	    }
	    function lineTo(x, y) {
	      cmds.push({
	        cmd: 'lineTo',
	        args: [x, y]
	      });
	    }
	    function quadraticCurveTo(xa, ya, x, y) {
	      cmds.push({
	        cmd: 'quadraticCurveTo',
	        args: [xa, ya, x, y]
	      });
	    }
	    var i = 0;
	    var numberOfContours = (code[i] << 24 | code[i + 1] << 16) >> 16;
	    var flags;
	    var x = 0,
	        y = 0;
	    i += 10;
	    if (numberOfContours < 0) {
	      do {
	        flags = code[i] << 8 | code[i + 1];
	        var glyphIndex = code[i + 2] << 8 | code[i + 3];
	        i += 4;
	        var arg1, arg2;
	        if (flags & 0x01) {
	          arg1 = (code[i] << 24 | code[i + 1] << 16) >> 16;
	          arg2 = (code[i + 2] << 24 | code[i + 3] << 16) >> 16;
	          i += 4;
	        } else {
	          arg1 = code[i++];
	          arg2 = code[i++];
	        }
	        if (flags & 0x02) {
	          x = arg1;
	          y = arg2;
	        } else {
	          x = 0;
	          y = 0;
	        }
	        var scaleX = 1,
	            scaleY = 1,
	            scale01 = 0,
	            scale10 = 0;
	        if (flags & 0x08) {
	          scaleX = scaleY = (code[i] << 24 | code[i + 1] << 16) / 1073741824;
	          i += 2;
	        } else if (flags & 0x40) {
	          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;
	          scaleY = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;
	          i += 4;
	        } else if (flags & 0x80) {
	          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;
	          scale01 = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;
	          scale10 = (code[i + 4] << 24 | code[i + 5] << 16) / 1073741824;
	          scaleY = (code[i + 6] << 24 | code[i + 7] << 16) / 1073741824;
	          i += 8;
	        }
	        var subglyph = font.glyphs[glyphIndex];
	        if (subglyph) {
	          cmds.push({ cmd: 'save' });
	          cmds.push({
	            cmd: 'transform',
	            args: [scaleX, scale01, scale10, scaleY, x, y]
	          });
	          compileGlyf(subglyph, cmds, font);
	          cmds.push({ cmd: 'restore' });
	        }
	      } while (flags & 0x20);
	    } else {
	      var endPtsOfContours = [];
	      var j, jj;
	      for (j = 0; j < numberOfContours; j++) {
	        endPtsOfContours.push(code[i] << 8 | code[i + 1]);
	        i += 2;
	      }
	      var instructionLength = code[i] << 8 | code[i + 1];
	      i += 2 + instructionLength;
	      var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;
	      var points = [];
	      while (points.length < numberOfPoints) {
	        flags = code[i++];
	        var repeat = 1;
	        if (flags & 0x08) {
	          repeat += code[i++];
	        }
	        while (repeat-- > 0) {
	          points.push({ flags: flags });
	        }
	      }
	      for (j = 0; j < numberOfPoints; j++) {
	        switch (points[j].flags & 0x12) {
	          case 0x00:
	            x += (code[i] << 24 | code[i + 1] << 16) >> 16;
	            i += 2;
	            break;
	          case 0x02:
	            x -= code[i++];
	            break;
	          case 0x12:
	            x += code[i++];
	            break;
	        }
	        points[j].x = x;
	      }
	      for (j = 0; j < numberOfPoints; j++) {
	        switch (points[j].flags & 0x24) {
	          case 0x00:
	            y += (code[i] << 24 | code[i + 1] << 16) >> 16;
	            i += 2;
	            break;
	          case 0x04:
	            y -= code[i++];
	            break;
	          case 0x24:
	            y += code[i++];
	            break;
	        }
	        points[j].y = y;
	      }
	      var startPoint = 0;
	      for (i = 0; i < numberOfContours; i++) {
	        var endPoint = endPtsOfContours[i];
	        var contour = points.slice(startPoint, endPoint + 1);
	        if (contour[0].flags & 1) {
	          contour.push(contour[0]);
	        } else if (contour[contour.length - 1].flags & 1) {
	          contour.unshift(contour[contour.length - 1]);
	        } else {
	          var p = {
	            flags: 1,
	            x: (contour[0].x + contour[contour.length - 1].x) / 2,
	            y: (contour[0].y + contour[contour.length - 1].y) / 2
	          };
	          contour.unshift(p);
	          contour.push(p);
	        }
	        moveTo(contour[0].x, contour[0].y);
	        for (j = 1, jj = contour.length; j < jj; j++) {
	          if (contour[j].flags & 1) {
	            lineTo(contour[j].x, contour[j].y);
	          } else if (contour[j + 1].flags & 1) {
	            quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);
	            j++;
	          } else {
	            quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);
	          }
	        }
	        startPoint = endPoint + 1;
	      }
	    }
	  }
	  function compileCharString(code, cmds, font) {
	    var stack = [];
	    var x = 0,
	        y = 0;
	    var stems = 0;
	    function moveTo(x, y) {
	      cmds.push({
	        cmd: 'moveTo',
	        args: [x, y]
	      });
	    }
	    function lineTo(x, y) {
	      cmds.push({
	        cmd: 'lineTo',
	        args: [x, y]
	      });
	    }
	    function bezierCurveTo(x1, y1, x2, y2, x, y) {
	      cmds.push({
	        cmd: 'bezierCurveTo',
	        args: [x1, y1, x2, y2, x, y]
	      });
	    }
	    function parse(code) {
	      var i = 0;
	      while (i < code.length) {
	        var stackClean = false;
	        var v = code[i++];
	        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;
	        switch (v) {
	          case 1:
	            stems += stack.length >> 1;
	            stackClean = true;
	            break;
	          case 3:
	            stems += stack.length >> 1;
	            stackClean = true;
	            break;
	          case 4:
	            y += stack.pop();
	            moveTo(x, y);
	            stackClean = true;
	            break;
	          case 5:
	            while (stack.length > 0) {
	              x += stack.shift();
	              y += stack.shift();
	              lineTo(x, y);
	            }
	            break;
	          case 6:
	            while (stack.length > 0) {
	              x += stack.shift();
	              lineTo(x, y);
	              if (stack.length === 0) {
	                break;
	              }
	              y += stack.shift();
	              lineTo(x, y);
	            }
	            break;
	          case 7:
	            while (stack.length > 0) {
	              y += stack.shift();
	              lineTo(x, y);
	              if (stack.length === 0) {
	                break;
	              }
	              x += stack.shift();
	              lineTo(x, y);
	            }
	            break;
	          case 8:
	            while (stack.length > 0) {
	              xa = x + stack.shift();
	              ya = y + stack.shift();
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              x = xb + stack.shift();
	              y = yb + stack.shift();
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	            }
	            break;
	          case 10:
	            n = stack.pop() + font.subrsBias;
	            subrCode = font.subrs[n];
	            if (subrCode) {
	              parse(subrCode);
	            }
	            break;
	          case 11:
	            return;
	          case 12:
	            v = code[i++];
	            switch (v) {
	              case 34:
	                xa = x + stack.shift();
	                xb = xa + stack.shift();
	                y1 = y + stack.shift();
	                x = xb + stack.shift();
	                bezierCurveTo(xa, y, xb, y1, x, y1);
	                xa = x + stack.shift();
	                xb = xa + stack.shift();
	                x = xb + stack.shift();
	                bezierCurveTo(xa, y1, xb, y, x, y);
	                break;
	              case 35:
	                xa = x + stack.shift();
	                ya = y + stack.shift();
	                xb = xa + stack.shift();
	                yb = ya + stack.shift();
	                x = xb + stack.shift();
	                y = yb + stack.shift();
	                bezierCurveTo(xa, ya, xb, yb, x, y);
	                xa = x + stack.shift();
	                ya = y + stack.shift();
	                xb = xa + stack.shift();
	                yb = ya + stack.shift();
	                x = xb + stack.shift();
	                y = yb + stack.shift();
	                bezierCurveTo(xa, ya, xb, yb, x, y);
	                stack.pop();
	                break;
	              case 36:
	                xa = x + stack.shift();
	                y1 = y + stack.shift();
	                xb = xa + stack.shift();
	                y2 = y1 + stack.shift();
	                x = xb + stack.shift();
	                bezierCurveTo(xa, y1, xb, y2, x, y2);
	                xa = x + stack.shift();
	                xb = xa + stack.shift();
	                y3 = y2 + stack.shift();
	                x = xb + stack.shift();
	                bezierCurveTo(xa, y2, xb, y3, x, y);
	                break;
	              case 37:
	                var x0 = x,
	                    y0 = y;
	                xa = x + stack.shift();
	                ya = y + stack.shift();
	                xb = xa + stack.shift();
	                yb = ya + stack.shift();
	                x = xb + stack.shift();
	                y = yb + stack.shift();
	                bezierCurveTo(xa, ya, xb, yb, x, y);
	                xa = x + stack.shift();
	                ya = y + stack.shift();
	                xb = xa + stack.shift();
	                yb = ya + stack.shift();
	                x = xb;
	                y = yb;
	                if (Math.abs(x - x0) > Math.abs(y - y0)) {
	                  x += stack.shift();
	                } else {
	                  y += stack.shift();
	                }
	                bezierCurveTo(xa, ya, xb, yb, x, y);
	                break;
	              default:
	                error('unknown operator: 12 ' + v);
	            }
	            break;
	          case 14:
	            if (stack.length >= 4) {
	              var achar = stack.pop();
	              var bchar = stack.pop();
	              y = stack.pop();
	              x = stack.pop();
	              cmds.push({ cmd: 'save' });
	              cmds.push({
	                cmd: 'translate',
	                args: [x, y]
	              });
	              var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[StandardEncoding[achar]]));
	              compileCharString(font.glyphs[cmap.glyphId], cmds, font);
	              cmds.push({ cmd: 'restore' });
	              cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[StandardEncoding[bchar]]));
	              compileCharString(font.glyphs[cmap.glyphId], cmds, font);
	            }
	            return;
	          case 18:
	            stems += stack.length >> 1;
	            stackClean = true;
	            break;
	          case 19:
	            stems += stack.length >> 1;
	            i += stems + 7 >> 3;
	            stackClean = true;
	            break;
	          case 20:
	            stems += stack.length >> 1;
	            i += stems + 7 >> 3;
	            stackClean = true;
	            break;
	          case 21:
	            y += stack.pop();
	            x += stack.pop();
	            moveTo(x, y);
	            stackClean = true;
	            break;
	          case 22:
	            x += stack.pop();
	            moveTo(x, y);
	            stackClean = true;
	            break;
	          case 23:
	            stems += stack.length >> 1;
	            stackClean = true;
	            break;
	          case 24:
	            while (stack.length > 2) {
	              xa = x + stack.shift();
	              ya = y + stack.shift();
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              x = xb + stack.shift();
	              y = yb + stack.shift();
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	            }
	            x += stack.shift();
	            y += stack.shift();
	            lineTo(x, y);
	            break;
	          case 25:
	            while (stack.length > 6) {
	              x += stack.shift();
	              y += stack.shift();
	              lineTo(x, y);
	            }
	            xa = x + stack.shift();
	            ya = y + stack.shift();
	            xb = xa + stack.shift();
	            yb = ya + stack.shift();
	            x = xb + stack.shift();
	            y = yb + stack.shift();
	            bezierCurveTo(xa, ya, xb, yb, x, y);
	            break;
	          case 26:
	            if (stack.length % 2) {
	              x += stack.shift();
	            }
	            while (stack.length > 0) {
	              xa = x;
	              ya = y + stack.shift();
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              x = xb;
	              y = yb + stack.shift();
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	            }
	            break;
	          case 27:
	            if (stack.length % 2) {
	              y += stack.shift();
	            }
	            while (stack.length > 0) {
	              xa = x + stack.shift();
	              ya = y;
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              x = xb + stack.shift();
	              y = yb;
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	            }
	            break;
	          case 28:
	            stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);
	            i += 2;
	            break;
	          case 29:
	            n = stack.pop() + font.gsubrsBias;
	            subrCode = font.gsubrs[n];
	            if (subrCode) {
	              parse(subrCode);
	            }
	            break;
	          case 30:
	            while (stack.length > 0) {
	              xa = x;
	              ya = y + stack.shift();
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              x = xb + stack.shift();
	              y = yb + (stack.length === 1 ? stack.shift() : 0);
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	              if (stack.length === 0) {
	                break;
	              }
	              xa = x + stack.shift();
	              ya = y;
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              y = yb + stack.shift();
	              x = xb + (stack.length === 1 ? stack.shift() : 0);
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	            }
	            break;
	          case 31:
	            while (stack.length > 0) {
	              xa = x + stack.shift();
	              ya = y;
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              y = yb + stack.shift();
	              x = xb + (stack.length === 1 ? stack.shift() : 0);
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	              if (stack.length === 0) {
	                break;
	              }
	              xa = x;
	              ya = y + stack.shift();
	              xb = xa + stack.shift();
	              yb = ya + stack.shift();
	              x = xb + stack.shift();
	              y = yb + (stack.length === 1 ? stack.shift() : 0);
	              bezierCurveTo(xa, ya, xb, yb, x, y);
	            }
	            break;
	          default:
	            if (v < 32) {
	              error('unknown operator: ' + v);
	            }
	            if (v < 247) {
	              stack.push(v - 139);
	            } else if (v < 251) {
	              stack.push((v - 247) * 256 + code[i++] + 108);
	            } else if (v < 255) {
	              stack.push(-(v - 251) * 256 - code[i++] - 108);
	            } else {
	              stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);
	              i += 4;
	            }
	            break;
	        }
	        if (stackClean) {
	          stack.length = 0;
	        }
	      }
	    }
	    parse(code);
	  }
	  var noop = '';
	  function CompiledFont(fontMatrix) {
	    this.compiledGlyphs = Object.create(null);
	    this.compiledCharCodeToGlyphId = Object.create(null);
	    this.fontMatrix = fontMatrix;
	  }
	  CompiledFont.prototype = {
	    getPathJs: function getPathJs(unicode) {
	      var cmap = lookupCmap(this.cmap, unicode);
	      var fn = this.compiledGlyphs[cmap.glyphId];
	      if (!fn) {
	        fn = this.compileGlyph(this.glyphs[cmap.glyphId]);
	        this.compiledGlyphs[cmap.glyphId] = fn;
	      }
	      if (this.compiledCharCodeToGlyphId[cmap.charCode] === undefined) {
	        this.compiledCharCodeToGlyphId[cmap.charCode] = cmap.glyphId;
	      }
	      return fn;
	    },
	    compileGlyph: function compileGlyph(code) {
	      if (!code || code.length === 0 || code[0] === 14) {
	        return noop;
	      }
	      var cmds = [];
	      cmds.push({ cmd: 'save' });
	      cmds.push({
	        cmd: 'transform',
	        args: this.fontMatrix.slice()
	      });
	      cmds.push({
	        cmd: 'scale',
	        args: ['size', '-size']
	      });
	      this.compileGlyphImpl(code, cmds);
	      cmds.push({ cmd: 'restore' });
	      return cmds;
	    },
	    compileGlyphImpl: function compileGlyphImpl() {
	      error('Children classes should implement this.');
	    },
	    hasBuiltPath: function hasBuiltPath(unicode) {
	      var cmap = lookupCmap(this.cmap, unicode);
	      return this.compiledGlyphs[cmap.glyphId] !== undefined && this.compiledCharCodeToGlyphId[cmap.charCode] !== undefined;
	    }
	  };
	  function TrueTypeCompiled(glyphs, cmap, fontMatrix) {
	    fontMatrix = fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0];
	    CompiledFont.call(this, fontMatrix);
	    this.glyphs = glyphs;
	    this.cmap = cmap;
	  }
	  Util.inherit(TrueTypeCompiled, CompiledFont, {
	    compileGlyphImpl: function compileGlyphImpl(code, cmds) {
	      compileGlyf(code, cmds, this);
	    }
	  });
	  function Type2Compiled(cffInfo, cmap, fontMatrix, glyphNameMap) {
	    fontMatrix = fontMatrix || [0.001, 0, 0, 0.001, 0, 0];
	    CompiledFont.call(this, fontMatrix);
	    this.glyphs = cffInfo.glyphs;
	    this.gsubrs = cffInfo.gsubrs || [];
	    this.subrs = cffInfo.subrs || [];
	    this.cmap = cmap;
	    this.glyphNameMap = glyphNameMap || getGlyphsUnicode();
	    this.gsubrsBias = this.gsubrs.length < 1240 ? 107 : this.gsubrs.length < 33900 ? 1131 : 32768;
	    this.subrsBias = this.subrs.length < 1240 ? 107 : this.subrs.length < 33900 ? 1131 : 32768;
	  }
	  Util.inherit(Type2Compiled, CompiledFont, {
	    compileGlyphImpl: function compileGlyphImpl(code, cmds) {
	      compileCharString(code, cmds, this);
	    }
	  });
	  return {
	    create: function FontRendererFactory_create(font, seacAnalysisEnabled) {
	      var data = new Uint8Array(font.data);
	      var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;
	      var numTables = getUshort(data, 4);
	      for (var i = 0, p = 12; i < numTables; i++, p += 16) {
	        var tag = bytesToString(data.subarray(p, p + 4));
	        var offset = getLong(data, p + 8);
	        var length = getLong(data, p + 12);
	        switch (tag) {
	          case 'cmap':
	            cmap = parseCmap(data, offset, offset + length);
	            break;
	          case 'glyf':
	            glyf = data.subarray(offset, offset + length);
	            break;
	          case 'loca':
	            loca = data.subarray(offset, offset + length);
	            break;
	          case 'head':
	            unitsPerEm = getUshort(data, offset + 18);
	            indexToLocFormat = getUshort(data, offset + 50);
	            break;
	          case 'CFF ':
	            cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);
	            break;
	        }
	      }
	      if (glyf) {
	        var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];
	        return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);
	      }
	      return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);
	    }
	  };
	}();
	exports.FontRendererFactory = FontRendererFactory;

	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreStream = __w_pdfjs_require__(2);
	var coreGlyphList = __w_pdfjs_require__(7);
	var coreFontRenderer = __w_pdfjs_require__(25);
	var coreEncodings = __w_pdfjs_require__(4);
	var coreStandardFonts = __w_pdfjs_require__(17);
	var coreUnicode = __w_pdfjs_require__(18);
	var coreType1Parser = __w_pdfjs_require__(35);
	var coreCFFParser = __w_pdfjs_require__(11);
	var FONT_IDENTITY_MATRIX = sharedUtil.FONT_IDENTITY_MATRIX;
	var FontType = sharedUtil.FontType;
	var assert = sharedUtil.assert;
	var bytesToString = sharedUtil.bytesToString;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var isInt = sharedUtil.isInt;
	var isNum = sharedUtil.isNum;
	var readUint32 = sharedUtil.readUint32;
	var shadow = sharedUtil.shadow;
	var string32 = sharedUtil.string32;
	var warn = sharedUtil.warn;
	var MissingDataException = sharedUtil.MissingDataException;
	var isSpace = sharedUtil.isSpace;
	var Stream = coreStream.Stream;
	var getGlyphsUnicode = coreGlyphList.getGlyphsUnicode;
	var getDingbatsGlyphsUnicode = coreGlyphList.getDingbatsGlyphsUnicode;
	var FontRendererFactory = coreFontRenderer.FontRendererFactory;
	var StandardEncoding = coreEncodings.StandardEncoding;
	var MacRomanEncoding = coreEncodings.MacRomanEncoding;
	var SymbolSetEncoding = coreEncodings.SymbolSetEncoding;
	var ZapfDingbatsEncoding = coreEncodings.ZapfDingbatsEncoding;
	var getEncoding = coreEncodings.getEncoding;
	var getStdFontMap = coreStandardFonts.getStdFontMap;
	var getNonStdFontMap = coreStandardFonts.getNonStdFontMap;
	var getGlyphMapForStandardFonts = coreStandardFonts.getGlyphMapForStandardFonts;
	var getSupplementalGlyphMapForArialBlack = coreStandardFonts.getSupplementalGlyphMapForArialBlack;
	var getUnicodeRangeFor = coreUnicode.getUnicodeRangeFor;
	var mapSpecialUnicodeValues = coreUnicode.mapSpecialUnicodeValues;
	var getUnicodeForGlyph = coreUnicode.getUnicodeForGlyph;
	var Type1Parser = coreType1Parser.Type1Parser;
	var CFFStandardStrings = coreCFFParser.CFFStandardStrings;
	var CFFParser = coreCFFParser.CFFParser;
	var CFFCompiler = coreCFFParser.CFFCompiler;
	var CFF = coreCFFParser.CFF;
	var CFFHeader = coreCFFParser.CFFHeader;
	var CFFTopDict = coreCFFParser.CFFTopDict;
	var CFFPrivateDict = coreCFFParser.CFFPrivateDict;
	var CFFStrings = coreCFFParser.CFFStrings;
	var CFFIndex = coreCFFParser.CFFIndex;
	var CFFCharset = coreCFFParser.CFFCharset;
	var PRIVATE_USE_OFFSET_START = 0xE000;
	var PRIVATE_USE_OFFSET_END = 0xF8FF;
	var SKIP_PRIVATE_USE_RANGE_F000_TO_F01F = false;
	var PDF_GLYPH_SPACE_UNITS = 1000;
	var SEAC_ANALYSIS_ENABLED = false;
	var FontFlags = {
	  FixedPitch: 1,
	  Serif: 2,
	  Symbolic: 4,
	  Script: 8,
	  Nonsymbolic: 32,
	  Italic: 64,
	  AllCap: 65536,
	  SmallCap: 131072,
	  ForceBold: 262144
	};
	var MacStandardGlyphOrdering = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];
	function adjustWidths(properties) {
	  if (!properties.fontMatrix) {
	    return;
	  }
	  if (properties.fontMatrix[0] === FONT_IDENTITY_MATRIX[0]) {
	    return;
	  }
	  var scale = 0.001 / properties.fontMatrix[0];
	  var glyphsWidths = properties.widths;
	  for (var glyph in glyphsWidths) {
	    glyphsWidths[glyph] *= scale;
	  }
	  properties.defaultWidth *= scale;
	}
	function adjustToUnicode(properties, builtInEncoding) {
	  if (properties.hasIncludedToUnicodeMap) {
	    return;
	  }
	  if (properties.hasEncoding) {
	    return;
	  }
	  if (builtInEncoding === properties.defaultEncoding) {
	    return;
	  }
	  if (properties.toUnicode instanceof IdentityToUnicodeMap) {
	    return;
	  }
	  var toUnicode = [],
	      glyphsUnicodeMap = getGlyphsUnicode();
	  for (var charCode in builtInEncoding) {
	    var glyphName = builtInEncoding[charCode];
	    var unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
	    if (unicode !== -1) {
	      toUnicode[charCode] = String.fromCharCode(unicode);
	    }
	  }
	  properties.toUnicode.amend(toUnicode);
	}
	function getFontType(type, subtype) {
	  switch (type) {
	    case 'Type1':
	      return subtype === 'Type1C' ? FontType.TYPE1C : FontType.TYPE1;
	    case 'CIDFontType0':
	      return subtype === 'CIDFontType0C' ? FontType.CIDFONTTYPE0C : FontType.CIDFONTTYPE0;
	    case 'OpenType':
	      return FontType.OPENTYPE;
	    case 'TrueType':
	      return FontType.TRUETYPE;
	    case 'CIDFontType2':
	      return FontType.CIDFONTTYPE2;
	    case 'MMType1':
	      return FontType.MMTYPE1;
	    case 'Type0':
	      return FontType.TYPE0;
	    default:
	      return FontType.UNKNOWN;
	  }
	}
	function recoverGlyphName(name, glyphsUnicodeMap) {
	  if (glyphsUnicodeMap[name] !== undefined) {
	    return name;
	  }
	  var unicode = getUnicodeForGlyph(name, glyphsUnicodeMap);
	  if (unicode !== -1) {
	    for (var key in glyphsUnicodeMap) {
	      if (glyphsUnicodeMap[key] === unicode) {
	        return key;
	      }
	    }
	  }
	  info('Unable to recover a standard glyph name for: ' + name);
	  return name;
	}
	var Glyph = function GlyphClosure() {
	  function Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {
	    this.fontChar = fontChar;
	    this.unicode = unicode;
	    this.accent = accent;
	    this.width = width;
	    this.vmetric = vmetric;
	    this.operatorListId = operatorListId;
	    this.isSpace = isSpace;
	    this.isInFont = isInFont;
	  }
	  Glyph.prototype.matchesForCache = function (fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {
	    return this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;
	  };
	  return Glyph;
	}();
	var ToUnicodeMap = function ToUnicodeMapClosure() {
	  function ToUnicodeMap(cmap) {
	    this._map = cmap;
	  }
	  ToUnicodeMap.prototype = {
	    get length() {
	      return this._map.length;
	    },
	    forEach: function forEach(callback) {
	      for (var charCode in this._map) {
	        callback(charCode, this._map[charCode].charCodeAt(0));
	      }
	    },
	    has: function has(i) {
	      return this._map[i] !== undefined;
	    },
	    get: function get(i) {
	      return this._map[i];
	    },
	    charCodeOf: function charCodeOf(v) {
	      return this._map.indexOf(v);
	    },
	    amend: function amend(map) {
	      for (var charCode in map) {
	        this._map[charCode] = map[charCode];
	      }
	    }
	  };
	  return ToUnicodeMap;
	}();
	var IdentityToUnicodeMap = function IdentityToUnicodeMapClosure() {
	  function IdentityToUnicodeMap(firstChar, lastChar) {
	    this.firstChar = firstChar;
	    this.lastChar = lastChar;
	  }
	  IdentityToUnicodeMap.prototype = {
	    get length() {
	      return this.lastChar + 1 - this.firstChar;
	    },
	    forEach: function forEach(callback) {
	      for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {
	        callback(i, i);
	      }
	    },
	    has: function has(i) {
	      return this.firstChar <= i && i <= this.lastChar;
	    },
	    get: function get(i) {
	      if (this.firstChar <= i && i <= this.lastChar) {
	        return String.fromCharCode(i);
	      }
	      return undefined;
	    },
	    charCodeOf: function charCodeOf(v) {
	      return isInt(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;
	    },
	    amend: function amend(map) {
	      error('Should not call amend()');
	    }
	  };
	  return IdentityToUnicodeMap;
	}();
	var OpenTypeFileBuilder = function OpenTypeFileBuilderClosure() {
	  function writeInt16(dest, offset, num) {
	    dest[offset] = num >> 8 & 0xFF;
	    dest[offset + 1] = num & 0xFF;
	  }
	  function writeInt32(dest, offset, num) {
	    dest[offset] = num >> 24 & 0xFF;
	    dest[offset + 1] = num >> 16 & 0xFF;
	    dest[offset + 2] = num >> 8 & 0xFF;
	    dest[offset + 3] = num & 0xFF;
	  }
	  function writeData(dest, offset, data) {
	    var i, ii;
	    if (data instanceof Uint8Array) {
	      dest.set(data, offset);
	    } else if (typeof data === 'string') {
	      for (i = 0, ii = data.length; i < ii; i++) {
	        dest[offset++] = data.charCodeAt(i) & 0xFF;
	      }
	    } else {
	      for (i = 0, ii = data.length; i < ii; i++) {
	        dest[offset++] = data[i] & 0xFF;
	      }
	    }
	  }
	  function OpenTypeFileBuilder(sfnt) {
	    this.sfnt = sfnt;
	    this.tables = Object.create(null);
	  }
	  OpenTypeFileBuilder.getSearchParams = function OpenTypeFileBuilder_getSearchParams(entriesCount, entrySize) {
	    var maxPower2 = 1,
	        log2 = 0;
	    while ((maxPower2 ^ entriesCount) > maxPower2) {
	      maxPower2 <<= 1;
	      log2++;
	    }
	    var searchRange = maxPower2 * entrySize;
	    return {
	      range: searchRange,
	      entry: log2,
	      rangeShift: entrySize * entriesCount - searchRange
	    };
	  };
	  var OTF_HEADER_SIZE = 12;
	  var OTF_TABLE_ENTRY_SIZE = 16;
	  OpenTypeFileBuilder.prototype = {
	    toArray: function OpenTypeFileBuilder_toArray() {
	      var sfnt = this.sfnt;
	      var tables = this.tables;
	      var tablesNames = Object.keys(tables);
	      tablesNames.sort();
	      var numTables = tablesNames.length;
	      var i, j, jj, table, tableName;
	      var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;
	      var tableOffsets = [offset];
	      for (i = 0; i < numTables; i++) {
	        table = tables[tablesNames[i]];
	        var paddedLength = (table.length + 3 & ~3) >>> 0;
	        offset += paddedLength;
	        tableOffsets.push(offset);
	      }
	      var file = new Uint8Array(offset);
	      for (i = 0; i < numTables; i++) {
	        table = tables[tablesNames[i]];
	        writeData(file, tableOffsets[i], table);
	      }
	      if (sfnt === 'true') {
	        sfnt = string32(0x00010000);
	      }
	      file[0] = sfnt.charCodeAt(0) & 0xFF;
	      file[1] = sfnt.charCodeAt(1) & 0xFF;
	      file[2] = sfnt.charCodeAt(2) & 0xFF;
	      file[3] = sfnt.charCodeAt(3) & 0xFF;
	      writeInt16(file, 4, numTables);
	      var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);
	      writeInt16(file, 6, searchParams.range);
	      writeInt16(file, 8, searchParams.entry);
	      writeInt16(file, 10, searchParams.rangeShift);
	      offset = OTF_HEADER_SIZE;
	      for (i = 0; i < numTables; i++) {
	        tableName = tablesNames[i];
	        file[offset] = tableName.charCodeAt(0) & 0xFF;
	        file[offset + 1] = tableName.charCodeAt(1) & 0xFF;
	        file[offset + 2] = tableName.charCodeAt(2) & 0xFF;
	        file[offset + 3] = tableName.charCodeAt(3) & 0xFF;
	        var checksum = 0;
	        for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {
	          var quad = readUint32(file, j);
	          checksum = checksum + quad >>> 0;
	        }
	        writeInt32(file, offset + 4, checksum);
	        writeInt32(file, offset + 8, tableOffsets[i]);
	        writeInt32(file, offset + 12, tables[tableName].length);
	        offset += OTF_TABLE_ENTRY_SIZE;
	      }
	      return file;
	    },
	    addTable: function OpenTypeFileBuilder_addTable(tag, data) {
	      if (tag in this.tables) {
	        throw new Error('Table ' + tag + ' already exists');
	      }
	      this.tables[tag] = data;
	    }
	  };
	  return OpenTypeFileBuilder;
	}();
	var ProblematicCharRanges = new Int32Array([0x0000, 0x0020, 0x007F, 0x00A1, 0x00AD, 0x00AE, 0x0600, 0x0780, 0x08A0, 0x10A0, 0x1780, 0x1800, 0x1C00, 0x1C50, 0x2000, 0x2010, 0x2011, 0x2012, 0x2028, 0x2030, 0x205F, 0x2070, 0x25CC, 0x25CD, 0x3000, 0x3001, 0xAA60, 0xAA80, 0xFFF0, 0x10000]);
	var Font = function FontClosure() {
	  function Font(name, file, properties) {
	    var _this = this;

	    var charCode, glyphName, unicode;
	    this.name = name;
	    this.loadedName = properties.loadedName;
	    this.isType3Font = properties.isType3Font;
	    this.sizes = [];
	    this.missingFile = false;
	    this.glyphCache = Object.create(null);
	    this.isSerifFont = !!(properties.flags & FontFlags.Serif);
	    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
	    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);
	    var type = properties.type;
	    var subtype = properties.subtype;
	    this.type = type;
	    this.fallbackName = this.isMonospace ? 'monospace' : this.isSerifFont ? 'serif' : 'sans-serif';
	    this.differences = properties.differences;
	    this.widths = properties.widths;
	    this.defaultWidth = properties.defaultWidth;
	    this.composite = properties.composite;
	    this.wideChars = properties.wideChars;
	    this.cMap = properties.cMap;
	    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;
	    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;
	    this.fontMatrix = properties.fontMatrix;
	    this.bbox = properties.bbox;
	    this.toUnicode = properties.toUnicode;
	    this.toFontChar = [];
	    if (properties.type === 'Type3') {
	      for (charCode = 0; charCode < 256; charCode++) {
	        this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];
	      }
	      this.fontType = FontType.TYPE3;
	      return;
	    }
	    this.cidEncoding = properties.cidEncoding;
	    this.vertical = properties.vertical;
	    if (this.vertical) {
	      this.vmetrics = properties.vmetrics;
	      this.defaultVMetrics = properties.defaultVMetrics;
	    }
	    var glyphsUnicodeMap;
	    if (!file || file.isEmpty) {
	      if (file) {
	        warn('Font file is empty in "' + name + '" (' + this.loadedName + ')');
	      }
	      this.missingFile = true;
	      var fontName = name.replace(/[,_]/g, '-');
	      var stdFontMap = getStdFontMap(),
	          nonStdFontMap = getNonStdFontMap();
	      var isStandardFont = !!stdFontMap[fontName] || !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);
	      fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;
	      this.bold = fontName.search(/bold/gi) !== -1;
	      this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;
	      this.black = name.search(/Black/g) !== -1;
	      this.remeasure = Object.keys(this.widths).length > 0;
	      if (isStandardFont && type === 'CIDFontType2' && properties.cidEncoding.indexOf('Identity-') === 0) {
	        var GlyphMapForStandardFonts = getGlyphMapForStandardFonts();
	        var map = [];
	        for (charCode in GlyphMapForStandardFonts) {
	          map[+charCode] = GlyphMapForStandardFonts[charCode];
	        }
	        if (/Arial-?Black/i.test(name)) {
	          var SupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack();
	          for (charCode in SupplementalGlyphMapForArialBlack) {
	            map[+charCode] = SupplementalGlyphMapForArialBlack[charCode];
	          }
	        }
	        var isIdentityUnicode = this.toUnicode instanceof IdentityToUnicodeMap;
	        if (!isIdentityUnicode) {
	          this.toUnicode.forEach(function (charCode, unicodeCharCode) {
	            map[+charCode] = unicodeCharCode;
	          });
	        }
	        this.toFontChar = map;
	        this.toUnicode = new ToUnicodeMap(map);
	      } else if (/Symbol/i.test(fontName)) {
	        this.toFontChar = buildToFontChar(SymbolSetEncoding, getGlyphsUnicode(), properties.differences);
	      } else if (/Dingbats/i.test(fontName)) {
	        if (/Wingdings/i.test(name)) {
	          warn('Non-embedded Wingdings font, falling back to ZapfDingbats.');
	        }
	        this.toFontChar = buildToFontChar(ZapfDingbatsEncoding, getDingbatsGlyphsUnicode(), properties.differences);
	      } else if (isStandardFont) {
	        this.toFontChar = buildToFontChar(properties.defaultEncoding, getGlyphsUnicode(), properties.differences);
	      } else {
	        glyphsUnicodeMap = getGlyphsUnicode();
	        this.toUnicode.forEach(function (charCode, unicodeCharCode) {
	          if (!_this.composite) {
	            glyphName = properties.differences[charCode] || properties.defaultEncoding[charCode];
	            unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
	            if (unicode !== -1) {
	              unicodeCharCode = unicode;
	            }
	          }
	          _this.toFontChar[charCode] = unicodeCharCode;
	        });
	      }
	      this.loadedName = fontName.split('-')[0];
	      this.loading = false;
	      this.fontType = getFontType(type, subtype);
	      return;
	    }
	    if (subtype === 'Type1C') {
	      if (type !== 'Type1' && type !== 'MMType1') {
	        if (isTrueTypeFile(file)) {
	          subtype = 'TrueType';
	        } else {
	          type = 'Type1';
	        }
	      } else if (isOpenTypeFile(file)) {
	        type = subtype = 'OpenType';
	      }
	    }
	    if (subtype === 'CIDFontType0C' && type !== 'CIDFontType0') {
	      type = 'CIDFontType0';
	    }
	    if (subtype === 'OpenType') {
	      type = 'OpenType';
	    }
	    if (type === 'CIDFontType0') {
	      if (isType1File(file)) {
	        subtype = 'CIDFontType0';
	      } else if (isOpenTypeFile(file)) {
	        type = subtype = 'OpenType';
	      } else {
	        subtype = 'CIDFontType0C';
	      }
	    }
	    var data;
	    switch (type) {
	      case 'MMType1':
	        info('MMType1 font (' + name + '), falling back to Type1.');
	      case 'Type1':
	      case 'CIDFontType0':
	        this.mimetype = 'font/opentype';
	        var cff = subtype === 'Type1C' || subtype === 'CIDFontType0C' ? new CFFFont(file, properties) : new Type1Font(name, file, properties);
	        adjustWidths(properties);
	        data = this.convert(name, cff, properties);
	        break;
	      case 'OpenType':
	      case 'TrueType':
	      case 'CIDFontType2':
	        this.mimetype = 'font/opentype';
	        data = this.checkAndRepair(name, file, properties);
	        if (this.isOpenType) {
	          adjustWidths(properties);
	          type = 'OpenType';
	        }
	        break;
	      default:
	        error('Font ' + type + ' is not supported');
	        break;
	    }
	    this.data = data;
	    this.fontType = getFontType(type, subtype);
	    this.fontMatrix = properties.fontMatrix;
	    this.widths = properties.widths;
	    this.defaultWidth = properties.defaultWidth;
	    this.toUnicode = properties.toUnicode;
	    this.encoding = properties.baseEncoding;
	    this.seacMap = properties.seacMap;
	    this.loading = true;
	  }
	  Font.getFontID = function () {
	    var ID = 1;
	    return function Font_getFontID() {
	      return String(ID++);
	    };
	  }();
	  function int16(b0, b1) {
	    return (b0 << 8) + b1;
	  }
	  function signedInt16(b0, b1) {
	    var value = (b0 << 8) + b1;
	    return value & 1 << 15 ? value - 0x10000 : value;
	  }
	  function int32(b0, b1, b2, b3) {
	    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
	  }
	  function string16(value) {
	    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);
	  }
	  function safeString16(value) {
	    value = value > 0x7FFF ? 0x7FFF : value < -0x8000 ? -0x8000 : value;
	    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);
	  }
	  function isTrueTypeFile(file) {
	    var header = file.peekBytes(4);
	    return readUint32(header, 0) === 0x00010000;
	  }
	  function isOpenTypeFile(file) {
	    var header = file.peekBytes(4);
	    return bytesToString(header) === 'OTTO';
	  }
	  function isType1File(file) {
	    var header = file.peekBytes(2);
	    if (header[0] === 0x25 && header[1] === 0x21) {
	      return true;
	    }
	    if (header[0] === 0x80 && header[1] === 0x01) {
	      return true;
	    }
	    return false;
	  }
	  function buildToFontChar(encoding, glyphsUnicodeMap, differences) {
	    var toFontChar = [],
	        unicode;
	    for (var i = 0, ii = encoding.length; i < ii; i++) {
	      unicode = getUnicodeForGlyph(encoding[i], glyphsUnicodeMap);
	      if (unicode !== -1) {
	        toFontChar[i] = unicode;
	      }
	    }
	    for (var charCode in differences) {
	      unicode = getUnicodeForGlyph(differences[charCode], glyphsUnicodeMap);
	      if (unicode !== -1) {
	        toFontChar[+charCode] = unicode;
	      }
	    }
	    return toFontChar;
	  }
	  function isProblematicUnicodeLocation(code) {
	    var i = 0,
	        j = ProblematicCharRanges.length - 1;
	    while (i < j) {
	      var c = i + j + 1 >> 1;
	      if (code < ProblematicCharRanges[c]) {
	        j = c - 1;
	      } else {
	        i = c;
	      }
	    }
	    return !(i & 1);
	  }
	  function adjustMapping(charCodeToGlyphId, properties) {
	    var toUnicode = properties.toUnicode;
	    var isSymbolic = !!(properties.flags & FontFlags.Symbolic);
	    var isIdentityUnicode = properties.toUnicode instanceof IdentityToUnicodeMap;
	    var newMap = Object.create(null);
	    var toFontChar = [];
	    var usedFontCharCodes = [];
	    var nextAvailableFontCharCode = PRIVATE_USE_OFFSET_START;
	    for (var originalCharCode in charCodeToGlyphId) {
	      originalCharCode |= 0;
	      var glyphId = charCodeToGlyphId[originalCharCode];
	      var fontCharCode = originalCharCode;
	      var hasUnicodeValue = false;
	      if (!isIdentityUnicode && toUnicode.has(originalCharCode)) {
	        hasUnicodeValue = true;
	        var unicode = toUnicode.get(fontCharCode);
	        if (unicode.length === 1) {
	          fontCharCode = unicode.charCodeAt(0);
	        }
	      }
	      if ((usedFontCharCodes[fontCharCode] !== undefined || isProblematicUnicodeLocation(fontCharCode) || isSymbolic && !hasUnicodeValue) && nextAvailableFontCharCode <= PRIVATE_USE_OFFSET_END) {
	        do {
	          fontCharCode = nextAvailableFontCharCode++;
	          if (SKIP_PRIVATE_USE_RANGE_F000_TO_F01F && fontCharCode === 0xF000) {
	            fontCharCode = 0xF020;
	            nextAvailableFontCharCode = fontCharCode + 1;
	          }
	        } while (usedFontCharCodes[fontCharCode] !== undefined && nextAvailableFontCharCode <= PRIVATE_USE_OFFSET_END);
	      }
	      newMap[fontCharCode] = glyphId;
	      toFontChar[originalCharCode] = fontCharCode;
	      usedFontCharCodes[fontCharCode] = true;
	    }
	    return {
	      toFontChar: toFontChar,
	      charCodeToGlyphId: newMap,
	      nextAvailableFontCharCode: nextAvailableFontCharCode
	    };
	  }
	  function getRanges(glyphs, numGlyphs) {
	    var codes = [];
	    for (var charCode in glyphs) {
	      if (glyphs[charCode] >= numGlyphs) {
	        continue;
	      }
	      codes.push({
	        fontCharCode: charCode | 0,
	        glyphId: glyphs[charCode]
	      });
	    }
	    codes.sort(function fontGetRangesSort(a, b) {
	      return a.fontCharCode - b.fontCharCode;
	    });
	    var ranges = [];
	    var length = codes.length;
	    for (var n = 0; n < length;) {
	      var start = codes[n].fontCharCode;
	      var codeIndices = [codes[n].glyphId];
	      ++n;
	      var end = start;
	      while (n < length && end + 1 === codes[n].fontCharCode) {
	        codeIndices.push(codes[n].glyphId);
	        ++end;
	        ++n;
	        if (end === 0xFFFF) {
	          break;
	        }
	      }
	      ranges.push([start, end, codeIndices]);
	    }
	    return ranges;
	  }
	  function createCmapTable(glyphs, numGlyphs) {
	    var ranges = getRanges(glyphs, numGlyphs);
	    var numTables = ranges[ranges.length - 1][1] > 0xFFFF ? 2 : 1;
	    var cmap = '\x00\x00' + string16(numTables) + '\x00\x03' + '\x00\x01' + string32(4 + numTables * 8);
	    var i, ii, j, jj;
	    for (i = ranges.length - 1; i >= 0; --i) {
	      if (ranges[i][0] <= 0xFFFF) {
	        break;
	      }
	    }
	    var bmpLength = i + 1;
	    if (ranges[i][0] < 0xFFFF && ranges[i][1] === 0xFFFF) {
	      ranges[i][1] = 0xFFFE;
	    }
	    var trailingRangesCount = ranges[i][1] < 0xFFFF ? 1 : 0;
	    var segCount = bmpLength + trailingRangesCount;
	    var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);
	    var startCount = '';
	    var endCount = '';
	    var idDeltas = '';
	    var idRangeOffsets = '';
	    var glyphsIds = '';
	    var bias = 0;
	    var range, start, end, codes;
	    for (i = 0, ii = bmpLength; i < ii; i++) {
	      range = ranges[i];
	      start = range[0];
	      end = range[1];
	      startCount += string16(start);
	      endCount += string16(end);
	      codes = range[2];
	      var contiguous = true;
	      for (j = 1, jj = codes.length; j < jj; ++j) {
	        if (codes[j] !== codes[j - 1] + 1) {
	          contiguous = false;
	          break;
	        }
	      }
	      if (!contiguous) {
	        var offset = (segCount - i) * 2 + bias * 2;
	        bias += end - start + 1;
	        idDeltas += string16(0);
	        idRangeOffsets += string16(offset);
	        for (j = 0, jj = codes.length; j < jj; ++j) {
	          glyphsIds += string16(codes[j]);
	        }
	      } else {
	        var startCode = codes[0];
	        idDeltas += string16(startCode - start & 0xFFFF);
	        idRangeOffsets += string16(0);
	      }
	    }
	    if (trailingRangesCount > 0) {
	      endCount += '\xFF\xFF';
	      startCount += '\xFF\xFF';
	      idDeltas += '\x00\x01';
	      idRangeOffsets += '\x00\x00';
	    }
	    var format314 = '\x00\x00' + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + '\x00\x00' + startCount + idDeltas + idRangeOffsets + glyphsIds;
	    var format31012 = '';
	    var header31012 = '';
	    if (numTables > 1) {
	      cmap += '\x00\x03' + '\x00\x0A' + string32(4 + numTables * 8 + 4 + format314.length);
	      format31012 = '';
	      for (i = 0, ii = ranges.length; i < ii; i++) {
	        range = ranges[i];
	        start = range[0];
	        codes = range[2];
	        var code = codes[0];
	        for (j = 1, jj = codes.length; j < jj; ++j) {
	          if (codes[j] !== codes[j - 1] + 1) {
	            end = range[0] + j - 1;
	            format31012 += string32(start) + string32(end) + string32(code);
	            start = end + 1;
	            code = codes[j];
	          }
	        }
	        format31012 += string32(start) + string32(range[1]) + string32(code);
	      }
	      header31012 = '\x00\x0C' + '\x00\x00' + string32(format31012.length + 16) + '\x00\x00\x00\x00' + string32(format31012.length / 12);
	    }
	    return cmap + '\x00\x04' + string16(format314.length + 4) + format314 + header31012 + format31012;
	  }
	  function validateOS2Table(os2) {
	    var stream = new Stream(os2.data);
	    var version = stream.getUint16();
	    stream.getBytes(60);
	    var selection = stream.getUint16();
	    if (version < 4 && selection & 0x0300) {
	      return false;
	    }
	    var firstChar = stream.getUint16();
	    var lastChar = stream.getUint16();
	    if (firstChar > lastChar) {
	      return false;
	    }
	    stream.getBytes(6);
	    var usWinAscent = stream.getUint16();
	    if (usWinAscent === 0) {
	      return false;
	    }
	    os2.data[8] = os2.data[9] = 0;
	    return true;
	  }
	  function createOS2Table(properties, charstrings, override) {
	    override = override || {
	      unitsPerEm: 0,
	      yMax: 0,
	      yMin: 0,
	      ascent: 0,
	      descent: 0
	    };
	    var ulUnicodeRange1 = 0;
	    var ulUnicodeRange2 = 0;
	    var ulUnicodeRange3 = 0;
	    var ulUnicodeRange4 = 0;
	    var firstCharIndex = null;
	    var lastCharIndex = 0;
	    if (charstrings) {
	      for (var code in charstrings) {
	        code |= 0;
	        if (firstCharIndex > code || !firstCharIndex) {
	          firstCharIndex = code;
	        }
	        if (lastCharIndex < code) {
	          lastCharIndex = code;
	        }
	        var position = getUnicodeRangeFor(code);
	        if (position < 32) {
	          ulUnicodeRange1 |= 1 << position;
	        } else if (position < 64) {
	          ulUnicodeRange2 |= 1 << position - 32;
	        } else if (position < 96) {
	          ulUnicodeRange3 |= 1 << position - 64;
	        } else if (position < 123) {
	          ulUnicodeRange4 |= 1 << position - 96;
	        } else {
	          error('Unicode ranges Bits > 123 are reserved for internal usage');
	        }
	      }
	    } else {
	      firstCharIndex = 0;
	      lastCharIndex = 255;
	    }
	    var bbox = properties.bbox || [0, 0, 0, 0];
	    var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || FONT_IDENTITY_MATRIX)[0];
	    var scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;
	    var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));
	    var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));
	    if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {
	      typoDescent = -typoDescent;
	    }
	    var winAscent = override.yMax || typoAscent;
	    var winDescent = -override.yMin || -typoDescent;
	    return '\x00\x03' + '\x02\x24' + '\x01\xF4' + '\x00\x05' + '\x00\x00' + '\x02\x8A' + '\x02\xBB' + '\x00\x00' + '\x00\x8C' + '\x02\x8A' + '\x02\xBB' + '\x00\x00' + '\x01\xDF' + '\x00\x31' + '\x01\x02' + '\x00\x00' + '\x00\x00\x06' + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + '\x00\x00\x00\x00\x00\x00' + string32(ulUnicodeRange1) + string32(ulUnicodeRange2) + string32(ulUnicodeRange3) + string32(ulUnicodeRange4) + '\x2A\x32\x31\x2A' + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + '\x00\x64' + string16(winAscent) + string16(winDescent) + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + '\x00\x03';
	  }
	  function createPostTable(properties) {
	    var angle = Math.floor(properties.italicAngle * Math.pow(2, 16));
	    return '\x00\x03\x00\x00' + string32(angle) + '\x00\x00' + '\x00\x00' + string32(properties.fixedPitch) + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00';
	  }
	  function createNameTable(name, proto) {
	    if (!proto) {
	      proto = [[], []];
	    }
	    var strings = [proto[0][0] || 'Original licence', proto[0][1] || name, proto[0][2] || 'Unknown', proto[0][3] || 'uniqueID', proto[0][4] || name, proto[0][5] || 'Version 0.11', proto[0][6] || '', proto[0][7] || 'Unknown', proto[0][8] || 'Unknown', proto[0][9] || 'Unknown'];
	    var stringsUnicode = [];
	    var i, ii, j, jj, str;
	    for (i = 0, ii = strings.length; i < ii; i++) {
	      str = proto[1][i] || strings[i];
	      var strBufUnicode = [];
	      for (j = 0, jj = str.length; j < jj; j++) {
	        strBufUnicode.push(string16(str.charCodeAt(j)));
	      }
	      stringsUnicode.push(strBufUnicode.join(''));
	    }
	    var names = [strings, stringsUnicode];
	    var platforms = ['\x00\x01', '\x00\x03'];
	    var encodings = ['\x00\x00', '\x00\x01'];
	    var languages = ['\x00\x00', '\x04\x09'];
	    var namesRecordCount = strings.length * platforms.length;
	    var nameTable = '\x00\x00' + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);
	    var strOffset = 0;
	    for (i = 0, ii = platforms.length; i < ii; i++) {
	      var strs = names[i];
	      for (j = 0, jj = strs.length; j < jj; j++) {
	        str = strs[j];
	        var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);
	        nameTable += nameRecord;
	        strOffset += str.length;
	      }
	    }
	    nameTable += strings.join('') + stringsUnicode.join('');
	    return nameTable;
	  }
	  Font.prototype = {
	    name: null,
	    font: null,
	    mimetype: null,
	    encoding: null,
	    get renderer() {
	      var renderer = FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);
	      return shadow(this, 'renderer', renderer);
	    },
	    exportData: function Font_exportData() {
	      var data = {};
	      for (var i in this) {
	        if (this.hasOwnProperty(i)) {
	          data[i] = this[i];
	        }
	      }
	      return data;
	    },
	    checkAndRepair: function Font_checkAndRepair(name, font, properties) {
	      function readTableEntry(file) {
	        var tag = bytesToString(file.getBytes(4));
	        var checksum = file.getInt32() >>> 0;
	        var offset = file.getInt32() >>> 0;
	        var length = file.getInt32() >>> 0;
	        var previousPosition = file.pos;
	        file.pos = file.start ? file.start : 0;
	        file.skip(offset);
	        var data = file.getBytes(length);
	        file.pos = previousPosition;
	        if (tag === 'head') {
	          data[8] = data[9] = data[10] = data[11] = 0;
	          data[17] |= 0x20;
	        }
	        return {
	          tag: tag,
	          checksum: checksum,
	          length: length,
	          offset: offset,
	          data: data
	        };
	      }
	      function readOpenTypeHeader(ttf) {
	        return {
	          version: bytesToString(ttf.getBytes(4)),
	          numTables: ttf.getUint16(),
	          searchRange: ttf.getUint16(),
	          entrySelector: ttf.getUint16(),
	          rangeShift: ttf.getUint16()
	        };
	      }
	      function readCmapTable(cmap, font, isSymbolicFont, hasEncoding) {
	        if (!cmap) {
	          warn('No cmap table available.');
	          return {
	            platformId: -1,
	            encodingId: -1,
	            mappings: [],
	            hasShortCmap: false
	          };
	        }
	        var segment;
	        var start = (font.start ? font.start : 0) + cmap.offset;
	        font.pos = start;
	        font.getUint16();
	        var numTables = font.getUint16();
	        var potentialTable;
	        var canBreak = false;
	        for (var i = 0; i < numTables; i++) {
	          var platformId = font.getUint16();
	          var encodingId = font.getUint16();
	          var offset = font.getInt32() >>> 0;
	          var useTable = false;
	          if (platformId === 0 && encodingId === 0) {
	            useTable = true;
	          } else if (platformId === 1 && encodingId === 0) {
	            useTable = true;
	          } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {
	            useTable = true;
	            if (!isSymbolicFont) {
	              canBreak = true;
	            }
	          } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {
	            useTable = true;
	            canBreak = true;
	          }
	          if (useTable) {
	            potentialTable = {
	              platformId: platformId,
	              encodingId: encodingId,
	              offset: offset
	            };
	          }
	          if (canBreak) {
	            break;
	          }
	        }
	        if (potentialTable) {
	          font.pos = start + potentialTable.offset;
	        }
	        if (!potentialTable || font.peekByte() === -1) {
	          warn('Could not find a preferred cmap table.');
	          return {
	            platformId: -1,
	            encodingId: -1,
	            mappings: [],
	            hasShortCmap: false
	          };
	        }
	        var format = font.getUint16();
	        font.getUint16();
	        font.getUint16();
	        var hasShortCmap = false;
	        var mappings = [];
	        var j, glyphId;
	        if (format === 0) {
	          for (j = 0; j < 256; j++) {
	            var index = font.getByte();
	            if (!index) {
	              continue;
	            }
	            mappings.push({
	              charCode: j,
	              glyphId: index
	            });
	          }
	          hasShortCmap = true;
	        } else if (format === 4) {
	          var segCount = font.getUint16() >> 1;
	          font.getBytes(6);
	          var segIndex,
	              segments = [];
	          for (segIndex = 0; segIndex < segCount; segIndex++) {
	            segments.push({ end: font.getUint16() });
	          }
	          font.getUint16();
	          for (segIndex = 0; segIndex < segCount; segIndex++) {
	            segments[segIndex].start = font.getUint16();
	          }
	          for (segIndex = 0; segIndex < segCount; segIndex++) {
	            segments[segIndex].delta = font.getUint16();
	          }
	          var offsetsCount = 0;
	          for (segIndex = 0; segIndex < segCount; segIndex++) {
	            segment = segments[segIndex];
	            var rangeOffset = font.getUint16();
	            if (!rangeOffset) {
	              segment.offsetIndex = -1;
	              continue;
	            }
	            var offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);
	            segment.offsetIndex = offsetIndex;
	            offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);
	          }
	          var offsets = [];
	          for (j = 0; j < offsetsCount; j++) {
	            offsets.push(font.getUint16());
	          }
	          for (segIndex = 0; segIndex < segCount; segIndex++) {
	            segment = segments[segIndex];
	            start = segment.start;
	            var end = segment.end;
	            var delta = segment.delta;
	            offsetIndex = segment.offsetIndex;
	            for (j = start; j <= end; j++) {
	              if (j === 0xFFFF) {
	                continue;
	              }
	              glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];
	              glyphId = glyphId + delta & 0xFFFF;
	              mappings.push({
	                charCode: j,
	                glyphId: glyphId
	              });
	            }
	          }
	        } else if (format === 6) {
	          var firstCode = font.getUint16();
	          var entryCount = font.getUint16();
	          for (j = 0; j < entryCount; j++) {
	            glyphId = font.getUint16();
	            var charCode = firstCode + j;
	            mappings.push({
	              charCode: charCode,
	              glyphId: glyphId
	            });
	          }
	        } else {
	          warn('cmap table has unsupported format: ' + format);
	          return {
	            platformId: -1,
	            encodingId: -1,
	            mappings: [],
	            hasShortCmap: false
	          };
	        }
	        mappings.sort(function (a, b) {
	          return a.charCode - b.charCode;
	        });
	        for (i = 1; i < mappings.length; i++) {
	          if (mappings[i - 1].charCode === mappings[i].charCode) {
	            mappings.splice(i, 1);
	            i--;
	          }
	        }
	        return {
	          platformId: potentialTable.platformId,
	          encodingId: potentialTable.encodingId,
	          mappings: mappings,
	          hasShortCmap: hasShortCmap
	        };
	      }
	      function sanitizeMetrics(font, header, metrics, numGlyphs) {
	        if (!header) {
	          if (metrics) {
	            metrics.data = null;
	          }
	          return;
	        }
	        font.pos = (font.start ? font.start : 0) + header.offset;
	        font.pos += header.length - 2;
	        var numOfMetrics = font.getUint16();
	        if (numOfMetrics > numGlyphs) {
	          info('The numOfMetrics (' + numOfMetrics + ') should not be ' + 'greater than the numGlyphs (' + numGlyphs + ')');
	          numOfMetrics = numGlyphs;
	          header.data[34] = (numOfMetrics & 0xff00) >> 8;
	          header.data[35] = numOfMetrics & 0x00ff;
	        }
	        var numOfSidebearings = numGlyphs - numOfMetrics;
	        var numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);
	        if (numMissing > 0) {
	          var entries = new Uint8Array(metrics.length + numMissing * 2);
	          entries.set(metrics.data);
	          metrics.data = entries;
	        }
	      }
	      function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {
	        if (sourceEnd - sourceStart <= 12) {
	          return 0;
	        }
	        var glyf = source.subarray(sourceStart, sourceEnd);
	        var contoursCount = glyf[0] << 8 | glyf[1];
	        if (contoursCount & 0x8000) {
	          dest.set(glyf, destStart);
	          return glyf.length;
	        }
	        var i,
	            j = 10,
	            flagsCount = 0;
	        for (i = 0; i < contoursCount; i++) {
	          var endPoint = glyf[j] << 8 | glyf[j + 1];
	          flagsCount = endPoint + 1;
	          j += 2;
	        }
	        var instructionsStart = j;
	        var instructionsLength = glyf[j] << 8 | glyf[j + 1];
	        j += 2 + instructionsLength;
	        var instructionsEnd = j;
	        var coordinatesLength = 0;
	        for (i = 0; i < flagsCount; i++) {
	          var flag = glyf[j++];
	          if (flag & 0xC0) {
	            glyf[j - 1] = flag & 0x3F;
	          }
	          var xyLength = (flag & 2 ? 1 : flag & 16 ? 0 : 2) + (flag & 4 ? 1 : flag & 32 ? 0 : 2);
	          coordinatesLength += xyLength;
	          if (flag & 8) {
	            var repeat = glyf[j++];
	            i += repeat;
	            coordinatesLength += repeat * xyLength;
	          }
	        }
	        if (coordinatesLength === 0) {
	          return 0;
	        }
	        var glyphDataLength = j + coordinatesLength;
	        if (glyphDataLength > glyf.length) {
	          return 0;
	        }
	        if (!hintsValid && instructionsLength > 0) {
	          dest.set(glyf.subarray(0, instructionsStart), destStart);
	          dest.set([0, 0], destStart + instructionsStart);
	          dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);
	          glyphDataLength -= instructionsLength;
	          if (glyf.length - glyphDataLength > 3) {
	            glyphDataLength = glyphDataLength + 3 & ~3;
	          }
	          return glyphDataLength;
	        }
	        if (glyf.length - glyphDataLength > 3) {
	          glyphDataLength = glyphDataLength + 3 & ~3;
	          dest.set(glyf.subarray(0, glyphDataLength), destStart);
	          return glyphDataLength;
	        }
	        dest.set(glyf, destStart);
	        return glyf.length;
	      }
	      function sanitizeHead(head, numGlyphs, locaLength) {
	        var data = head.data;
	        var version = int32(data[0], data[1], data[2], data[3]);
	        if (version >> 16 !== 1) {
	          info('Attempting to fix invalid version in head table: ' + version);
	          data[0] = 0;
	          data[1] = 1;
	          data[2] = 0;
	          data[3] = 0;
	        }
	        var indexToLocFormat = int16(data[50], data[51]);
	        if (indexToLocFormat < 0 || indexToLocFormat > 1) {
	          info('Attempting to fix invalid indexToLocFormat in head table: ' + indexToLocFormat);
	          var numGlyphsPlusOne = numGlyphs + 1;
	          if (locaLength === numGlyphsPlusOne << 1) {
	            data[50] = 0;
	            data[51] = 0;
	          } else if (locaLength === numGlyphsPlusOne << 2) {
	            data[50] = 0;
	            data[51] = 1;
	          } else {
	            warn('Could not fix indexToLocFormat: ' + indexToLocFormat);
	          }
	        }
	      }
	      function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry) {
	        var itemSize, itemDecode, itemEncode;
	        if (isGlyphLocationsLong) {
	          itemSize = 4;
	          itemDecode = function fontItemDecodeLong(data, offset) {
	            return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
	          };
	          itemEncode = function fontItemEncodeLong(data, offset, value) {
	            data[offset] = value >>> 24 & 0xFF;
	            data[offset + 1] = value >> 16 & 0xFF;
	            data[offset + 2] = value >> 8 & 0xFF;
	            data[offset + 3] = value & 0xFF;
	          };
	        } else {
	          itemSize = 2;
	          itemDecode = function fontItemDecode(data, offset) {
	            return data[offset] << 9 | data[offset + 1] << 1;
	          };
	          itemEncode = function fontItemEncode(data, offset, value) {
	            data[offset] = value >> 9 & 0xFF;
	            data[offset + 1] = value >> 1 & 0xFF;
	          };
	        }
	        var locaData = loca.data;
	        var locaDataSize = itemSize * (1 + numGlyphs);
	        if (locaData.length !== locaDataSize) {
	          locaData = new Uint8Array(locaDataSize);
	          locaData.set(loca.data.subarray(0, locaDataSize));
	          loca.data = locaData;
	        }
	        var oldGlyfData = glyf.data;
	        var oldGlyfDataLength = oldGlyfData.length;
	        var newGlyfData = new Uint8Array(oldGlyfDataLength);
	        var startOffset = itemDecode(locaData, 0);
	        var writeOffset = 0;
	        var missingGlyphData = Object.create(null);
	        itemEncode(locaData, 0, writeOffset);
	        var i, j;
	        for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {
	          var endOffset = itemDecode(locaData, j);
	          if (endOffset > oldGlyfDataLength && (oldGlyfDataLength + 3 & ~3) === endOffset) {
	            endOffset = oldGlyfDataLength;
	          }
	          if (endOffset > oldGlyfDataLength) {
	            itemEncode(locaData, j, writeOffset);
	            startOffset = endOffset;
	            continue;
	          }
	          if (startOffset === endOffset) {
	            missingGlyphData[i] = true;
	          }
	          var newLength = sanitizeGlyph(oldGlyfData, startOffset, endOffset, newGlyfData, writeOffset, hintsValid);
	          writeOffset += newLength;
	          itemEncode(locaData, j, writeOffset);
	          startOffset = endOffset;
	        }
	        if (writeOffset === 0) {
	          var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);
	          for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {
	            itemEncode(locaData, j, simpleGlyph.length);
	          }
	          glyf.data = simpleGlyph;
	          return missingGlyphData;
	        }
	        if (dupFirstEntry) {
	          var firstEntryLength = itemDecode(locaData, itemSize);
	          if (newGlyfData.length > firstEntryLength + writeOffset) {
	            glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);
	          } else {
	            glyf.data = new Uint8Array(firstEntryLength + writeOffset);
	            glyf.data.set(newGlyfData.subarray(0, writeOffset));
	          }
	          glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);
	          itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);
	        } else {
	          glyf.data = newGlyfData.subarray(0, writeOffset);
	        }
	        return missingGlyphData;
	      }
	      function readPostScriptTable(post, properties, maxpNumGlyphs) {
	        var start = (font.start ? font.start : 0) + post.offset;
	        font.pos = start;
	        var length = post.length,
	            end = start + length;
	        var version = font.getInt32();
	        font.getBytes(28);
	        var glyphNames;
	        var valid = true;
	        var i;
	        switch (version) {
	          case 0x00010000:
	            glyphNames = MacStandardGlyphOrdering;
	            break;
	          case 0x00020000:
	            var numGlyphs = font.getUint16();
	            if (numGlyphs !== maxpNumGlyphs) {
	              valid = false;
	              break;
	            }
	            var glyphNameIndexes = [];
	            for (i = 0; i < numGlyphs; ++i) {
	              var index = font.getUint16();
	              if (index >= 32768) {
	                valid = false;
	                break;
	              }
	              glyphNameIndexes.push(index);
	            }
	            if (!valid) {
	              break;
	            }
	            var customNames = [];
	            var strBuf = [];
	            while (font.pos < end) {
	              var stringLength = font.getByte();
	              strBuf.length = stringLength;
	              for (i = 0; i < stringLength; ++i) {
	                strBuf[i] = String.fromCharCode(font.getByte());
	              }
	              customNames.push(strBuf.join(''));
	            }
	            glyphNames = [];
	            for (i = 0; i < numGlyphs; ++i) {
	              var j = glyphNameIndexes[i];
	              if (j < 258) {
	                glyphNames.push(MacStandardGlyphOrdering[j]);
	                continue;
	              }
	              glyphNames.push(customNames[j - 258]);
	            }
	            break;
	          case 0x00030000:
	            break;
	          default:
	            warn('Unknown/unsupported post table version ' + version);
	            valid = false;
	            if (properties.defaultEncoding) {
	              glyphNames = properties.defaultEncoding;
	            }
	            break;
	        }
	        properties.glyphNames = glyphNames;
	        return valid;
	      }
	      function readNameTable(nameTable) {
	        var start = (font.start ? font.start : 0) + nameTable.offset;
	        font.pos = start;
	        var names = [[], []];
	        var length = nameTable.length,
	            end = start + length;
	        var format = font.getUint16();
	        var FORMAT_0_HEADER_LENGTH = 6;
	        if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {
	          return names;
	        }
	        var numRecords = font.getUint16();
	        var stringsStart = font.getUint16();
	        var records = [];
	        var NAME_RECORD_LENGTH = 12;
	        var i, ii;
	        for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {
	          var r = {
	            platform: font.getUint16(),
	            encoding: font.getUint16(),
	            language: font.getUint16(),
	            name: font.getUint16(),
	            length: font.getUint16(),
	            offset: font.getUint16()
	          };
	          if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 0x409) {
	            records.push(r);
	          }
	        }
	        for (i = 0, ii = records.length; i < ii; i++) {
	          var record = records[i];
	          if (record.length <= 0) {
	            continue;
	          }
	          var pos = start + stringsStart + record.offset;
	          if (pos + record.length > end) {
	            continue;
	          }
	          font.pos = pos;
	          var nameIndex = record.name;
	          if (record.encoding) {
	            var str = '';
	            for (var j = 0, jj = record.length; j < jj; j += 2) {
	              str += String.fromCharCode(font.getUint16());
	            }
	            names[1][nameIndex] = str;
	          } else {
	            names[0][nameIndex] = bytesToString(font.getBytes(record.length));
	          }
	        }
	        return names;
	      }
	      var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];
	      function sanitizeTTProgram(table, ttContext) {
	        var data = table.data;
	        var i = 0,
	            j,
	            n,
	            b,
	            funcId,
	            pc,
	            lastEndf = 0,
	            lastDeff = 0;
	        var stack = [];
	        var callstack = [];
	        var functionsCalled = [];
	        var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;
	        var inFDEF = false,
	            ifLevel = 0,
	            inELSE = 0;
	        for (var ii = data.length; i < ii;) {
	          var op = data[i++];
	          if (op === 0x40) {
	            n = data[i++];
	            if (inFDEF || inELSE) {
	              i += n;
	            } else {
	              for (j = 0; j < n; j++) {
	                stack.push(data[i++]);
	              }
	            }
	          } else if (op === 0x41) {
	            n = data[i++];
	            if (inFDEF || inELSE) {
	              i += n * 2;
	            } else {
	              for (j = 0; j < n; j++) {
	                b = data[i++];
	                stack.push(b << 8 | data[i++]);
	              }
	            }
	          } else if ((op & 0xF8) === 0xB0) {
	            n = op - 0xB0 + 1;
	            if (inFDEF || inELSE) {
	              i += n;
	            } else {
	              for (j = 0; j < n; j++) {
	                stack.push(data[i++]);
	              }
	            }
	          } else if ((op & 0xF8) === 0xB8) {
	            n = op - 0xB8 + 1;
	            if (inFDEF || inELSE) {
	              i += n * 2;
	            } else {
	              for (j = 0; j < n; j++) {
	                b = data[i++];
	                stack.push(b << 8 | data[i++]);
	              }
	            }
	          } else if (op === 0x2B && !tooComplexToFollowFunctions) {
	            if (!inFDEF && !inELSE) {
	              funcId = stack[stack.length - 1];
	              ttContext.functionsUsed[funcId] = true;
	              if (funcId in ttContext.functionsStackDeltas) {
	                stack.length += ttContext.functionsStackDeltas[funcId];
	              } else if (funcId in ttContext.functionsDefined && functionsCalled.indexOf(funcId) < 0) {
	                callstack.push({
	                  data: data,
	                  i: i,
	                  stackTop: stack.length - 1
	                });
	                functionsCalled.push(funcId);
	                pc = ttContext.functionsDefined[funcId];
	                if (!pc) {
	                  warn('TT: CALL non-existent function');
	                  ttContext.hintsValid = false;
	                  return;
	                }
	                data = pc.data;
	                i = pc.i;
	              }
	            }
	          } else if (op === 0x2C && !tooComplexToFollowFunctions) {
	            if (inFDEF || inELSE) {
	              warn('TT: nested FDEFs not allowed');
	              tooComplexToFollowFunctions = true;
	            }
	            inFDEF = true;
	            lastDeff = i;
	            funcId = stack.pop();
	            ttContext.functionsDefined[funcId] = {
	              data: data,
	              i: i
	            };
	          } else if (op === 0x2D) {
	            if (inFDEF) {
	              inFDEF = false;
	              lastEndf = i;
	            } else {
	              pc = callstack.pop();
	              if (!pc) {
	                warn('TT: ENDF bad stack');
	                ttContext.hintsValid = false;
	                return;
	              }
	              funcId = functionsCalled.pop();
	              data = pc.data;
	              i = pc.i;
	              ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;
	            }
	          } else if (op === 0x89) {
	            if (inFDEF || inELSE) {
	              warn('TT: nested IDEFs not allowed');
	              tooComplexToFollowFunctions = true;
	            }
	            inFDEF = true;
	            lastDeff = i;
	          } else if (op === 0x58) {
	            ++ifLevel;
	          } else if (op === 0x1B) {
	            inELSE = ifLevel;
	          } else if (op === 0x59) {
	            if (inELSE === ifLevel) {
	              inELSE = 0;
	            }
	            --ifLevel;
	          } else if (op === 0x1C) {
	            if (!inFDEF && !inELSE) {
	              var offset = stack[stack.length - 1];
	              if (offset > 0) {
	                i += offset - 1;
	              }
	            }
	          }
	          if (!inFDEF && !inELSE) {
	            var stackDelta = op <= 0x8E ? TTOpsStackDeltas[op] : op >= 0xC0 && op <= 0xDF ? -1 : op >= 0xE0 ? -2 : 0;
	            if (op >= 0x71 && op <= 0x75) {
	              n = stack.pop();
	              if (!isNaN(n)) {
	                stackDelta = -n * 2;
	              }
	            }
	            while (stackDelta < 0 && stack.length > 0) {
	              stack.pop();
	              stackDelta++;
	            }
	            while (stackDelta > 0) {
	              stack.push(NaN);
	              stackDelta--;
	            }
	          }
	        }
	        ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;
	        var content = [data];
	        if (i > data.length) {
	          content.push(new Uint8Array(i - data.length));
	        }
	        if (lastDeff > lastEndf) {
	          warn('TT: complementing a missing function tail');
	          content.push(new Uint8Array([0x22, 0x2D]));
	        }
	        foldTTTable(table, content);
	      }
	      function checkInvalidFunctions(ttContext, maxFunctionDefs) {
	        if (ttContext.tooComplexToFollowFunctions) {
	          return;
	        }
	        if (ttContext.functionsDefined.length > maxFunctionDefs) {
	          warn('TT: more functions defined than expected');
	          ttContext.hintsValid = false;
	          return;
	        }
	        for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {
	          if (j > maxFunctionDefs) {
	            warn('TT: invalid function id: ' + j);
	            ttContext.hintsValid = false;
	            return;
	          }
	          if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {
	            warn('TT: undefined function: ' + j);
	            ttContext.hintsValid = false;
	            return;
	          }
	        }
	      }
	      function foldTTTable(table, content) {
	        if (content.length > 1) {
	          var newLength = 0;
	          var j, jj;
	          for (j = 0, jj = content.length; j < jj; j++) {
	            newLength += content[j].length;
	          }
	          newLength = newLength + 3 & ~3;
	          var result = new Uint8Array(newLength);
	          var pos = 0;
	          for (j = 0, jj = content.length; j < jj; j++) {
	            result.set(content[j], pos);
	            pos += content[j].length;
	          }
	          table.data = result;
	          table.length = newLength;
	        }
	      }
	      function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {
	        var ttContext = {
	          functionsDefined: [],
	          functionsUsed: [],
	          functionsStackDeltas: [],
	          tooComplexToFollowFunctions: false,
	          hintsValid: true
	        };
	        if (fpgm) {
	          sanitizeTTProgram(fpgm, ttContext);
	        }
	        if (prep) {
	          sanitizeTTProgram(prep, ttContext);
	        }
	        if (fpgm) {
	          checkInvalidFunctions(ttContext, maxFunctionDefs);
	        }
	        if (cvt && cvt.length & 1) {
	          var cvtData = new Uint8Array(cvt.length + 1);
	          cvtData.set(cvt.data);
	          cvt.data = cvtData;
	        }
	        return ttContext.hintsValid;
	      }
	      font = new Stream(new Uint8Array(font.getBytes()));
	      var VALID_TABLES = ['OS/2', 'cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'post', 'loca', 'glyf', 'fpgm', 'prep', 'cvt ', 'CFF '];
	      var header = readOpenTypeHeader(font);
	      var numTables = header.numTables;
	      var cff, cffFile;
	      var tables = Object.create(null);
	      tables['OS/2'] = null;
	      tables['cmap'] = null;
	      tables['head'] = null;
	      tables['hhea'] = null;
	      tables['hmtx'] = null;
	      tables['maxp'] = null;
	      tables['name'] = null;
	      tables['post'] = null;
	      var table;
	      for (var i = 0; i < numTables; i++) {
	        table = readTableEntry(font);
	        if (VALID_TABLES.indexOf(table.tag) < 0) {
	          continue;
	        }
	        if (table.length === 0) {
	          continue;
	        }
	        tables[table.tag] = table;
	      }
	      var isTrueType = !tables['CFF '];
	      if (!isTrueType) {
	        if (header.version === 'OTTO' && !properties.composite || !tables['head'] || !tables['hhea'] || !tables['maxp'] || !tables['post']) {
	          cffFile = new Stream(tables['CFF '].data);
	          cff = new CFFFont(cffFile, properties);
	          adjustWidths(properties);
	          return this.convert(name, cff, properties);
	        }
	        delete tables['glyf'];
	        delete tables['loca'];
	        delete tables['fpgm'];
	        delete tables['prep'];
	        delete tables['cvt '];
	        this.isOpenType = true;
	      } else {
	        if (!tables['loca']) {
	          error('Required "loca" table is not found');
	        }
	        if (!tables['glyf']) {
	          warn('Required "glyf" table is not found -- trying to recover.');
	          tables['glyf'] = {
	            tag: 'glyf',
	            data: new Uint8Array(0)
	          };
	        }
	        this.isOpenType = false;
	      }
	      if (!tables['maxp']) {
	        error('Required "maxp" table is not found');
	      }
	      font.pos = (font.start || 0) + tables['maxp'].offset;
	      var version = font.getInt32();
	      var numGlyphs = font.getUint16();
	      var maxFunctionDefs = 0;
	      if (version >= 0x00010000 && tables['maxp'].length >= 22) {
	        font.pos += 8;
	        var maxZones = font.getUint16();
	        if (maxZones > 2) {
	          tables['maxp'].data[14] = 0;
	          tables['maxp'].data[15] = 2;
	        }
	        font.pos += 4;
	        maxFunctionDefs = font.getUint16();
	      }
	      var dupFirstEntry = false;
	      if (properties.type === 'CIDFontType2' && properties.toUnicode && properties.toUnicode.get(0) > '\0') {
	        dupFirstEntry = true;
	        numGlyphs++;
	        tables['maxp'].data[4] = numGlyphs >> 8;
	        tables['maxp'].data[5] = numGlyphs & 255;
	      }
	      var hintsValid = sanitizeTTPrograms(tables['fpgm'], tables['prep'], tables['cvt '], maxFunctionDefs);
	      if (!hintsValid) {
	        delete tables['fpgm'];
	        delete tables['prep'];
	        delete tables['cvt '];
	      }
	      sanitizeMetrics(font, tables['hhea'], tables['hmtx'], numGlyphs);
	      if (!tables['head']) {
	        error('Required "head" table is not found');
	      }
	      sanitizeHead(tables['head'], numGlyphs, isTrueType ? tables['loca'].length : 0);
	      var missingGlyphs = Object.create(null);
	      if (isTrueType) {
	        var isGlyphLocationsLong = int16(tables['head'].data[50], tables['head'].data[51]);
	        missingGlyphs = sanitizeGlyphLocations(tables['loca'], tables['glyf'], numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry);
	      }
	      if (!tables['hhea']) {
	        error('Required "hhea" table is not found');
	      }
	      if (tables['hhea'].data[10] === 0 && tables['hhea'].data[11] === 0) {
	        tables['hhea'].data[10] = 0xFF;
	        tables['hhea'].data[11] = 0xFF;
	      }
	      var metricsOverride = {
	        unitsPerEm: int16(tables['head'].data[18], tables['head'].data[19]),
	        yMax: int16(tables['head'].data[42], tables['head'].data[43]),
	        yMin: signedInt16(tables['head'].data[38], tables['head'].data[39]),
	        ascent: int16(tables['hhea'].data[4], tables['hhea'].data[5]),
	        descent: signedInt16(tables['hhea'].data[6], tables['hhea'].data[7])
	      };
	      this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;
	      this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;
	      if (tables['post']) {
	        var valid = readPostScriptTable(tables['post'], properties, numGlyphs);
	        if (!valid) {
	          tables['post'] = null;
	        }
	      }
	      var charCodeToGlyphId = [],
	          charCode;
	      var toUnicode = properties.toUnicode,
	          widths = properties.widths;
	      var skipToUnicode = toUnicode instanceof IdentityToUnicodeMap || toUnicode.length === 0x10000;
	      function hasGlyph(glyphId, charCode, widthCode) {
	        if (!missingGlyphs[glyphId]) {
	          return true;
	        }
	        if (!skipToUnicode && charCode >= 0 && toUnicode.has(charCode)) {
	          return true;
	        }
	        if (widths && widthCode >= 0 && isNum(widths[widthCode])) {
	          return true;
	        }
	        return false;
	      }
	      if (properties.composite) {
	        var cidToGidMap = properties.cidToGidMap || [];
	        var isCidToGidMapEmpty = cidToGidMap.length === 0;
	        properties.cMap.forEach(function (charCode, cid) {
	          assert(cid <= 0xffff, 'Max size of CID is 65,535');
	          var glyphId = -1;
	          if (isCidToGidMapEmpty) {
	            glyphId = cid;
	          } else if (cidToGidMap[cid] !== undefined) {
	            glyphId = cidToGidMap[cid];
	          }
	          if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId, charCode, cid)) {
	            charCodeToGlyphId[charCode] = glyphId;
	          }
	        });
	        if (dupFirstEntry && (isCidToGidMapEmpty || !charCodeToGlyphId[0])) {
	          charCodeToGlyphId[0] = numGlyphs - 1;
	        }
	      } else {
	        var cmapTable = readCmapTable(tables['cmap'], font, this.isSymbolicFont, properties.hasEncoding);
	        var cmapPlatformId = cmapTable.platformId;
	        var cmapEncodingId = cmapTable.encodingId;
	        var cmapMappings = cmapTable.mappings;
	        var cmapMappingsLength = cmapMappings.length;
	        if (properties.hasEncoding && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0) || cmapPlatformId === -1 && cmapEncodingId === -1 && !!getEncoding(properties.baseEncodingName)) {
	          var baseEncoding = [];
	          if (properties.baseEncodingName === 'MacRomanEncoding' || properties.baseEncodingName === 'WinAnsiEncoding') {
	            baseEncoding = getEncoding(properties.baseEncodingName);
	          }
	          var glyphsUnicodeMap = getGlyphsUnicode();
	          for (charCode = 0; charCode < 256; charCode++) {
	            var glyphName, standardGlyphName;
	            if (this.differences && charCode in this.differences) {
	              glyphName = this.differences[charCode];
	            } else if (charCode in baseEncoding && baseEncoding[charCode] !== '') {
	              glyphName = baseEncoding[charCode];
	            } else {
	              glyphName = StandardEncoding[charCode];
	            }
	            if (!glyphName) {
	              continue;
	            }
	            standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);
	            var unicodeOrCharCode,
	                isUnicode = false;
	            if (cmapPlatformId === 3 && cmapEncodingId === 1) {
	              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];
	              isUnicode = true;
	            } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {
	              unicodeOrCharCode = MacRomanEncoding.indexOf(standardGlyphName);
	            }
	            var found = false;
	            for (i = 0; i < cmapMappingsLength; ++i) {
	              if (cmapMappings[i].charCode !== unicodeOrCharCode) {
	                continue;
	              }
	              var code = isUnicode ? charCode : unicodeOrCharCode;
	              if (hasGlyph(cmapMappings[i].glyphId, code, -1)) {
	                charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;
	                found = true;
	                break;
	              }
	            }
	            if (!found && properties.glyphNames) {
	              var glyphId = properties.glyphNames.indexOf(glyphName);
	              if (glyphId === -1 && standardGlyphName !== glyphName) {
	                glyphId = properties.glyphNames.indexOf(standardGlyphName);
	              }
	              if (glyphId > 0 && hasGlyph(glyphId, -1, -1)) {
	                charCodeToGlyphId[charCode] = glyphId;
	                found = true;
	              }
	            }
	            if (!found) {
	              charCodeToGlyphId[charCode] = 0;
	            }
	          }
	        } else if (cmapPlatformId === 0 && cmapEncodingId === 0) {
	          for (i = 0; i < cmapMappingsLength; ++i) {
	            charCodeToGlyphId[cmapMappings[i].charCode] = cmapMappings[i].glyphId;
	          }
	        } else {
	          for (i = 0; i < cmapMappingsLength; ++i) {
	            charCode = cmapMappings[i].charCode & 0xFF;
	            charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;
	          }
	        }
	      }
	      if (charCodeToGlyphId.length === 0) {
	        charCodeToGlyphId[0] = 0;
	      }
	      var newMapping = adjustMapping(charCodeToGlyphId, properties);
	      this.toFontChar = newMapping.toFontChar;
	      tables['cmap'] = {
	        tag: 'cmap',
	        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphs)
	      };
	      if (!tables['OS/2'] || !validateOS2Table(tables['OS/2'])) {
	        tables['OS/2'] = {
	          tag: 'OS/2',
	          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)
	        };
	      }
	      if (!tables['post']) {
	        tables['post'] = {
	          tag: 'post',
	          data: createPostTable(properties)
	        };
	      }
	      if (!isTrueType) {
	        try {
	          cffFile = new Stream(tables['CFF '].data);
	          var parser = new CFFParser(cffFile, properties, SEAC_ANALYSIS_ENABLED);
	          cff = parser.parse();
	          var compiler = new CFFCompiler(cff);
	          tables['CFF '].data = compiler.compile();
	        } catch (e) {
	          warn('Failed to compile font ' + properties.loadedName);
	        }
	      }
	      if (!tables['name']) {
	        tables['name'] = {
	          tag: 'name',
	          data: createNameTable(this.name)
	        };
	      } else {
	        var namePrototype = readNameTable(tables['name']);
	        tables['name'].data = createNameTable(name, namePrototype);
	      }
	      var builder = new OpenTypeFileBuilder(header.version);
	      for (var tableTag in tables) {
	        builder.addTable(tableTag, tables[tableTag].data);
	      }
	      return builder.toArray();
	    },
	    convert: function Font_convert(fontName, font, properties) {
	      properties.fixedPitch = false;
	      if (properties.builtInEncoding) {
	        adjustToUnicode(properties, properties.builtInEncoding);
	      }
	      var mapping = font.getGlyphMapping(properties);
	      var newMapping = adjustMapping(mapping, properties);
	      this.toFontChar = newMapping.toFontChar;
	      var numGlyphs = font.numGlyphs;
	      function getCharCodes(charCodeToGlyphId, glyphId) {
	        var charCodes = null;
	        for (var charCode in charCodeToGlyphId) {
	          if (glyphId === charCodeToGlyphId[charCode]) {
	            if (!charCodes) {
	              charCodes = [];
	            }
	            charCodes.push(charCode | 0);
	          }
	        }
	        return charCodes;
	      }
	      function createCharCode(charCodeToGlyphId, glyphId) {
	        for (var charCode in charCodeToGlyphId) {
	          if (glyphId === charCodeToGlyphId[charCode]) {
	            return charCode | 0;
	          }
	        }
	        newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;
	        return newMapping.nextAvailableFontCharCode++;
	      }
	      var seacs = font.seacs;
	      if (SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {
	        var matrix = properties.fontMatrix || FONT_IDENTITY_MATRIX;
	        var charset = font.getCharset();
	        var seacMap = Object.create(null);
	        for (var glyphId in seacs) {
	          glyphId |= 0;
	          var seac = seacs[glyphId];
	          var baseGlyphName = StandardEncoding[seac[2]];
	          var accentGlyphName = StandardEncoding[seac[3]];
	          var baseGlyphId = charset.indexOf(baseGlyphName);
	          var accentGlyphId = charset.indexOf(accentGlyphName);
	          if (baseGlyphId < 0 || accentGlyphId < 0) {
	            continue;
	          }
	          var accentOffset = {
	            x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],
	            y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]
	          };
	          var charCodes = getCharCodes(mapping, glyphId);
	          if (!charCodes) {
	            continue;
	          }
	          for (var i = 0, ii = charCodes.length; i < ii; i++) {
	            var charCode = charCodes[i];
	            var charCodeToGlyphId = newMapping.charCodeToGlyphId;
	            var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);
	            var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);
	            seacMap[charCode] = {
	              baseFontCharCode: baseFontCharCode,
	              accentFontCharCode: accentFontCharCode,
	              accentOffset: accentOffset
	            };
	          }
	        }
	        properties.seacMap = seacMap;
	      }
	      var unitsPerEm = 1 / (properties.fontMatrix || FONT_IDENTITY_MATRIX)[0];
	      var builder = new OpenTypeFileBuilder('\x4F\x54\x54\x4F');
	      builder.addTable('CFF ', font.data);
	      builder.addTable('OS/2', createOS2Table(properties, newMapping.charCodeToGlyphId));
	      builder.addTable('cmap', createCmapTable(newMapping.charCodeToGlyphId, numGlyphs));
	      builder.addTable('head', '\x00\x01\x00\x00' + '\x00\x00\x10\x00' + '\x00\x00\x00\x00' + '\x5F\x0F\x3C\xF5' + '\x00\x00' + safeString16(unitsPerEm) + '\x00\x00\x00\x00\x9e\x0b\x7e\x27' + '\x00\x00\x00\x00\x9e\x0b\x7e\x27' + '\x00\x00' + safeString16(properties.descent) + '\x0F\xFF' + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + '\x00\x11' + '\x00\x00' + '\x00\x00' + '\x00\x00');
	      builder.addTable('hhea', '\x00\x01\x00\x00' + safeString16(properties.ascent) + safeString16(properties.descent) + '\x00\x00' + '\xFF\xFF' + '\x00\x00' + '\x00\x00' + '\x00\x00' + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + string16(numGlyphs));
	      builder.addTable('hmtx', function fontFieldsHmtx() {
	        var charstrings = font.charstrings;
	        var cffWidths = font.cff ? font.cff.widths : null;
	        var hmtx = '\x00\x00\x00\x00';
	        for (var i = 1, ii = numGlyphs; i < ii; i++) {
	          var width = 0;
	          if (charstrings) {
	            var charstring = charstrings[i - 1];
	            width = 'width' in charstring ? charstring.width : 0;
	          } else if (cffWidths) {
	            width = Math.ceil(cffWidths[i] || 0);
	          }
	          hmtx += string16(width) + string16(0);
	        }
	        return hmtx;
	      }());
	      builder.addTable('maxp', '\x00\x00\x50\x00' + string16(numGlyphs));
	      builder.addTable('name', createNameTable(fontName));
	      builder.addTable('post', createPostTable(properties));
	      return builder.toArray();
	    },
	    get spaceWidth() {
	      if ('_shadowWidth' in this) {
	        return this._shadowWidth;
	      }
	      var possibleSpaceReplacements = ['space', 'minus', 'one', 'i', 'I'];
	      var width;
	      for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {
	        var glyphName = possibleSpaceReplacements[i];
	        if (glyphName in this.widths) {
	          width = this.widths[glyphName];
	          break;
	        }
	        var glyphsUnicodeMap = getGlyphsUnicode();
	        var glyphUnicode = glyphsUnicodeMap[glyphName];
	        var charcode = 0;
	        if (this.composite) {
	          if (this.cMap.contains(glyphUnicode)) {
	            charcode = this.cMap.lookup(glyphUnicode);
	          }
	        }
	        if (!charcode && this.toUnicode) {
	          charcode = this.toUnicode.charCodeOf(glyphUnicode);
	        }
	        if (charcode <= 0) {
	          charcode = glyphUnicode;
	        }
	        width = this.widths[charcode];
	        if (width) {
	          break;
	        }
	      }
	      width = width || this.defaultWidth;
	      this._shadowWidth = width;
	      return width;
	    },
	    charToGlyph: function Font_charToGlyph(charcode, isSpace) {
	      var fontCharCode, width, operatorListId;
	      var widthCode = charcode;
	      if (this.cMap && this.cMap.contains(charcode)) {
	        widthCode = this.cMap.lookup(charcode);
	      }
	      width = this.widths[widthCode];
	      width = isNum(width) ? width : this.defaultWidth;
	      var vmetric = this.vmetrics && this.vmetrics[widthCode];
	      var unicode = this.toUnicode.get(charcode) || charcode;
	      if (typeof unicode === 'number') {
	        unicode = String.fromCharCode(unicode);
	      }
	      var isInFont = charcode in this.toFontChar;
	      fontCharCode = this.toFontChar[charcode] || charcode;
	      if (this.missingFile) {
	        fontCharCode = mapSpecialUnicodeValues(fontCharCode);
	      }
	      if (this.isType3Font) {
	        operatorListId = fontCharCode;
	      }
	      var accent = null;
	      if (this.seacMap && this.seacMap[charcode]) {
	        isInFont = true;
	        var seac = this.seacMap[charcode];
	        fontCharCode = seac.baseFontCharCode;
	        accent = {
	          fontChar: String.fromCharCode(seac.accentFontCharCode),
	          offset: seac.accentOffset
	        };
	      }
	      var fontChar = String.fromCharCode(fontCharCode);
	      var glyph = this.glyphCache[charcode];
	      if (!glyph || !glyph.matchesForCache(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {
	        glyph = new Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);
	        this.glyphCache[charcode] = glyph;
	      }
	      return glyph;
	    },
	    charsToGlyphs: function Font_charsToGlyphs(chars) {
	      var charsCache = this.charsCache;
	      var glyphs, glyph, charcode;
	      if (charsCache) {
	        glyphs = charsCache[chars];
	        if (glyphs) {
	          return glyphs;
	        }
	      }
	      if (!charsCache) {
	        charsCache = this.charsCache = Object.create(null);
	      }
	      glyphs = [];
	      var charsCacheKey = chars;
	      var i = 0,
	          ii;
	      if (this.cMap) {
	        var c = Object.create(null);
	        while (i < chars.length) {
	          this.cMap.readCharCode(chars, i, c);
	          charcode = c.charcode;
	          var length = c.length;
	          i += length;
	          var isSpace = length === 1 && chars.charCodeAt(i - 1) === 0x20;
	          glyph = this.charToGlyph(charcode, isSpace);
	          glyphs.push(glyph);
	        }
	      } else {
	        for (i = 0, ii = chars.length; i < ii; ++i) {
	          charcode = chars.charCodeAt(i);
	          glyph = this.charToGlyph(charcode, charcode === 0x20);
	          glyphs.push(glyph);
	        }
	      }
	      return charsCache[charsCacheKey] = glyphs;
	    }
	  };
	  return Font;
	}();
	var ErrorFont = function ErrorFontClosure() {
	  function ErrorFont(error) {
	    this.error = error;
	    this.loadedName = 'g_font_error';
	    this.loading = false;
	  }
	  ErrorFont.prototype = {
	    charsToGlyphs: function ErrorFont_charsToGlyphs() {
	      return [];
	    },
	    exportData: function ErrorFont_exportData() {
	      return { error: this.error };
	    }
	  };
	  return ErrorFont;
	}();
	function type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {
	  var charCodeToGlyphId = Object.create(null);
	  var glyphId, charCode, baseEncoding;
	  var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
	  if (properties.baseEncodingName) {
	    baseEncoding = getEncoding(properties.baseEncodingName);
	    for (charCode = 0; charCode < baseEncoding.length; charCode++) {
	      glyphId = glyphNames.indexOf(baseEncoding[charCode]);
	      if (glyphId >= 0) {
	        charCodeToGlyphId[charCode] = glyphId;
	      } else {
	        charCodeToGlyphId[charCode] = 0;
	      }
	    }
	  } else if (isSymbolicFont) {
	    for (charCode in builtInEncoding) {
	      charCodeToGlyphId[charCode] = builtInEncoding[charCode];
	    }
	  } else {
	    baseEncoding = StandardEncoding;
	    for (charCode = 0; charCode < baseEncoding.length; charCode++) {
	      glyphId = glyphNames.indexOf(baseEncoding[charCode]);
	      if (glyphId >= 0) {
	        charCodeToGlyphId[charCode] = glyphId;
	      } else {
	        charCodeToGlyphId[charCode] = 0;
	      }
	    }
	  }
	  var differences = properties.differences,
	      glyphsUnicodeMap;
	  if (differences) {
	    for (charCode in differences) {
	      var glyphName = differences[charCode];
	      glyphId = glyphNames.indexOf(glyphName);
	      if (glyphId === -1) {
	        if (!glyphsUnicodeMap) {
	          glyphsUnicodeMap = getGlyphsUnicode();
	        }
	        var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);
	        if (standardGlyphName !== glyphName) {
	          glyphId = glyphNames.indexOf(standardGlyphName);
	        }
	      }
	      if (glyphId >= 0) {
	        charCodeToGlyphId[charCode] = glyphId;
	      } else {
	        charCodeToGlyphId[charCode] = 0;
	      }
	    }
	  }
	  return charCodeToGlyphId;
	}
	var Type1Font = function Type1FontClosure() {
	  function findBlock(streamBytes, signature, startIndex) {
	    var streamBytesLength = streamBytes.length;
	    var signatureLength = signature.length;
	    var scanLength = streamBytesLength - signatureLength;
	    var i = startIndex,
	        j,
	        found = false;
	    while (i < scanLength) {
	      j = 0;
	      while (j < signatureLength && streamBytes[i + j] === signature[j]) {
	        j++;
	      }
	      if (j >= signatureLength) {
	        i += j;
	        while (i < streamBytesLength && isSpace(streamBytes[i])) {
	          i++;
	        }
	        found = true;
	        break;
	      }
	      i++;
	    }
	    return {
	      found: found,
	      length: i
	    };
	  }
	  function getHeaderBlock(stream, suggestedLength) {
	    var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];
	    var streamStartPos = stream.pos;
	    var headerBytes, headerBytesLength, block;
	    try {
	      headerBytes = stream.getBytes(suggestedLength);
	      headerBytesLength = headerBytes.length;
	    } catch (ex) {
	      if (ex instanceof MissingDataException) {
	        throw ex;
	      }
	    }
	    if (headerBytesLength === suggestedLength) {
	      block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);
	      if (block.found && block.length === suggestedLength) {
	        return {
	          stream: new Stream(headerBytes),
	          length: suggestedLength
	        };
	      }
	    }
	    warn('Invalid "Length1" property in Type1 font -- trying to recover.');
	    stream.pos = streamStartPos;
	    var SCAN_BLOCK_LENGTH = 2048;
	    var actualLength;
	    while (true) {
	      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
	      block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);
	      if (block.length === 0) {
	        break;
	      }
	      stream.pos += block.length;
	      if (block.found) {
	        actualLength = stream.pos - streamStartPos;
	        break;
	      }
	    }
	    stream.pos = streamStartPos;
	    if (actualLength) {
	      return {
	        stream: new Stream(stream.getBytes(actualLength)),
	        length: actualLength
	      };
	    }
	    warn('Unable to recover "Length1" property in Type1 font -- using as is.');
	    return {
	      stream: new Stream(stream.getBytes(suggestedLength)),
	      length: suggestedLength
	    };
	  }
	  function getEexecBlock(stream, suggestedLength) {
	    var eexecBytes = stream.getBytes();
	    return {
	      stream: new Stream(eexecBytes),
	      length: eexecBytes.length
	    };
	  }
	  function Type1Font(name, file, properties) {
	    var PFB_HEADER_SIZE = 6;
	    var headerBlockLength = properties.length1;
	    var eexecBlockLength = properties.length2;
	    var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);
	    var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;
	    if (pfbHeaderPresent) {
	      file.skip(PFB_HEADER_SIZE);
	      headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];
	    }
	    var headerBlock = getHeaderBlock(file, headerBlockLength);
	    headerBlockLength = headerBlock.length;
	    var headerBlockParser = new Type1Parser(headerBlock.stream, false, SEAC_ANALYSIS_ENABLED);
	    headerBlockParser.extractFontHeader(properties);
	    if (pfbHeaderPresent) {
	      pfbHeader = file.getBytes(PFB_HEADER_SIZE);
	      eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];
	    }
	    var eexecBlock = getEexecBlock(file, eexecBlockLength);
	    eexecBlockLength = eexecBlock.length;
	    var eexecBlockParser = new Type1Parser(eexecBlock.stream, true, SEAC_ANALYSIS_ENABLED);
	    var data = eexecBlockParser.extractFontProgram();
	    for (var info in data.properties) {
	      properties[info] = data.properties[info];
	    }
	    var charstrings = data.charstrings;
	    var type2Charstrings = this.getType2Charstrings(charstrings);
	    var subrs = this.getType2Subrs(data.subrs);
	    this.charstrings = charstrings;
	    this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);
	    this.seacs = this.getSeacs(data.charstrings);
	  }
	  Type1Font.prototype = {
	    get numGlyphs() {
	      return this.charstrings.length + 1;
	    },
	    getCharset: function Type1Font_getCharset() {
	      var charset = ['.notdef'];
	      var charstrings = this.charstrings;
	      for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {
	        charset.push(charstrings[glyphId].glyphName);
	      }
	      return charset;
	    },
	    getGlyphMapping: function Type1Font_getGlyphMapping(properties) {
	      var charstrings = this.charstrings;
	      var glyphNames = ['.notdef'],
	          glyphId;
	      for (glyphId = 0; glyphId < charstrings.length; glyphId++) {
	        glyphNames.push(charstrings[glyphId].glyphName);
	      }
	      var encoding = properties.builtInEncoding;
	      if (encoding) {
	        var builtInEncoding = Object.create(null);
	        for (var charCode in encoding) {
	          glyphId = glyphNames.indexOf(encoding[charCode]);
	          if (glyphId >= 0) {
	            builtInEncoding[charCode] = glyphId;
	          }
	        }
	      }
	      return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);
	    },
	    getSeacs: function Type1Font_getSeacs(charstrings) {
	      var i, ii;
	      var seacMap = [];
	      for (i = 0, ii = charstrings.length; i < ii; i++) {
	        var charstring = charstrings[i];
	        if (charstring.seac) {
	          seacMap[i + 1] = charstring.seac;
	        }
	      }
	      return seacMap;
	    },
	    getType2Charstrings: function Type1Font_getType2Charstrings(type1Charstrings) {
	      var type2Charstrings = [];
	      for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {
	        type2Charstrings.push(type1Charstrings[i].charstring);
	      }
	      return type2Charstrings;
	    },
	    getType2Subrs: function Type1Font_getType2Subrs(type1Subrs) {
	      var bias = 0;
	      var count = type1Subrs.length;
	      if (count < 1133) {
	        bias = 107;
	      } else if (count < 33769) {
	        bias = 1131;
	      } else {
	        bias = 32768;
	      }
	      var type2Subrs = [];
	      var i;
	      for (i = 0; i < bias; i++) {
	        type2Subrs.push([0x0B]);
	      }
	      for (i = 0; i < count; i++) {
	        type2Subrs.push(type1Subrs[i]);
	      }
	      return type2Subrs;
	    },
	    wrap: function Type1Font_wrap(name, glyphs, charstrings, subrs, properties) {
	      var cff = new CFF();
	      cff.header = new CFFHeader(1, 0, 4, 4);
	      cff.names = [name];
	      var topDict = new CFFTopDict();
	      topDict.setByName('version', 391);
	      topDict.setByName('Notice', 392);
	      topDict.setByName('FullName', 393);
	      topDict.setByName('FamilyName', 394);
	      topDict.setByName('Weight', 395);
	      topDict.setByName('Encoding', null);
	      topDict.setByName('FontMatrix', properties.fontMatrix);
	      topDict.setByName('FontBBox', properties.bbox);
	      topDict.setByName('charset', null);
	      topDict.setByName('CharStrings', null);
	      topDict.setByName('Private', null);
	      cff.topDict = topDict;
	      var strings = new CFFStrings();
	      strings.add('Version 0.11');
	      strings.add('See original notice');
	      strings.add(name);
	      strings.add(name);
	      strings.add('Medium');
	      cff.strings = strings;
	      cff.globalSubrIndex = new CFFIndex();
	      var count = glyphs.length;
	      var charsetArray = [0];
	      var i, ii;
	      for (i = 0; i < count; i++) {
	        var index = CFFStandardStrings.indexOf(charstrings[i].glyphName);
	        if (index === -1) {
	          index = 0;
	        }
	        charsetArray.push(index >> 8 & 0xff, index & 0xff);
	      }
	      cff.charset = new CFFCharset(false, 0, [], charsetArray);
	      var charStringsIndex = new CFFIndex();
	      charStringsIndex.add([0x8B, 0x0E]);
	      for (i = 0; i < count; i++) {
	        var glyph = glyphs[i];
	        if (glyph.length === 0) {
	          charStringsIndex.add([0x8B, 0x0E]);
	          continue;
	        }
	        charStringsIndex.add(glyph);
	      }
	      cff.charStrings = charStringsIndex;
	      var privateDict = new CFFPrivateDict();
	      privateDict.setByName('Subrs', null);
	      var fields = ['BlueValues', 'OtherBlues', 'FamilyBlues', 'FamilyOtherBlues', 'StemSnapH', 'StemSnapV', 'BlueShift', 'BlueFuzz', 'BlueScale', 'LanguageGroup', 'ExpansionFactor', 'ForceBold', 'StdHW', 'StdVW'];
	      for (i = 0, ii = fields.length; i < ii; i++) {
	        var field = fields[i];
	        if (!(field in properties.privateData)) {
	          continue;
	        }
	        var value = properties.privateData[field];
	        if (isArray(value)) {
	          for (var j = value.length - 1; j > 0; j--) {
	            value[j] -= value[j - 1];
	          }
	        }
	        privateDict.setByName(field, value);
	      }
	      cff.topDict.privateDict = privateDict;
	      var subrIndex = new CFFIndex();
	      for (i = 0, ii = subrs.length; i < ii; i++) {
	        subrIndex.add(subrs[i]);
	      }
	      privateDict.subrsIndex = subrIndex;
	      var compiler = new CFFCompiler(cff);
	      return compiler.compile();
	    }
	  };
	  return Type1Font;
	}();
	var CFFFont = function CFFFontClosure() {
	  function CFFFont(file, properties) {
	    this.properties = properties;
	    var parser = new CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);
	    this.cff = parser.parse();
	    var compiler = new CFFCompiler(this.cff);
	    this.seacs = this.cff.seacs;
	    try {
	      this.data = compiler.compile();
	    } catch (e) {
	      warn('Failed to compile font ' + properties.loadedName);
	      this.data = file;
	    }
	  }
	  CFFFont.prototype = {
	    get numGlyphs() {
	      return this.cff.charStrings.count;
	    },
	    getCharset: function CFFFont_getCharset() {
	      return this.cff.charset.charset;
	    },
	    getGlyphMapping: function CFFFont_getGlyphMapping() {
	      var cff = this.cff;
	      var properties = this.properties;
	      var charsets = cff.charset.charset;
	      var charCodeToGlyphId;
	      var glyphId;
	      if (properties.composite) {
	        charCodeToGlyphId = Object.create(null);
	        if (cff.isCIDFont) {
	          for (glyphId = 0; glyphId < charsets.length; glyphId++) {
	            var cid = charsets[glyphId];
	            var charCode = properties.cMap.charCodeOf(cid);
	            charCodeToGlyphId[charCode] = glyphId;
	          }
	        } else {
	          for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {
	            charCodeToGlyphId[glyphId] = glyphId;
	          }
	        }
	        return charCodeToGlyphId;
	      }
	      var encoding = cff.encoding ? cff.encoding.encoding : null;
	      charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);
	      return charCodeToGlyphId;
	    }
	  };
	  return CFFFont;
	}();
	(function checkSeacSupport() {
	  if (typeof navigator !== 'undefined' && /Windows/.test(navigator.userAgent)) {
	    SEAC_ANALYSIS_ENABLED = true;
	  }
	})();
	(function checkChromeWindows() {
	  if (typeof navigator !== 'undefined' && /Windows.*Chrome/.test(navigator.userAgent)) {
	    SKIP_PRIVATE_USE_RANGE_F000_TO_F01F = true;
	  }
	})();
	exports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;
	exports.PRIVATE_USE_OFFSET_START = PRIVATE_USE_OFFSET_START;
	exports.PRIVATE_USE_OFFSET_END = PRIVATE_USE_OFFSET_END;
	exports.ErrorFont = ErrorFont;
	exports.Font = Font;
	exports.FontFlags = FontFlags;
	exports.IdentityToUnicodeMap = IdentityToUnicodeMap;
	exports.ProblematicCharRanges = ProblematicCharRanges;
	exports.ToUnicodeMap = ToUnicodeMap;
	exports.getFontType = getFontType;

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreColorSpace = __w_pdfjs_require__(3);
	var coreStream = __w_pdfjs_require__(2);
	var coreJpx = __w_pdfjs_require__(15);
	var ImageKind = sharedUtil.ImageKind;
	var assert = sharedUtil.assert;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var isArray = sharedUtil.isArray;
	var warn = sharedUtil.warn;
	var Name = corePrimitives.Name;
	var isStream = corePrimitives.isStream;
	var ColorSpace = coreColorSpace.ColorSpace;
	var DecodeStream = coreStream.DecodeStream;
	var JpegStream = coreStream.JpegStream;
	var JpxImage = coreJpx.JpxImage;
	var PDFImage = function PDFImageClosure() {
	  function handleImageData(image, nativeDecoder) {
	    if (nativeDecoder && nativeDecoder.canDecode(image)) {
	      return nativeDecoder.decode(image);
	    }
	    return Promise.resolve(image);
	  }
	  function decodeAndClamp(value, addend, coefficient, max) {
	    value = addend + value * coefficient;
	    return value < 0 ? 0 : value > max ? max : value;
	  }
	  function resizeImageMask(src, bpc, w1, h1, w2, h2) {
	    var length = w2 * h2;
	    var dest = bpc <= 8 ? new Uint8Array(length) : bpc <= 16 ? new Uint16Array(length) : new Uint32Array(length);
	    var xRatio = w1 / w2;
	    var yRatio = h1 / h2;
	    var i,
	        j,
	        py,
	        newIndex = 0,
	        oldIndex;
	    var xScaled = new Uint16Array(w2);
	    var w1Scanline = w1;
	    for (i = 0; i < w2; i++) {
	      xScaled[i] = Math.floor(i * xRatio);
	    }
	    for (i = 0; i < h2; i++) {
	      py = Math.floor(i * yRatio) * w1Scanline;
	      for (j = 0; j < w2; j++) {
	        oldIndex = py + xScaled[j];
	        dest[newIndex++] = src[oldIndex];
	      }
	    }
	    return dest;
	  }
	  function PDFImage(xref, res, image, inline, smask, mask, isMask) {
	    this.image = image;
	    var dict = image.dict;
	    if (dict.has('Filter')) {
	      var filter = dict.get('Filter').name;
	      if (filter === 'JPXDecode') {
	        var jpxImage = new JpxImage();
	        jpxImage.parseImageProperties(image.stream);
	        image.stream.reset();
	        image.bitsPerComponent = jpxImage.bitsPerComponent;
	        image.numComps = jpxImage.componentsCount;
	      } else if (filter === 'JBIG2Decode') {
	        image.bitsPerComponent = 1;
	        image.numComps = 1;
	      }
	    }
	    this.width = dict.get('Width', 'W');
	    this.height = dict.get('Height', 'H');
	    if (this.width < 1 || this.height < 1) {
	      error('Invalid image width: ' + this.width + ' or height: ' + this.height);
	    }
	    this.interpolate = dict.get('Interpolate', 'I') || false;
	    this.imageMask = dict.get('ImageMask', 'IM') || false;
	    this.matte = dict.get('Matte') || false;
	    var bitsPerComponent = image.bitsPerComponent;
	    if (!bitsPerComponent) {
	      bitsPerComponent = dict.get('BitsPerComponent', 'BPC');
	      if (!bitsPerComponent) {
	        if (this.imageMask) {
	          bitsPerComponent = 1;
	        } else {
	          error('Bits per component missing in image: ' + this.imageMask);
	        }
	      }
	    }
	    this.bpc = bitsPerComponent;
	    if (!this.imageMask) {
	      var colorSpace = dict.get('ColorSpace', 'CS');
	      if (!colorSpace) {
	        info('JPX images (which do not require color spaces)');
	        switch (image.numComps) {
	          case 1:
	            colorSpace = Name.get('DeviceGray');
	            break;
	          case 3:
	            colorSpace = Name.get('DeviceRGB');
	            break;
	          case 4:
	            colorSpace = Name.get('DeviceCMYK');
	            break;
	          default:
	            error('JPX images with ' + this.numComps + ' color components not supported.');
	        }
	      }
	      this.colorSpace = ColorSpace.parse(colorSpace, xref, res);
	      this.numComps = this.colorSpace.numComps;
	    }
	    this.decode = dict.getArray('Decode', 'D');
	    this.needsDecode = false;
	    if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode) || isMask && !ColorSpace.isDefaultDecode(this.decode, 1))) {
	      this.needsDecode = true;
	      var max = (1 << bitsPerComponent) - 1;
	      this.decodeCoefficients = [];
	      this.decodeAddends = [];
	      for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {
	        var dmin = this.decode[i];
	        var dmax = this.decode[i + 1];
	        this.decodeCoefficients[j] = dmax - dmin;
	        this.decodeAddends[j] = max * dmin;
	      }
	    }
	    if (smask) {
	      this.smask = new PDFImage(xref, res, smask, false);
	    } else if (mask) {
	      if (isStream(mask)) {
	        var maskDict = mask.dict,
	            imageMask = maskDict.get('ImageMask', 'IM');
	        if (!imageMask) {
	          warn('Ignoring /Mask in image without /ImageMask.');
	        } else {
	          this.mask = new PDFImage(xref, res, mask, false, null, null, true);
	        }
	      } else {
	        this.mask = mask;
	      }
	    }
	  }
	  PDFImage.buildImage = function PDFImage_buildImage(handler, xref, res, image, inline, nativeDecoder) {
	    var imagePromise = handleImageData(image, nativeDecoder);
	    var smaskPromise;
	    var maskPromise;
	    var smask = image.dict.get('SMask');
	    var mask = image.dict.get('Mask');
	    if (smask) {
	      smaskPromise = handleImageData(smask, nativeDecoder);
	      maskPromise = Promise.resolve(null);
	    } else {
	      smaskPromise = Promise.resolve(null);
	      if (mask) {
	        if (isStream(mask)) {
	          maskPromise = handleImageData(mask, nativeDecoder);
	        } else if (isArray(mask)) {
	          maskPromise = Promise.resolve(mask);
	        } else {
	          warn('Unsupported mask format.');
	          maskPromise = Promise.resolve(null);
	        }
	      } else {
	        maskPromise = Promise.resolve(null);
	      }
	    }
	    return Promise.all([imagePromise, smaskPromise, maskPromise]).then(function (results) {
	      var imageData = results[0];
	      var smaskData = results[1];
	      var maskData = results[2];
	      return new PDFImage(xref, res, imageData, inline, smaskData, maskData);
	    });
	  };
	  PDFImage.createMask = function PDFImage_createMask(imgArray, width, height, imageIsFromDecodeStream, inverseDecode) {
	    var computedLength = (width + 7 >> 3) * height;
	    var actualLength = imgArray.byteLength;
	    var haveFullData = computedLength === actualLength;
	    var data, i;
	    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {
	      data = imgArray;
	    } else if (!inverseDecode) {
	      data = new Uint8Array(actualLength);
	      data.set(imgArray);
	    } else {
	      data = new Uint8Array(computedLength);
	      data.set(imgArray);
	      for (i = actualLength; i < computedLength; i++) {
	        data[i] = 0xff;
	      }
	    }
	    if (inverseDecode) {
	      for (i = 0; i < actualLength; i++) {
	        data[i] = ~data[i];
	      }
	    }
	    return {
	      data: data,
	      width: width,
	      height: height
	    };
	  };
	  PDFImage.prototype = {
	    get drawWidth() {
	      return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);
	    },
	    get drawHeight() {
	      return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);
	    },
	    decodeBuffer: function PDFImage_decodeBuffer(buffer) {
	      var bpc = this.bpc;
	      var numComps = this.numComps;
	      var decodeAddends = this.decodeAddends;
	      var decodeCoefficients = this.decodeCoefficients;
	      var max = (1 << bpc) - 1;
	      var i, ii;
	      if (bpc === 1) {
	        for (i = 0, ii = buffer.length; i < ii; i++) {
	          buffer[i] = +!buffer[i];
	        }
	        return;
	      }
	      var index = 0;
	      for (i = 0, ii = this.width * this.height; i < ii; i++) {
	        for (var j = 0; j < numComps; j++) {
	          buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);
	          index++;
	        }
	      }
	    },
	    getComponents: function PDFImage_getComponents(buffer) {
	      var bpc = this.bpc;
	      if (bpc === 8) {
	        return buffer;
	      }
	      var width = this.width;
	      var height = this.height;
	      var numComps = this.numComps;
	      var length = width * height * numComps;
	      var bufferPos = 0;
	      var output = bpc <= 8 ? new Uint8Array(length) : bpc <= 16 ? new Uint16Array(length) : new Uint32Array(length);
	      var rowComps = width * numComps;
	      var max = (1 << bpc) - 1;
	      var i = 0,
	          ii,
	          buf;
	      if (bpc === 1) {
	        var mask, loop1End, loop2End;
	        for (var j = 0; j < height; j++) {
	          loop1End = i + (rowComps & ~7);
	          loop2End = i + rowComps;
	          while (i < loop1End) {
	            buf = buffer[bufferPos++];
	            output[i] = buf >> 7 & 1;
	            output[i + 1] = buf >> 6 & 1;
	            output[i + 2] = buf >> 5 & 1;
	            output[i + 3] = buf >> 4 & 1;
	            output[i + 4] = buf >> 3 & 1;
	            output[i + 5] = buf >> 2 & 1;
	            output[i + 6] = buf >> 1 & 1;
	            output[i + 7] = buf & 1;
	            i += 8;
	          }
	          if (i < loop2End) {
	            buf = buffer[bufferPos++];
	            mask = 128;
	            while (i < loop2End) {
	              output[i++] = +!!(buf & mask);
	              mask >>= 1;
	            }
	          }
	        }
	      } else {
	        var bits = 0;
	        buf = 0;
	        for (i = 0, ii = length; i < ii; ++i) {
	          if (i % rowComps === 0) {
	            buf = 0;
	            bits = 0;
	          }
	          while (bits < bpc) {
	            buf = buf << 8 | buffer[bufferPos++];
	            bits += 8;
	          }
	          var remainingBits = bits - bpc;
	          var value = buf >> remainingBits;
	          output[i] = value < 0 ? 0 : value > max ? max : value;
	          buf = buf & (1 << remainingBits) - 1;
	          bits = remainingBits;
	        }
	      }
	      return output;
	    },
	    fillOpacity: function PDFImage_fillOpacity(rgbaBuf, width, height, actualHeight, image) {
	      var smask = this.smask;
	      var mask = this.mask;
	      var alphaBuf, sw, sh, i, ii, j;
	      if (smask) {
	        sw = smask.width;
	        sh = smask.height;
	        alphaBuf = new Uint8Array(sw * sh);
	        smask.fillGrayBuffer(alphaBuf);
	        if (sw !== width || sh !== height) {
	          alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);
	        }
	      } else if (mask) {
	        if (mask instanceof PDFImage) {
	          sw = mask.width;
	          sh = mask.height;
	          alphaBuf = new Uint8Array(sw * sh);
	          mask.numComps = 1;
	          mask.fillGrayBuffer(alphaBuf);
	          for (i = 0, ii = sw * sh; i < ii; ++i) {
	            alphaBuf[i] = 255 - alphaBuf[i];
	          }
	          if (sw !== width || sh !== height) {
	            alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);
	          }
	        } else if (isArray(mask)) {
	          alphaBuf = new Uint8Array(width * height);
	          var numComps = this.numComps;
	          for (i = 0, ii = width * height; i < ii; ++i) {
	            var opacity = 0;
	            var imageOffset = i * numComps;
	            for (j = 0; j < numComps; ++j) {
	              var color = image[imageOffset + j];
	              var maskOffset = j * 2;
	              if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {
	                opacity = 255;
	                break;
	              }
	            }
	            alphaBuf[i] = opacity;
	          }
	        } else {
	          error('Unknown mask format.');
	        }
	      }
	      if (alphaBuf) {
	        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {
	          rgbaBuf[j] = alphaBuf[i];
	        }
	      } else {
	        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {
	          rgbaBuf[j] = 255;
	        }
	      }
	    },
	    undoPreblend: function PDFImage_undoPreblend(buffer, width, height) {
	      var matte = this.smask && this.smask.matte;
	      if (!matte) {
	        return;
	      }
	      var matteRgb = this.colorSpace.getRgb(matte, 0);
	      var matteR = matteRgb[0];
	      var matteG = matteRgb[1];
	      var matteB = matteRgb[2];
	      var length = width * height * 4;
	      var r, g, b;
	      for (var i = 0; i < length; i += 4) {
	        var alpha = buffer[i + 3];
	        if (alpha === 0) {
	          buffer[i] = 255;
	          buffer[i + 1] = 255;
	          buffer[i + 2] = 255;
	          continue;
	        }
	        var k = 255 / alpha;
	        r = (buffer[i] - matteR) * k + matteR;
	        g = (buffer[i + 1] - matteG) * k + matteG;
	        b = (buffer[i + 2] - matteB) * k + matteB;
	        buffer[i] = r <= 0 ? 0 : r >= 255 ? 255 : r | 0;
	        buffer[i + 1] = g <= 0 ? 0 : g >= 255 ? 255 : g | 0;
	        buffer[i + 2] = b <= 0 ? 0 : b >= 255 ? 255 : b | 0;
	      }
	    },
	    createImageData: function PDFImage_createImageData(forceRGBA) {
	      var drawWidth = this.drawWidth;
	      var drawHeight = this.drawHeight;
	      var imgData = {
	        width: drawWidth,
	        height: drawHeight
	      };
	      var numComps = this.numComps;
	      var originalWidth = this.width;
	      var originalHeight = this.height;
	      var bpc = this.bpc;
	      var rowBytes = originalWidth * numComps * bpc + 7 >> 3;
	      var imgArray;
	      if (!forceRGBA) {
	        var kind;
	        if (this.colorSpace.name === 'DeviceGray' && bpc === 1) {
	          kind = ImageKind.GRAYSCALE_1BPP;
	        } else if (this.colorSpace.name === 'DeviceRGB' && bpc === 8 && !this.needsDecode) {
	          kind = ImageKind.RGB_24BPP;
	        }
	        if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {
	          imgData.kind = kind;
	          imgArray = this.getImageBytes(originalHeight * rowBytes);
	          if (this.image instanceof DecodeStream) {
	            imgData.data = imgArray;
	          } else {
	            var newArray = new Uint8Array(imgArray.length);
	            newArray.set(imgArray);
	            imgData.data = newArray;
	          }
	          if (this.needsDecode) {
	            assert(kind === ImageKind.GRAYSCALE_1BPP);
	            var buffer = imgData.data;
	            for (var i = 0, ii = buffer.length; i < ii; i++) {
	              buffer[i] ^= 0xff;
	            }
	          }
	          return imgData;
	        }
	        if (this.image instanceof JpegStream && !this.smask && !this.mask && (this.colorSpace.name === 'DeviceGray' || this.colorSpace.name === 'DeviceRGB' || this.colorSpace.name === 'DeviceCMYK')) {
	          imgData.kind = ImageKind.RGB_24BPP;
	          imgData.data = this.getImageBytes(originalHeight * rowBytes, drawWidth, drawHeight, true);
	          return imgData;
	        }
	      }
	      imgArray = this.getImageBytes(originalHeight * rowBytes);
	      var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;
	      var comps = this.getComponents(imgArray);
	      var alpha01, maybeUndoPreblend;
	      if (!forceRGBA && !this.smask && !this.mask) {
	        imgData.kind = ImageKind.RGB_24BPP;
	        imgData.data = new Uint8Array(drawWidth * drawHeight * 3);
	        alpha01 = 0;
	        maybeUndoPreblend = false;
	      } else {
	        imgData.kind = ImageKind.RGBA_32BPP;
	        imgData.data = new Uint8Array(drawWidth * drawHeight * 4);
	        alpha01 = 1;
	        maybeUndoPreblend = true;
	        this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);
	      }
	      if (this.needsDecode) {
	        this.decodeBuffer(comps);
	      }
	      this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);
	      if (maybeUndoPreblend) {
	        this.undoPreblend(imgData.data, drawWidth, actualHeight);
	      }
	      return imgData;
	    },
	    fillGrayBuffer: function PDFImage_fillGrayBuffer(buffer) {
	      var numComps = this.numComps;
	      if (numComps !== 1) {
	        error('Reading gray scale from a color image: ' + numComps);
	      }
	      var width = this.width;
	      var height = this.height;
	      var bpc = this.bpc;
	      var rowBytes = width * numComps * bpc + 7 >> 3;
	      var imgArray = this.getImageBytes(height * rowBytes);
	      var comps = this.getComponents(imgArray);
	      var i, length;
	      if (bpc === 1) {
	        length = width * height;
	        if (this.needsDecode) {
	          for (i = 0; i < length; ++i) {
	            buffer[i] = comps[i] - 1 & 255;
	          }
	        } else {
	          for (i = 0; i < length; ++i) {
	            buffer[i] = -comps[i] & 255;
	          }
	        }
	        return;
	      }
	      if (this.needsDecode) {
	        this.decodeBuffer(comps);
	      }
	      length = width * height;
	      var scale = 255 / ((1 << bpc) - 1);
	      for (i = 0; i < length; ++i) {
	        buffer[i] = scale * comps[i] | 0;
	      }
	    },
	    getImageBytes: function PDFImage_getImageBytes(length, drawWidth, drawHeight, forceRGB) {
	      this.image.reset();
	      this.image.drawWidth = drawWidth || this.width;
	      this.image.drawHeight = drawHeight || this.height;
	      this.image.forceRGB = !!forceRGB;
	      return this.image.getBytes(length);
	    }
	  };
	  return PDFImage;
	}();
	exports.PDFImage = PDFImage;

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreArithmeticDecoder = __w_pdfjs_require__(10);
	var error = sharedUtil.error;
	var log2 = sharedUtil.log2;
	var readInt8 = sharedUtil.readInt8;
	var readUint16 = sharedUtil.readUint16;
	var readUint32 = sharedUtil.readUint32;
	var shadow = sharedUtil.shadow;
	var ArithmeticDecoder = coreArithmeticDecoder.ArithmeticDecoder;
	var Jbig2Image = function Jbig2ImageClosure() {
	  function ContextCache() {}
	  ContextCache.prototype = {
	    getContexts: function getContexts(id) {
	      if (id in this) {
	        return this[id];
	      }
	      return this[id] = new Int8Array(1 << 16);
	    }
	  };
	  function DecodingContext(data, start, end) {
	    this.data = data;
	    this.start = start;
	    this.end = end;
	  }
	  DecodingContext.prototype = {
	    get decoder() {
	      var decoder = new ArithmeticDecoder(this.data, this.start, this.end);
	      return shadow(this, 'decoder', decoder);
	    },
	    get contextCache() {
	      var cache = new ContextCache();
	      return shadow(this, 'contextCache', cache);
	    }
	  };
	  function decodeInteger(contextCache, procedure, decoder) {
	    var contexts = contextCache.getContexts(procedure);
	    var prev = 1;
	    function readBits(length) {
	      var v = 0;
	      for (var i = 0; i < length; i++) {
	        var bit = decoder.readBit(contexts, prev);
	        prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;
	        v = v << 1 | bit;
	      }
	      return v >>> 0;
	    }
	    var sign = readBits(1);
	    var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);
	    return sign === 0 ? value : value > 0 ? -value : null;
	  }
	  function decodeIAID(contextCache, decoder, codeLength) {
	    var contexts = contextCache.getContexts('IAID');
	    var prev = 1;
	    for (var i = 0; i < codeLength; i++) {
	      var bit = decoder.readBit(contexts, prev);
	      prev = prev << 1 | bit;
	    }
	    if (codeLength < 31) {
	      return prev & (1 << codeLength) - 1;
	    }
	    return prev & 0x7FFFFFFF;
	  }
	  var SegmentTypes = ['SymbolDictionary', null, null, null, 'IntermediateTextRegion', null, 'ImmediateTextRegion', 'ImmediateLosslessTextRegion', null, null, null, null, null, null, null, null, 'patternDictionary', null, null, null, 'IntermediateHalftoneRegion', null, 'ImmediateHalftoneRegion', 'ImmediateLosslessHalftoneRegion', null, null, null, null, null, null, null, null, null, null, null, null, 'IntermediateGenericRegion', null, 'ImmediateGenericRegion', 'ImmediateLosslessGenericRegion', 'IntermediateGenericRefinementRegion', null, 'ImmediateGenericRefinementRegion', 'ImmediateLosslessGenericRefinementRegion', null, null, null, null, 'PageInformation', 'EndOfPage', 'EndOfStripe', 'EndOfFile', 'Profiles', 'Tables', null, null, null, null, null, null, null, null, 'Extension'];
	  var CodingTemplates = [[{
	    x: -1,
	    y: -2
	  }, {
	    x: 0,
	    y: -2
	  }, {
	    x: 1,
	    y: -2
	  }, {
	    x: -2,
	    y: -1
	  }, {
	    x: -1,
	    y: -1
	  }, {
	    x: 0,
	    y: -1
	  }, {
	    x: 1,
	    y: -1
	  }, {
	    x: 2,
	    y: -1
	  }, {
	    x: -4,
	    y: 0
	  }, {
	    x: -3,
	    y: 0
	  }, {
	    x: -2,
	    y: 0
	  }, {
	    x: -1,
	    y: 0
	  }], [{
	    x: -1,
	    y: -2
	  }, {
	    x: 0,
	    y: -2
	  }, {
	    x: 1,
	    y: -2
	  }, {
	    x: 2,
	    y: -2
	  }, {
	    x: -2,
	    y: -1
	  }, {
	    x: -1,
	    y: -1
	  }, {
	    x: 0,
	    y: -1
	  }, {
	    x: 1,
	    y: -1
	  }, {
	    x: 2,
	    y: -1
	  }, {
	    x: -3,
	    y: 0
	  }, {
	    x: -2,
	    y: 0
	  }, {
	    x: -1,
	    y: 0
	  }], [{
	    x: -1,
	    y: -2
	  }, {
	    x: 0,
	    y: -2
	  }, {
	    x: 1,
	    y: -2
	  }, {
	    x: -2,
	    y: -1
	  }, {
	    x: -1,
	    y: -1
	  }, {
	    x: 0,
	    y: -1
	  }, {
	    x: 1,
	    y: -1
	  }, {
	    x: -2,
	    y: 0
	  }, {
	    x: -1,
	    y: 0
	  }], [{
	    x: -3,
	    y: -1
	  }, {
	    x: -2,
	    y: -1
	  }, {
	    x: -1,
	    y: -1
	  }, {
	    x: 0,
	    y: -1
	  }, {
	    x: 1,
	    y: -1
	  }, {
	    x: -4,
	    y: 0
	  }, {
	    x: -3,
	    y: 0
	  }, {
	    x: -2,
	    y: 0
	  }, {
	    x: -1,
	    y: 0
	  }]];
	  var RefinementTemplates = [{
	    coding: [{
	      x: 0,
	      y: -1
	    }, {
	      x: 1,
	      y: -1
	    }, {
	      x: -1,
	      y: 0
	    }],
	    reference: [{
	      x: 0,
	      y: -1
	    }, {
	      x: 1,
	      y: -1
	    }, {
	      x: -1,
	      y: 0
	    }, {
	      x: 0,
	      y: 0
	    }, {
	      x: 1,
	      y: 0
	    }, {
	      x: -1,
	      y: 1
	    }, {
	      x: 0,
	      y: 1
	    }, {
	      x: 1,
	      y: 1
	    }]
	  }, {
	    coding: [{
	      x: -1,
	      y: -1
	    }, {
	      x: 0,
	      y: -1
	    }, {
	      x: 1,
	      y: -1
	    }, {
	      x: -1,
	      y: 0
	    }],
	    reference: [{
	      x: 0,
	      y: -1
	    }, {
	      x: -1,
	      y: 0
	    }, {
	      x: 0,
	      y: 0
	    }, {
	      x: 1,
	      y: 0
	    }, {
	      x: 0,
	      y: 1
	    }, {
	      x: 1,
	      y: 1
	    }]
	  }];
	  var ReusedContexts = [0x9B25, 0x0795, 0x00E5, 0x0195];
	  var RefinementReusedContexts = [0x0020, 0x0008];
	  function decodeBitmapTemplate0(width, height, decodingContext) {
	    var decoder = decodingContext.decoder;
	    var contexts = decodingContext.contextCache.getContexts('GB');
	    var contextLabel,
	        i,
	        j,
	        pixel,
	        row,
	        row1,
	        row2,
	        bitmap = [];
	    var OLD_PIXEL_MASK = 0x7BF7;
	    for (i = 0; i < height; i++) {
	      row = bitmap[i] = new Uint8Array(width);
	      row1 = i < 1 ? row : bitmap[i - 1];
	      row2 = i < 2 ? row : bitmap[i - 2];
	      contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;
	      for (j = 0; j < width; j++) {
	        row[j] = pixel = decoder.readBit(contexts, contextLabel);
	        contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;
	      }
	    }
	    return bitmap;
	  }
	  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {
	    if (mmr) {
	      error('JBIG2 error: MMR encoding is not supported');
	    }
	    if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {
	      return decodeBitmapTemplate0(width, height, decodingContext);
	    }
	    var useskip = !!skip;
	    var template = CodingTemplates[templateIndex].concat(at);
	    template.sort(function (a, b) {
	      return a.y - b.y || a.x - b.x;
	    });
	    var templateLength = template.length;
	    var templateX = new Int8Array(templateLength);
	    var templateY = new Int8Array(templateLength);
	    var changingTemplateEntries = [];
	    var reuseMask = 0,
	        minX = 0,
	        maxX = 0,
	        minY = 0;
	    var c, k;
	    for (k = 0; k < templateLength; k++) {
	      templateX[k] = template[k].x;
	      templateY[k] = template[k].y;
	      minX = Math.min(minX, template[k].x);
	      maxX = Math.max(maxX, template[k].x);
	      minY = Math.min(minY, template[k].y);
	      if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {
	        reuseMask |= 1 << templateLength - 1 - k;
	      } else {
	        changingTemplateEntries.push(k);
	      }
	    }
	    var changingEntriesLength = changingTemplateEntries.length;
	    var changingTemplateX = new Int8Array(changingEntriesLength);
	    var changingTemplateY = new Int8Array(changingEntriesLength);
	    var changingTemplateBit = new Uint16Array(changingEntriesLength);
	    for (c = 0; c < changingEntriesLength; c++) {
	      k = changingTemplateEntries[c];
	      changingTemplateX[c] = template[k].x;
	      changingTemplateY[c] = template[k].y;
	      changingTemplateBit[c] = 1 << templateLength - 1 - k;
	    }
	    var sbb_left = -minX;
	    var sbb_top = -minY;
	    var sbb_right = width - maxX;
	    var pseudoPixelContext = ReusedContexts[templateIndex];
	    var row = new Uint8Array(width);
	    var bitmap = [];
	    var decoder = decodingContext.decoder;
	    var contexts = decodingContext.contextCache.getContexts('GB');
	    var ltp = 0,
	        j,
	        i0,
	        j0,
	        contextLabel = 0,
	        bit,
	        shift;
	    for (var i = 0; i < height; i++) {
	      if (prediction) {
	        var sltp = decoder.readBit(contexts, pseudoPixelContext);
	        ltp ^= sltp;
	        if (ltp) {
	          bitmap.push(row);
	          continue;
	        }
	      }
	      row = new Uint8Array(row);
	      bitmap.push(row);
	      for (j = 0; j < width; j++) {
	        if (useskip && skip[i][j]) {
	          row[j] = 0;
	          continue;
	        }
	        if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
	          contextLabel = contextLabel << 1 & reuseMask;
	          for (k = 0; k < changingEntriesLength; k++) {
	            i0 = i + changingTemplateY[k];
	            j0 = j + changingTemplateX[k];
	            bit = bitmap[i0][j0];
	            if (bit) {
	              bit = changingTemplateBit[k];
	              contextLabel |= bit;
	            }
	          }
	        } else {
	          contextLabel = 0;
	          shift = templateLength - 1;
	          for (k = 0; k < templateLength; k++, shift--) {
	            j0 = j + templateX[k];
	            if (j0 >= 0 && j0 < width) {
	              i0 = i + templateY[k];
	              if (i0 >= 0) {
	                bit = bitmap[i0][j0];
	                if (bit) {
	                  contextLabel |= bit << shift;
	                }
	              }
	            }
	          }
	        }
	        var pixel = decoder.readBit(contexts, contextLabel);
	        row[j] = pixel;
	      }
	    }
	    return bitmap;
	  }
	  function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {
	    var codingTemplate = RefinementTemplates[templateIndex].coding;
	    if (templateIndex === 0) {
	      codingTemplate = codingTemplate.concat([at[0]]);
	    }
	    var codingTemplateLength = codingTemplate.length;
	    var codingTemplateX = new Int32Array(codingTemplateLength);
	    var codingTemplateY = new Int32Array(codingTemplateLength);
	    var k;
	    for (k = 0; k < codingTemplateLength; k++) {
	      codingTemplateX[k] = codingTemplate[k].x;
	      codingTemplateY[k] = codingTemplate[k].y;
	    }
	    var referenceTemplate = RefinementTemplates[templateIndex].reference;
	    if (templateIndex === 0) {
	      referenceTemplate = referenceTemplate.concat([at[1]]);
	    }
	    var referenceTemplateLength = referenceTemplate.length;
	    var referenceTemplateX = new Int32Array(referenceTemplateLength);
	    var referenceTemplateY = new Int32Array(referenceTemplateLength);
	    for (k = 0; k < referenceTemplateLength; k++) {
	      referenceTemplateX[k] = referenceTemplate[k].x;
	      referenceTemplateY[k] = referenceTemplate[k].y;
	    }
	    var referenceWidth = referenceBitmap[0].length;
	    var referenceHeight = referenceBitmap.length;
	    var pseudoPixelContext = RefinementReusedContexts[templateIndex];
	    var bitmap = [];
	    var decoder = decodingContext.decoder;
	    var contexts = decodingContext.contextCache.getContexts('GR');
	    var ltp = 0;
	    for (var i = 0; i < height; i++) {
	      if (prediction) {
	        var sltp = decoder.readBit(contexts, pseudoPixelContext);
	        ltp ^= sltp;
	        if (ltp) {
	          error('JBIG2 error: prediction is not supported');
	        }
	      }
	      var row = new Uint8Array(width);
	      bitmap.push(row);
	      for (var j = 0; j < width; j++) {
	        var i0, j0;
	        var contextLabel = 0;
	        for (k = 0; k < codingTemplateLength; k++) {
	          i0 = i + codingTemplateY[k];
	          j0 = j + codingTemplateX[k];
	          if (i0 < 0 || j0 < 0 || j0 >= width) {
	            contextLabel <<= 1;
	          } else {
	            contextLabel = contextLabel << 1 | bitmap[i0][j0];
	          }
	        }
	        for (k = 0; k < referenceTemplateLength; k++) {
	          i0 = i + referenceTemplateY[k] - offsetY;
	          j0 = j + referenceTemplateX[k] - offsetX;
	          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {
	            contextLabel <<= 1;
	          } else {
	            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];
	          }
	        }
	        var pixel = decoder.readBit(contexts, contextLabel);
	        row[j] = pixel;
	      }
	    }
	    return bitmap;
	  }
	  function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext) {
	    if (huffman) {
	      error('JBIG2 error: huffman is not supported');
	    }
	    var newSymbols = [];
	    var currentHeight = 0;
	    var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);
	    var decoder = decodingContext.decoder;
	    var contextCache = decodingContext.contextCache;
	    while (newSymbols.length < numberOfNewSymbols) {
	      var deltaHeight = decodeInteger(contextCache, 'IADH', decoder);
	      currentHeight += deltaHeight;
	      var currentWidth = 0;
	      while (true) {
	        var deltaWidth = decodeInteger(contextCache, 'IADW', decoder);
	        if (deltaWidth === null) {
	          break;
	        }
	        currentWidth += deltaWidth;
	        var bitmap;
	        if (refinement) {
	          var numberOfInstances = decodeInteger(contextCache, 'IAAI', decoder);
	          if (numberOfInstances > 1) {
	            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext);
	          } else {
	            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
	            var rdx = decodeInteger(contextCache, 'IARDX', decoder);
	            var rdy = decodeInteger(contextCache, 'IARDY', decoder);
	            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];
	            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);
	          }
	        } else {
	          bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);
	        }
	        newSymbols.push(bitmap);
	      }
	    }
	    var exportedSymbols = [];
	    var flags = [],
	        currentFlag = false;
	    var totalSymbolsLength = symbols.length + numberOfNewSymbols;
	    while (flags.length < totalSymbolsLength) {
	      var runLength = decodeInteger(contextCache, 'IAEX', decoder);
	      while (runLength--) {
	        flags.push(currentFlag);
	      }
	      currentFlag = !currentFlag;
	    }
	    for (var i = 0, ii = symbols.length; i < ii; i++) {
	      if (flags[i]) {
	        exportedSymbols.push(symbols[i]);
	      }
	    }
	    for (var j = 0; j < numberOfNewSymbols; i++, j++) {
	      if (flags[i]) {
	        exportedSymbols.push(newSymbols[j]);
	      }
	    }
	    return exportedSymbols;
	  }
	  function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext) {
	    if (huffman) {
	      error('JBIG2 error: huffman is not supported');
	    }
	    var bitmap = [];
	    var i, row;
	    for (i = 0; i < height; i++) {
	      row = new Uint8Array(width);
	      if (defaultPixelValue) {
	        for (var j = 0; j < width; j++) {
	          row[j] = defaultPixelValue;
	        }
	      }
	      bitmap.push(row);
	    }
	    var decoder = decodingContext.decoder;
	    var contextCache = decodingContext.contextCache;
	    var stripT = -decodeInteger(contextCache, 'IADT', decoder);
	    var firstS = 0;
	    i = 0;
	    while (i < numberOfSymbolInstances) {
	      var deltaT = decodeInteger(contextCache, 'IADT', decoder);
	      stripT += deltaT;
	      var deltaFirstS = decodeInteger(contextCache, 'IAFS', decoder);
	      firstS += deltaFirstS;
	      var currentS = firstS;
	      do {
	        var currentT = stripSize === 1 ? 0 : decodeInteger(contextCache, 'IAIT', decoder);
	        var t = stripSize * stripT + currentT;
	        var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
	        var applyRefinement = refinement && decodeInteger(contextCache, 'IARI', decoder);
	        var symbolBitmap = inputSymbols[symbolId];
	        var symbolWidth = symbolBitmap[0].length;
	        var symbolHeight = symbolBitmap.length;
	        if (applyRefinement) {
	          var rdw = decodeInteger(contextCache, 'IARDW', decoder);
	          var rdh = decodeInteger(contextCache, 'IARDH', decoder);
	          var rdx = decodeInteger(contextCache, 'IARDX', decoder);
	          var rdy = decodeInteger(contextCache, 'IARDY', decoder);
	          symbolWidth += rdw;
	          symbolHeight += rdh;
	          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);
	        }
	        var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight);
	        var offsetS = currentS - (referenceCorner & 2 ? symbolWidth : 0);
	        var s2, t2, symbolRow;
	        if (transposed) {
	          for (s2 = 0; s2 < symbolHeight; s2++) {
	            row = bitmap[offsetS + s2];
	            if (!row) {
	              continue;
	            }
	            symbolRow = symbolBitmap[s2];
	            var maxWidth = Math.min(width - offsetT, symbolWidth);
	            switch (combinationOperator) {
	              case 0:
	                for (t2 = 0; t2 < maxWidth; t2++) {
	                  row[offsetT + t2] |= symbolRow[t2];
	                }
	                break;
	              case 2:
	                for (t2 = 0; t2 < maxWidth; t2++) {
	                  row[offsetT + t2] ^= symbolRow[t2];
	                }
	                break;
	              default:
	                error('JBIG2 error: operator ' + combinationOperator + ' is not supported');
	            }
	          }
	          currentS += symbolHeight - 1;
	        } else {
	          for (t2 = 0; t2 < symbolHeight; t2++) {
	            row = bitmap[offsetT + t2];
	            if (!row) {
	              continue;
	            }
	            symbolRow = symbolBitmap[t2];
	            switch (combinationOperator) {
	              case 0:
	                for (s2 = 0; s2 < symbolWidth; s2++) {
	                  row[offsetS + s2] |= symbolRow[s2];
	                }
	                break;
	              case 2:
	                for (s2 = 0; s2 < symbolWidth; s2++) {
	                  row[offsetS + s2] ^= symbolRow[s2];
	                }
	                break;
	              default:
	                error('JBIG2 error: operator ' + combinationOperator + ' is not supported');
	            }
	          }
	          currentS += symbolWidth - 1;
	        }
	        i++;
	        var deltaS = decodeInteger(contextCache, 'IADS', decoder);
	        if (deltaS === null) {
	          break;
	        }
	        currentS += deltaS + dsOffset;
	      } while (true);
	    }
	    return bitmap;
	  }
	  function readSegmentHeader(data, start) {
	    var segmentHeader = {};
	    segmentHeader.number = readUint32(data, start);
	    var flags = data[start + 4];
	    var segmentType = flags & 0x3F;
	    if (!SegmentTypes[segmentType]) {
	      error('JBIG2 error: invalid segment type: ' + segmentType);
	    }
	    segmentHeader.type = segmentType;
	    segmentHeader.typeName = SegmentTypes[segmentType];
	    segmentHeader.deferredNonRetain = !!(flags & 0x80);
	    var pageAssociationFieldSize = !!(flags & 0x40);
	    var referredFlags = data[start + 5];
	    var referredToCount = referredFlags >> 5 & 7;
	    var retainBits = [referredFlags & 31];
	    var position = start + 6;
	    if (referredFlags === 7) {
	      referredToCount = readUint32(data, position - 1) & 0x1FFFFFFF;
	      position += 3;
	      var bytes = referredToCount + 7 >> 3;
	      retainBits[0] = data[position++];
	      while (--bytes > 0) {
	        retainBits.push(data[position++]);
	      }
	    } else if (referredFlags === 5 || referredFlags === 6) {
	      error('JBIG2 error: invalid referred-to flags');
	    }
	    segmentHeader.retainBits = retainBits;
	    var referredToSegmentNumberSize = segmentHeader.number <= 256 ? 1 : segmentHeader.number <= 65536 ? 2 : 4;
	    var referredTo = [];
	    var i, ii;
	    for (i = 0; i < referredToCount; i++) {
	      var number = referredToSegmentNumberSize === 1 ? data[position] : referredToSegmentNumberSize === 2 ? readUint16(data, position) : readUint32(data, position);
	      referredTo.push(number);
	      position += referredToSegmentNumberSize;
	    }
	    segmentHeader.referredTo = referredTo;
	    if (!pageAssociationFieldSize) {
	      segmentHeader.pageAssociation = data[position++];
	    } else {
	      segmentHeader.pageAssociation = readUint32(data, position);
	      position += 4;
	    }
	    segmentHeader.length = readUint32(data, position);
	    position += 4;
	    if (segmentHeader.length === 0xFFFFFFFF) {
	      if (segmentType === 38) {
	        var genericRegionInfo = readRegionSegmentInformation(data, position);
	        var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];
	        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);
	        var searchPatternLength = 6;
	        var searchPattern = new Uint8Array(searchPatternLength);
	        if (!genericRegionMmr) {
	          searchPattern[0] = 0xFF;
	          searchPattern[1] = 0xAC;
	        }
	        searchPattern[2] = genericRegionInfo.height >>> 24 & 0xFF;
	        searchPattern[3] = genericRegionInfo.height >> 16 & 0xFF;
	        searchPattern[4] = genericRegionInfo.height >> 8 & 0xFF;
	        searchPattern[5] = genericRegionInfo.height & 0xFF;
	        for (i = position, ii = data.length; i < ii; i++) {
	          var j = 0;
	          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {
	            j++;
	          }
	          if (j === searchPatternLength) {
	            segmentHeader.length = i + searchPatternLength;
	            break;
	          }
	        }
	        if (segmentHeader.length === 0xFFFFFFFF) {
	          error('JBIG2 error: segment end was not found');
	        }
	      } else {
	        error('JBIG2 error: invalid unknown segment length');
	      }
	    }
	    segmentHeader.headerEnd = position;
	    return segmentHeader;
	  }
	  function readSegments(header, data, start, end) {
	    var segments = [];
	    var position = start;
	    while (position < end) {
	      var segmentHeader = readSegmentHeader(data, position);
	      position = segmentHeader.headerEnd;
	      var segment = {
	        header: segmentHeader,
	        data: data
	      };
	      if (!header.randomAccess) {
	        segment.start = position;
	        position += segmentHeader.length;
	        segment.end = position;
	      }
	      segments.push(segment);
	      if (segmentHeader.type === 51) {
	        break;
	      }
	    }
	    if (header.randomAccess) {
	      for (var i = 0, ii = segments.length; i < ii; i++) {
	        segments[i].start = position;
	        position += segments[i].header.length;
	        segments[i].end = position;
	      }
	    }
	    return segments;
	  }
	  function readRegionSegmentInformation(data, start) {
	    return {
	      width: readUint32(data, start),
	      height: readUint32(data, start + 4),
	      x: readUint32(data, start + 8),
	      y: readUint32(data, start + 12),
	      combinationOperator: data[start + 16] & 7
	    };
	  }
	  var RegionSegmentInformationFieldLength = 17;
	  function processSegment(segment, visitor) {
	    var header = segment.header;
	    var data = segment.data,
	        position = segment.start,
	        end = segment.end;
	    var args, at, i, atLength;
	    switch (header.type) {
	      case 0:
	        var dictionary = {};
	        var dictionaryFlags = readUint16(data, position);
	        dictionary.huffman = !!(dictionaryFlags & 1);
	        dictionary.refinement = !!(dictionaryFlags & 2);
	        dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;
	        dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;
	        dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;
	        dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;
	        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
	        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);
	        dictionary.template = dictionaryFlags >> 10 & 3;
	        dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;
	        position += 2;
	        if (!dictionary.huffman) {
	          atLength = dictionary.template === 0 ? 4 : 1;
	          at = [];
	          for (i = 0; i < atLength; i++) {
	            at.push({
	              x: readInt8(data, position),
	              y: readInt8(data, position + 1)
	            });
	            position += 2;
	          }
	          dictionary.at = at;
	        }
	        if (dictionary.refinement && !dictionary.refinementTemplate) {
	          at = [];
	          for (i = 0; i < 2; i++) {
	            at.push({
	              x: readInt8(data, position),
	              y: readInt8(data, position + 1)
	            });
	            position += 2;
	          }
	          dictionary.refinementAt = at;
	        }
	        dictionary.numberOfExportedSymbols = readUint32(data, position);
	        position += 4;
	        dictionary.numberOfNewSymbols = readUint32(data, position);
	        position += 4;
	        args = [dictionary, header.number, header.referredTo, data, position, end];
	        break;
	      case 6:
	      case 7:
	        var textRegion = {};
	        textRegion.info = readRegionSegmentInformation(data, position);
	        position += RegionSegmentInformationFieldLength;
	        var textRegionSegmentFlags = readUint16(data, position);
	        position += 2;
	        textRegion.huffman = !!(textRegionSegmentFlags & 1);
	        textRegion.refinement = !!(textRegionSegmentFlags & 2);
	        textRegion.stripSize = 1 << (textRegionSegmentFlags >> 2 & 3);
	        textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;
	        textRegion.transposed = !!(textRegionSegmentFlags & 64);
	        textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;
	        textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;
	        textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;
	        textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;
	        if (textRegion.huffman) {
	          var textRegionHuffmanFlags = readUint16(data, position);
	          position += 2;
	          textRegion.huffmanFS = textRegionHuffmanFlags & 3;
	          textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;
	          textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;
	          textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;
	          textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;
	          textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;
	          textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;
	          textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 14);
	        }
	        if (textRegion.refinement && !textRegion.refinementTemplate) {
	          at = [];
	          for (i = 0; i < 2; i++) {
	            at.push({
	              x: readInt8(data, position),
	              y: readInt8(data, position + 1)
	            });
	            position += 2;
	          }
	          textRegion.refinementAt = at;
	        }
	        textRegion.numberOfSymbolInstances = readUint32(data, position);
	        position += 4;
	        if (textRegion.huffman) {
	          error('JBIG2 error: huffman is not supported');
	        }
	        args = [textRegion, header.referredTo, data, position, end];
	        break;
	      case 38:
	      case 39:
	        var genericRegion = {};
	        genericRegion.info = readRegionSegmentInformation(data, position);
	        position += RegionSegmentInformationFieldLength;
	        var genericRegionSegmentFlags = data[position++];
	        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
	        genericRegion.template = genericRegionSegmentFlags >> 1 & 3;
	        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
	        if (!genericRegion.mmr) {
	          atLength = genericRegion.template === 0 ? 4 : 1;
	          at = [];
	          for (i = 0; i < atLength; i++) {
	            at.push({
	              x: readInt8(data, position),
	              y: readInt8(data, position + 1)
	            });
	            position += 2;
	          }
	          genericRegion.at = at;
	        }
	        args = [genericRegion, data, position, end];
	        break;
	      case 48:
	        var pageInfo = {
	          width: readUint32(data, position),
	          height: readUint32(data, position + 4),
	          resolutionX: readUint32(data, position + 8),
	          resolutionY: readUint32(data, position + 12)
	        };
	        if (pageInfo.height === 0xFFFFFFFF) {
	          delete pageInfo.height;
	        }
	        var pageSegmentFlags = data[position + 16];
	        readUint16(data, position + 17);
	        pageInfo.lossless = !!(pageSegmentFlags & 1);
	        pageInfo.refinement = !!(pageSegmentFlags & 2);
	        pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;
	        pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;
	        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
	        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
	        args = [pageInfo];
	        break;
	      case 49:
	        break;
	      case 50:
	        break;
	      case 51:
	        break;
	      case 62:
	        break;
	      default:
	        error('JBIG2 error: segment type ' + header.typeName + '(' + header.type + ') is not implemented');
	    }
	    var callbackName = 'on' + header.typeName;
	    if (callbackName in visitor) {
	      visitor[callbackName].apply(visitor, args);
	    }
	  }
	  function processSegments(segments, visitor) {
	    for (var i = 0, ii = segments.length; i < ii; i++) {
	      processSegment(segments[i], visitor);
	    }
	  }
	  function parseJbig2(data, start, end) {
	    var position = start;
	    if (data[position] !== 0x97 || data[position + 1] !== 0x4A || data[position + 2] !== 0x42 || data[position + 3] !== 0x32 || data[position + 4] !== 0x0D || data[position + 5] !== 0x0A || data[position + 6] !== 0x1A || data[position + 7] !== 0x0A) {
	      error('JBIG2 error: invalid header');
	    }
	    var header = {};
	    position += 8;
	    var flags = data[position++];
	    header.randomAccess = !(flags & 1);
	    if (!(flags & 2)) {
	      header.numberOfPages = readUint32(data, position);
	      position += 4;
	    }
	    readSegments(header, data, position, end);
	    error('Not implemented');
	  }
	  function parseJbig2Chunks(chunks) {
	    var visitor = new SimpleSegmentVisitor();
	    for (var i = 0, ii = chunks.length; i < ii; i++) {
	      var chunk = chunks[i];
	      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);
	      processSegments(segments, visitor);
	    }
	    return visitor.buffer;
	  }
	  function SimpleSegmentVisitor() {}
	  SimpleSegmentVisitor.prototype = {
	    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {
	      this.currentPageInfo = info;
	      var rowSize = info.width + 7 >> 3;
	      var buffer = new Uint8Array(rowSize * info.height);
	      if (info.defaultPixelValue) {
	        for (var i = 0, ii = buffer.length; i < ii; i++) {
	          buffer[i] = 0xFF;
	        }
	      }
	      this.buffer = buffer;
	    },
	    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {
	      var pageInfo = this.currentPageInfo;
	      var width = regionInfo.width,
	          height = regionInfo.height;
	      var rowSize = pageInfo.width + 7 >> 3;
	      var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;
	      var buffer = this.buffer;
	      var mask0 = 128 >> (regionInfo.x & 7);
	      var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
	      var i, j, mask, offset;
	      switch (combinationOperator) {
	        case 0:
	          for (i = 0; i < height; i++) {
	            mask = mask0;
	            offset = offset0;
	            for (j = 0; j < width; j++) {
	              if (bitmap[i][j]) {
	                buffer[offset] |= mask;
	              }
	              mask >>= 1;
	              if (!mask) {
	                mask = 128;
	                offset++;
	              }
	            }
	            offset0 += rowSize;
	          }
	          break;
	        case 2:
	          for (i = 0; i < height; i++) {
	            mask = mask0;
	            offset = offset0;
	            for (j = 0; j < width; j++) {
	              if (bitmap[i][j]) {
	                buffer[offset] ^= mask;
	              }
	              mask >>= 1;
	              if (!mask) {
	                mask = 128;
	                offset++;
	              }
	            }
	            offset0 += rowSize;
	          }
	          break;
	        default:
	          error('JBIG2 error: operator ' + combinationOperator + ' is not supported');
	      }
	    },
	    onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {
	      var regionInfo = region.info;
	      var decodingContext = new DecodingContext(data, start, end);
	      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);
	      this.drawBitmap(regionInfo, bitmap);
	    },
	    onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {
	      this.onImmediateGenericRegion.apply(this, arguments);
	    },
	    onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {
	      var huffmanTables;
	      if (dictionary.huffman) {
	        error('JBIG2 error: huffman is not supported');
	      }
	      var symbols = this.symbols;
	      if (!symbols) {
	        this.symbols = symbols = {};
	      }
	      var inputSymbols = [];
	      for (var i = 0, ii = referredSegments.length; i < ii; i++) {
	        inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);
	      }
	      var decodingContext = new DecodingContext(data, start, end);
	      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext);
	    },
	    onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {
	      var regionInfo = region.info;
	      var huffmanTables;
	      var symbols = this.symbols;
	      var inputSymbols = [];
	      for (var i = 0, ii = referredSegments.length; i < ii; i++) {
	        inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);
	      }
	      var symbolCodeLength = log2(inputSymbols.length);
	      var decodingContext = new DecodingContext(data, start, end);
	      var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext);
	      this.drawBitmap(regionInfo, bitmap);
	    },
	    onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {
	      this.onImmediateTextRegion.apply(this, arguments);
	    }
	  };
	  function Jbig2Image() {}
	  Jbig2Image.prototype = {
	    parseChunks: function Jbig2Image_parseChunks(chunks) {
	      return parseJbig2Chunks(chunks);
	    }
	  };
	  return Jbig2Image;
	}();
	exports.Jbig2Image = Jbig2Image;

	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var sharedUtil = __w_pdfjs_require__(0);
	var warn = sharedUtil.warn;
	var error = sharedUtil.error;
	var JpegImage = function JpegImageClosure() {
	  var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
	  var dctCos1 = 4017;
	  var dctSin1 = 799;
	  var dctCos3 = 3406;
	  var dctSin3 = 2276;
	  var dctCos6 = 1567;
	  var dctSin6 = 3784;
	  var dctSqrt2 = 5793;
	  var dctSqrt1d2 = 2896;
	  function JpegImage() {
	    this.decodeTransform = null;
	    this.colorTransform = -1;
	  }
	  function buildHuffmanTable(codeLengths, values) {
	    var k = 0,
	        code = [],
	        i,
	        j,
	        length = 16;
	    while (length > 0 && !codeLengths[length - 1]) {
	      length--;
	    }
	    code.push({
	      children: [],
	      index: 0
	    });
	    var p = code[0],
	        q;
	    for (i = 0; i < length; i++) {
	      for (j = 0; j < codeLengths[i]; j++) {
	        p = code.pop();
	        p.children[p.index] = values[k];
	        while (p.index > 0) {
	          p = code.pop();
	        }
	        p.index++;
	        code.push(p);
	        while (code.length <= i) {
	          code.push(q = {
	            children: [],
	            index: 0
	          });
	          p.children[p.index] = q.children;
	          p = q;
	        }
	        k++;
	      }
	      if (i + 1 < length) {
	        code.push(q = {
	          children: [],
	          index: 0
	        });
	        p.children[p.index] = q.children;
	        p = q;
	      }
	    }
	    return code[0].children;
	  }
	  function getBlockBufferOffset(component, row, col) {
	    return 64 * ((component.blocksPerLine + 1) * row + col);
	  }
	  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
	    var mcusPerLine = frame.mcusPerLine;
	    var progressive = frame.progressive;
	    var startOffset = offset,
	        bitsData = 0,
	        bitsCount = 0;
	    function readBit() {
	      if (bitsCount > 0) {
	        bitsCount--;
	        return bitsData >> bitsCount & 1;
	      }
	      bitsData = data[offset++];
	      if (bitsData === 0xFF) {
	        var nextByte = data[offset++];
	        if (nextByte) {
	          error('JPEG error: unexpected marker ' + (bitsData << 8 | nextByte).toString(16));
	        }
	      }
	      bitsCount = 7;
	      return bitsData >>> 7;
	    }
	    function decodeHuffman(tree) {
	      var node = tree;
	      while (true) {
	        node = node[readBit()];
	        if (typeof node === 'number') {
	          return node;
	        }
	        if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
	          error('JPEG error: invalid huffman sequence');
	        }
	      }
	    }
	    function receive(length) {
	      var n = 0;
	      while (length > 0) {
	        n = n << 1 | readBit();
	        length--;
	      }
	      return n;
	    }
	    function receiveAndExtend(length) {
	      if (length === 1) {
	        return readBit() === 1 ? 1 : -1;
	      }
	      var n = receive(length);
	      if (n >= 1 << length - 1) {
	        return n;
	      }
	      return n + (-1 << length) + 1;
	    }
	    function decodeBaseline(component, offset) {
	      var t = decodeHuffman(component.huffmanTableDC);
	      var diff = t === 0 ? 0 : receiveAndExtend(t);
	      component.blockData[offset] = component.pred += diff;
	      var k = 1;
	      while (k < 64) {
	        var rs = decodeHuffman(component.huffmanTableAC);
	        var s = rs & 15,
	            r = rs >> 4;
	        if (s === 0) {
	          if (r < 15) {
	            break;
	          }
	          k += 16;
	          continue;
	        }
	        k += r;
	        var z = dctZigZag[k];
	        component.blockData[offset + z] = receiveAndExtend(s);
	        k++;
	      }
	    }
	    function decodeDCFirst(component, offset) {
	      var t = decodeHuffman(component.huffmanTableDC);
	      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
	      component.blockData[offset] = component.pred += diff;
	    }
	    function decodeDCSuccessive(component, offset) {
	      component.blockData[offset] |= readBit() << successive;
	    }
	    var eobrun = 0;
	    function decodeACFirst(component, offset) {
	      if (eobrun > 0) {
	        eobrun--;
	        return;
	      }
	      var k = spectralStart,
	          e = spectralEnd;
	      while (k <= e) {
	        var rs = decodeHuffman(component.huffmanTableAC);
	        var s = rs & 15,
	            r = rs >> 4;
	        if (s === 0) {
	          if (r < 15) {
	            eobrun = receive(r) + (1 << r) - 1;
	            break;
	          }
	          k += 16;
	          continue;
	        }
	        k += r;
	        var z = dctZigZag[k];
	        component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);
	        k++;
	      }
	    }
	    var successiveACState = 0,
	        successiveACNextValue;
	    function decodeACSuccessive(component, offset) {
	      var k = spectralStart;
	      var e = spectralEnd;
	      var r = 0;
	      var s;
	      var rs;
	      while (k <= e) {
	        var z = dctZigZag[k];
	        switch (successiveACState) {
	          case 0:
	            rs = decodeHuffman(component.huffmanTableAC);
	            s = rs & 15;
	            r = rs >> 4;
	            if (s === 0) {
	              if (r < 15) {
	                eobrun = receive(r) + (1 << r);
	                successiveACState = 4;
	              } else {
	                r = 16;
	                successiveACState = 1;
	              }
	            } else {
	              if (s !== 1) {
	                error('JPEG error: invalid ACn encoding');
	              }
	              successiveACNextValue = receiveAndExtend(s);
	              successiveACState = r ? 2 : 3;
	            }
	            continue;
	          case 1:
	          case 2:
	            if (component.blockData[offset + z]) {
	              component.blockData[offset + z] += readBit() << successive;
	            } else {
	              r--;
	              if (r === 0) {
	                successiveACState = successiveACState === 2 ? 3 : 0;
	              }
	            }
	            break;
	          case 3:
	            if (component.blockData[offset + z]) {
	              component.blockData[offset + z] += readBit() << successive;
	            } else {
	              component.blockData[offset + z] = successiveACNextValue << successive;
	              successiveACState = 0;
	            }
	            break;
	          case 4:
	            if (component.blockData[offset + z]) {
	              component.blockData[offset + z] += readBit() << successive;
	            }
	            break;
	        }
	        k++;
	      }
	      if (successiveACState === 4) {
	        eobrun--;
	        if (eobrun === 0) {
	          successiveACState = 0;
	        }
	      }
	    }
	    function decodeMcu(component, decode, mcu, row, col) {
	      var mcuRow = mcu / mcusPerLine | 0;
	      var mcuCol = mcu % mcusPerLine;
	      var blockRow = mcuRow * component.v + row;
	      var blockCol = mcuCol * component.h + col;
	      var offset = getBlockBufferOffset(component, blockRow, blockCol);
	      decode(component, offset);
	    }
	    function decodeBlock(component, decode, mcu) {
	      var blockRow = mcu / component.blocksPerLine | 0;
	      var blockCol = mcu % component.blocksPerLine;
	      var offset = getBlockBufferOffset(component, blockRow, blockCol);
	      decode(component, offset);
	    }
	    var componentsLength = components.length;
	    var component, i, j, k, n;
	    var decodeFn;
	    if (progressive) {
	      if (spectralStart === 0) {
	        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
	      } else {
	        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
	      }
	    } else {
	      decodeFn = decodeBaseline;
	    }
	    var mcu = 0,
	        fileMarker;
	    var mcuExpected;
	    if (componentsLength === 1) {
	      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
	    } else {
	      mcuExpected = mcusPerLine * frame.mcusPerColumn;
	    }
	    var h, v;
	    while (mcu < mcuExpected) {
	      var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;
	      for (i = 0; i < componentsLength; i++) {
	        components[i].pred = 0;
	      }
	      eobrun = 0;
	      if (componentsLength === 1) {
	        component = components[0];
	        for (n = 0; n < mcuToRead; n++) {
	          decodeBlock(component, decodeFn, mcu);
	          mcu++;
	        }
	      } else {
	        for (n = 0; n < mcuToRead; n++) {
	          for (i = 0; i < componentsLength; i++) {
	            component = components[i];
	            h = component.h;
	            v = component.v;
	            for (j = 0; j < v; j++) {
	              for (k = 0; k < h; k++) {
	                decodeMcu(component, decodeFn, mcu, j, k);
	              }
	            }
	          }
	          mcu++;
	        }
	      }
	      bitsCount = 0;
	      fileMarker = findNextFileMarker(data, offset);
	      if (fileMarker && fileMarker.invalid) {
	        warn('decodeScan - unexpected MCU data, next marker is: ' + fileMarker.invalid);
	        offset = fileMarker.offset;
	      }
	      var marker = fileMarker && fileMarker.marker;
	      if (!marker || marker <= 0xFF00) {
	        error('JPEG error: marker was not found');
	      }
	      if (marker >= 0xFFD0 && marker <= 0xFFD7) {
	        offset += 2;
	      } else {
	        break;
	      }
	    }
	    fileMarker = findNextFileMarker(data, offset);
	    if (fileMarker && fileMarker.invalid) {
	      warn('decodeScan - unexpected Scan data, next marker is: ' + fileMarker.invalid);
	      offset = fileMarker.offset;
	    }
	    return offset - startOffset;
	  }
	  function quantizeAndInverse(component, blockBufferOffset, p) {
	    var qt = component.quantizationTable,
	        blockData = component.blockData;
	    var v0, v1, v2, v3, v4, v5, v6, v7;
	    var p0, p1, p2, p3, p4, p5, p6, p7;
	    var t;
	    if (!qt) {
	      error('JPEG error: missing required Quantization Table.');
	    }
	    for (var row = 0; row < 64; row += 8) {
	      p0 = blockData[blockBufferOffset + row];
	      p1 = blockData[blockBufferOffset + row + 1];
	      p2 = blockData[blockBufferOffset + row + 2];
	      p3 = blockData[blockBufferOffset + row + 3];
	      p4 = blockData[blockBufferOffset + row + 4];
	      p5 = blockData[blockBufferOffset + row + 5];
	      p6 = blockData[blockBufferOffset + row + 6];
	      p7 = blockData[blockBufferOffset + row + 7];
	      p0 *= qt[row];
	      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
	        t = dctSqrt2 * p0 + 512 >> 10;
	        p[row] = t;
	        p[row + 1] = t;
	        p[row + 2] = t;
	        p[row + 3] = t;
	        p[row + 4] = t;
	        p[row + 5] = t;
	        p[row + 6] = t;
	        p[row + 7] = t;
	        continue;
	      }
	      p1 *= qt[row + 1];
	      p2 *= qt[row + 2];
	      p3 *= qt[row + 3];
	      p4 *= qt[row + 4];
	      p5 *= qt[row + 5];
	      p6 *= qt[row + 6];
	      p7 *= qt[row + 7];
	      v0 = dctSqrt2 * p0 + 128 >> 8;
	      v1 = dctSqrt2 * p4 + 128 >> 8;
	      v2 = p2;
	      v3 = p6;
	      v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;
	      v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;
	      v5 = p3 << 4;
	      v6 = p5 << 4;
	      v0 = v0 + v1 + 1 >> 1;
	      v1 = v0 - v1;
	      t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
	      v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
	      v3 = t;
	      v4 = v4 + v6 + 1 >> 1;
	      v6 = v4 - v6;
	      v7 = v7 + v5 + 1 >> 1;
	      v5 = v7 - v5;
	      v0 = v0 + v3 + 1 >> 1;
	      v3 = v0 - v3;
	      v1 = v1 + v2 + 1 >> 1;
	      v2 = v1 - v2;
	      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
	      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
	      v7 = t;
	      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
	      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
	      v6 = t;
	      p[row] = v0 + v7;
	      p[row + 7] = v0 - v7;
	      p[row + 1] = v1 + v6;
	      p[row + 6] = v1 - v6;
	      p[row + 2] = v2 + v5;
	      p[row + 5] = v2 - v5;
	      p[row + 3] = v3 + v4;
	      p[row + 4] = v3 - v4;
	    }
	    for (var col = 0; col < 8; ++col) {
	      p0 = p[col];
	      p1 = p[col + 8];
	      p2 = p[col + 16];
	      p3 = p[col + 24];
	      p4 = p[col + 32];
	      p5 = p[col + 40];
	      p6 = p[col + 48];
	      p7 = p[col + 56];
	      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
	        t = dctSqrt2 * p0 + 8192 >> 14;
	        t = t < -2040 ? 0 : t >= 2024 ? 255 : t + 2056 >> 4;
	        blockData[blockBufferOffset + col] = t;
	        blockData[blockBufferOffset + col + 8] = t;
	        blockData[blockBufferOffset + col + 16] = t;
	        blockData[blockBufferOffset + col + 24] = t;
	        blockData[blockBufferOffset + col + 32] = t;
	        blockData[blockBufferOffset + col + 40] = t;
	        blockData[blockBufferOffset + col + 48] = t;
	        blockData[blockBufferOffset + col + 56] = t;
	        continue;
	      }
	      v0 = dctSqrt2 * p0 + 2048 >> 12;
	      v1 = dctSqrt2 * p4 + 2048 >> 12;
	      v2 = p2;
	      v3 = p6;
	      v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;
	      v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;
	      v5 = p3;
	      v6 = p5;
	      v0 = (v0 + v1 + 1 >> 1) + 4112;
	      v1 = v0 - v1;
	      t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
	      v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
	      v3 = t;
	      v4 = v4 + v6 + 1 >> 1;
	      v6 = v4 - v6;
	      v7 = v7 + v5 + 1 >> 1;
	      v5 = v7 - v5;
	      v0 = v0 + v3 + 1 >> 1;
	      v3 = v0 - v3;
	      v1 = v1 + v2 + 1 >> 1;
	      v2 = v1 - v2;
	      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
	      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
	      v7 = t;
	      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
	      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
	      v6 = t;
	      p0 = v0 + v7;
	      p7 = v0 - v7;
	      p1 = v1 + v6;
	      p6 = v1 - v6;
	      p2 = v2 + v5;
	      p5 = v2 - v5;
	      p3 = v3 + v4;
	      p4 = v3 - v4;
	      p0 = p0 < 16 ? 0 : p0 >= 4080 ? 255 : p0 >> 4;
	      p1 = p1 < 16 ? 0 : p1 >= 4080 ? 255 : p1 >> 4;
	      p2 = p2 < 16 ? 0 : p2 >= 4080 ? 255 : p2 >> 4;
	      p3 = p3 < 16 ? 0 : p3 >= 4080 ? 255 : p3 >> 4;
	      p4 = p4 < 16 ? 0 : p4 >= 4080 ? 255 : p4 >> 4;
	      p5 = p5 < 16 ? 0 : p5 >= 4080 ? 255 : p5 >> 4;
	      p6 = p6 < 16 ? 0 : p6 >= 4080 ? 255 : p6 >> 4;
	      p7 = p7 < 16 ? 0 : p7 >= 4080 ? 255 : p7 >> 4;
	      blockData[blockBufferOffset + col] = p0;
	      blockData[blockBufferOffset + col + 8] = p1;
	      blockData[blockBufferOffset + col + 16] = p2;
	      blockData[blockBufferOffset + col + 24] = p3;
	      blockData[blockBufferOffset + col + 32] = p4;
	      blockData[blockBufferOffset + col + 40] = p5;
	      blockData[blockBufferOffset + col + 48] = p6;
	      blockData[blockBufferOffset + col + 56] = p7;
	    }
	  }
	  function buildComponentData(frame, component) {
	    var blocksPerLine = component.blocksPerLine;
	    var blocksPerColumn = component.blocksPerColumn;
	    var computationBuffer = new Int16Array(64);
	    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
	      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
	        var offset = getBlockBufferOffset(component, blockRow, blockCol);
	        quantizeAndInverse(component, offset, computationBuffer);
	      }
	    }
	    return component.blockData;
	  }
	  function clamp0to255(a) {
	    return a <= 0 ? 0 : a >= 255 ? 255 : a;
	  }
	  function findNextFileMarker(data, currentPos, startPos) {
	    function peekUint16(pos) {
	      return data[pos] << 8 | data[pos + 1];
	    }
	    var maxPos = data.length - 1;
	    var newPos = startPos < currentPos ? startPos : currentPos;
	    if (currentPos >= maxPos) {
	      return null;
	    }
	    var currentMarker = peekUint16(currentPos);
	    if (currentMarker >= 0xFFC0 && currentMarker <= 0xFFFE) {
	      return {
	        invalid: null,
	        marker: currentMarker,
	        offset: currentPos
	      };
	    }
	    var newMarker = peekUint16(newPos);
	    while (!(newMarker >= 0xFFC0 && newMarker <= 0xFFFE)) {
	      if (++newPos >= maxPos) {
	        return null;
	      }
	      newMarker = peekUint16(newPos);
	    }
	    return {
	      invalid: currentMarker.toString(16),
	      marker: newMarker,
	      offset: newPos
	    };
	  }
	  JpegImage.prototype = {
	    parse: function parse(data) {
	      function readUint16() {
	        var value = data[offset] << 8 | data[offset + 1];
	        offset += 2;
	        return value;
	      }
	      function readDataBlock() {
	        var length = readUint16();
	        var endOffset = offset + length - 2;
	        var fileMarker = findNextFileMarker(data, endOffset, offset);
	        if (fileMarker && fileMarker.invalid) {
	          warn('readDataBlock - incorrect length, next marker is: ' + fileMarker.invalid);
	          endOffset = fileMarker.offset;
	        }
	        var array = data.subarray(offset, endOffset);
	        offset += array.length;
	        return array;
	      }
	      function prepareComponents(frame) {
	        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
	        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
	        for (var i = 0; i < frame.components.length; i++) {
	          component = frame.components[i];
	          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);
	          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);
	          var blocksPerLineForMcu = mcusPerLine * component.h;
	          var blocksPerColumnForMcu = mcusPerColumn * component.v;
	          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
	          component.blockData = new Int16Array(blocksBufferSize);
	          component.blocksPerLine = blocksPerLine;
	          component.blocksPerColumn = blocksPerColumn;
	        }
	        frame.mcusPerLine = mcusPerLine;
	        frame.mcusPerColumn = mcusPerColumn;
	      }
	      var offset = 0;
	      var jfif = null;
	      var adobe = null;
	      var frame, resetInterval;
	      var quantizationTables = [];
	      var huffmanTablesAC = [],
	          huffmanTablesDC = [];
	      var fileMarker = readUint16();
	      if (fileMarker !== 0xFFD8) {
	        error('JPEG error: SOI not found');
	      }
	      fileMarker = readUint16();
	      while (fileMarker !== 0xFFD9) {
	        var i, j, l;
	        switch (fileMarker) {
	          case 0xFFE0:
	          case 0xFFE1:
	          case 0xFFE2:
	          case 0xFFE3:
	          case 0xFFE4:
	          case 0xFFE5:
	          case 0xFFE6:
	          case 0xFFE7:
	          case 0xFFE8:
	          case 0xFFE9:
	          case 0xFFEA:
	          case 0xFFEB:
	          case 0xFFEC:
	          case 0xFFED:
	          case 0xFFEE:
	          case 0xFFEF:
	          case 0xFFFE:
	            var appData = readDataBlock();
	            if (fileMarker === 0xFFE0) {
	              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
	                jfif = {
	                  version: {
	                    major: appData[5],
	                    minor: appData[6]
	                  },
	                  densityUnits: appData[7],
	                  xDensity: appData[8] << 8 | appData[9],
	                  yDensity: appData[10] << 8 | appData[11],
	                  thumbWidth: appData[12],
	                  thumbHeight: appData[13],
	                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
	                };
	              }
	            }
	            if (fileMarker === 0xFFEE) {
	              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65) {
	                adobe = {
	                  version: appData[5] << 8 | appData[6],
	                  flags0: appData[7] << 8 | appData[8],
	                  flags1: appData[9] << 8 | appData[10],
	                  transformCode: appData[11]
	                };
	              }
	            }
	            break;
	          case 0xFFDB:
	            var quantizationTablesLength = readUint16();
	            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
	            var z;
	            while (offset < quantizationTablesEnd) {
	              var quantizationTableSpec = data[offset++];
	              var tableData = new Uint16Array(64);
	              if (quantizationTableSpec >> 4 === 0) {
	                for (j = 0; j < 64; j++) {
	                  z = dctZigZag[j];
	                  tableData[z] = data[offset++];
	                }
	              } else if (quantizationTableSpec >> 4 === 1) {
	                for (j = 0; j < 64; j++) {
	                  z = dctZigZag[j];
	                  tableData[z] = readUint16();
	                }
	              } else {
	                error('JPEG error: DQT - invalid table spec');
	              }
	              quantizationTables[quantizationTableSpec & 15] = tableData;
	            }
	            break;
	          case 0xFFC0:
	          case 0xFFC1:
	          case 0xFFC2:
	            if (frame) {
	              error('JPEG error: Only single frame JPEGs supported');
	            }
	            readUint16();
	            frame = {};
	            frame.extended = fileMarker === 0xFFC1;
	            frame.progressive = fileMarker === 0xFFC2;
	            frame.precision = data[offset++];
	            frame.scanLines = readUint16();
	            frame.samplesPerLine = readUint16();
	            frame.components = [];
	            frame.componentIds = {};
	            var componentsCount = data[offset++],
	                componentId;
	            var maxH = 0,
	                maxV = 0;
	            for (i = 0; i < componentsCount; i++) {
	              componentId = data[offset];
	              var h = data[offset + 1] >> 4;
	              var v = data[offset + 1] & 15;
	              if (maxH < h) {
	                maxH = h;
	              }
	              if (maxV < v) {
	                maxV = v;
	              }
	              var qId = data[offset + 2];
	              l = frame.components.push({
	                h: h,
	                v: v,
	                quantizationId: qId,
	                quantizationTable: null
	              });
	              frame.componentIds[componentId] = l - 1;
	              offset += 3;
	            }
	            frame.maxH = maxH;
	            frame.maxV = maxV;
	            prepareComponents(frame);
	            break;
	          case 0xFFC4:
	            var huffmanLength = readUint16();
	            for (i = 2; i < huffmanLength;) {
	              var huffmanTableSpec = data[offset++];
	              var codeLengths = new Uint8Array(16);
	              var codeLengthSum = 0;
	              for (j = 0; j < 16; j++, offset++) {
	                codeLengthSum += codeLengths[j] = data[offset];
	              }
	              var huffmanValues = new Uint8Array(codeLengthSum);
	              for (j = 0; j < codeLengthSum; j++, offset++) {
	                huffmanValues[j] = data[offset];
	              }
	              i += 17 + codeLengthSum;
	              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
	            }
	            break;
	          case 0xFFDD:
	            readUint16();
	            resetInterval = readUint16();
	            break;
	          case 0xFFDA:
	            readUint16();
	            var selectorsCount = data[offset++];
	            var components = [],
	                component;
	            for (i = 0; i < selectorsCount; i++) {
	              var componentIndex = frame.componentIds[data[offset++]];
	              component = frame.components[componentIndex];
	              var tableSpec = data[offset++];
	              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
	              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
	              components.push(component);
	            }
	            var spectralStart = data[offset++];
	            var spectralEnd = data[offset++];
	            var successiveApproximation = data[offset++];
	            var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);
	            offset += processed;
	            break;
	          case 0xFFFF:
	            if (data[offset] !== 0xFF) {
	              offset--;
	            }
	            break;
	          default:
	            if (data[offset - 3] === 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
	              offset -= 3;
	              break;
	            }
	            error('JPEG error: unknown marker ' + fileMarker.toString(16));
	        }
	        fileMarker = readUint16();
	      }
	      this.width = frame.samplesPerLine;
	      this.height = frame.scanLines;
	      this.jfif = jfif;
	      this.adobe = adobe;
	      this.components = [];
	      for (i = 0; i < frame.components.length; i++) {
	        component = frame.components[i];
	        var quantizationTable = quantizationTables[component.quantizationId];
	        if (quantizationTable) {
	          component.quantizationTable = quantizationTable;
	        }
	        this.components.push({
	          output: buildComponentData(frame, component),
	          scaleX: component.h / frame.maxH,
	          scaleY: component.v / frame.maxV,
	          blocksPerLine: component.blocksPerLine,
	          blocksPerColumn: component.blocksPerColumn
	        });
	      }
	      this.numComponents = this.components.length;
	    },
	    _getLinearizedBlockData: function getLinearizedBlockData(width, height) {
	      var scaleX = this.width / width,
	          scaleY = this.height / height;
	      var component, componentScaleX, componentScaleY, blocksPerScanline;
	      var x, y, i, j, k;
	      var index;
	      var offset = 0;
	      var output;
	      var numComponents = this.components.length;
	      var dataLength = width * height * numComponents;
	      var data = new Uint8Array(dataLength);
	      var xScaleBlockOffset = new Uint32Array(width);
	      var mask3LSB = 0xfffffff8;
	      for (i = 0; i < numComponents; i++) {
	        component = this.components[i];
	        componentScaleX = component.scaleX * scaleX;
	        componentScaleY = component.scaleY * scaleY;
	        offset = i;
	        output = component.output;
	        blocksPerScanline = component.blocksPerLine + 1 << 3;
	        for (x = 0; x < width; x++) {
	          j = 0 | x * componentScaleX;
	          xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;
	        }
	        for (y = 0; y < height; y++) {
	          j = 0 | y * componentScaleY;
	          index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;
	          for (x = 0; x < width; x++) {
	            data[offset] = output[index + xScaleBlockOffset[x]];
	            offset += numComponents;
	          }
	        }
	      }
	      var transform = this.decodeTransform;
	      if (transform) {
	        for (i = 0; i < dataLength;) {
	          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
	            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];
	          }
	        }
	      }
	      return data;
	    },
	    _isColorConversionNeeded: function isColorConversionNeeded() {
	      if (this.adobe && this.adobe.transformCode) {
	        return true;
	      } else if (this.numComponents === 3) {
	        if (!this.adobe && this.colorTransform === 0) {
	          return false;
	        }
	        return true;
	      }
	      if (!this.adobe && this.colorTransform === 1) {
	        return true;
	      }
	      return false;
	    },
	    _convertYccToRgb: function convertYccToRgb(data) {
	      var Y, Cb, Cr;
	      for (var i = 0, length = data.length; i < length; i += 3) {
	        Y = data[i];
	        Cb = data[i + 1];
	        Cr = data[i + 2];
	        data[i] = clamp0to255(Y - 179.456 + 1.402 * Cr);
	        data[i + 1] = clamp0to255(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);
	        data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);
	      }
	      return data;
	    },
	    _convertYcckToRgb: function convertYcckToRgb(data) {
	      var Y, Cb, Cr, k;
	      var offset = 0;
	      for (var i = 0, length = data.length; i < length; i += 4) {
	        Y = data[i];
	        Cb = data[i + 1];
	        Cr = data[i + 2];
	        k = data[i + 3];
	        var r = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);
	        var g = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);
	        var b = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);
	        data[offset++] = clamp0to255(r);
	        data[offset++] = clamp0to255(g);
	        data[offset++] = clamp0to255(b);
	      }
	      return data;
	    },
	    _convertYcckToCmyk: function convertYcckToCmyk(data) {
	      var Y, Cb, Cr;
	      for (var i = 0, length = data.length; i < length; i += 4) {
	        Y = data[i];
	        Cb = data[i + 1];
	        Cr = data[i + 2];
	        data[i] = clamp0to255(434.456 - Y - 1.402 * Cr);
	        data[i + 1] = clamp0to255(119.541 - Y + 0.344 * Cb + 0.714 * Cr);
	        data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);
	      }
	      return data;
	    },
	    _convertCmykToRgb: function convertCmykToRgb(data) {
	      var c, m, y, k;
	      var offset = 0;
	      var min = -255 * 255 * 255;
	      var scale = 1 / 255 / 255;
	      for (var i = 0, length = data.length; i < length; i += 4) {
	        c = data[i];
	        m = data[i + 1];
	        y = data[i + 2];
	        k = data[i + 3];
	        var r = c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k - 72734.4411664936) + m * (1.7149763477362134 * m - 5.6096736904047315 * y - 17.873870861415444 * k - 1401.7366389350734) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 4465.541406466231) - k * (21.86122147463605 * k + 48317.86113160301);
	        var g = c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k - 20220.756542821975) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 48691.05921601825) + y * (4.444339102852739 * y + 9.8632861493405 * k - 6341.191035517494) - k * (20.737325471181034 * k + 47890.15695978492);
	        var b = c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k - 3616.812083916688) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 28620.90484698408) + y * (0.03296041114873217 * y + 115.60384449646641 * k - 49363.43385999684) - k * (22.33816807309886 * k + 45932.16563550634);
	        data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;
	        data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;
	        data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;
	      }
	      return data;
	    },
	    getData: function getData(width, height, forceRGBoutput) {
	      if (this.numComponents > 4) {
	        error('JPEG error: Unsupported color mode');
	      }
	      var data = this._getLinearizedBlockData(width, height);
	      if (this.numComponents === 1 && forceRGBoutput) {
	        var dataLength = data.length;
	        var rgbData = new Uint8Array(dataLength * 3);
	        var offset = 0;
	        for (var i = 0; i < dataLength; i++) {
	          var grayColor = data[i];
	          rgbData[offset++] = grayColor;
	          rgbData[offset++] = grayColor;
	          rgbData[offset++] = grayColor;
	        }
	        return rgbData;
	      } else if (this.numComponents === 3 && this._isColorConversionNeeded()) {
	        return this._convertYccToRgb(data);
	      } else if (this.numComponents === 4) {
	        if (this._isColorConversionNeeded()) {
	          if (forceRGBoutput) {
	            return this._convertYcckToRgb(data);
	          }
	          return this._convertYcckToCmyk(data);
	        } else if (forceRGBoutput) {
	          return this._convertCmykToRgb(data);
	        }
	      }
	      return data;
	    }
	  };
	  return JpegImage;
	}();
	exports.JpegImage = JpegImage;

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var getLookupTableFactory = sharedUtil.getLookupTableFactory;
	var getMetrics = getLookupTableFactory(function (t) {
	  t['Courier'] = 600;
	  t['Courier-Bold'] = 600;
	  t['Courier-BoldOblique'] = 600;
	  t['Courier-Oblique'] = 600;
	  t['Helvetica'] = getLookupTableFactory(function (t) {
	    t['space'] = 278;
	    t['exclam'] = 278;
	    t['quotedbl'] = 355;
	    t['numbersign'] = 556;
	    t['dollar'] = 556;
	    t['percent'] = 889;
	    t['ampersand'] = 667;
	    t['quoteright'] = 222;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 389;
	    t['plus'] = 584;
	    t['comma'] = 278;
	    t['hyphen'] = 333;
	    t['period'] = 278;
	    t['slash'] = 278;
	    t['zero'] = 556;
	    t['one'] = 556;
	    t['two'] = 556;
	    t['three'] = 556;
	    t['four'] = 556;
	    t['five'] = 556;
	    t['six'] = 556;
	    t['seven'] = 556;
	    t['eight'] = 556;
	    t['nine'] = 556;
	    t['colon'] = 278;
	    t['semicolon'] = 278;
	    t['less'] = 584;
	    t['equal'] = 584;
	    t['greater'] = 584;
	    t['question'] = 556;
	    t['at'] = 1015;
	    t['A'] = 667;
	    t['B'] = 667;
	    t['C'] = 722;
	    t['D'] = 722;
	    t['E'] = 667;
	    t['F'] = 611;
	    t['G'] = 778;
	    t['H'] = 722;
	    t['I'] = 278;
	    t['J'] = 500;
	    t['K'] = 667;
	    t['L'] = 556;
	    t['M'] = 833;
	    t['N'] = 722;
	    t['O'] = 778;
	    t['P'] = 667;
	    t['Q'] = 778;
	    t['R'] = 722;
	    t['S'] = 667;
	    t['T'] = 611;
	    t['U'] = 722;
	    t['V'] = 667;
	    t['W'] = 944;
	    t['X'] = 667;
	    t['Y'] = 667;
	    t['Z'] = 611;
	    t['bracketleft'] = 278;
	    t['backslash'] = 278;
	    t['bracketright'] = 278;
	    t['asciicircum'] = 469;
	    t['underscore'] = 556;
	    t['quoteleft'] = 222;
	    t['a'] = 556;
	    t['b'] = 556;
	    t['c'] = 500;
	    t['d'] = 556;
	    t['e'] = 556;
	    t['f'] = 278;
	    t['g'] = 556;
	    t['h'] = 556;
	    t['i'] = 222;
	    t['j'] = 222;
	    t['k'] = 500;
	    t['l'] = 222;
	    t['m'] = 833;
	    t['n'] = 556;
	    t['o'] = 556;
	    t['p'] = 556;
	    t['q'] = 556;
	    t['r'] = 333;
	    t['s'] = 500;
	    t['t'] = 278;
	    t['u'] = 556;
	    t['v'] = 500;
	    t['w'] = 722;
	    t['x'] = 500;
	    t['y'] = 500;
	    t['z'] = 500;
	    t['braceleft'] = 334;
	    t['bar'] = 260;
	    t['braceright'] = 334;
	    t['asciitilde'] = 584;
	    t['exclamdown'] = 333;
	    t['cent'] = 556;
	    t['sterling'] = 556;
	    t['fraction'] = 167;
	    t['yen'] = 556;
	    t['florin'] = 556;
	    t['section'] = 556;
	    t['currency'] = 556;
	    t['quotesingle'] = 191;
	    t['quotedblleft'] = 333;
	    t['guillemotleft'] = 556;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 500;
	    t['fl'] = 500;
	    t['endash'] = 556;
	    t['dagger'] = 556;
	    t['daggerdbl'] = 556;
	    t['periodcentered'] = 278;
	    t['paragraph'] = 537;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 222;
	    t['quotedblbase'] = 333;
	    t['quotedblright'] = 333;
	    t['guillemotright'] = 556;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 611;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 1000;
	    t['ordfeminine'] = 370;
	    t['Lslash'] = 556;
	    t['Oslash'] = 778;
	    t['OE'] = 1000;
	    t['ordmasculine'] = 365;
	    t['ae'] = 889;
	    t['dotlessi'] = 278;
	    t['lslash'] = 222;
	    t['oslash'] = 611;
	    t['oe'] = 944;
	    t['germandbls'] = 611;
	    t['Idieresis'] = 278;
	    t['eacute'] = 556;
	    t['abreve'] = 556;
	    t['uhungarumlaut'] = 556;
	    t['ecaron'] = 556;
	    t['Ydieresis'] = 667;
	    t['divide'] = 584;
	    t['Yacute'] = 667;
	    t['Acircumflex'] = 667;
	    t['aacute'] = 556;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 500;
	    t['scommaaccent'] = 500;
	    t['ecircumflex'] = 556;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 556;
	    t['Uacute'] = 722;
	    t['uogonek'] = 556;
	    t['Edieresis'] = 667;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 737;
	    t['Emacron'] = 667;
	    t['ccaron'] = 500;
	    t['aring'] = 556;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 222;
	    t['agrave'] = 556;
	    t['Tcommaaccent'] = 611;
	    t['Cacute'] = 722;
	    t['atilde'] = 556;
	    t['Edotaccent'] = 667;
	    t['scaron'] = 500;
	    t['scedilla'] = 500;
	    t['iacute'] = 278;
	    t['lozenge'] = 471;
	    t['Rcaron'] = 722;
	    t['Gcommaaccent'] = 778;
	    t['ucircumflex'] = 556;
	    t['acircumflex'] = 556;
	    t['Amacron'] = 667;
	    t['rcaron'] = 333;
	    t['ccedilla'] = 500;
	    t['Zdotaccent'] = 611;
	    t['Thorn'] = 667;
	    t['Omacron'] = 778;
	    t['Racute'] = 722;
	    t['Sacute'] = 667;
	    t['dcaron'] = 643;
	    t['Umacron'] = 722;
	    t['uring'] = 556;
	    t['threesuperior'] = 333;
	    t['Ograve'] = 778;
	    t['Agrave'] = 667;
	    t['Abreve'] = 667;
	    t['multiply'] = 584;
	    t['uacute'] = 556;
	    t['Tcaron'] = 611;
	    t['partialdiff'] = 476;
	    t['ydieresis'] = 500;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 667;
	    t['adieresis'] = 556;
	    t['edieresis'] = 556;
	    t['cacute'] = 500;
	    t['nacute'] = 556;
	    t['umacron'] = 556;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 278;
	    t['plusminus'] = 584;
	    t['brokenbar'] = 260;
	    t['registered'] = 737;
	    t['Gbreve'] = 778;
	    t['Idotaccent'] = 278;
	    t['summation'] = 600;
	    t['Egrave'] = 667;
	    t['racute'] = 333;
	    t['omacron'] = 556;
	    t['Zacute'] = 611;
	    t['Zcaron'] = 611;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 722;
	    t['lcommaaccent'] = 222;
	    t['tcaron'] = 317;
	    t['eogonek'] = 556;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 667;
	    t['Adieresis'] = 667;
	    t['egrave'] = 556;
	    t['zacute'] = 500;
	    t['iogonek'] = 222;
	    t['Oacute'] = 778;
	    t['oacute'] = 556;
	    t['amacron'] = 556;
	    t['sacute'] = 500;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 778;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 556;
	    t['twosuperior'] = 333;
	    t['Odieresis'] = 778;
	    t['mu'] = 556;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 556;
	    t['Eogonek'] = 667;
	    t['dcroat'] = 556;
	    t['threequarters'] = 834;
	    t['Scedilla'] = 667;
	    t['lcaron'] = 299;
	    t['Kcommaaccent'] = 667;
	    t['Lacute'] = 556;
	    t['trademark'] = 1000;
	    t['edotaccent'] = 556;
	    t['Igrave'] = 278;
	    t['Imacron'] = 278;
	    t['Lcaron'] = 556;
	    t['onehalf'] = 834;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 556;
	    t['ntilde'] = 556;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 667;
	    t['emacron'] = 556;
	    t['gbreve'] = 556;
	    t['onequarter'] = 834;
	    t['Scaron'] = 667;
	    t['Scommaaccent'] = 667;
	    t['Ohungarumlaut'] = 778;
	    t['degree'] = 400;
	    t['ograve'] = 556;
	    t['Ccaron'] = 722;
	    t['ugrave'] = 556;
	    t['radical'] = 453;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 333;
	    t['Ntilde'] = 722;
	    t['otilde'] = 556;
	    t['Rcommaaccent'] = 722;
	    t['Lcommaaccent'] = 556;
	    t['Atilde'] = 667;
	    t['Aogonek'] = 667;
	    t['Aring'] = 667;
	    t['Otilde'] = 778;
	    t['zdotaccent'] = 500;
	    t['Ecaron'] = 667;
	    t['Iogonek'] = 278;
	    t['kcommaaccent'] = 500;
	    t['minus'] = 584;
	    t['Icircumflex'] = 278;
	    t['ncaron'] = 556;
	    t['tcommaaccent'] = 278;
	    t['logicalnot'] = 584;
	    t['odieresis'] = 556;
	    t['udieresis'] = 556;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 556;
	    t['eth'] = 556;
	    t['zcaron'] = 500;
	    t['ncommaaccent'] = 556;
	    t['onesuperior'] = 333;
	    t['imacron'] = 278;
	    t['Euro'] = 556;
	  });
	  t['Helvetica-Bold'] = getLookupTableFactory(function (t) {
	    t['space'] = 278;
	    t['exclam'] = 333;
	    t['quotedbl'] = 474;
	    t['numbersign'] = 556;
	    t['dollar'] = 556;
	    t['percent'] = 889;
	    t['ampersand'] = 722;
	    t['quoteright'] = 278;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 389;
	    t['plus'] = 584;
	    t['comma'] = 278;
	    t['hyphen'] = 333;
	    t['period'] = 278;
	    t['slash'] = 278;
	    t['zero'] = 556;
	    t['one'] = 556;
	    t['two'] = 556;
	    t['three'] = 556;
	    t['four'] = 556;
	    t['five'] = 556;
	    t['six'] = 556;
	    t['seven'] = 556;
	    t['eight'] = 556;
	    t['nine'] = 556;
	    t['colon'] = 333;
	    t['semicolon'] = 333;
	    t['less'] = 584;
	    t['equal'] = 584;
	    t['greater'] = 584;
	    t['question'] = 611;
	    t['at'] = 975;
	    t['A'] = 722;
	    t['B'] = 722;
	    t['C'] = 722;
	    t['D'] = 722;
	    t['E'] = 667;
	    t['F'] = 611;
	    t['G'] = 778;
	    t['H'] = 722;
	    t['I'] = 278;
	    t['J'] = 556;
	    t['K'] = 722;
	    t['L'] = 611;
	    t['M'] = 833;
	    t['N'] = 722;
	    t['O'] = 778;
	    t['P'] = 667;
	    t['Q'] = 778;
	    t['R'] = 722;
	    t['S'] = 667;
	    t['T'] = 611;
	    t['U'] = 722;
	    t['V'] = 667;
	    t['W'] = 944;
	    t['X'] = 667;
	    t['Y'] = 667;
	    t['Z'] = 611;
	    t['bracketleft'] = 333;
	    t['backslash'] = 278;
	    t['bracketright'] = 333;
	    t['asciicircum'] = 584;
	    t['underscore'] = 556;
	    t['quoteleft'] = 278;
	    t['a'] = 556;
	    t['b'] = 611;
	    t['c'] = 556;
	    t['d'] = 611;
	    t['e'] = 556;
	    t['f'] = 333;
	    t['g'] = 611;
	    t['h'] = 611;
	    t['i'] = 278;
	    t['j'] = 278;
	    t['k'] = 556;
	    t['l'] = 278;
	    t['m'] = 889;
	    t['n'] = 611;
	    t['o'] = 611;
	    t['p'] = 611;
	    t['q'] = 611;
	    t['r'] = 389;
	    t['s'] = 556;
	    t['t'] = 333;
	    t['u'] = 611;
	    t['v'] = 556;
	    t['w'] = 778;
	    t['x'] = 556;
	    t['y'] = 556;
	    t['z'] = 500;
	    t['braceleft'] = 389;
	    t['bar'] = 280;
	    t['braceright'] = 389;
	    t['asciitilde'] = 584;
	    t['exclamdown'] = 333;
	    t['cent'] = 556;
	    t['sterling'] = 556;
	    t['fraction'] = 167;
	    t['yen'] = 556;
	    t['florin'] = 556;
	    t['section'] = 556;
	    t['currency'] = 556;
	    t['quotesingle'] = 238;
	    t['quotedblleft'] = 500;
	    t['guillemotleft'] = 556;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 611;
	    t['fl'] = 611;
	    t['endash'] = 556;
	    t['dagger'] = 556;
	    t['daggerdbl'] = 556;
	    t['periodcentered'] = 278;
	    t['paragraph'] = 556;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 278;
	    t['quotedblbase'] = 500;
	    t['quotedblright'] = 500;
	    t['guillemotright'] = 556;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 611;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 1000;
	    t['ordfeminine'] = 370;
	    t['Lslash'] = 611;
	    t['Oslash'] = 778;
	    t['OE'] = 1000;
	    t['ordmasculine'] = 365;
	    t['ae'] = 889;
	    t['dotlessi'] = 278;
	    t['lslash'] = 278;
	    t['oslash'] = 611;
	    t['oe'] = 944;
	    t['germandbls'] = 611;
	    t['Idieresis'] = 278;
	    t['eacute'] = 556;
	    t['abreve'] = 556;
	    t['uhungarumlaut'] = 611;
	    t['ecaron'] = 556;
	    t['Ydieresis'] = 667;
	    t['divide'] = 584;
	    t['Yacute'] = 667;
	    t['Acircumflex'] = 722;
	    t['aacute'] = 556;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 556;
	    t['scommaaccent'] = 556;
	    t['ecircumflex'] = 556;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 556;
	    t['Uacute'] = 722;
	    t['uogonek'] = 611;
	    t['Edieresis'] = 667;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 737;
	    t['Emacron'] = 667;
	    t['ccaron'] = 556;
	    t['aring'] = 556;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 278;
	    t['agrave'] = 556;
	    t['Tcommaaccent'] = 611;
	    t['Cacute'] = 722;
	    t['atilde'] = 556;
	    t['Edotaccent'] = 667;
	    t['scaron'] = 556;
	    t['scedilla'] = 556;
	    t['iacute'] = 278;
	    t['lozenge'] = 494;
	    t['Rcaron'] = 722;
	    t['Gcommaaccent'] = 778;
	    t['ucircumflex'] = 611;
	    t['acircumflex'] = 556;
	    t['Amacron'] = 722;
	    t['rcaron'] = 389;
	    t['ccedilla'] = 556;
	    t['Zdotaccent'] = 611;
	    t['Thorn'] = 667;
	    t['Omacron'] = 778;
	    t['Racute'] = 722;
	    t['Sacute'] = 667;
	    t['dcaron'] = 743;
	    t['Umacron'] = 722;
	    t['uring'] = 611;
	    t['threesuperior'] = 333;
	    t['Ograve'] = 778;
	    t['Agrave'] = 722;
	    t['Abreve'] = 722;
	    t['multiply'] = 584;
	    t['uacute'] = 611;
	    t['Tcaron'] = 611;
	    t['partialdiff'] = 494;
	    t['ydieresis'] = 556;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 667;
	    t['adieresis'] = 556;
	    t['edieresis'] = 556;
	    t['cacute'] = 556;
	    t['nacute'] = 611;
	    t['umacron'] = 611;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 278;
	    t['plusminus'] = 584;
	    t['brokenbar'] = 280;
	    t['registered'] = 737;
	    t['Gbreve'] = 778;
	    t['Idotaccent'] = 278;
	    t['summation'] = 600;
	    t['Egrave'] = 667;
	    t['racute'] = 389;
	    t['omacron'] = 611;
	    t['Zacute'] = 611;
	    t['Zcaron'] = 611;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 722;
	    t['lcommaaccent'] = 278;
	    t['tcaron'] = 389;
	    t['eogonek'] = 556;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 722;
	    t['Adieresis'] = 722;
	    t['egrave'] = 556;
	    t['zacute'] = 500;
	    t['iogonek'] = 278;
	    t['Oacute'] = 778;
	    t['oacute'] = 611;
	    t['amacron'] = 556;
	    t['sacute'] = 556;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 778;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 611;
	    t['twosuperior'] = 333;
	    t['Odieresis'] = 778;
	    t['mu'] = 611;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 611;
	    t['Eogonek'] = 667;
	    t['dcroat'] = 611;
	    t['threequarters'] = 834;
	    t['Scedilla'] = 667;
	    t['lcaron'] = 400;
	    t['Kcommaaccent'] = 722;
	    t['Lacute'] = 611;
	    t['trademark'] = 1000;
	    t['edotaccent'] = 556;
	    t['Igrave'] = 278;
	    t['Imacron'] = 278;
	    t['Lcaron'] = 611;
	    t['onehalf'] = 834;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 611;
	    t['ntilde'] = 611;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 667;
	    t['emacron'] = 556;
	    t['gbreve'] = 611;
	    t['onequarter'] = 834;
	    t['Scaron'] = 667;
	    t['Scommaaccent'] = 667;
	    t['Ohungarumlaut'] = 778;
	    t['degree'] = 400;
	    t['ograve'] = 611;
	    t['Ccaron'] = 722;
	    t['ugrave'] = 611;
	    t['radical'] = 549;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 389;
	    t['Ntilde'] = 722;
	    t['otilde'] = 611;
	    t['Rcommaaccent'] = 722;
	    t['Lcommaaccent'] = 611;
	    t['Atilde'] = 722;
	    t['Aogonek'] = 722;
	    t['Aring'] = 722;
	    t['Otilde'] = 778;
	    t['zdotaccent'] = 500;
	    t['Ecaron'] = 667;
	    t['Iogonek'] = 278;
	    t['kcommaaccent'] = 556;
	    t['minus'] = 584;
	    t['Icircumflex'] = 278;
	    t['ncaron'] = 611;
	    t['tcommaaccent'] = 333;
	    t['logicalnot'] = 584;
	    t['odieresis'] = 611;
	    t['udieresis'] = 611;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 611;
	    t['eth'] = 611;
	    t['zcaron'] = 500;
	    t['ncommaaccent'] = 611;
	    t['onesuperior'] = 333;
	    t['imacron'] = 278;
	    t['Euro'] = 556;
	  });
	  t['Helvetica-BoldOblique'] = getLookupTableFactory(function (t) {
	    t['space'] = 278;
	    t['exclam'] = 333;
	    t['quotedbl'] = 474;
	    t['numbersign'] = 556;
	    t['dollar'] = 556;
	    t['percent'] = 889;
	    t['ampersand'] = 722;
	    t['quoteright'] = 278;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 389;
	    t['plus'] = 584;
	    t['comma'] = 278;
	    t['hyphen'] = 333;
	    t['period'] = 278;
	    t['slash'] = 278;
	    t['zero'] = 556;
	    t['one'] = 556;
	    t['two'] = 556;
	    t['three'] = 556;
	    t['four'] = 556;
	    t['five'] = 556;
	    t['six'] = 556;
	    t['seven'] = 556;
	    t['eight'] = 556;
	    t['nine'] = 556;
	    t['colon'] = 333;
	    t['semicolon'] = 333;
	    t['less'] = 584;
	    t['equal'] = 584;
	    t['greater'] = 584;
	    t['question'] = 611;
	    t['at'] = 975;
	    t['A'] = 722;
	    t['B'] = 722;
	    t['C'] = 722;
	    t['D'] = 722;
	    t['E'] = 667;
	    t['F'] = 611;
	    t['G'] = 778;
	    t['H'] = 722;
	    t['I'] = 278;
	    t['J'] = 556;
	    t['K'] = 722;
	    t['L'] = 611;
	    t['M'] = 833;
	    t['N'] = 722;
	    t['O'] = 778;
	    t['P'] = 667;
	    t['Q'] = 778;
	    t['R'] = 722;
	    t['S'] = 667;
	    t['T'] = 611;
	    t['U'] = 722;
	    t['V'] = 667;
	    t['W'] = 944;
	    t['X'] = 667;
	    t['Y'] = 667;
	    t['Z'] = 611;
	    t['bracketleft'] = 333;
	    t['backslash'] = 278;
	    t['bracketright'] = 333;
	    t['asciicircum'] = 584;
	    t['underscore'] = 556;
	    t['quoteleft'] = 278;
	    t['a'] = 556;
	    t['b'] = 611;
	    t['c'] = 556;
	    t['d'] = 611;
	    t['e'] = 556;
	    t['f'] = 333;
	    t['g'] = 611;
	    t['h'] = 611;
	    t['i'] = 278;
	    t['j'] = 278;
	    t['k'] = 556;
	    t['l'] = 278;
	    t['m'] = 889;
	    t['n'] = 611;
	    t['o'] = 611;
	    t['p'] = 611;
	    t['q'] = 611;
	    t['r'] = 389;
	    t['s'] = 556;
	    t['t'] = 333;
	    t['u'] = 611;
	    t['v'] = 556;
	    t['w'] = 778;
	    t['x'] = 556;
	    t['y'] = 556;
	    t['z'] = 500;
	    t['braceleft'] = 389;
	    t['bar'] = 280;
	    t['braceright'] = 389;
	    t['asciitilde'] = 584;
	    t['exclamdown'] = 333;
	    t['cent'] = 556;
	    t['sterling'] = 556;
	    t['fraction'] = 167;
	    t['yen'] = 556;
	    t['florin'] = 556;
	    t['section'] = 556;
	    t['currency'] = 556;
	    t['quotesingle'] = 238;
	    t['quotedblleft'] = 500;
	    t['guillemotleft'] = 556;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 611;
	    t['fl'] = 611;
	    t['endash'] = 556;
	    t['dagger'] = 556;
	    t['daggerdbl'] = 556;
	    t['periodcentered'] = 278;
	    t['paragraph'] = 556;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 278;
	    t['quotedblbase'] = 500;
	    t['quotedblright'] = 500;
	    t['guillemotright'] = 556;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 611;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 1000;
	    t['ordfeminine'] = 370;
	    t['Lslash'] = 611;
	    t['Oslash'] = 778;
	    t['OE'] = 1000;
	    t['ordmasculine'] = 365;
	    t['ae'] = 889;
	    t['dotlessi'] = 278;
	    t['lslash'] = 278;
	    t['oslash'] = 611;
	    t['oe'] = 944;
	    t['germandbls'] = 611;
	    t['Idieresis'] = 278;
	    t['eacute'] = 556;
	    t['abreve'] = 556;
	    t['uhungarumlaut'] = 611;
	    t['ecaron'] = 556;
	    t['Ydieresis'] = 667;
	    t['divide'] = 584;
	    t['Yacute'] = 667;
	    t['Acircumflex'] = 722;
	    t['aacute'] = 556;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 556;
	    t['scommaaccent'] = 556;
	    t['ecircumflex'] = 556;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 556;
	    t['Uacute'] = 722;
	    t['uogonek'] = 611;
	    t['Edieresis'] = 667;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 737;
	    t['Emacron'] = 667;
	    t['ccaron'] = 556;
	    t['aring'] = 556;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 278;
	    t['agrave'] = 556;
	    t['Tcommaaccent'] = 611;
	    t['Cacute'] = 722;
	    t['atilde'] = 556;
	    t['Edotaccent'] = 667;
	    t['scaron'] = 556;
	    t['scedilla'] = 556;
	    t['iacute'] = 278;
	    t['lozenge'] = 494;
	    t['Rcaron'] = 722;
	    t['Gcommaaccent'] = 778;
	    t['ucircumflex'] = 611;
	    t['acircumflex'] = 556;
	    t['Amacron'] = 722;
	    t['rcaron'] = 389;
	    t['ccedilla'] = 556;
	    t['Zdotaccent'] = 611;
	    t['Thorn'] = 667;
	    t['Omacron'] = 778;
	    t['Racute'] = 722;
	    t['Sacute'] = 667;
	    t['dcaron'] = 743;
	    t['Umacron'] = 722;
	    t['uring'] = 611;
	    t['threesuperior'] = 333;
	    t['Ograve'] = 778;
	    t['Agrave'] = 722;
	    t['Abreve'] = 722;
	    t['multiply'] = 584;
	    t['uacute'] = 611;
	    t['Tcaron'] = 611;
	    t['partialdiff'] = 494;
	    t['ydieresis'] = 556;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 667;
	    t['adieresis'] = 556;
	    t['edieresis'] = 556;
	    t['cacute'] = 556;
	    t['nacute'] = 611;
	    t['umacron'] = 611;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 278;
	    t['plusminus'] = 584;
	    t['brokenbar'] = 280;
	    t['registered'] = 737;
	    t['Gbreve'] = 778;
	    t['Idotaccent'] = 278;
	    t['summation'] = 600;
	    t['Egrave'] = 667;
	    t['racute'] = 389;
	    t['omacron'] = 611;
	    t['Zacute'] = 611;
	    t['Zcaron'] = 611;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 722;
	    t['lcommaaccent'] = 278;
	    t['tcaron'] = 389;
	    t['eogonek'] = 556;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 722;
	    t['Adieresis'] = 722;
	    t['egrave'] = 556;
	    t['zacute'] = 500;
	    t['iogonek'] = 278;
	    t['Oacute'] = 778;
	    t['oacute'] = 611;
	    t['amacron'] = 556;
	    t['sacute'] = 556;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 778;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 611;
	    t['twosuperior'] = 333;
	    t['Odieresis'] = 778;
	    t['mu'] = 611;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 611;
	    t['Eogonek'] = 667;
	    t['dcroat'] = 611;
	    t['threequarters'] = 834;
	    t['Scedilla'] = 667;
	    t['lcaron'] = 400;
	    t['Kcommaaccent'] = 722;
	    t['Lacute'] = 611;
	    t['trademark'] = 1000;
	    t['edotaccent'] = 556;
	    t['Igrave'] = 278;
	    t['Imacron'] = 278;
	    t['Lcaron'] = 611;
	    t['onehalf'] = 834;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 611;
	    t['ntilde'] = 611;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 667;
	    t['emacron'] = 556;
	    t['gbreve'] = 611;
	    t['onequarter'] = 834;
	    t['Scaron'] = 667;
	    t['Scommaaccent'] = 667;
	    t['Ohungarumlaut'] = 778;
	    t['degree'] = 400;
	    t['ograve'] = 611;
	    t['Ccaron'] = 722;
	    t['ugrave'] = 611;
	    t['radical'] = 549;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 389;
	    t['Ntilde'] = 722;
	    t['otilde'] = 611;
	    t['Rcommaaccent'] = 722;
	    t['Lcommaaccent'] = 611;
	    t['Atilde'] = 722;
	    t['Aogonek'] = 722;
	    t['Aring'] = 722;
	    t['Otilde'] = 778;
	    t['zdotaccent'] = 500;
	    t['Ecaron'] = 667;
	    t['Iogonek'] = 278;
	    t['kcommaaccent'] = 556;
	    t['minus'] = 584;
	    t['Icircumflex'] = 278;
	    t['ncaron'] = 611;
	    t['tcommaaccent'] = 333;
	    t['logicalnot'] = 584;
	    t['odieresis'] = 611;
	    t['udieresis'] = 611;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 611;
	    t['eth'] = 611;
	    t['zcaron'] = 500;
	    t['ncommaaccent'] = 611;
	    t['onesuperior'] = 333;
	    t['imacron'] = 278;
	    t['Euro'] = 556;
	  });
	  t['Helvetica-Oblique'] = getLookupTableFactory(function (t) {
	    t['space'] = 278;
	    t['exclam'] = 278;
	    t['quotedbl'] = 355;
	    t['numbersign'] = 556;
	    t['dollar'] = 556;
	    t['percent'] = 889;
	    t['ampersand'] = 667;
	    t['quoteright'] = 222;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 389;
	    t['plus'] = 584;
	    t['comma'] = 278;
	    t['hyphen'] = 333;
	    t['period'] = 278;
	    t['slash'] = 278;
	    t['zero'] = 556;
	    t['one'] = 556;
	    t['two'] = 556;
	    t['three'] = 556;
	    t['four'] = 556;
	    t['five'] = 556;
	    t['six'] = 556;
	    t['seven'] = 556;
	    t['eight'] = 556;
	    t['nine'] = 556;
	    t['colon'] = 278;
	    t['semicolon'] = 278;
	    t['less'] = 584;
	    t['equal'] = 584;
	    t['greater'] = 584;
	    t['question'] = 556;
	    t['at'] = 1015;
	    t['A'] = 667;
	    t['B'] = 667;
	    t['C'] = 722;
	    t['D'] = 722;
	    t['E'] = 667;
	    t['F'] = 611;
	    t['G'] = 778;
	    t['H'] = 722;
	    t['I'] = 278;
	    t['J'] = 500;
	    t['K'] = 667;
	    t['L'] = 556;
	    t['M'] = 833;
	    t['N'] = 722;
	    t['O'] = 778;
	    t['P'] = 667;
	    t['Q'] = 778;
	    t['R'] = 722;
	    t['S'] = 667;
	    t['T'] = 611;
	    t['U'] = 722;
	    t['V'] = 667;
	    t['W'] = 944;
	    t['X'] = 667;
	    t['Y'] = 667;
	    t['Z'] = 611;
	    t['bracketleft'] = 278;
	    t['backslash'] = 278;
	    t['bracketright'] = 278;
	    t['asciicircum'] = 469;
	    t['underscore'] = 556;
	    t['quoteleft'] = 222;
	    t['a'] = 556;
	    t['b'] = 556;
	    t['c'] = 500;
	    t['d'] = 556;
	    t['e'] = 556;
	    t['f'] = 278;
	    t['g'] = 556;
	    t['h'] = 556;
	    t['i'] = 222;
	    t['j'] = 222;
	    t['k'] = 500;
	    t['l'] = 222;
	    t['m'] = 833;
	    t['n'] = 556;
	    t['o'] = 556;
	    t['p'] = 556;
	    t['q'] = 556;
	    t['r'] = 333;
	    t['s'] = 500;
	    t['t'] = 278;
	    t['u'] = 556;
	    t['v'] = 500;
	    t['w'] = 722;
	    t['x'] = 500;
	    t['y'] = 500;
	    t['z'] = 500;
	    t['braceleft'] = 334;
	    t['bar'] = 260;
	    t['braceright'] = 334;
	    t['asciitilde'] = 584;
	    t['exclamdown'] = 333;
	    t['cent'] = 556;
	    t['sterling'] = 556;
	    t['fraction'] = 167;
	    t['yen'] = 556;
	    t['florin'] = 556;
	    t['section'] = 556;
	    t['currency'] = 556;
	    t['quotesingle'] = 191;
	    t['quotedblleft'] = 333;
	    t['guillemotleft'] = 556;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 500;
	    t['fl'] = 500;
	    t['endash'] = 556;
	    t['dagger'] = 556;
	    t['daggerdbl'] = 556;
	    t['periodcentered'] = 278;
	    t['paragraph'] = 537;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 222;
	    t['quotedblbase'] = 333;
	    t['quotedblright'] = 333;
	    t['guillemotright'] = 556;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 611;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 1000;
	    t['ordfeminine'] = 370;
	    t['Lslash'] = 556;
	    t['Oslash'] = 778;
	    t['OE'] = 1000;
	    t['ordmasculine'] = 365;
	    t['ae'] = 889;
	    t['dotlessi'] = 278;
	    t['lslash'] = 222;
	    t['oslash'] = 611;
	    t['oe'] = 944;
	    t['germandbls'] = 611;
	    t['Idieresis'] = 278;
	    t['eacute'] = 556;
	    t['abreve'] = 556;
	    t['uhungarumlaut'] = 556;
	    t['ecaron'] = 556;
	    t['Ydieresis'] = 667;
	    t['divide'] = 584;
	    t['Yacute'] = 667;
	    t['Acircumflex'] = 667;
	    t['aacute'] = 556;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 500;
	    t['scommaaccent'] = 500;
	    t['ecircumflex'] = 556;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 556;
	    t['Uacute'] = 722;
	    t['uogonek'] = 556;
	    t['Edieresis'] = 667;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 737;
	    t['Emacron'] = 667;
	    t['ccaron'] = 500;
	    t['aring'] = 556;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 222;
	    t['agrave'] = 556;
	    t['Tcommaaccent'] = 611;
	    t['Cacute'] = 722;
	    t['atilde'] = 556;
	    t['Edotaccent'] = 667;
	    t['scaron'] = 500;
	    t['scedilla'] = 500;
	    t['iacute'] = 278;
	    t['lozenge'] = 471;
	    t['Rcaron'] = 722;
	    t['Gcommaaccent'] = 778;
	    t['ucircumflex'] = 556;
	    t['acircumflex'] = 556;
	    t['Amacron'] = 667;
	    t['rcaron'] = 333;
	    t['ccedilla'] = 500;
	    t['Zdotaccent'] = 611;
	    t['Thorn'] = 667;
	    t['Omacron'] = 778;
	    t['Racute'] = 722;
	    t['Sacute'] = 667;
	    t['dcaron'] = 643;
	    t['Umacron'] = 722;
	    t['uring'] = 556;
	    t['threesuperior'] = 333;
	    t['Ograve'] = 778;
	    t['Agrave'] = 667;
	    t['Abreve'] = 667;
	    t['multiply'] = 584;
	    t['uacute'] = 556;
	    t['Tcaron'] = 611;
	    t['partialdiff'] = 476;
	    t['ydieresis'] = 500;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 667;
	    t['adieresis'] = 556;
	    t['edieresis'] = 556;
	    t['cacute'] = 500;
	    t['nacute'] = 556;
	    t['umacron'] = 556;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 278;
	    t['plusminus'] = 584;
	    t['brokenbar'] = 260;
	    t['registered'] = 737;
	    t['Gbreve'] = 778;
	    t['Idotaccent'] = 278;
	    t['summation'] = 600;
	    t['Egrave'] = 667;
	    t['racute'] = 333;
	    t['omacron'] = 556;
	    t['Zacute'] = 611;
	    t['Zcaron'] = 611;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 722;
	    t['lcommaaccent'] = 222;
	    t['tcaron'] = 317;
	    t['eogonek'] = 556;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 667;
	    t['Adieresis'] = 667;
	    t['egrave'] = 556;
	    t['zacute'] = 500;
	    t['iogonek'] = 222;
	    t['Oacute'] = 778;
	    t['oacute'] = 556;
	    t['amacron'] = 556;
	    t['sacute'] = 500;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 778;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 556;
	    t['twosuperior'] = 333;
	    t['Odieresis'] = 778;
	    t['mu'] = 556;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 556;
	    t['Eogonek'] = 667;
	    t['dcroat'] = 556;
	    t['threequarters'] = 834;
	    t['Scedilla'] = 667;
	    t['lcaron'] = 299;
	    t['Kcommaaccent'] = 667;
	    t['Lacute'] = 556;
	    t['trademark'] = 1000;
	    t['edotaccent'] = 556;
	    t['Igrave'] = 278;
	    t['Imacron'] = 278;
	    t['Lcaron'] = 556;
	    t['onehalf'] = 834;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 556;
	    t['ntilde'] = 556;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 667;
	    t['emacron'] = 556;
	    t['gbreve'] = 556;
	    t['onequarter'] = 834;
	    t['Scaron'] = 667;
	    t['Scommaaccent'] = 667;
	    t['Ohungarumlaut'] = 778;
	    t['degree'] = 400;
	    t['ograve'] = 556;
	    t['Ccaron'] = 722;
	    t['ugrave'] = 556;
	    t['radical'] = 453;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 333;
	    t['Ntilde'] = 722;
	    t['otilde'] = 556;
	    t['Rcommaaccent'] = 722;
	    t['Lcommaaccent'] = 556;
	    t['Atilde'] = 667;
	    t['Aogonek'] = 667;
	    t['Aring'] = 667;
	    t['Otilde'] = 778;
	    t['zdotaccent'] = 500;
	    t['Ecaron'] = 667;
	    t['Iogonek'] = 278;
	    t['kcommaaccent'] = 500;
	    t['minus'] = 584;
	    t['Icircumflex'] = 278;
	    t['ncaron'] = 556;
	    t['tcommaaccent'] = 278;
	    t['logicalnot'] = 584;
	    t['odieresis'] = 556;
	    t['udieresis'] = 556;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 556;
	    t['eth'] = 556;
	    t['zcaron'] = 500;
	    t['ncommaaccent'] = 556;
	    t['onesuperior'] = 333;
	    t['imacron'] = 278;
	    t['Euro'] = 556;
	  });
	  t['Symbol'] = getLookupTableFactory(function (t) {
	    t['space'] = 250;
	    t['exclam'] = 333;
	    t['universal'] = 713;
	    t['numbersign'] = 500;
	    t['existential'] = 549;
	    t['percent'] = 833;
	    t['ampersand'] = 778;
	    t['suchthat'] = 439;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asteriskmath'] = 500;
	    t['plus'] = 549;
	    t['comma'] = 250;
	    t['minus'] = 549;
	    t['period'] = 250;
	    t['slash'] = 278;
	    t['zero'] = 500;
	    t['one'] = 500;
	    t['two'] = 500;
	    t['three'] = 500;
	    t['four'] = 500;
	    t['five'] = 500;
	    t['six'] = 500;
	    t['seven'] = 500;
	    t['eight'] = 500;
	    t['nine'] = 500;
	    t['colon'] = 278;
	    t['semicolon'] = 278;
	    t['less'] = 549;
	    t['equal'] = 549;
	    t['greater'] = 549;
	    t['question'] = 444;
	    t['congruent'] = 549;
	    t['Alpha'] = 722;
	    t['Beta'] = 667;
	    t['Chi'] = 722;
	    t['Delta'] = 612;
	    t['Epsilon'] = 611;
	    t['Phi'] = 763;
	    t['Gamma'] = 603;
	    t['Eta'] = 722;
	    t['Iota'] = 333;
	    t['theta1'] = 631;
	    t['Kappa'] = 722;
	    t['Lambda'] = 686;
	    t['Mu'] = 889;
	    t['Nu'] = 722;
	    t['Omicron'] = 722;
	    t['Pi'] = 768;
	    t['Theta'] = 741;
	    t['Rho'] = 556;
	    t['Sigma'] = 592;
	    t['Tau'] = 611;
	    t['Upsilon'] = 690;
	    t['sigma1'] = 439;
	    t['Omega'] = 768;
	    t['Xi'] = 645;
	    t['Psi'] = 795;
	    t['Zeta'] = 611;
	    t['bracketleft'] = 333;
	    t['therefore'] = 863;
	    t['bracketright'] = 333;
	    t['perpendicular'] = 658;
	    t['underscore'] = 500;
	    t['radicalex'] = 500;
	    t['alpha'] = 631;
	    t['beta'] = 549;
	    t['chi'] = 549;
	    t['delta'] = 494;
	    t['epsilon'] = 439;
	    t['phi'] = 521;
	    t['gamma'] = 411;
	    t['eta'] = 603;
	    t['iota'] = 329;
	    t['phi1'] = 603;
	    t['kappa'] = 549;
	    t['lambda'] = 549;
	    t['mu'] = 576;
	    t['nu'] = 521;
	    t['omicron'] = 549;
	    t['pi'] = 549;
	    t['theta'] = 521;
	    t['rho'] = 549;
	    t['sigma'] = 603;
	    t['tau'] = 439;
	    t['upsilon'] = 576;
	    t['omega1'] = 713;
	    t['omega'] = 686;
	    t['xi'] = 493;
	    t['psi'] = 686;
	    t['zeta'] = 494;
	    t['braceleft'] = 480;
	    t['bar'] = 200;
	    t['braceright'] = 480;
	    t['similar'] = 549;
	    t['Euro'] = 750;
	    t['Upsilon1'] = 620;
	    t['minute'] = 247;
	    t['lessequal'] = 549;
	    t['fraction'] = 167;
	    t['infinity'] = 713;
	    t['florin'] = 500;
	    t['club'] = 753;
	    t['diamond'] = 753;
	    t['heart'] = 753;
	    t['spade'] = 753;
	    t['arrowboth'] = 1042;
	    t['arrowleft'] = 987;
	    t['arrowup'] = 603;
	    t['arrowright'] = 987;
	    t['arrowdown'] = 603;
	    t['degree'] = 400;
	    t['plusminus'] = 549;
	    t['second'] = 411;
	    t['greaterequal'] = 549;
	    t['multiply'] = 549;
	    t['proportional'] = 713;
	    t['partialdiff'] = 494;
	    t['bullet'] = 460;
	    t['divide'] = 549;
	    t['notequal'] = 549;
	    t['equivalence'] = 549;
	    t['approxequal'] = 549;
	    t['ellipsis'] = 1000;
	    t['arrowvertex'] = 603;
	    t['arrowhorizex'] = 1000;
	    t['carriagereturn'] = 658;
	    t['aleph'] = 823;
	    t['Ifraktur'] = 686;
	    t['Rfraktur'] = 795;
	    t['weierstrass'] = 987;
	    t['circlemultiply'] = 768;
	    t['circleplus'] = 768;
	    t['emptyset'] = 823;
	    t['intersection'] = 768;
	    t['union'] = 768;
	    t['propersuperset'] = 713;
	    t['reflexsuperset'] = 713;
	    t['notsubset'] = 713;
	    t['propersubset'] = 713;
	    t['reflexsubset'] = 713;
	    t['element'] = 713;
	    t['notelement'] = 713;
	    t['angle'] = 768;
	    t['gradient'] = 713;
	    t['registerserif'] = 790;
	    t['copyrightserif'] = 790;
	    t['trademarkserif'] = 890;
	    t['product'] = 823;
	    t['radical'] = 549;
	    t['dotmath'] = 250;
	    t['logicalnot'] = 713;
	    t['logicaland'] = 603;
	    t['logicalor'] = 603;
	    t['arrowdblboth'] = 1042;
	    t['arrowdblleft'] = 987;
	    t['arrowdblup'] = 603;
	    t['arrowdblright'] = 987;
	    t['arrowdbldown'] = 603;
	    t['lozenge'] = 494;
	    t['angleleft'] = 329;
	    t['registersans'] = 790;
	    t['copyrightsans'] = 790;
	    t['trademarksans'] = 786;
	    t['summation'] = 713;
	    t['parenlefttp'] = 384;
	    t['parenleftex'] = 384;
	    t['parenleftbt'] = 384;
	    t['bracketlefttp'] = 384;
	    t['bracketleftex'] = 384;
	    t['bracketleftbt'] = 384;
	    t['bracelefttp'] = 494;
	    t['braceleftmid'] = 494;
	    t['braceleftbt'] = 494;
	    t['braceex'] = 494;
	    t['angleright'] = 329;
	    t['integral'] = 274;
	    t['integraltp'] = 686;
	    t['integralex'] = 686;
	    t['integralbt'] = 686;
	    t['parenrighttp'] = 384;
	    t['parenrightex'] = 384;
	    t['parenrightbt'] = 384;
	    t['bracketrighttp'] = 384;
	    t['bracketrightex'] = 384;
	    t['bracketrightbt'] = 384;
	    t['bracerighttp'] = 494;
	    t['bracerightmid'] = 494;
	    t['bracerightbt'] = 494;
	    t['apple'] = 790;
	  });
	  t['Times-Roman'] = getLookupTableFactory(function (t) {
	    t['space'] = 250;
	    t['exclam'] = 333;
	    t['quotedbl'] = 408;
	    t['numbersign'] = 500;
	    t['dollar'] = 500;
	    t['percent'] = 833;
	    t['ampersand'] = 778;
	    t['quoteright'] = 333;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 500;
	    t['plus'] = 564;
	    t['comma'] = 250;
	    t['hyphen'] = 333;
	    t['period'] = 250;
	    t['slash'] = 278;
	    t['zero'] = 500;
	    t['one'] = 500;
	    t['two'] = 500;
	    t['three'] = 500;
	    t['four'] = 500;
	    t['five'] = 500;
	    t['six'] = 500;
	    t['seven'] = 500;
	    t['eight'] = 500;
	    t['nine'] = 500;
	    t['colon'] = 278;
	    t['semicolon'] = 278;
	    t['less'] = 564;
	    t['equal'] = 564;
	    t['greater'] = 564;
	    t['question'] = 444;
	    t['at'] = 921;
	    t['A'] = 722;
	    t['B'] = 667;
	    t['C'] = 667;
	    t['D'] = 722;
	    t['E'] = 611;
	    t['F'] = 556;
	    t['G'] = 722;
	    t['H'] = 722;
	    t['I'] = 333;
	    t['J'] = 389;
	    t['K'] = 722;
	    t['L'] = 611;
	    t['M'] = 889;
	    t['N'] = 722;
	    t['O'] = 722;
	    t['P'] = 556;
	    t['Q'] = 722;
	    t['R'] = 667;
	    t['S'] = 556;
	    t['T'] = 611;
	    t['U'] = 722;
	    t['V'] = 722;
	    t['W'] = 944;
	    t['X'] = 722;
	    t['Y'] = 722;
	    t['Z'] = 611;
	    t['bracketleft'] = 333;
	    t['backslash'] = 278;
	    t['bracketright'] = 333;
	    t['asciicircum'] = 469;
	    t['underscore'] = 500;
	    t['quoteleft'] = 333;
	    t['a'] = 444;
	    t['b'] = 500;
	    t['c'] = 444;
	    t['d'] = 500;
	    t['e'] = 444;
	    t['f'] = 333;
	    t['g'] = 500;
	    t['h'] = 500;
	    t['i'] = 278;
	    t['j'] = 278;
	    t['k'] = 500;
	    t['l'] = 278;
	    t['m'] = 778;
	    t['n'] = 500;
	    t['o'] = 500;
	    t['p'] = 500;
	    t['q'] = 500;
	    t['r'] = 333;
	    t['s'] = 389;
	    t['t'] = 278;
	    t['u'] = 500;
	    t['v'] = 500;
	    t['w'] = 722;
	    t['x'] = 500;
	    t['y'] = 500;
	    t['z'] = 444;
	    t['braceleft'] = 480;
	    t['bar'] = 200;
	    t['braceright'] = 480;
	    t['asciitilde'] = 541;
	    t['exclamdown'] = 333;
	    t['cent'] = 500;
	    t['sterling'] = 500;
	    t['fraction'] = 167;
	    t['yen'] = 500;
	    t['florin'] = 500;
	    t['section'] = 500;
	    t['currency'] = 500;
	    t['quotesingle'] = 180;
	    t['quotedblleft'] = 444;
	    t['guillemotleft'] = 500;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 556;
	    t['fl'] = 556;
	    t['endash'] = 500;
	    t['dagger'] = 500;
	    t['daggerdbl'] = 500;
	    t['periodcentered'] = 250;
	    t['paragraph'] = 453;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 333;
	    t['quotedblbase'] = 444;
	    t['quotedblright'] = 444;
	    t['guillemotright'] = 500;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 444;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 889;
	    t['ordfeminine'] = 276;
	    t['Lslash'] = 611;
	    t['Oslash'] = 722;
	    t['OE'] = 889;
	    t['ordmasculine'] = 310;
	    t['ae'] = 667;
	    t['dotlessi'] = 278;
	    t['lslash'] = 278;
	    t['oslash'] = 500;
	    t['oe'] = 722;
	    t['germandbls'] = 500;
	    t['Idieresis'] = 333;
	    t['eacute'] = 444;
	    t['abreve'] = 444;
	    t['uhungarumlaut'] = 500;
	    t['ecaron'] = 444;
	    t['Ydieresis'] = 722;
	    t['divide'] = 564;
	    t['Yacute'] = 722;
	    t['Acircumflex'] = 722;
	    t['aacute'] = 444;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 500;
	    t['scommaaccent'] = 389;
	    t['ecircumflex'] = 444;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 444;
	    t['Uacute'] = 722;
	    t['uogonek'] = 500;
	    t['Edieresis'] = 611;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 760;
	    t['Emacron'] = 611;
	    t['ccaron'] = 444;
	    t['aring'] = 444;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 278;
	    t['agrave'] = 444;
	    t['Tcommaaccent'] = 611;
	    t['Cacute'] = 667;
	    t['atilde'] = 444;
	    t['Edotaccent'] = 611;
	    t['scaron'] = 389;
	    t['scedilla'] = 389;
	    t['iacute'] = 278;
	    t['lozenge'] = 471;
	    t['Rcaron'] = 667;
	    t['Gcommaaccent'] = 722;
	    t['ucircumflex'] = 500;
	    t['acircumflex'] = 444;
	    t['Amacron'] = 722;
	    t['rcaron'] = 333;
	    t['ccedilla'] = 444;
	    t['Zdotaccent'] = 611;
	    t['Thorn'] = 556;
	    t['Omacron'] = 722;
	    t['Racute'] = 667;
	    t['Sacute'] = 556;
	    t['dcaron'] = 588;
	    t['Umacron'] = 722;
	    t['uring'] = 500;
	    t['threesuperior'] = 300;
	    t['Ograve'] = 722;
	    t['Agrave'] = 722;
	    t['Abreve'] = 722;
	    t['multiply'] = 564;
	    t['uacute'] = 500;
	    t['Tcaron'] = 611;
	    t['partialdiff'] = 476;
	    t['ydieresis'] = 500;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 611;
	    t['adieresis'] = 444;
	    t['edieresis'] = 444;
	    t['cacute'] = 444;
	    t['nacute'] = 500;
	    t['umacron'] = 500;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 333;
	    t['plusminus'] = 564;
	    t['brokenbar'] = 200;
	    t['registered'] = 760;
	    t['Gbreve'] = 722;
	    t['Idotaccent'] = 333;
	    t['summation'] = 600;
	    t['Egrave'] = 611;
	    t['racute'] = 333;
	    t['omacron'] = 500;
	    t['Zacute'] = 611;
	    t['Zcaron'] = 611;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 667;
	    t['lcommaaccent'] = 278;
	    t['tcaron'] = 326;
	    t['eogonek'] = 444;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 722;
	    t['Adieresis'] = 722;
	    t['egrave'] = 444;
	    t['zacute'] = 444;
	    t['iogonek'] = 278;
	    t['Oacute'] = 722;
	    t['oacute'] = 500;
	    t['amacron'] = 444;
	    t['sacute'] = 389;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 722;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 500;
	    t['twosuperior'] = 300;
	    t['Odieresis'] = 722;
	    t['mu'] = 500;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 500;
	    t['Eogonek'] = 611;
	    t['dcroat'] = 500;
	    t['threequarters'] = 750;
	    t['Scedilla'] = 556;
	    t['lcaron'] = 344;
	    t['Kcommaaccent'] = 722;
	    t['Lacute'] = 611;
	    t['trademark'] = 980;
	    t['edotaccent'] = 444;
	    t['Igrave'] = 333;
	    t['Imacron'] = 333;
	    t['Lcaron'] = 611;
	    t['onehalf'] = 750;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 500;
	    t['ntilde'] = 500;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 611;
	    t['emacron'] = 444;
	    t['gbreve'] = 500;
	    t['onequarter'] = 750;
	    t['Scaron'] = 556;
	    t['Scommaaccent'] = 556;
	    t['Ohungarumlaut'] = 722;
	    t['degree'] = 400;
	    t['ograve'] = 500;
	    t['Ccaron'] = 667;
	    t['ugrave'] = 500;
	    t['radical'] = 453;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 333;
	    t['Ntilde'] = 722;
	    t['otilde'] = 500;
	    t['Rcommaaccent'] = 667;
	    t['Lcommaaccent'] = 611;
	    t['Atilde'] = 722;
	    t['Aogonek'] = 722;
	    t['Aring'] = 722;
	    t['Otilde'] = 722;
	    t['zdotaccent'] = 444;
	    t['Ecaron'] = 611;
	    t['Iogonek'] = 333;
	    t['kcommaaccent'] = 500;
	    t['minus'] = 564;
	    t['Icircumflex'] = 333;
	    t['ncaron'] = 500;
	    t['tcommaaccent'] = 278;
	    t['logicalnot'] = 564;
	    t['odieresis'] = 500;
	    t['udieresis'] = 500;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 500;
	    t['eth'] = 500;
	    t['zcaron'] = 444;
	    t['ncommaaccent'] = 500;
	    t['onesuperior'] = 300;
	    t['imacron'] = 278;
	    t['Euro'] = 500;
	  });
	  t['Times-Bold'] = getLookupTableFactory(function (t) {
	    t['space'] = 250;
	    t['exclam'] = 333;
	    t['quotedbl'] = 555;
	    t['numbersign'] = 500;
	    t['dollar'] = 500;
	    t['percent'] = 1000;
	    t['ampersand'] = 833;
	    t['quoteright'] = 333;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 500;
	    t['plus'] = 570;
	    t['comma'] = 250;
	    t['hyphen'] = 333;
	    t['period'] = 250;
	    t['slash'] = 278;
	    t['zero'] = 500;
	    t['one'] = 500;
	    t['two'] = 500;
	    t['three'] = 500;
	    t['four'] = 500;
	    t['five'] = 500;
	    t['six'] = 500;
	    t['seven'] = 500;
	    t['eight'] = 500;
	    t['nine'] = 500;
	    t['colon'] = 333;
	    t['semicolon'] = 333;
	    t['less'] = 570;
	    t['equal'] = 570;
	    t['greater'] = 570;
	    t['question'] = 500;
	    t['at'] = 930;
	    t['A'] = 722;
	    t['B'] = 667;
	    t['C'] = 722;
	    t['D'] = 722;
	    t['E'] = 667;
	    t['F'] = 611;
	    t['G'] = 778;
	    t['H'] = 778;
	    t['I'] = 389;
	    t['J'] = 500;
	    t['K'] = 778;
	    t['L'] = 667;
	    t['M'] = 944;
	    t['N'] = 722;
	    t['O'] = 778;
	    t['P'] = 611;
	    t['Q'] = 778;
	    t['R'] = 722;
	    t['S'] = 556;
	    t['T'] = 667;
	    t['U'] = 722;
	    t['V'] = 722;
	    t['W'] = 1000;
	    t['X'] = 722;
	    t['Y'] = 722;
	    t['Z'] = 667;
	    t['bracketleft'] = 333;
	    t['backslash'] = 278;
	    t['bracketright'] = 333;
	    t['asciicircum'] = 581;
	    t['underscore'] = 500;
	    t['quoteleft'] = 333;
	    t['a'] = 500;
	    t['b'] = 556;
	    t['c'] = 444;
	    t['d'] = 556;
	    t['e'] = 444;
	    t['f'] = 333;
	    t['g'] = 500;
	    t['h'] = 556;
	    t['i'] = 278;
	    t['j'] = 333;
	    t['k'] = 556;
	    t['l'] = 278;
	    t['m'] = 833;
	    t['n'] = 556;
	    t['o'] = 500;
	    t['p'] = 556;
	    t['q'] = 556;
	    t['r'] = 444;
	    t['s'] = 389;
	    t['t'] = 333;
	    t['u'] = 556;
	    t['v'] = 500;
	    t['w'] = 722;
	    t['x'] = 500;
	    t['y'] = 500;
	    t['z'] = 444;
	    t['braceleft'] = 394;
	    t['bar'] = 220;
	    t['braceright'] = 394;
	    t['asciitilde'] = 520;
	    t['exclamdown'] = 333;
	    t['cent'] = 500;
	    t['sterling'] = 500;
	    t['fraction'] = 167;
	    t['yen'] = 500;
	    t['florin'] = 500;
	    t['section'] = 500;
	    t['currency'] = 500;
	    t['quotesingle'] = 278;
	    t['quotedblleft'] = 500;
	    t['guillemotleft'] = 500;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 556;
	    t['fl'] = 556;
	    t['endash'] = 500;
	    t['dagger'] = 500;
	    t['daggerdbl'] = 500;
	    t['periodcentered'] = 250;
	    t['paragraph'] = 540;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 333;
	    t['quotedblbase'] = 500;
	    t['quotedblright'] = 500;
	    t['guillemotright'] = 500;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 500;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 1000;
	    t['ordfeminine'] = 300;
	    t['Lslash'] = 667;
	    t['Oslash'] = 778;
	    t['OE'] = 1000;
	    t['ordmasculine'] = 330;
	    t['ae'] = 722;
	    t['dotlessi'] = 278;
	    t['lslash'] = 278;
	    t['oslash'] = 500;
	    t['oe'] = 722;
	    t['germandbls'] = 556;
	    t['Idieresis'] = 389;
	    t['eacute'] = 444;
	    t['abreve'] = 500;
	    t['uhungarumlaut'] = 556;
	    t['ecaron'] = 444;
	    t['Ydieresis'] = 722;
	    t['divide'] = 570;
	    t['Yacute'] = 722;
	    t['Acircumflex'] = 722;
	    t['aacute'] = 500;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 500;
	    t['scommaaccent'] = 389;
	    t['ecircumflex'] = 444;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 500;
	    t['Uacute'] = 722;
	    t['uogonek'] = 556;
	    t['Edieresis'] = 667;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 747;
	    t['Emacron'] = 667;
	    t['ccaron'] = 444;
	    t['aring'] = 500;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 278;
	    t['agrave'] = 500;
	    t['Tcommaaccent'] = 667;
	    t['Cacute'] = 722;
	    t['atilde'] = 500;
	    t['Edotaccent'] = 667;
	    t['scaron'] = 389;
	    t['scedilla'] = 389;
	    t['iacute'] = 278;
	    t['lozenge'] = 494;
	    t['Rcaron'] = 722;
	    t['Gcommaaccent'] = 778;
	    t['ucircumflex'] = 556;
	    t['acircumflex'] = 500;
	    t['Amacron'] = 722;
	    t['rcaron'] = 444;
	    t['ccedilla'] = 444;
	    t['Zdotaccent'] = 667;
	    t['Thorn'] = 611;
	    t['Omacron'] = 778;
	    t['Racute'] = 722;
	    t['Sacute'] = 556;
	    t['dcaron'] = 672;
	    t['Umacron'] = 722;
	    t['uring'] = 556;
	    t['threesuperior'] = 300;
	    t['Ograve'] = 778;
	    t['Agrave'] = 722;
	    t['Abreve'] = 722;
	    t['multiply'] = 570;
	    t['uacute'] = 556;
	    t['Tcaron'] = 667;
	    t['partialdiff'] = 494;
	    t['ydieresis'] = 500;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 667;
	    t['adieresis'] = 500;
	    t['edieresis'] = 444;
	    t['cacute'] = 444;
	    t['nacute'] = 556;
	    t['umacron'] = 556;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 389;
	    t['plusminus'] = 570;
	    t['brokenbar'] = 220;
	    t['registered'] = 747;
	    t['Gbreve'] = 778;
	    t['Idotaccent'] = 389;
	    t['summation'] = 600;
	    t['Egrave'] = 667;
	    t['racute'] = 444;
	    t['omacron'] = 500;
	    t['Zacute'] = 667;
	    t['Zcaron'] = 667;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 722;
	    t['lcommaaccent'] = 278;
	    t['tcaron'] = 416;
	    t['eogonek'] = 444;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 722;
	    t['Adieresis'] = 722;
	    t['egrave'] = 444;
	    t['zacute'] = 444;
	    t['iogonek'] = 278;
	    t['Oacute'] = 778;
	    t['oacute'] = 500;
	    t['amacron'] = 500;
	    t['sacute'] = 389;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 778;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 556;
	    t['twosuperior'] = 300;
	    t['Odieresis'] = 778;
	    t['mu'] = 556;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 500;
	    t['Eogonek'] = 667;
	    t['dcroat'] = 556;
	    t['threequarters'] = 750;
	    t['Scedilla'] = 556;
	    t['lcaron'] = 394;
	    t['Kcommaaccent'] = 778;
	    t['Lacute'] = 667;
	    t['trademark'] = 1000;
	    t['edotaccent'] = 444;
	    t['Igrave'] = 389;
	    t['Imacron'] = 389;
	    t['Lcaron'] = 667;
	    t['onehalf'] = 750;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 500;
	    t['ntilde'] = 556;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 667;
	    t['emacron'] = 444;
	    t['gbreve'] = 500;
	    t['onequarter'] = 750;
	    t['Scaron'] = 556;
	    t['Scommaaccent'] = 556;
	    t['Ohungarumlaut'] = 778;
	    t['degree'] = 400;
	    t['ograve'] = 500;
	    t['Ccaron'] = 722;
	    t['ugrave'] = 556;
	    t['radical'] = 549;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 444;
	    t['Ntilde'] = 722;
	    t['otilde'] = 500;
	    t['Rcommaaccent'] = 722;
	    t['Lcommaaccent'] = 667;
	    t['Atilde'] = 722;
	    t['Aogonek'] = 722;
	    t['Aring'] = 722;
	    t['Otilde'] = 778;
	    t['zdotaccent'] = 444;
	    t['Ecaron'] = 667;
	    t['Iogonek'] = 389;
	    t['kcommaaccent'] = 556;
	    t['minus'] = 570;
	    t['Icircumflex'] = 389;
	    t['ncaron'] = 556;
	    t['tcommaaccent'] = 333;
	    t['logicalnot'] = 570;
	    t['odieresis'] = 500;
	    t['udieresis'] = 556;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 500;
	    t['eth'] = 500;
	    t['zcaron'] = 444;
	    t['ncommaaccent'] = 556;
	    t['onesuperior'] = 300;
	    t['imacron'] = 278;
	    t['Euro'] = 500;
	  });
	  t['Times-BoldItalic'] = getLookupTableFactory(function (t) {
	    t['space'] = 250;
	    t['exclam'] = 389;
	    t['quotedbl'] = 555;
	    t['numbersign'] = 500;
	    t['dollar'] = 500;
	    t['percent'] = 833;
	    t['ampersand'] = 778;
	    t['quoteright'] = 333;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 500;
	    t['plus'] = 570;
	    t['comma'] = 250;
	    t['hyphen'] = 333;
	    t['period'] = 250;
	    t['slash'] = 278;
	    t['zero'] = 500;
	    t['one'] = 500;
	    t['two'] = 500;
	    t['three'] = 500;
	    t['four'] = 500;
	    t['five'] = 500;
	    t['six'] = 500;
	    t['seven'] = 500;
	    t['eight'] = 500;
	    t['nine'] = 500;
	    t['colon'] = 333;
	    t['semicolon'] = 333;
	    t['less'] = 570;
	    t['equal'] = 570;
	    t['greater'] = 570;
	    t['question'] = 500;
	    t['at'] = 832;
	    t['A'] = 667;
	    t['B'] = 667;
	    t['C'] = 667;
	    t['D'] = 722;
	    t['E'] = 667;
	    t['F'] = 667;
	    t['G'] = 722;
	    t['H'] = 778;
	    t['I'] = 389;
	    t['J'] = 500;
	    t['K'] = 667;
	    t['L'] = 611;
	    t['M'] = 889;
	    t['N'] = 722;
	    t['O'] = 722;
	    t['P'] = 611;
	    t['Q'] = 722;
	    t['R'] = 667;
	    t['S'] = 556;
	    t['T'] = 611;
	    t['U'] = 722;
	    t['V'] = 667;
	    t['W'] = 889;
	    t['X'] = 667;
	    t['Y'] = 611;
	    t['Z'] = 611;
	    t['bracketleft'] = 333;
	    t['backslash'] = 278;
	    t['bracketright'] = 333;
	    t['asciicircum'] = 570;
	    t['underscore'] = 500;
	    t['quoteleft'] = 333;
	    t['a'] = 500;
	    t['b'] = 500;
	    t['c'] = 444;
	    t['d'] = 500;
	    t['e'] = 444;
	    t['f'] = 333;
	    t['g'] = 500;
	    t['h'] = 556;
	    t['i'] = 278;
	    t['j'] = 278;
	    t['k'] = 500;
	    t['l'] = 278;
	    t['m'] = 778;
	    t['n'] = 556;
	    t['o'] = 500;
	    t['p'] = 500;
	    t['q'] = 500;
	    t['r'] = 389;
	    t['s'] = 389;
	    t['t'] = 278;
	    t['u'] = 556;
	    t['v'] = 444;
	    t['w'] = 667;
	    t['x'] = 500;
	    t['y'] = 444;
	    t['z'] = 389;
	    t['braceleft'] = 348;
	    t['bar'] = 220;
	    t['braceright'] = 348;
	    t['asciitilde'] = 570;
	    t['exclamdown'] = 389;
	    t['cent'] = 500;
	    t['sterling'] = 500;
	    t['fraction'] = 167;
	    t['yen'] = 500;
	    t['florin'] = 500;
	    t['section'] = 500;
	    t['currency'] = 500;
	    t['quotesingle'] = 278;
	    t['quotedblleft'] = 500;
	    t['guillemotleft'] = 500;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 556;
	    t['fl'] = 556;
	    t['endash'] = 500;
	    t['dagger'] = 500;
	    t['daggerdbl'] = 500;
	    t['periodcentered'] = 250;
	    t['paragraph'] = 500;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 333;
	    t['quotedblbase'] = 500;
	    t['quotedblright'] = 500;
	    t['guillemotright'] = 500;
	    t['ellipsis'] = 1000;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 500;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 1000;
	    t['AE'] = 944;
	    t['ordfeminine'] = 266;
	    t['Lslash'] = 611;
	    t['Oslash'] = 722;
	    t['OE'] = 944;
	    t['ordmasculine'] = 300;
	    t['ae'] = 722;
	    t['dotlessi'] = 278;
	    t['lslash'] = 278;
	    t['oslash'] = 500;
	    t['oe'] = 722;
	    t['germandbls'] = 500;
	    t['Idieresis'] = 389;
	    t['eacute'] = 444;
	    t['abreve'] = 500;
	    t['uhungarumlaut'] = 556;
	    t['ecaron'] = 444;
	    t['Ydieresis'] = 611;
	    t['divide'] = 570;
	    t['Yacute'] = 611;
	    t['Acircumflex'] = 667;
	    t['aacute'] = 500;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 444;
	    t['scommaaccent'] = 389;
	    t['ecircumflex'] = 444;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 500;
	    t['Uacute'] = 722;
	    t['uogonek'] = 556;
	    t['Edieresis'] = 667;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 747;
	    t['Emacron'] = 667;
	    t['ccaron'] = 444;
	    t['aring'] = 500;
	    t['Ncommaaccent'] = 722;
	    t['lacute'] = 278;
	    t['agrave'] = 500;
	    t['Tcommaaccent'] = 611;
	    t['Cacute'] = 667;
	    t['atilde'] = 500;
	    t['Edotaccent'] = 667;
	    t['scaron'] = 389;
	    t['scedilla'] = 389;
	    t['iacute'] = 278;
	    t['lozenge'] = 494;
	    t['Rcaron'] = 667;
	    t['Gcommaaccent'] = 722;
	    t['ucircumflex'] = 556;
	    t['acircumflex'] = 500;
	    t['Amacron'] = 667;
	    t['rcaron'] = 389;
	    t['ccedilla'] = 444;
	    t['Zdotaccent'] = 611;
	    t['Thorn'] = 611;
	    t['Omacron'] = 722;
	    t['Racute'] = 667;
	    t['Sacute'] = 556;
	    t['dcaron'] = 608;
	    t['Umacron'] = 722;
	    t['uring'] = 556;
	    t['threesuperior'] = 300;
	    t['Ograve'] = 722;
	    t['Agrave'] = 667;
	    t['Abreve'] = 667;
	    t['multiply'] = 570;
	    t['uacute'] = 556;
	    t['Tcaron'] = 611;
	    t['partialdiff'] = 494;
	    t['ydieresis'] = 444;
	    t['Nacute'] = 722;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 667;
	    t['adieresis'] = 500;
	    t['edieresis'] = 444;
	    t['cacute'] = 444;
	    t['nacute'] = 556;
	    t['umacron'] = 556;
	    t['Ncaron'] = 722;
	    t['Iacute'] = 389;
	    t['plusminus'] = 570;
	    t['brokenbar'] = 220;
	    t['registered'] = 747;
	    t['Gbreve'] = 722;
	    t['Idotaccent'] = 389;
	    t['summation'] = 600;
	    t['Egrave'] = 667;
	    t['racute'] = 389;
	    t['omacron'] = 500;
	    t['Zacute'] = 611;
	    t['Zcaron'] = 611;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 667;
	    t['lcommaaccent'] = 278;
	    t['tcaron'] = 366;
	    t['eogonek'] = 444;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 667;
	    t['Adieresis'] = 667;
	    t['egrave'] = 444;
	    t['zacute'] = 389;
	    t['iogonek'] = 278;
	    t['Oacute'] = 722;
	    t['oacute'] = 500;
	    t['amacron'] = 500;
	    t['sacute'] = 389;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 722;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 500;
	    t['twosuperior'] = 300;
	    t['Odieresis'] = 722;
	    t['mu'] = 576;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 500;
	    t['Eogonek'] = 667;
	    t['dcroat'] = 500;
	    t['threequarters'] = 750;
	    t['Scedilla'] = 556;
	    t['lcaron'] = 382;
	    t['Kcommaaccent'] = 667;
	    t['Lacute'] = 611;
	    t['trademark'] = 1000;
	    t['edotaccent'] = 444;
	    t['Igrave'] = 389;
	    t['Imacron'] = 389;
	    t['Lcaron'] = 611;
	    t['onehalf'] = 750;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 500;
	    t['ntilde'] = 556;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 667;
	    t['emacron'] = 444;
	    t['gbreve'] = 500;
	    t['onequarter'] = 750;
	    t['Scaron'] = 556;
	    t['Scommaaccent'] = 556;
	    t['Ohungarumlaut'] = 722;
	    t['degree'] = 400;
	    t['ograve'] = 500;
	    t['Ccaron'] = 667;
	    t['ugrave'] = 556;
	    t['radical'] = 549;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 389;
	    t['Ntilde'] = 722;
	    t['otilde'] = 500;
	    t['Rcommaaccent'] = 667;
	    t['Lcommaaccent'] = 611;
	    t['Atilde'] = 667;
	    t['Aogonek'] = 667;
	    t['Aring'] = 667;
	    t['Otilde'] = 722;
	    t['zdotaccent'] = 389;
	    t['Ecaron'] = 667;
	    t['Iogonek'] = 389;
	    t['kcommaaccent'] = 500;
	    t['minus'] = 606;
	    t['Icircumflex'] = 389;
	    t['ncaron'] = 556;
	    t['tcommaaccent'] = 278;
	    t['logicalnot'] = 606;
	    t['odieresis'] = 500;
	    t['udieresis'] = 556;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 500;
	    t['eth'] = 500;
	    t['zcaron'] = 389;
	    t['ncommaaccent'] = 556;
	    t['onesuperior'] = 300;
	    t['imacron'] = 278;
	    t['Euro'] = 500;
	  });
	  t['Times-Italic'] = getLookupTableFactory(function (t) {
	    t['space'] = 250;
	    t['exclam'] = 333;
	    t['quotedbl'] = 420;
	    t['numbersign'] = 500;
	    t['dollar'] = 500;
	    t['percent'] = 833;
	    t['ampersand'] = 778;
	    t['quoteright'] = 333;
	    t['parenleft'] = 333;
	    t['parenright'] = 333;
	    t['asterisk'] = 500;
	    t['plus'] = 675;
	    t['comma'] = 250;
	    t['hyphen'] = 333;
	    t['period'] = 250;
	    t['slash'] = 278;
	    t['zero'] = 500;
	    t['one'] = 500;
	    t['two'] = 500;
	    t['three'] = 500;
	    t['four'] = 500;
	    t['five'] = 500;
	    t['six'] = 500;
	    t['seven'] = 500;
	    t['eight'] = 500;
	    t['nine'] = 500;
	    t['colon'] = 333;
	    t['semicolon'] = 333;
	    t['less'] = 675;
	    t['equal'] = 675;
	    t['greater'] = 675;
	    t['question'] = 500;
	    t['at'] = 920;
	    t['A'] = 611;
	    t['B'] = 611;
	    t['C'] = 667;
	    t['D'] = 722;
	    t['E'] = 611;
	    t['F'] = 611;
	    t['G'] = 722;
	    t['H'] = 722;
	    t['I'] = 333;
	    t['J'] = 444;
	    t['K'] = 667;
	    t['L'] = 556;
	    t['M'] = 833;
	    t['N'] = 667;
	    t['O'] = 722;
	    t['P'] = 611;
	    t['Q'] = 722;
	    t['R'] = 611;
	    t['S'] = 500;
	    t['T'] = 556;
	    t['U'] = 722;
	    t['V'] = 611;
	    t['W'] = 833;
	    t['X'] = 611;
	    t['Y'] = 556;
	    t['Z'] = 556;
	    t['bracketleft'] = 389;
	    t['backslash'] = 278;
	    t['bracketright'] = 389;
	    t['asciicircum'] = 422;
	    t['underscore'] = 500;
	    t['quoteleft'] = 333;
	    t['a'] = 500;
	    t['b'] = 500;
	    t['c'] = 444;
	    t['d'] = 500;
	    t['e'] = 444;
	    t['f'] = 278;
	    t['g'] = 500;
	    t['h'] = 500;
	    t['i'] = 278;
	    t['j'] = 278;
	    t['k'] = 444;
	    t['l'] = 278;
	    t['m'] = 722;
	    t['n'] = 500;
	    t['o'] = 500;
	    t['p'] = 500;
	    t['q'] = 500;
	    t['r'] = 389;
	    t['s'] = 389;
	    t['t'] = 278;
	    t['u'] = 500;
	    t['v'] = 444;
	    t['w'] = 667;
	    t['x'] = 444;
	    t['y'] = 444;
	    t['z'] = 389;
	    t['braceleft'] = 400;
	    t['bar'] = 275;
	    t['braceright'] = 400;
	    t['asciitilde'] = 541;
	    t['exclamdown'] = 389;
	    t['cent'] = 500;
	    t['sterling'] = 500;
	    t['fraction'] = 167;
	    t['yen'] = 500;
	    t['florin'] = 500;
	    t['section'] = 500;
	    t['currency'] = 500;
	    t['quotesingle'] = 214;
	    t['quotedblleft'] = 556;
	    t['guillemotleft'] = 500;
	    t['guilsinglleft'] = 333;
	    t['guilsinglright'] = 333;
	    t['fi'] = 500;
	    t['fl'] = 500;
	    t['endash'] = 500;
	    t['dagger'] = 500;
	    t['daggerdbl'] = 500;
	    t['periodcentered'] = 250;
	    t['paragraph'] = 523;
	    t['bullet'] = 350;
	    t['quotesinglbase'] = 333;
	    t['quotedblbase'] = 556;
	    t['quotedblright'] = 556;
	    t['guillemotright'] = 500;
	    t['ellipsis'] = 889;
	    t['perthousand'] = 1000;
	    t['questiondown'] = 500;
	    t['grave'] = 333;
	    t['acute'] = 333;
	    t['circumflex'] = 333;
	    t['tilde'] = 333;
	    t['macron'] = 333;
	    t['breve'] = 333;
	    t['dotaccent'] = 333;
	    t['dieresis'] = 333;
	    t['ring'] = 333;
	    t['cedilla'] = 333;
	    t['hungarumlaut'] = 333;
	    t['ogonek'] = 333;
	    t['caron'] = 333;
	    t['emdash'] = 889;
	    t['AE'] = 889;
	    t['ordfeminine'] = 276;
	    t['Lslash'] = 556;
	    t['Oslash'] = 722;
	    t['OE'] = 944;
	    t['ordmasculine'] = 310;
	    t['ae'] = 667;
	    t['dotlessi'] = 278;
	    t['lslash'] = 278;
	    t['oslash'] = 500;
	    t['oe'] = 667;
	    t['germandbls'] = 500;
	    t['Idieresis'] = 333;
	    t['eacute'] = 444;
	    t['abreve'] = 500;
	    t['uhungarumlaut'] = 500;
	    t['ecaron'] = 444;
	    t['Ydieresis'] = 556;
	    t['divide'] = 675;
	    t['Yacute'] = 556;
	    t['Acircumflex'] = 611;
	    t['aacute'] = 500;
	    t['Ucircumflex'] = 722;
	    t['yacute'] = 444;
	    t['scommaaccent'] = 389;
	    t['ecircumflex'] = 444;
	    t['Uring'] = 722;
	    t['Udieresis'] = 722;
	    t['aogonek'] = 500;
	    t['Uacute'] = 722;
	    t['uogonek'] = 500;
	    t['Edieresis'] = 611;
	    t['Dcroat'] = 722;
	    t['commaaccent'] = 250;
	    t['copyright'] = 760;
	    t['Emacron'] = 611;
	    t['ccaron'] = 444;
	    t['aring'] = 500;
	    t['Ncommaaccent'] = 667;
	    t['lacute'] = 278;
	    t['agrave'] = 500;
	    t['Tcommaaccent'] = 556;
	    t['Cacute'] = 667;
	    t['atilde'] = 500;
	    t['Edotaccent'] = 611;
	    t['scaron'] = 389;
	    t['scedilla'] = 389;
	    t['iacute'] = 278;
	    t['lozenge'] = 471;
	    t['Rcaron'] = 611;
	    t['Gcommaaccent'] = 722;
	    t['ucircumflex'] = 500;
	    t['acircumflex'] = 500;
	    t['Amacron'] = 611;
	    t['rcaron'] = 389;
	    t['ccedilla'] = 444;
	    t['Zdotaccent'] = 556;
	    t['Thorn'] = 611;
	    t['Omacron'] = 722;
	    t['Racute'] = 611;
	    t['Sacute'] = 500;
	    t['dcaron'] = 544;
	    t['Umacron'] = 722;
	    t['uring'] = 500;
	    t['threesuperior'] = 300;
	    t['Ograve'] = 722;
	    t['Agrave'] = 611;
	    t['Abreve'] = 611;
	    t['multiply'] = 675;
	    t['uacute'] = 500;
	    t['Tcaron'] = 556;
	    t['partialdiff'] = 476;
	    t['ydieresis'] = 444;
	    t['Nacute'] = 667;
	    t['icircumflex'] = 278;
	    t['Ecircumflex'] = 611;
	    t['adieresis'] = 500;
	    t['edieresis'] = 444;
	    t['cacute'] = 444;
	    t['nacute'] = 500;
	    t['umacron'] = 500;
	    t['Ncaron'] = 667;
	    t['Iacute'] = 333;
	    t['plusminus'] = 675;
	    t['brokenbar'] = 275;
	    t['registered'] = 760;
	    t['Gbreve'] = 722;
	    t['Idotaccent'] = 333;
	    t['summation'] = 600;
	    t['Egrave'] = 611;
	    t['racute'] = 389;
	    t['omacron'] = 500;
	    t['Zacute'] = 556;
	    t['Zcaron'] = 556;
	    t['greaterequal'] = 549;
	    t['Eth'] = 722;
	    t['Ccedilla'] = 667;
	    t['lcommaaccent'] = 278;
	    t['tcaron'] = 300;
	    t['eogonek'] = 444;
	    t['Uogonek'] = 722;
	    t['Aacute'] = 611;
	    t['Adieresis'] = 611;
	    t['egrave'] = 444;
	    t['zacute'] = 389;
	    t['iogonek'] = 278;
	    t['Oacute'] = 722;
	    t['oacute'] = 500;
	    t['amacron'] = 500;
	    t['sacute'] = 389;
	    t['idieresis'] = 278;
	    t['Ocircumflex'] = 722;
	    t['Ugrave'] = 722;
	    t['Delta'] = 612;
	    t['thorn'] = 500;
	    t['twosuperior'] = 300;
	    t['Odieresis'] = 722;
	    t['mu'] = 500;
	    t['igrave'] = 278;
	    t['ohungarumlaut'] = 500;
	    t['Eogonek'] = 611;
	    t['dcroat'] = 500;
	    t['threequarters'] = 750;
	    t['Scedilla'] = 500;
	    t['lcaron'] = 300;
	    t['Kcommaaccent'] = 667;
	    t['Lacute'] = 556;
	    t['trademark'] = 980;
	    t['edotaccent'] = 444;
	    t['Igrave'] = 333;
	    t['Imacron'] = 333;
	    t['Lcaron'] = 611;
	    t['onehalf'] = 750;
	    t['lessequal'] = 549;
	    t['ocircumflex'] = 500;
	    t['ntilde'] = 500;
	    t['Uhungarumlaut'] = 722;
	    t['Eacute'] = 611;
	    t['emacron'] = 444;
	    t['gbreve'] = 500;
	    t['onequarter'] = 750;
	    t['Scaron'] = 500;
	    t['Scommaaccent'] = 500;
	    t['Ohungarumlaut'] = 722;
	    t['degree'] = 400;
	    t['ograve'] = 500;
	    t['Ccaron'] = 667;
	    t['ugrave'] = 500;
	    t['radical'] = 453;
	    t['Dcaron'] = 722;
	    t['rcommaaccent'] = 389;
	    t['Ntilde'] = 667;
	    t['otilde'] = 500;
	    t['Rcommaaccent'] = 611;
	    t['Lcommaaccent'] = 556;
	    t['Atilde'] = 611;
	    t['Aogonek'] = 611;
	    t['Aring'] = 611;
	    t['Otilde'] = 722;
	    t['zdotaccent'] = 389;
	    t['Ecaron'] = 611;
	    t['Iogonek'] = 333;
	    t['kcommaaccent'] = 444;
	    t['minus'] = 675;
	    t['Icircumflex'] = 333;
	    t['ncaron'] = 500;
	    t['tcommaaccent'] = 278;
	    t['logicalnot'] = 675;
	    t['odieresis'] = 500;
	    t['udieresis'] = 500;
	    t['notequal'] = 549;
	    t['gcommaaccent'] = 500;
	    t['eth'] = 500;
	    t['zcaron'] = 389;
	    t['ncommaaccent'] = 500;
	    t['onesuperior'] = 300;
	    t['imacron'] = 278;
	    t['Euro'] = 500;
	  });
	  t['ZapfDingbats'] = getLookupTableFactory(function (t) {
	    t['space'] = 278;
	    t['a1'] = 974;
	    t['a2'] = 961;
	    t['a202'] = 974;
	    t['a3'] = 980;
	    t['a4'] = 719;
	    t['a5'] = 789;
	    t['a119'] = 790;
	    t['a118'] = 791;
	    t['a117'] = 690;
	    t['a11'] = 960;
	    t['a12'] = 939;
	    t['a13'] = 549;
	    t['a14'] = 855;
	    t['a15'] = 911;
	    t['a16'] = 933;
	    t['a105'] = 911;
	    t['a17'] = 945;
	    t['a18'] = 974;
	    t['a19'] = 755;
	    t['a20'] = 846;
	    t['a21'] = 762;
	    t['a22'] = 761;
	    t['a23'] = 571;
	    t['a24'] = 677;
	    t['a25'] = 763;
	    t['a26'] = 760;
	    t['a27'] = 759;
	    t['a28'] = 754;
	    t['a6'] = 494;
	    t['a7'] = 552;
	    t['a8'] = 537;
	    t['a9'] = 577;
	    t['a10'] = 692;
	    t['a29'] = 786;
	    t['a30'] = 788;
	    t['a31'] = 788;
	    t['a32'] = 790;
	    t['a33'] = 793;
	    t['a34'] = 794;
	    t['a35'] = 816;
	    t['a36'] = 823;
	    t['a37'] = 789;
	    t['a38'] = 841;
	    t['a39'] = 823;
	    t['a40'] = 833;
	    t['a41'] = 816;
	    t['a42'] = 831;
	    t['a43'] = 923;
	    t['a44'] = 744;
	    t['a45'] = 723;
	    t['a46'] = 749;
	    t['a47'] = 790;
	    t['a48'] = 792;
	    t['a49'] = 695;
	    t['a50'] = 776;
	    t['a51'] = 768;
	    t['a52'] = 792;
	    t['a53'] = 759;
	    t['a54'] = 707;
	    t['a55'] = 708;
	    t['a56'] = 682;
	    t['a57'] = 701;
	    t['a58'] = 826;
	    t['a59'] = 815;
	    t['a60'] = 789;
	    t['a61'] = 789;
	    t['a62'] = 707;
	    t['a63'] = 687;
	    t['a64'] = 696;
	    t['a65'] = 689;
	    t['a66'] = 786;
	    t['a67'] = 787;
	    t['a68'] = 713;
	    t['a69'] = 791;
	    t['a70'] = 785;
	    t['a71'] = 791;
	    t['a72'] = 873;
	    t['a73'] = 761;
	    t['a74'] = 762;
	    t['a203'] = 762;
	    t['a75'] = 759;
	    t['a204'] = 759;
	    t['a76'] = 892;
	    t['a77'] = 892;
	    t['a78'] = 788;
	    t['a79'] = 784;
	    t['a81'] = 438;
	    t['a82'] = 138;
	    t['a83'] = 277;
	    t['a84'] = 415;
	    t['a97'] = 392;
	    t['a98'] = 392;
	    t['a99'] = 668;
	    t['a100'] = 668;
	    t['a89'] = 390;
	    t['a90'] = 390;
	    t['a93'] = 317;
	    t['a94'] = 317;
	    t['a91'] = 276;
	    t['a92'] = 276;
	    t['a205'] = 509;
	    t['a85'] = 509;
	    t['a206'] = 410;
	    t['a86'] = 410;
	    t['a87'] = 234;
	    t['a88'] = 234;
	    t['a95'] = 334;
	    t['a96'] = 334;
	    t['a101'] = 732;
	    t['a102'] = 544;
	    t['a103'] = 544;
	    t['a104'] = 910;
	    t['a106'] = 667;
	    t['a107'] = 760;
	    t['a108'] = 760;
	    t['a112'] = 776;
	    t['a111'] = 595;
	    t['a110'] = 694;
	    t['a109'] = 626;
	    t['a120'] = 788;
	    t['a121'] = 788;
	    t['a122'] = 788;
	    t['a123'] = 788;
	    t['a124'] = 788;
	    t['a125'] = 788;
	    t['a126'] = 788;
	    t['a127'] = 788;
	    t['a128'] = 788;
	    t['a129'] = 788;
	    t['a130'] = 788;
	    t['a131'] = 788;
	    t['a132'] = 788;
	    t['a133'] = 788;
	    t['a134'] = 788;
	    t['a135'] = 788;
	    t['a136'] = 788;
	    t['a137'] = 788;
	    t['a138'] = 788;
	    t['a139'] = 788;
	    t['a140'] = 788;
	    t['a141'] = 788;
	    t['a142'] = 788;
	    t['a143'] = 788;
	    t['a144'] = 788;
	    t['a145'] = 788;
	    t['a146'] = 788;
	    t['a147'] = 788;
	    t['a148'] = 788;
	    t['a149'] = 788;
	    t['a150'] = 788;
	    t['a151'] = 788;
	    t['a152'] = 788;
	    t['a153'] = 788;
	    t['a154'] = 788;
	    t['a155'] = 788;
	    t['a156'] = 788;
	    t['a157'] = 788;
	    t['a158'] = 788;
	    t['a159'] = 788;
	    t['a160'] = 894;
	    t['a161'] = 838;
	    t['a163'] = 1016;
	    t['a164'] = 458;
	    t['a196'] = 748;
	    t['a165'] = 924;
	    t['a192'] = 748;
	    t['a166'] = 918;
	    t['a167'] = 927;
	    t['a168'] = 928;
	    t['a169'] = 928;
	    t['a170'] = 834;
	    t['a171'] = 873;
	    t['a172'] = 828;
	    t['a173'] = 924;
	    t['a162'] = 924;
	    t['a174'] = 917;
	    t['a175'] = 930;
	    t['a176'] = 931;
	    t['a177'] = 463;
	    t['a178'] = 883;
	    t['a179'] = 836;
	    t['a193'] = 836;
	    t['a180'] = 867;
	    t['a199'] = 867;
	    t['a181'] = 696;
	    t['a200'] = 696;
	    t['a182'] = 874;
	    t['a201'] = 874;
	    t['a183'] = 760;
	    t['a184'] = 946;
	    t['a197'] = 771;
	    t['a185'] = 865;
	    t['a194'] = 771;
	    t['a198'] = 888;
	    t['a186'] = 967;
	    t['a195'] = 888;
	    t['a187'] = 831;
	    t['a188'] = 873;
	    t['a189'] = 927;
	    t['a190'] = 970;
	    t['a191'] = 918;
	  });
	});
	exports.getMetrics = getMetrics;

	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var sharedUtil = __w_pdfjs_require__(0);
	var MurmurHash3_64 = function MurmurHash3_64Closure(seed) {
	  var MASK_HIGH = 0xffff0000;
	  var MASK_LOW = 0xffff;
	  function MurmurHash3_64(seed) {
	    var SEED = 0xc3d2e1f0;
	    this.h1 = seed ? seed & 0xffffffff : SEED;
	    this.h2 = seed ? seed & 0xffffffff : SEED;
	  }
	  MurmurHash3_64.prototype = {
	    update: function MurmurHash3_64_update(input) {
	      var i;
	      if (typeof input === 'string') {
	        var data = new Uint8Array(input.length * 2);
	        var length = 0;
	        for (i = 0; i < input.length; i++) {
	          var code = input.charCodeAt(i);
	          if (code <= 0xff) {
	            data[length++] = code;
	          } else {
	            data[length++] = code >>> 8;
	            data[length++] = code & 0xff;
	          }
	        }
	      } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && 'byteLength' in input) {
	        data = input;
	        length = data.byteLength;
	      } else {
	        throw new Error('Wrong data format in MurmurHash3_64_update. ' + 'Input must be a string or array.');
	      }
	      var blockCounts = length >> 2;
	      var tailLength = length - blockCounts * 4;
	      var dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
	      var k1 = 0;
	      var k2 = 0;
	      var h1 = this.h1;
	      var h2 = this.h2;
	      var C1 = 0xcc9e2d51;
	      var C2 = 0x1b873593;
	      var C1_LOW = C1 & MASK_LOW;
	      var C2_LOW = C2 & MASK_LOW;
	      for (i = 0; i < blockCounts; i++) {
	        if (i & 1) {
	          k1 = dataUint32[i];
	          k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
	          k1 = k1 << 15 | k1 >>> 17;
	          k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
	          h1 ^= k1;
	          h1 = h1 << 13 | h1 >>> 19;
	          h1 = h1 * 5 + 0xe6546b64;
	        } else {
	          k2 = dataUint32[i];
	          k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
	          k2 = k2 << 15 | k2 >>> 17;
	          k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
	          h2 ^= k2;
	          h2 = h2 << 13 | h2 >>> 19;
	          h2 = h2 * 5 + 0xe6546b64;
	        }
	      }
	      k1 = 0;
	      switch (tailLength) {
	        case 3:
	          k1 ^= data[blockCounts * 4 + 2] << 16;
	        case 2:
	          k1 ^= data[blockCounts * 4 + 1] << 8;
	        case 1:
	          k1 ^= data[blockCounts * 4];
	          k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
	          k1 = k1 << 15 | k1 >>> 17;
	          k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
	          if (blockCounts & 1) {
	            h1 ^= k1;
	          } else {
	            h2 ^= k1;
	          }
	      }
	      this.h1 = h1;
	      this.h2 = h2;
	      return this;
	    },
	    hexdigest: function MurmurHash3_64_hexdigest() {
	      var h1 = this.h1;
	      var h2 = this.h2;
	      h1 ^= h2 >>> 1;
	      h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;
	      h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;
	      h1 ^= h2 >>> 1;
	      h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;
	      h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;
	      h1 ^= h2 >>> 1;
	      for (var i = 0, arr = [h1, h2], str = ''; i < arr.length; i++) {
	        var hex = (arr[i] >>> 0).toString(16);
	        while (hex.length < 8) {
	          hex = '0' + hex;
	        }
	        str += hex;
	      }
	      return str;
	    }
	  };
	  return MurmurHash3_64;
	}();
	exports.MurmurHash3_64 = MurmurHash3_64;

	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var coreFunction = __w_pdfjs_require__(6);
	var coreColorSpace = __w_pdfjs_require__(3);
	var UNSUPPORTED_FEATURES = sharedUtil.UNSUPPORTED_FEATURES;
	var MissingDataException = sharedUtil.MissingDataException;
	var Util = sharedUtil.Util;
	var assert = sharedUtil.assert;
	var error = sharedUtil.error;
	var info = sharedUtil.info;
	var warn = sharedUtil.warn;
	var isStream = corePrimitives.isStream;
	var PDFFunction = coreFunction.PDFFunction;
	var ColorSpace = coreColorSpace.ColorSpace;
	var ShadingType = {
	  FUNCTION_BASED: 1,
	  AXIAL: 2,
	  RADIAL: 3,
	  FREE_FORM_MESH: 4,
	  LATTICE_FORM_MESH: 5,
	  COONS_PATCH_MESH: 6,
	  TENSOR_PATCH_MESH: 7
	};
	var Pattern = function PatternClosure() {
	  function Pattern() {
	    error('should not call Pattern constructor');
	  }
	  Pattern.prototype = {
	    getPattern: function Pattern_getPattern(ctx) {
	      error('Should not call Pattern.getStyle: ' + ctx);
	    }
	  };
	  Pattern.parseShading = function Pattern_parseShading(shading, matrix, xref, res, handler) {
	    var dict = isStream(shading) ? shading.dict : shading;
	    var type = dict.get('ShadingType');
	    try {
	      switch (type) {
	        case ShadingType.AXIAL:
	        case ShadingType.RADIAL:
	          return new Shadings.RadialAxial(dict, matrix, xref, res);
	        case ShadingType.FREE_FORM_MESH:
	        case ShadingType.LATTICE_FORM_MESH:
	        case ShadingType.COONS_PATCH_MESH:
	        case ShadingType.TENSOR_PATCH_MESH:
	          return new Shadings.Mesh(shading, matrix, xref, res);
	        default:
	          throw new Error('Unsupported ShadingType: ' + type);
	      }
	    } catch (ex) {
	      if (ex instanceof MissingDataException) {
	        throw ex;
	      }
	      handler.send('UnsupportedFeature', { featureId: UNSUPPORTED_FEATURES.shadingPattern });
	      warn(ex);
	      return new Shadings.Dummy();
	    }
	  };
	  return Pattern;
	}();
	var Shadings = {};
	Shadings.SMALL_NUMBER = 1e-6;
	Shadings.RadialAxial = function RadialAxialClosure() {
	  function RadialAxial(dict, matrix, xref, res) {
	    this.matrix = matrix;
	    this.coordsArr = dict.getArray('Coords');
	    this.shadingType = dict.get('ShadingType');
	    this.type = 'Pattern';
	    var cs = dict.get('ColorSpace', 'CS');
	    cs = ColorSpace.parse(cs, xref, res);
	    this.cs = cs;
	    var t0 = 0.0,
	        t1 = 1.0;
	    if (dict.has('Domain')) {
	      var domainArr = dict.getArray('Domain');
	      t0 = domainArr[0];
	      t1 = domainArr[1];
	    }
	    var extendStart = false,
	        extendEnd = false;
	    if (dict.has('Extend')) {
	      var extendArr = dict.getArray('Extend');
	      extendStart = extendArr[0];
	      extendEnd = extendArr[1];
	    }
	    if (this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {
	      var x1 = this.coordsArr[0];
	      var y1 = this.coordsArr[1];
	      var r1 = this.coordsArr[2];
	      var x2 = this.coordsArr[3];
	      var y2 = this.coordsArr[4];
	      var r2 = this.coordsArr[5];
	      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	      if (r1 <= r2 + distance && r2 <= r1 + distance) {
	        warn('Unsupported radial gradient.');
	      }
	    }
	    this.extendStart = extendStart;
	    this.extendEnd = extendEnd;
	    var fnObj = dict.get('Function');
	    var fn = PDFFunction.parseArray(xref, fnObj);
	    var diff = t1 - t0;
	    var step = diff / 10;
	    var colorStops = this.colorStops = [];
	    if (t0 >= t1 || step <= 0) {
	      info('Bad shading domain.');
	      return;
	    }
	    var color = new Float32Array(cs.numComps),
	        ratio = new Float32Array(1);
	    var rgbColor;
	    for (var i = t0; i <= t1; i += step) {
	      ratio[0] = i;
	      fn(ratio, 0, color, 0);
	      rgbColor = cs.getRgb(color, 0);
	      var cssColor = Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);
	      colorStops.push([(i - t0) / diff, cssColor]);
	    }
	    var background = 'transparent';
	    if (dict.has('Background')) {
	      rgbColor = cs.getRgb(dict.get('Background'), 0);
	      background = Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);
	    }
	    if (!extendStart) {
	      colorStops.unshift([0, background]);
	      colorStops[1][0] += Shadings.SMALL_NUMBER;
	    }
	    if (!extendEnd) {
	      colorStops[colorStops.length - 1][0] -= Shadings.SMALL_NUMBER;
	      colorStops.push([1, background]);
	    }
	    this.colorStops = colorStops;
	  }
	  RadialAxial.prototype = {
	    getIR: function RadialAxial_getIR() {
	      var coordsArr = this.coordsArr;
	      var shadingType = this.shadingType;
	      var type, p0, p1, r0, r1;
	      if (shadingType === ShadingType.AXIAL) {
	        p0 = [coordsArr[0], coordsArr[1]];
	        p1 = [coordsArr[2], coordsArr[3]];
	        r0 = null;
	        r1 = null;
	        type = 'axial';
	      } else if (shadingType === ShadingType.RADIAL) {
	        p0 = [coordsArr[0], coordsArr[1]];
	        p1 = [coordsArr[3], coordsArr[4]];
	        r0 = coordsArr[2];
	        r1 = coordsArr[5];
	        type = 'radial';
	      } else {
	        error('getPattern type unknown: ' + shadingType);
	      }
	      var matrix = this.matrix;
	      if (matrix) {
	        p0 = Util.applyTransform(p0, matrix);
	        p1 = Util.applyTransform(p1, matrix);
	        if (shadingType === ShadingType.RADIAL) {
	          var scale = Util.singularValueDecompose2dScale(matrix);
	          r0 *= scale[0];
	          r1 *= scale[1];
	        }
	      }
	      return ['RadialAxial', type, this.colorStops, p0, p1, r0, r1];
	    }
	  };
	  return RadialAxial;
	}();
	Shadings.Mesh = function MeshClosure() {
	  function MeshStreamReader(stream, context) {
	    this.stream = stream;
	    this.context = context;
	    this.buffer = 0;
	    this.bufferLength = 0;
	    var numComps = context.numComps;
	    this.tmpCompsBuf = new Float32Array(numComps);
	    var csNumComps = context.colorSpace.numComps;
	    this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;
	  }
	  MeshStreamReader.prototype = {
	    get hasData() {
	      if (this.stream.end) {
	        return this.stream.pos < this.stream.end;
	      }
	      if (this.bufferLength > 0) {
	        return true;
	      }
	      var nextByte = this.stream.getByte();
	      if (nextByte < 0) {
	        return false;
	      }
	      this.buffer = nextByte;
	      this.bufferLength = 8;
	      return true;
	    },
	    readBits: function MeshStreamReader_readBits(n) {
	      var buffer = this.buffer;
	      var bufferLength = this.bufferLength;
	      if (n === 32) {
	        if (bufferLength === 0) {
	          return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;
	        }
	        buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();
	        var nextByte = this.stream.getByte();
	        this.buffer = nextByte & (1 << bufferLength) - 1;
	        return (buffer << 8 - bufferLength | (nextByte & 0xFF) >> bufferLength) >>> 0;
	      }
	      if (n === 8 && bufferLength === 0) {
	        return this.stream.getByte();
	      }
	      while (bufferLength < n) {
	        buffer = buffer << 8 | this.stream.getByte();
	        bufferLength += 8;
	      }
	      bufferLength -= n;
	      this.bufferLength = bufferLength;
	      this.buffer = buffer & (1 << bufferLength) - 1;
	      return buffer >> bufferLength;
	    },
	    align: function MeshStreamReader_align() {
	      this.buffer = 0;
	      this.bufferLength = 0;
	    },
	    readFlag: function MeshStreamReader_readFlag() {
	      return this.readBits(this.context.bitsPerFlag);
	    },
	    readCoordinate: function MeshStreamReader_readCoordinate() {
	      var bitsPerCoordinate = this.context.bitsPerCoordinate;
	      var xi = this.readBits(bitsPerCoordinate);
	      var yi = this.readBits(bitsPerCoordinate);
	      var decode = this.context.decode;
	      var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;
	      return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];
	    },
	    readComponents: function MeshStreamReader_readComponents() {
	      var numComps = this.context.numComps;
	      var bitsPerComponent = this.context.bitsPerComponent;
	      var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;
	      var decode = this.context.decode;
	      var components = this.tmpCompsBuf;
	      for (var i = 0, j = 4; i < numComps; i++, j += 2) {
	        var ci = this.readBits(bitsPerComponent);
	        components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];
	      }
	      var color = this.tmpCsCompsBuf;
	      if (this.context.colorFn) {
	        this.context.colorFn(components, 0, color, 0);
	      }
	      return this.context.colorSpace.getRgb(color, 0);
	    }
	  };
	  function decodeType4Shading(mesh, reader) {
	    var coords = mesh.coords;
	    var colors = mesh.colors;
	    var operators = [];
	    var ps = [];
	    var verticesLeft = 0;
	    while (reader.hasData) {
	      var f = reader.readFlag();
	      var coord = reader.readCoordinate();
	      var color = reader.readComponents();
	      if (verticesLeft === 0) {
	        assert(0 <= f && f <= 2, 'Unknown type4 flag');
	        switch (f) {
	          case 0:
	            verticesLeft = 3;
	            break;
	          case 1:
	            ps.push(ps[ps.length - 2], ps[ps.length - 1]);
	            verticesLeft = 1;
	            break;
	          case 2:
	            ps.push(ps[ps.length - 3], ps[ps.length - 1]);
	            verticesLeft = 1;
	            break;
	        }
	        operators.push(f);
	      }
	      ps.push(coords.length);
	      coords.push(coord);
	      colors.push(color);
	      verticesLeft--;
	      reader.align();
	    }
	    mesh.figures.push({
	      type: 'triangles',
	      coords: new Int32Array(ps),
	      colors: new Int32Array(ps)
	    });
	  }
	  function decodeType5Shading(mesh, reader, verticesPerRow) {
	    var coords = mesh.coords;
	    var colors = mesh.colors;
	    var ps = [];
	    while (reader.hasData) {
	      var coord = reader.readCoordinate();
	      var color = reader.readComponents();
	      ps.push(coords.length);
	      coords.push(coord);
	      colors.push(color);
	    }
	    mesh.figures.push({
	      type: 'lattice',
	      coords: new Int32Array(ps),
	      colors: new Int32Array(ps),
	      verticesPerRow: verticesPerRow
	    });
	  }
	  var MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;
	  var MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;
	  var TRIANGLE_DENSITY = 20;
	  var getB = function getBClosure() {
	    function buildB(count) {
	      var lut = [];
	      for (var i = 0; i <= count; i++) {
	        var t = i / count,
	            t_ = 1 - t;
	        lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));
	      }
	      return lut;
	    }
	    var cache = [];
	    return function getB(count) {
	      if (!cache[count]) {
	        cache[count] = buildB(count);
	      }
	      return cache[count];
	    };
	  }();
	  function buildFigureFromPatch(mesh, index) {
	    var figure = mesh.figures[index];
	    assert(figure.type === 'patch', 'Unexpected patch mesh figure');
	    var coords = mesh.coords,
	        colors = mesh.colors;
	    var pi = figure.coords;
	    var ci = figure.colors;
	    var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);
	    var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);
	    var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);
	    var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);
	    var splitXBy = Math.ceil((figureMaxX - figureMinX) * TRIANGLE_DENSITY / (mesh.bounds[2] - mesh.bounds[0]));
	    splitXBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));
	    var splitYBy = Math.ceil((figureMaxY - figureMinY) * TRIANGLE_DENSITY / (mesh.bounds[3] - mesh.bounds[1]));
	    splitYBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));
	    var verticesPerRow = splitXBy + 1;
	    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);
	    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);
	    var k = 0;
	    var cl = new Uint8Array(3),
	        cr = new Uint8Array(3);
	    var c0 = colors[ci[0]],
	        c1 = colors[ci[1]],
	        c2 = colors[ci[2]],
	        c3 = colors[ci[3]];
	    var bRow = getB(splitYBy),
	        bCol = getB(splitXBy);
	    for (var row = 0; row <= splitYBy; row++) {
	      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;
	      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;
	      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;
	      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;
	      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;
	      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;
	      for (var col = 0; col <= splitXBy; col++, k++) {
	        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {
	          continue;
	        }
	        var x = 0,
	            y = 0;
	        var q = 0;
	        for (var i = 0; i <= 3; i++) {
	          for (var j = 0; j <= 3; j++, q++) {
	            var m = bRow[row][i] * bCol[col][j];
	            x += coords[pi[q]][0] * m;
	            y += coords[pi[q]][1] * m;
	          }
	        }
	        figureCoords[k] = coords.length;
	        coords.push([x, y]);
	        figureColors[k] = colors.length;
	        var newColor = new Uint8Array(3);
	        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;
	        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;
	        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;
	        colors.push(newColor);
	      }
	    }
	    figureCoords[0] = pi[0];
	    figureColors[0] = ci[0];
	    figureCoords[splitXBy] = pi[3];
	    figureColors[splitXBy] = ci[1];
	    figureCoords[verticesPerRow * splitYBy] = pi[12];
	    figureColors[verticesPerRow * splitYBy] = ci[2];
	    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];
	    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];
	    mesh.figures[index] = {
	      type: 'lattice',
	      coords: figureCoords,
	      colors: figureColors,
	      verticesPerRow: verticesPerRow
	    };
	  }
	  function decodeType6Shading(mesh, reader) {
	    var coords = mesh.coords;
	    var colors = mesh.colors;
	    var ps = new Int32Array(16);
	    var cs = new Int32Array(4);
	    while (reader.hasData) {
	      var f = reader.readFlag();
	      assert(0 <= f && f <= 3, 'Unknown type6 flag');
	      var i, ii;
	      var pi = coords.length;
	      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {
	        coords.push(reader.readCoordinate());
	      }
	      var ci = colors.length;
	      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
	        colors.push(reader.readComponents());
	      }
	      var tmp1, tmp2, tmp3, tmp4;
	      switch (f) {
	        case 0:
	          ps[12] = pi + 3;
	          ps[13] = pi + 4;
	          ps[14] = pi + 5;
	          ps[15] = pi + 6;
	          ps[8] = pi + 2;
	          ps[11] = pi + 7;
	          ps[4] = pi + 1;
	          ps[7] = pi + 8;
	          ps[0] = pi;
	          ps[1] = pi + 11;
	          ps[2] = pi + 10;
	          ps[3] = pi + 9;
	          cs[2] = ci + 1;
	          cs[3] = ci + 2;
	          cs[0] = ci;
	          cs[1] = ci + 3;
	          break;
	        case 1:
	          tmp1 = ps[12];
	          tmp2 = ps[13];
	          tmp3 = ps[14];
	          tmp4 = ps[15];
	          ps[12] = tmp4;
	          ps[13] = pi + 0;
	          ps[14] = pi + 1;
	          ps[15] = pi + 2;
	          ps[8] = tmp3;
	          ps[11] = pi + 3;
	          ps[4] = tmp2;
	          ps[7] = pi + 4;
	          ps[0] = tmp1;
	          ps[1] = pi + 7;
	          ps[2] = pi + 6;
	          ps[3] = pi + 5;
	          tmp1 = cs[2];
	          tmp2 = cs[3];
	          cs[2] = tmp2;
	          cs[3] = ci;
	          cs[0] = tmp1;
	          cs[1] = ci + 1;
	          break;
	        case 2:
	          tmp1 = ps[15];
	          tmp2 = ps[11];
	          ps[12] = ps[3];
	          ps[13] = pi + 0;
	          ps[14] = pi + 1;
	          ps[15] = pi + 2;
	          ps[8] = ps[7];
	          ps[11] = pi + 3;
	          ps[4] = tmp2;
	          ps[7] = pi + 4;
	          ps[0] = tmp1;
	          ps[1] = pi + 7;
	          ps[2] = pi + 6;
	          ps[3] = pi + 5;
	          tmp1 = cs[3];
	          cs[2] = cs[1];
	          cs[3] = ci;
	          cs[0] = tmp1;
	          cs[1] = ci + 1;
	          break;
	        case 3:
	          ps[12] = ps[0];
	          ps[13] = pi + 0;
	          ps[14] = pi + 1;
	          ps[15] = pi + 2;
	          ps[8] = ps[1];
	          ps[11] = pi + 3;
	          ps[4] = ps[2];
	          ps[7] = pi + 4;
	          ps[0] = ps[3];
	          ps[1] = pi + 7;
	          ps[2] = pi + 6;
	          ps[3] = pi + 5;
	          cs[2] = cs[0];
	          cs[3] = ci;
	          cs[0] = cs[1];
	          cs[1] = ci + 1;
	          break;
	      }
	      ps[5] = coords.length;
	      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);
	      ps[6] = coords.length;
	      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);
	      ps[9] = coords.length;
	      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);
	      ps[10] = coords.length;
	      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);
	      mesh.figures.push({
	        type: 'patch',
	        coords: new Int32Array(ps),
	        colors: new Int32Array(cs)
	      });
	    }
	  }
	  function decodeType7Shading(mesh, reader) {
	    var coords = mesh.coords;
	    var colors = mesh.colors;
	    var ps = new Int32Array(16);
	    var cs = new Int32Array(4);
	    while (reader.hasData) {
	      var f = reader.readFlag();
	      assert(0 <= f && f <= 3, 'Unknown type7 flag');
	      var i, ii;
	      var pi = coords.length;
	      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {
	        coords.push(reader.readCoordinate());
	      }
	      var ci = colors.length;
	      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
	        colors.push(reader.readComponents());
	      }
	      var tmp1, tmp2, tmp3, tmp4;
	      switch (f) {
	        case 0:
	          ps[12] = pi + 3;
	          ps[13] = pi + 4;
	          ps[14] = pi + 5;
	          ps[15] = pi + 6;
	          ps[8] = pi + 2;
	          ps[9] = pi + 13;
	          ps[10] = pi + 14;
	          ps[11] = pi + 7;
	          ps[4] = pi + 1;
	          ps[5] = pi + 12;
	          ps[6] = pi + 15;
	          ps[7] = pi + 8;
	          ps[0] = pi;
	          ps[1] = pi + 11;
	          ps[2] = pi + 10;
	          ps[3] = pi + 9;
	          cs[2] = ci + 1;
	          cs[3] = ci + 2;
	          cs[0] = ci;
	          cs[1] = ci + 3;
	          break;
	        case 1:
	          tmp1 = ps[12];
	          tmp2 = ps[13];
	          tmp3 = ps[14];
	          tmp4 = ps[15];
	          ps[12] = tmp4;
	          ps[13] = pi + 0;
	          ps[14] = pi + 1;
	          ps[15] = pi + 2;
	          ps[8] = tmp3;
	          ps[9] = pi + 9;
	          ps[10] = pi + 10;
	          ps[11] = pi + 3;
	          ps[4] = tmp2;
	          ps[5] = pi + 8;
	          ps[6] = pi + 11;
	          ps[7] = pi + 4;
	          ps[0] = tmp1;
	          ps[1] = pi + 7;
	          ps[2] = pi + 6;
	          ps[3] = pi + 5;
	          tmp1 = cs[2];
	          tmp2 = cs[3];
	          cs[2] = tmp2;
	          cs[3] = ci;
	          cs[0] = tmp1;
	          cs[1] = ci + 1;
	          break;
	        case 2:
	          tmp1 = ps[15];
	          tmp2 = ps[11];
	          ps[12] = ps[3];
	          ps[13] = pi + 0;
	          ps[14] = pi + 1;
	          ps[15] = pi + 2;
	          ps[8] = ps[7];
	          ps[9] = pi + 9;
	          ps[10] = pi + 10;
	          ps[11] = pi + 3;
	          ps[4] = tmp2;
	          ps[5] = pi + 8;
	          ps[6] = pi + 11;
	          ps[7] = pi + 4;
	          ps[0] = tmp1;
	          ps[1] = pi + 7;
	          ps[2] = pi + 6;
	          ps[3] = pi + 5;
	          tmp1 = cs[3];
	          cs[2] = cs[1];
	          cs[3] = ci;
	          cs[0] = tmp1;
	          cs[1] = ci + 1;
	          break;
	        case 3:
	          ps[12] = ps[0];
	          ps[13] = pi + 0;
	          ps[14] = pi + 1;
	          ps[15] = pi + 2;
	          ps[8] = ps[1];
	          ps[9] = pi + 9;
	          ps[10] = pi + 10;
	          ps[11] = pi + 3;
	          ps[4] = ps[2];
	          ps[5] = pi + 8;
	          ps[6] = pi + 11;
	          ps[7] = pi + 4;
	          ps[0] = ps[3];
	          ps[1] = pi + 7;
	          ps[2] = pi + 6;
	          ps[3] = pi + 5;
	          cs[2] = cs[0];
	          cs[3] = ci;
	          cs[0] = cs[1];
	          cs[1] = ci + 1;
	          break;
	      }
	      mesh.figures.push({
	        type: 'patch',
	        coords: new Int32Array(ps),
	        colors: new Int32Array(cs)
	      });
	    }
	  }
	  function updateBounds(mesh) {
	    var minX = mesh.coords[0][0],
	        minY = mesh.coords[0][1],
	        maxX = minX,
	        maxY = minY;
	    for (var i = 1, ii = mesh.coords.length; i < ii; i++) {
	      var x = mesh.coords[i][0],
	          y = mesh.coords[i][1];
	      minX = minX > x ? x : minX;
	      minY = minY > y ? y : minY;
	      maxX = maxX < x ? x : maxX;
	      maxY = maxY < y ? y : maxY;
	    }
	    mesh.bounds = [minX, minY, maxX, maxY];
	  }
	  function packData(mesh) {
	    var i, ii, j, jj;
	    var coords = mesh.coords;
	    var coordsPacked = new Float32Array(coords.length * 2);
	    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {
	      var xy = coords[i];
	      coordsPacked[j++] = xy[0];
	      coordsPacked[j++] = xy[1];
	    }
	    mesh.coords = coordsPacked;
	    var colors = mesh.colors;
	    var colorsPacked = new Uint8Array(colors.length * 3);
	    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {
	      var c = colors[i];
	      colorsPacked[j++] = c[0];
	      colorsPacked[j++] = c[1];
	      colorsPacked[j++] = c[2];
	    }
	    mesh.colors = colorsPacked;
	    var figures = mesh.figures;
	    for (i = 0, ii = figures.length; i < ii; i++) {
	      var figure = figures[i],
	          ps = figure.coords,
	          cs = figure.colors;
	      for (j = 0, jj = ps.length; j < jj; j++) {
	        ps[j] *= 2;
	        cs[j] *= 3;
	      }
	    }
	  }
	  function Mesh(stream, matrix, xref, res) {
	    assert(isStream(stream), 'Mesh data is not a stream');
	    var dict = stream.dict;
	    this.matrix = matrix;
	    this.shadingType = dict.get('ShadingType');
	    this.type = 'Pattern';
	    this.bbox = dict.getArray('BBox');
	    var cs = dict.get('ColorSpace', 'CS');
	    cs = ColorSpace.parse(cs, xref, res);
	    this.cs = cs;
	    this.background = dict.has('Background') ? cs.getRgb(dict.get('Background'), 0) : null;
	    var fnObj = dict.get('Function');
	    var fn = fnObj ? PDFFunction.parseArray(xref, fnObj) : null;
	    this.coords = [];
	    this.colors = [];
	    this.figures = [];
	    var decodeContext = {
	      bitsPerCoordinate: dict.get('BitsPerCoordinate'),
	      bitsPerComponent: dict.get('BitsPerComponent'),
	      bitsPerFlag: dict.get('BitsPerFlag'),
	      decode: dict.getArray('Decode'),
	      colorFn: fn,
	      colorSpace: cs,
	      numComps: fn ? 1 : cs.numComps
	    };
	    var reader = new MeshStreamReader(stream, decodeContext);
	    var patchMesh = false;
	    switch (this.shadingType) {
	      case ShadingType.FREE_FORM_MESH:
	        decodeType4Shading(this, reader);
	        break;
	      case ShadingType.LATTICE_FORM_MESH:
	        var verticesPerRow = dict.get('VerticesPerRow') | 0;
	        assert(verticesPerRow >= 2, 'Invalid VerticesPerRow');
	        decodeType5Shading(this, reader, verticesPerRow);
	        break;
	      case ShadingType.COONS_PATCH_MESH:
	        decodeType6Shading(this, reader);
	        patchMesh = true;
	        break;
	      case ShadingType.TENSOR_PATCH_MESH:
	        decodeType7Shading(this, reader);
	        patchMesh = true;
	        break;
	      default:
	        error('Unsupported mesh type.');
	        break;
	    }
	    if (patchMesh) {
	      updateBounds(this);
	      for (var i = 0, ii = this.figures.length; i < ii; i++) {
	        buildFigureFromPatch(this, i);
	      }
	    }
	    updateBounds(this);
	    packData(this);
	  }
	  Mesh.prototype = {
	    getIR: function Mesh_getIR() {
	      return ['Mesh', this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.matrix, this.bbox, this.background];
	    }
	  };
	  return Mesh;
	}();
	Shadings.Dummy = function DummyClosure() {
	  function Dummy() {
	    this.type = 'Pattern';
	  }
	  Dummy.prototype = {
	    getIR: function Dummy_getIR() {
	      return ['Dummy'];
	    }
	  };
	  return Dummy;
	}();
	function getTilingPatternIR(operatorList, dict, args) {
	  var matrix = dict.getArray('Matrix');
	  var bbox = dict.getArray('BBox');
	  var xstep = dict.get('XStep');
	  var ystep = dict.get('YStep');
	  var paintType = dict.get('PaintType');
	  var tilingType = dict.get('TilingType');
	  return ['TilingPattern', args, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];
	}
	exports.Pattern = Pattern;
	exports.getTilingPatternIR = getTilingPatternIR;

	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreStream = __w_pdfjs_require__(2);
	var coreChunkedStream = __w_pdfjs_require__(12);
	var coreDocument = __w_pdfjs_require__(24);
	var warn = sharedUtil.warn;
	var createValidAbsoluteUrl = sharedUtil.createValidAbsoluteUrl;
	var shadow = sharedUtil.shadow;
	var NotImplementedException = sharedUtil.NotImplementedException;
	var MissingDataException = sharedUtil.MissingDataException;
	var createPromiseCapability = sharedUtil.createPromiseCapability;
	var Util = sharedUtil.Util;
	var Stream = coreStream.Stream;
	var ChunkedStreamManager = coreChunkedStream.ChunkedStreamManager;
	var PDFDocument = coreDocument.PDFDocument;
	var BasePdfManager = function BasePdfManagerClosure() {
	  function BasePdfManager() {
	    throw new Error('Cannot initialize BaseManagerManager');
	  }
	  BasePdfManager.prototype = {
	    get docId() {
	      return this._docId;
	    },
	    get password() {
	      return this._password;
	    },
	    get docBaseUrl() {
	      var docBaseUrl = null;
	      if (this._docBaseUrl) {
	        var absoluteUrl = createValidAbsoluteUrl(this._docBaseUrl);
	        if (absoluteUrl) {
	          docBaseUrl = absoluteUrl.href;
	        } else {
	          warn('Invalid absolute docBaseUrl: "' + this._docBaseUrl + '".');
	        }
	      }
	      return shadow(this, 'docBaseUrl', docBaseUrl);
	    },
	    onLoadedStream: function BasePdfManager_onLoadedStream() {
	      throw new NotImplementedException();
	    },
	    ensureDoc: function BasePdfManager_ensureDoc(prop, args) {
	      return this.ensure(this.pdfDocument, prop, args);
	    },
	    ensureXRef: function BasePdfManager_ensureXRef(prop, args) {
	      return this.ensure(this.pdfDocument.xref, prop, args);
	    },
	    ensureCatalog: function BasePdfManager_ensureCatalog(prop, args) {
	      return this.ensure(this.pdfDocument.catalog, prop, args);
	    },
	    getPage: function BasePdfManager_getPage(pageIndex) {
	      return this.pdfDocument.getPage(pageIndex);
	    },
	    cleanup: function BasePdfManager_cleanup() {
	      return this.pdfDocument.cleanup();
	    },
	    ensure: function BasePdfManager_ensure(obj, prop, args) {
	      return new NotImplementedException();
	    },
	    requestRange: function BasePdfManager_requestRange(begin, end) {
	      return new NotImplementedException();
	    },
	    requestLoadedStream: function BasePdfManager_requestLoadedStream() {
	      return new NotImplementedException();
	    },
	    sendProgressiveData: function BasePdfManager_sendProgressiveData(chunk) {
	      return new NotImplementedException();
	    },
	    updatePassword: function BasePdfManager_updatePassword(password) {
	      this._password = password;
	    },
	    terminate: function BasePdfManager_terminate() {
	      return new NotImplementedException();
	    }
	  };
	  return BasePdfManager;
	}();
	var LocalPdfManager = function LocalPdfManagerClosure() {
	  function LocalPdfManager(docId, data, password, evaluatorOptions, docBaseUrl) {
	    this._docId = docId;
	    this._password = password;
	    this._docBaseUrl = docBaseUrl;
	    this.evaluatorOptions = evaluatorOptions;
	    var stream = new Stream(data);
	    this.pdfDocument = new PDFDocument(this, stream);
	    this._loadedStreamCapability = createPromiseCapability();
	    this._loadedStreamCapability.resolve(stream);
	  }
	  Util.inherit(LocalPdfManager, BasePdfManager, {
	    ensure: function LocalPdfManager_ensure(obj, prop, args) {
	      return new Promise(function (resolve, reject) {
	        try {
	          var value = obj[prop];
	          var result;
	          if (typeof value === 'function') {
	            result = value.apply(obj, args);
	          } else {
	            result = value;
	          }
	          resolve(result);
	        } catch (e) {
	          reject(e);
	        }
	      });
	    },
	    requestRange: function LocalPdfManager_requestRange(begin, end) {
	      return Promise.resolve();
	    },
	    requestLoadedStream: function LocalPdfManager_requestLoadedStream() {},
	    onLoadedStream: function LocalPdfManager_onLoadedStream() {
	      return this._loadedStreamCapability.promise;
	    },
	    terminate: function LocalPdfManager_terminate() {}
	  });
	  return LocalPdfManager;
	}();
	var NetworkPdfManager = function NetworkPdfManagerClosure() {
	  function NetworkPdfManager(docId, pdfNetworkStream, args, evaluatorOptions, docBaseUrl) {
	    this._docId = docId;
	    this._password = args.password;
	    this._docBaseUrl = docBaseUrl;
	    this.msgHandler = args.msgHandler;
	    this.evaluatorOptions = evaluatorOptions;
	    var params = {
	      msgHandler: args.msgHandler,
	      url: args.url,
	      length: args.length,
	      disableAutoFetch: args.disableAutoFetch,
	      rangeChunkSize: args.rangeChunkSize
	    };
	    this.streamManager = new ChunkedStreamManager(pdfNetworkStream, params);
	    this.pdfDocument = new PDFDocument(this, this.streamManager.getStream());
	  }
	  Util.inherit(NetworkPdfManager, BasePdfManager, {
	    ensure: function NetworkPdfManager_ensure(obj, prop, args) {
	      var pdfManager = this;
	      return new Promise(function (resolve, reject) {
	        function ensureHelper() {
	          try {
	            var result;
	            var value = obj[prop];
	            if (typeof value === 'function') {
	              result = value.apply(obj, args);
	            } else {
	              result = value;
	            }
	            resolve(result);
	          } catch (e) {
	            if (!(e instanceof MissingDataException)) {
	              reject(e);
	              return;
	            }
	            pdfManager.streamManager.requestRange(e.begin, e.end).then(ensureHelper, reject);
	          }
	        }
	        ensureHelper();
	      });
	    },
	    requestRange: function NetworkPdfManager_requestRange(begin, end) {
	      return this.streamManager.requestRange(begin, end);
	    },
	    requestLoadedStream: function NetworkPdfManager_requestLoadedStream() {
	      this.streamManager.requestAllChunks();
	    },
	    sendProgressiveData: function NetworkPdfManager_sendProgressiveData(chunk) {
	      this.streamManager.onReceiveData({ chunk: chunk });
	    },
	    onLoadedStream: function NetworkPdfManager_onLoadedStream() {
	      return this.streamManager.onLoadedStream();
	    },
	    terminate: function NetworkPdfManager_terminate() {
	      this.streamManager.abort();
	    }
	  });
	  return NetworkPdfManager;
	}();
	exports.LocalPdfManager = LocalPdfManager;
	exports.NetworkPdfManager = NetworkPdfManager;

	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var corePrimitives = __w_pdfjs_require__(1);
	var error = sharedUtil.error;
	var isSpace = sharedUtil.isSpace;
	var EOF = corePrimitives.EOF;
	var PostScriptParser = function PostScriptParserClosure() {
	  function PostScriptParser(lexer) {
	    this.lexer = lexer;
	    this.operators = [];
	    this.token = null;
	    this.prev = null;
	  }
	  PostScriptParser.prototype = {
	    nextToken: function PostScriptParser_nextToken() {
	      this.prev = this.token;
	      this.token = this.lexer.getToken();
	    },
	    accept: function PostScriptParser_accept(type) {
	      if (this.token.type === type) {
	        this.nextToken();
	        return true;
	      }
	      return false;
	    },
	    expect: function PostScriptParser_expect(type) {
	      if (this.accept(type)) {
	        return true;
	      }
	      error('Unexpected symbol: found ' + this.token.type + ' expected ' + type + '.');
	    },
	    parse: function PostScriptParser_parse() {
	      this.nextToken();
	      this.expect(PostScriptTokenTypes.LBRACE);
	      this.parseBlock();
	      this.expect(PostScriptTokenTypes.RBRACE);
	      return this.operators;
	    },
	    parseBlock: function PostScriptParser_parseBlock() {
	      while (true) {
	        if (this.accept(PostScriptTokenTypes.NUMBER)) {
	          this.operators.push(this.prev.value);
	        } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {
	          this.operators.push(this.prev.value);
	        } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
	          this.parseCondition();
	        } else {
	          return;
	        }
	      }
	    },
	    parseCondition: function PostScriptParser_parseCondition() {
	      var conditionLocation = this.operators.length;
	      this.operators.push(null, null);
	      this.parseBlock();
	      this.expect(PostScriptTokenTypes.RBRACE);
	      if (this.accept(PostScriptTokenTypes.IF)) {
	        this.operators[conditionLocation] = this.operators.length;
	        this.operators[conditionLocation + 1] = 'jz';
	      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
	        var jumpLocation = this.operators.length;
	        this.operators.push(null, null);
	        var endOfTrue = this.operators.length;
	        this.parseBlock();
	        this.expect(PostScriptTokenTypes.RBRACE);
	        this.expect(PostScriptTokenTypes.IFELSE);
	        this.operators[jumpLocation] = this.operators.length;
	        this.operators[jumpLocation + 1] = 'j';
	        this.operators[conditionLocation] = endOfTrue;
	        this.operators[conditionLocation + 1] = 'jz';
	      } else {
	        error('PS Function: error parsing conditional.');
	      }
	    }
	  };
	  return PostScriptParser;
	}();
	var PostScriptTokenTypes = {
	  LBRACE: 0,
	  RBRACE: 1,
	  NUMBER: 2,
	  OPERATOR: 3,
	  IF: 4,
	  IFELSE: 5
	};
	var PostScriptToken = function PostScriptTokenClosure() {
	  function PostScriptToken(type, value) {
	    this.type = type;
	    this.value = value;
	  }
	  var opCache = Object.create(null);
	  PostScriptToken.getOperator = function PostScriptToken_getOperator(op) {
	    var opValue = opCache[op];
	    if (opValue) {
	      return opValue;
	    }
	    return opCache[op] = new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);
	  };
	  PostScriptToken.LBRACE = new PostScriptToken(PostScriptTokenTypes.LBRACE, '{');
	  PostScriptToken.RBRACE = new PostScriptToken(PostScriptTokenTypes.RBRACE, '}');
	  PostScriptToken.IF = new PostScriptToken(PostScriptTokenTypes.IF, 'IF');
	  PostScriptToken.IFELSE = new PostScriptToken(PostScriptTokenTypes.IFELSE, 'IFELSE');
	  return PostScriptToken;
	}();
	var PostScriptLexer = function PostScriptLexerClosure() {
	  function PostScriptLexer(stream) {
	    this.stream = stream;
	    this.nextChar();
	    this.strBuf = [];
	  }
	  PostScriptLexer.prototype = {
	    nextChar: function PostScriptLexer_nextChar() {
	      return this.currentChar = this.stream.getByte();
	    },
	    getToken: function PostScriptLexer_getToken() {
	      var comment = false;
	      var ch = this.currentChar;
	      while (true) {
	        if (ch < 0) {
	          return EOF;
	        }
	        if (comment) {
	          if (ch === 0x0A || ch === 0x0D) {
	            comment = false;
	          }
	        } else if (ch === 0x25) {
	          comment = true;
	        } else if (!isSpace(ch)) {
	          break;
	        }
	        ch = this.nextChar();
	      }
	      switch (ch | 0) {
	        case 0x30:
	        case 0x31:
	        case 0x32:
	        case 0x33:
	        case 0x34:
	        case 0x35:
	        case 0x36:
	        case 0x37:
	        case 0x38:
	        case 0x39:
	        case 0x2B:
	        case 0x2D:
	        case 0x2E:
	          return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());
	        case 0x7B:
	          this.nextChar();
	          return PostScriptToken.LBRACE;
	        case 0x7D:
	          this.nextChar();
	          return PostScriptToken.RBRACE;
	      }
	      var strBuf = this.strBuf;
	      strBuf.length = 0;
	      strBuf[0] = String.fromCharCode(ch);
	      while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A)) {
	        strBuf.push(String.fromCharCode(ch));
	      }
	      var str = strBuf.join('');
	      switch (str.toLowerCase()) {
	        case 'if':
	          return PostScriptToken.IF;
	        case 'ifelse':
	          return PostScriptToken.IFELSE;
	        default:
	          return PostScriptToken.getOperator(str);
	      }
	    },
	    getNumber: function PostScriptLexer_getNumber() {
	      var ch = this.currentChar;
	      var strBuf = this.strBuf;
	      strBuf.length = 0;
	      strBuf[0] = String.fromCharCode(ch);
	      while ((ch = this.nextChar()) >= 0) {
	        if (ch >= 0x30 && ch <= 0x39 || ch === 0x2D || ch === 0x2E) {
	          strBuf.push(String.fromCharCode(ch));
	        } else {
	          break;
	        }
	      }
	      var value = parseFloat(strBuf.join(''));
	      if (isNaN(value)) {
	        error('Invalid floating point number: ' + value);
	      }
	      return value;
	    }
	  };
	  return PostScriptLexer;
	}();
	exports.PostScriptLexer = PostScriptLexer;
	exports.PostScriptParser = PostScriptParser;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var sharedUtil = __w_pdfjs_require__(0);
	var coreStream = __w_pdfjs_require__(2);
	var coreEncodings = __w_pdfjs_require__(4);
	var warn = sharedUtil.warn;
	var isSpace = sharedUtil.isSpace;
	var Stream = coreStream.Stream;
	var getEncoding = coreEncodings.getEncoding;
	var HINTING_ENABLED = false;
	var Type1CharString = function Type1CharStringClosure() {
	  var COMMAND_MAP = {
	    'hstem': [1],
	    'vstem': [3],
	    'vmoveto': [4],
	    'rlineto': [5],
	    'hlineto': [6],
	    'vlineto': [7],
	    'rrcurveto': [8],
	    'callsubr': [10],
	    'flex': [12, 35],
	    'drop': [12, 18],
	    'endchar': [14],
	    'rmoveto': [21],
	    'hmoveto': [22],
	    'vhcurveto': [30],
	    'hvcurveto': [31]
	  };
	  function Type1CharString() {
	    this.width = 0;
	    this.lsb = 0;
	    this.flexing = false;
	    this.output = [];
	    this.stack = [];
	  }
	  Type1CharString.prototype = {
	    convert: function Type1CharString_convert(encoded, subrs, seacAnalysisEnabled) {
	      var count = encoded.length;
	      var error = false;
	      var wx, sbx, subrNumber;
	      for (var i = 0; i < count; i++) {
	        var value = encoded[i];
	        if (value < 32) {
	          if (value === 12) {
	            value = (value << 8) + encoded[++i];
	          }
	          switch (value) {
	            case 1:
	              if (!HINTING_ENABLED) {
	                this.stack = [];
	                break;
	              }
	              error = this.executeCommand(2, COMMAND_MAP.hstem);
	              break;
	            case 3:
	              if (!HINTING_ENABLED) {
	                this.stack = [];
	                break;
	              }
	              error = this.executeCommand(2, COMMAND_MAP.vstem);
	              break;
	            case 4:
	              if (this.flexing) {
	                if (this.stack.length < 1) {
	                  error = true;
	                  break;
	                }
	                var dy = this.stack.pop();
	                this.stack.push(0, dy);
	                break;
	              }
	              error = this.executeCommand(1, COMMAND_MAP.vmoveto);
	              break;
	            case 5:
	              error = this.executeCommand(2, COMMAND_MAP.rlineto);
	              break;
	            case 6:
	              error = this.executeCommand(1, COMMAND_MAP.hlineto);
	              break;
	            case 7:
	              error = this.executeCommand(1, COMMAND_MAP.vlineto);
	              break;
	            case 8:
	              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);
	              break;
	            case 9:
	              this.stack = [];
	              break;
	            case 10:
	              if (this.stack.length < 1) {
	                error = true;
	                break;
	              }
	              subrNumber = this.stack.pop();
	              error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);
	              break;
	            case 11:
	              return error;
	            case 13:
	              if (this.stack.length < 2) {
	                error = true;
	                break;
	              }
	              wx = this.stack.pop();
	              sbx = this.stack.pop();
	              this.lsb = sbx;
	              this.width = wx;
	              this.stack.push(wx, sbx);
	              error = this.executeCommand(2, COMMAND_MAP.hmoveto);
	              break;
	            case 14:
	              this.output.push(COMMAND_MAP.endchar[0]);
	              break;
	            case 21:
	              if (this.flexing) {
	                break;
	              }
	              error = this.executeCommand(2, COMMAND_MAP.rmoveto);
	              break;
	            case 22:
	              if (this.flexing) {
	                this.stack.push(0);
	                break;
	              }
	              error = this.executeCommand(1, COMMAND_MAP.hmoveto);
	              break;
	            case 30:
	              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);
	              break;
	            case 31:
	              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);
	              break;
	            case (12 << 8) + 0:
	              this.stack = [];
	              break;
	            case (12 << 8) + 1:
	              if (!HINTING_ENABLED) {
	                this.stack = [];
	                break;
	              }
	              error = this.executeCommand(2, COMMAND_MAP.vstem);
	              break;
	            case (12 << 8) + 2:
	              if (!HINTING_ENABLED) {
	                this.stack = [];
	                break;
	              }
	              error = this.executeCommand(2, COMMAND_MAP.hstem);
	              break;
	            case (12 << 8) + 6:
	              if (seacAnalysisEnabled) {
	                this.seac = this.stack.splice(-4, 4);
	                error = this.executeCommand(0, COMMAND_MAP.endchar);
	              } else {
	                error = this.executeCommand(4, COMMAND_MAP.endchar);
	              }
	              break;
	            case (12 << 8) + 7:
	              if (this.stack.length < 4) {
	                error = true;
	                break;
	              }
	              this.stack.pop();
	              wx = this.stack.pop();
	              var sby = this.stack.pop();
	              sbx = this.stack.pop();
	              this.lsb = sbx;
	              this.width = wx;
	              this.stack.push(wx, sbx, sby);
	              error = this.executeCommand(3, COMMAND_MAP.rmoveto);
	              break;
	            case (12 << 8) + 12:
	              if (this.stack.length < 2) {
	                error = true;
	                break;
	              }
	              var num2 = this.stack.pop();
	              var num1 = this.stack.pop();
	              this.stack.push(num1 / num2);
	              break;
	            case (12 << 8) + 16:
	              if (this.stack.length < 2) {
	                error = true;
	                break;
	              }
	              subrNumber = this.stack.pop();
	              var numArgs = this.stack.pop();
	              if (subrNumber === 0 && numArgs === 3) {
	                var flexArgs = this.stack.splice(this.stack.length - 17, 17);
	                this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);
	                error = this.executeCommand(13, COMMAND_MAP.flex, true);
	                this.flexing = false;
	                this.stack.push(flexArgs[15], flexArgs[16]);
	              } else if (subrNumber === 1 && numArgs === 0) {
	                this.flexing = true;
	              }
	              break;
	            case (12 << 8) + 17:
	              break;
	            case (12 << 8) + 33:
	              this.stack = [];
	              break;
	            default:
	              warn('Unknown type 1 charstring command of "' + value + '"');
	              break;
	          }
	          if (error) {
	            break;
	          }
	          continue;
	        } else if (value <= 246) {
	          value = value - 139;
	        } else if (value <= 250) {
	          value = (value - 247) * 256 + encoded[++i] + 108;
	        } else if (value <= 254) {
	          value = -((value - 251) * 256) - encoded[++i] - 108;
	        } else {
	          value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;
	        }
	        this.stack.push(value);
	      }
	      return error;
	    },
	    executeCommand: function executeCommand(howManyArgs, command, keepStack) {
	      var stackLength = this.stack.length;
	      if (howManyArgs > stackLength) {
	        return true;
	      }
	      var start = stackLength - howManyArgs;
	      for (var i = start; i < stackLength; i++) {
	        var value = this.stack[i];
	        if (value === (value | 0)) {
	          this.output.push(28, value >> 8 & 0xff, value & 0xff);
	        } else {
	          value = 65536 * value | 0;
	          this.output.push(255, value >> 24 & 0xFF, value >> 16 & 0xFF, value >> 8 & 0xFF, value & 0xFF);
	        }
	      }
	      this.output.push.apply(this.output, command);
	      if (keepStack) {
	        this.stack.splice(start, howManyArgs);
	      } else {
	        this.stack.length = 0;
	      }
	      return false;
	    }
	  };
	  return Type1CharString;
	}();
	var Type1Parser = function Type1ParserClosure() {
	  var EEXEC_ENCRYPT_KEY = 55665;
	  var CHAR_STRS_ENCRYPT_KEY = 4330;
	  function isHexDigit(code) {
	    return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;
	  }
	  function decrypt(data, key, discardNumber) {
	    if (discardNumber >= data.length) {
	      return new Uint8Array(0);
	    }
	    var r = key | 0,
	        c1 = 52845,
	        c2 = 22719,
	        i,
	        j;
	    for (i = 0; i < discardNumber; i++) {
	      r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;
	    }
	    var count = data.length - discardNumber;
	    var decrypted = new Uint8Array(count);
	    for (i = discardNumber, j = 0; j < count; i++, j++) {
	      var value = data[i];
	      decrypted[j] = value ^ r >> 8;
	      r = (value + r) * c1 + c2 & (1 << 16) - 1;
	    }
	    return decrypted;
	  }
	  function decryptAscii(data, key, discardNumber) {
	    var r = key | 0,
	        c1 = 52845,
	        c2 = 22719;
	    var count = data.length,
	        maybeLength = count >>> 1;
	    var decrypted = new Uint8Array(maybeLength);
	    var i, j;
	    for (i = 0, j = 0; i < count; i++) {
	      var digit1 = data[i];
	      if (!isHexDigit(digit1)) {
	        continue;
	      }
	      i++;
	      var digit2;
	      while (i < count && !isHexDigit(digit2 = data[i])) {
	        i++;
	      }
	      if (i < count) {
	        var value = parseInt(String.fromCharCode(digit1, digit2), 16);
	        decrypted[j++] = value ^ r >> 8;
	        r = (value + r) * c1 + c2 & (1 << 16) - 1;
	      }
	    }
	    return Array.prototype.slice.call(decrypted, discardNumber, j);
	  }
	  function isSpecial(c) {
	    return c === 0x2F || c === 0x5B || c === 0x5D || c === 0x7B || c === 0x7D || c === 0x28 || c === 0x29;
	  }
	  function Type1Parser(stream, encrypted, seacAnalysisEnabled) {
	    if (encrypted) {
	      var data = stream.getBytes();
	      var isBinary = !(isHexDigit(data[0]) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]));
	      stream = new Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));
	    }
	    this.seacAnalysisEnabled = !!seacAnalysisEnabled;
	    this.stream = stream;
	    this.nextChar();
	  }
	  Type1Parser.prototype = {
	    readNumberArray: function Type1Parser_readNumberArray() {
	      this.getToken();
	      var array = [];
	      while (true) {
	        var token = this.getToken();
	        if (token === null || token === ']' || token === '}') {
	          break;
	        }
	        array.push(parseFloat(token || 0));
	      }
	      return array;
	    },
	    readNumber: function Type1Parser_readNumber() {
	      var token = this.getToken();
	      return parseFloat(token || 0);
	    },
	    readInt: function Type1Parser_readInt() {
	      var token = this.getToken();
	      return parseInt(token || 0, 10) | 0;
	    },
	    readBoolean: function Type1Parser_readBoolean() {
	      var token = this.getToken();
	      return token === 'true' ? 1 : 0;
	    },
	    nextChar: function Type1_nextChar() {
	      return this.currentChar = this.stream.getByte();
	    },
	    getToken: function Type1Parser_getToken() {
	      var comment = false;
	      var ch = this.currentChar;
	      while (true) {
	        if (ch === -1) {
	          return null;
	        }
	        if (comment) {
	          if (ch === 0x0A || ch === 0x0D) {
	            comment = false;
	          }
	        } else if (ch === 0x25) {
	          comment = true;
	        } else if (!isSpace(ch)) {
	          break;
	        }
	        ch = this.nextChar();
	      }
	      if (isSpecial(ch)) {
	        this.nextChar();
	        return String.fromCharCode(ch);
	      }
	      var token = '';
	      do {
	        token += String.fromCharCode(ch);
	        ch = this.nextChar();
	      } while (ch >= 0 && !isSpace(ch) && !isSpecial(ch));
	      return token;
	    },
	    extractFontProgram: function Type1Parser_extractFontProgram() {
	      var stream = this.stream;
	      var subrs = [],
	          charstrings = [];
	      var privateData = Object.create(null);
	      privateData['lenIV'] = 4;
	      var program = {
	        subrs: [],
	        charstrings: [],
	        properties: { 'privateData': privateData }
	      };
	      var token, length, data, lenIV, encoded;
	      while ((token = this.getToken()) !== null) {
	        if (token !== '/') {
	          continue;
	        }
	        token = this.getToken();
	        switch (token) {
	          case 'CharStrings':
	            this.getToken();
	            this.getToken();
	            this.getToken();
	            this.getToken();
	            while (true) {
	              token = this.getToken();
	              if (token === null || token === 'end') {
	                break;
	              }
	              if (token !== '/') {
	                continue;
	              }
	              var glyph = this.getToken();
	              length = this.readInt();
	              this.getToken();
	              data = stream.makeSubStream(stream.pos, length);
	              lenIV = program.properties.privateData['lenIV'];
	              encoded = decrypt(data.getBytes(), CHAR_STRS_ENCRYPT_KEY, lenIV);
	              stream.skip(length);
	              this.nextChar();
	              token = this.getToken();
	              if (token === 'noaccess') {
	                this.getToken();
	              }
	              charstrings.push({
	                glyph: glyph,
	                encoded: encoded
	              });
	            }
	            break;
	          case 'Subrs':
	            this.readInt();
	            this.getToken();
	            while ((token = this.getToken()) === 'dup') {
	              var index = this.readInt();
	              length = this.readInt();
	              this.getToken();
	              data = stream.makeSubStream(stream.pos, length);
	              lenIV = program.properties.privateData['lenIV'];
	              encoded = decrypt(data.getBytes(), CHAR_STRS_ENCRYPT_KEY, lenIV);
	              stream.skip(length);
	              this.nextChar();
	              token = this.getToken();
	              if (token === 'noaccess') {
	                this.getToken();
	              }
	              subrs[index] = encoded;
	            }
	            break;
	          case 'BlueValues':
	          case 'OtherBlues':
	          case 'FamilyBlues':
	          case 'FamilyOtherBlues':
	            var blueArray = this.readNumberArray();
	            if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {
	              program.properties.privateData[token] = blueArray;
	            }
	            break;
	          case 'StemSnapH':
	          case 'StemSnapV':
	            program.properties.privateData[token] = this.readNumberArray();
	            break;
	          case 'StdHW':
	          case 'StdVW':
	            program.properties.privateData[token] = this.readNumberArray()[0];
	            break;
	          case 'BlueShift':
	          case 'lenIV':
	          case 'BlueFuzz':
	          case 'BlueScale':
	          case 'LanguageGroup':
	          case 'ExpansionFactor':
	            program.properties.privateData[token] = this.readNumber();
	            break;
	          case 'ForceBold':
	            program.properties.privateData[token] = this.readBoolean();
	            break;
	        }
	      }
	      for (var i = 0; i < charstrings.length; i++) {
	        glyph = charstrings[i].glyph;
	        encoded = charstrings[i].encoded;
	        var charString = new Type1CharString();
	        var error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);
	        var output = charString.output;
	        if (error) {
	          output = [14];
	        }
	        program.charstrings.push({
	          glyphName: glyph,
	          charstring: output,
	          width: charString.width,
	          lsb: charString.lsb,
	          seac: charString.seac
	        });
	      }
	      return program;
	    },
	    extractFontHeader: function Type1Parser_extractFontHeader(properties) {
	      var token;
	      while ((token = this.getToken()) !== null) {
	        if (token !== '/') {
	          continue;
	        }
	        token = this.getToken();
	        switch (token) {
	          case 'FontMatrix':
	            var matrix = this.readNumberArray();
	            properties.fontMatrix = matrix;
	            break;
	          case 'Encoding':
	            var encodingArg = this.getToken();
	            var encoding;
	            if (!/^\d+$/.test(encodingArg)) {
	              encoding = getEncoding(encodingArg);
	            } else {
	              encoding = [];
	              var size = parseInt(encodingArg, 10) | 0;
	              this.getToken();
	              for (var j = 0; j < size; j++) {
	                token = this.getToken();
	                while (token !== 'dup' && token !== 'def') {
	                  token = this.getToken();
	                  if (token === null) {
	                    return;
	                  }
	                }
	                if (token === 'def') {
	                  break;
	                }
	                var index = this.readInt();
	                this.getToken();
	                var glyph = this.getToken();
	                encoding[index] = glyph;
	                this.getToken();
	              }
	            }
	            properties.builtInEncoding = encoding;
	            break;
	          case 'FontBBox':
	            var fontBBox = this.readNumberArray();
	            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
	            properties.descent = Math.min(fontBBox[1], fontBBox[3]);
	            properties.ascentScaled = true;
	            break;
	        }
	      }
	    }
	  };
	  return Type1Parser;
	}();
	exports.Type1Parser = Type1Parser;

	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";


	var pdfjsVersion = '1.8.355';
	var pdfjsBuild = 'e9cbfbcc';
	var pdfjsCoreWorker = __w_pdfjs_require__(8);
	{
	  __w_pdfjs_require__(19);
	}
	exports.WorkerMessageHandler = pdfjsCoreWorker.WorkerMessageHandler;

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __w_pdfjs_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(global) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	if (typeof PDFJS === 'undefined' || !PDFJS.compatibilityChecked) {
	  var globalScope = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : undefined;
	  var userAgent = typeof navigator !== 'undefined' && navigator.userAgent || '';
	  var isAndroid = /Android/.test(userAgent);
	  var isAndroidPre3 = /Android\s[0-2][^\d]/.test(userAgent);
	  var isAndroidPre5 = /Android\s[0-4][^\d]/.test(userAgent);
	  var isChrome = userAgent.indexOf('Chrom') >= 0;
	  var isChromeWithRangeBug = /Chrome\/(39|40)\./.test(userAgent);
	  var isIOSChrome = userAgent.indexOf('CriOS') >= 0;
	  var isIE = userAgent.indexOf('Trident') >= 0;
	  var isIOS = /\b(iPad|iPhone|iPod)(?=;)/.test(userAgent);
	  var isOpera = userAgent.indexOf('Opera') >= 0;
	  var isSafari = /Safari\//.test(userAgent) && !/(Chrome\/|Android\s)/.test(userAgent);
	  var hasDOM = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object';
	  if (typeof PDFJS === 'undefined') {
	    globalScope.PDFJS = {};
	  }
	  PDFJS.compatibilityChecked = true;
	  (function checkTypedArrayCompatibility() {
	    if (typeof Uint8Array !== 'undefined') {
	      if (typeof Uint8Array.prototype.subarray === 'undefined') {
	        Uint8Array.prototype.subarray = function subarray(start, end) {
	          return new Uint8Array(this.slice(start, end));
	        };
	        Float32Array.prototype.subarray = function subarray(start, end) {
	          return new Float32Array(this.slice(start, end));
	        };
	      }
	      if (typeof Float64Array === 'undefined') {
	        globalScope.Float64Array = Float32Array;
	      }
	      return;
	    }
	    function subarray(start, end) {
	      return new TypedArray(this.slice(start, end));
	    }
	    function setArrayOffset(array, offset) {
	      if (arguments.length < 2) {
	        offset = 0;
	      }
	      for (var i = 0, n = array.length; i < n; ++i, ++offset) {
	        this[offset] = array[i] & 0xFF;
	      }
	    }
	    function Uint32ArrayView(buffer, length) {
	      this.buffer = buffer;
	      this.byteLength = buffer.length;
	      this.length = length;
	      ensureUint32ArrayViewProps(this.length);
	    }
	    Uint32ArrayView.prototype = Object.create(null);
	    var uint32ArrayViewSetters = 0;
	    function createUint32ArrayProp(index) {
	      return {
	        get: function get() {
	          var buffer = this.buffer,
	              offset = index << 2;
	          return (buffer[offset] | buffer[offset + 1] << 8 | buffer[offset + 2] << 16 | buffer[offset + 3] << 24) >>> 0;
	        },
	        set: function set(value) {
	          var buffer = this.buffer,
	              offset = index << 2;
	          buffer[offset] = value & 255;
	          buffer[offset + 1] = value >> 8 & 255;
	          buffer[offset + 2] = value >> 16 & 255;
	          buffer[offset + 3] = value >>> 24 & 255;
	        }
	      };
	    }
	    function ensureUint32ArrayViewProps(length) {
	      while (uint32ArrayViewSetters < length) {
	        Object.defineProperty(Uint32ArrayView.prototype, uint32ArrayViewSetters, createUint32ArrayProp(uint32ArrayViewSetters));
	        uint32ArrayViewSetters++;
	      }
	    }
	    function TypedArray(arg1) {
	      var result, i, n;
	      if (typeof arg1 === 'number') {
	        result = [];
	        for (i = 0; i < arg1; ++i) {
	          result[i] = 0;
	        }
	      } else if ('slice' in arg1) {
	        result = arg1.slice(0);
	      } else {
	        result = [];
	        for (i = 0, n = arg1.length; i < n; ++i) {
	          result[i] = arg1[i];
	        }
	      }
	      result.subarray = subarray;
	      result.buffer = result;
	      result.byteLength = result.length;
	      result.set = setArrayOffset;
	      if ((typeof arg1 === 'undefined' ? 'undefined' : _typeof(arg1)) === 'object' && arg1.buffer) {
	        result.buffer = arg1.buffer;
	      }
	      return result;
	    }
	    globalScope.Uint8Array = TypedArray;
	    globalScope.Int8Array = TypedArray;
	    globalScope.Int32Array = TypedArray;
	    globalScope.Uint16Array = TypedArray;
	    globalScope.Float32Array = TypedArray;
	    globalScope.Float64Array = TypedArray;
	    globalScope.Uint32Array = function () {
	      if (arguments.length === 3) {
	        if (arguments[1] !== 0) {
	          throw new Error('offset !== 0 is not supported');
	        }
	        return new Uint32ArrayView(arguments[0], arguments[2]);
	      }
	      return TypedArray.apply(this, arguments);
	    };
	  })();
	  (function canvasPixelArrayBuffer() {
	    if (!hasDOM || !window.CanvasPixelArray) {
	      return;
	    }
	    var cpaProto = window.CanvasPixelArray.prototype;
	    if ('buffer' in cpaProto) {
	      return;
	    }
	    Object.defineProperty(cpaProto, 'buffer', {
	      get: function get() {
	        return this;
	      },

	      enumerable: false,
	      configurable: true
	    });
	    Object.defineProperty(cpaProto, 'byteLength', {
	      get: function get() {
	        return this.length;
	      },

	      enumerable: false,
	      configurable: true
	    });
	  })();
	  (function normalizeURLObject() {
	    if (!globalScope.URL) {
	      globalScope.URL = globalScope.webkitURL;
	    }
	  })();
	  (function checkObjectDefinePropertyCompatibility() {
	    if (typeof Object.defineProperty !== 'undefined') {
	      var definePropertyPossible = true;
	      try {
	        if (hasDOM) {
	          Object.defineProperty(new Image(), 'id', { value: 'test' });
	        }
	        var Test = function Test() {};
	        Test.prototype = {
	          get id() {}
	        };
	        Object.defineProperty(new Test(), 'id', {
	          value: '',
	          configurable: true,
	          enumerable: true,
	          writable: false
	        });
	      } catch (e) {
	        definePropertyPossible = false;
	      }
	      if (definePropertyPossible) {
	        return;
	      }
	    }
	    Object.defineProperty = function objectDefineProperty(obj, name, def) {
	      delete obj[name];
	      if ('get' in def) {
	        obj.__defineGetter__(name, def['get']);
	      }
	      if ('set' in def) {
	        obj.__defineSetter__(name, def['set']);
	      }
	      if ('value' in def) {
	        obj.__defineSetter__(name, function objectDefinePropertySetter(value) {
	          this.__defineGetter__(name, function objectDefinePropertyGetter() {
	            return value;
	          });
	          return value;
	        });
	        obj[name] = def.value;
	      }
	    };
	  })();
	  (function checkXMLHttpRequestResponseCompatibility() {
	    if (typeof XMLHttpRequest === 'undefined') {
	      return;
	    }
	    var xhrPrototype = XMLHttpRequest.prototype;
	    var xhr = new XMLHttpRequest();
	    if (!('overrideMimeType' in xhr)) {
	      Object.defineProperty(xhrPrototype, 'overrideMimeType', {
	        value: function xmlHttpRequestOverrideMimeType(mimeType) {}
	      });
	    }
	    if ('responseType' in xhr) {
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'responseType', {
	      get: function xmlHttpRequestGetResponseType() {
	        return this._responseType || 'text';
	      },
	      set: function xmlHttpRequestSetResponseType(value) {
	        if (value === 'text' || value === 'arraybuffer') {
	          this._responseType = value;
	          if (value === 'arraybuffer' && typeof this.overrideMimeType === 'function') {
	            this.overrideMimeType('text/plain; charset=x-user-defined');
	          }
	        }
	      }
	    });
	    if (typeof VBArray !== 'undefined') {
	      Object.defineProperty(xhrPrototype, 'response', {
	        get: function xmlHttpRequestResponseGet() {
	          if (this.responseType === 'arraybuffer') {
	            return new Uint8Array(new VBArray(this.responseBody).toArray());
	          }
	          return this.responseText;
	        }
	      });
	      return;
	    }
	    Object.defineProperty(xhrPrototype, 'response', {
	      get: function xmlHttpRequestResponseGet() {
	        if (this.responseType !== 'arraybuffer') {
	          return this.responseText;
	        }
	        var text = this.responseText;
	        var i,
	            n = text.length;
	        var result = new Uint8Array(n);
	        for (i = 0; i < n; ++i) {
	          result[i] = text.charCodeAt(i) & 0xFF;
	        }
	        return result.buffer;
	      }
	    });
	  })();
	  (function checkWindowBtoaCompatibility() {
	    if ('btoa' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.btoa = function (chars) {
	      var buffer = '';
	      var i, n;
	      for (i = 0, n = chars.length; i < n; i += 3) {
	        var b1 = chars.charCodeAt(i) & 0xFF;
	        var b2 = chars.charCodeAt(i + 1) & 0xFF;
	        var b3 = chars.charCodeAt(i + 2) & 0xFF;
	        var d1 = b1 >> 2,
	            d2 = (b1 & 3) << 4 | b2 >> 4;
	        var d3 = i + 1 < n ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
	        var d4 = i + 2 < n ? b3 & 0x3F : 64;
	        buffer += digits.charAt(d1) + digits.charAt(d2) + digits.charAt(d3) + digits.charAt(d4);
	      }
	      return buffer;
	    };
	  })();
	  (function checkWindowAtobCompatibility() {
	    if ('atob' in globalScope) {
	      return;
	    }
	    var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	    globalScope.atob = function (input) {
	      input = input.replace(/=+$/, '');
	      if (input.length % 4 === 1) {
	        throw new Error('bad atob input');
	      }
	      for (var bc = 0, bs, buffer, idx = 0, output = ''; buffer = input.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
	        buffer = digits.indexOf(buffer);
	      }
	      return output;
	    };
	  })();
	  (function checkFunctionPrototypeBindCompatibility() {
	    if (typeof Function.prototype.bind !== 'undefined') {
	      return;
	    }
	    Function.prototype.bind = function functionPrototypeBind(obj) {
	      var fn = this,
	          headArgs = Array.prototype.slice.call(arguments, 1);
	      var bound = function functionPrototypeBindBound() {
	        var args = headArgs.concat(Array.prototype.slice.call(arguments));
	        return fn.apply(obj, args);
	      };
	      return bound;
	    };
	  })();
	  (function checkDatasetProperty() {
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('dataset' in div) {
	      return;
	    }
	    Object.defineProperty(HTMLElement.prototype, 'dataset', {
	      get: function get() {
	        if (this._dataset) {
	          return this._dataset;
	        }
	        var dataset = {};
	        for (var j = 0, jj = this.attributes.length; j < jj; j++) {
	          var attribute = this.attributes[j];
	          if (attribute.name.substring(0, 5) !== 'data-') {
	            continue;
	          }
	          var key = attribute.name.substring(5).replace(/\-([a-z])/g, function (all, ch) {
	            return ch.toUpperCase();
	          });
	          dataset[key] = attribute.value;
	        }
	        Object.defineProperty(this, '_dataset', {
	          value: dataset,
	          writable: false,
	          enumerable: false
	        });
	        return dataset;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkClassListProperty() {
	    function changeList(element, itemName, add, remove) {
	      var s = element.className || '';
	      var list = s.split(/\s+/g);
	      if (list[0] === '') {
	        list.shift();
	      }
	      var index = list.indexOf(itemName);
	      if (index < 0 && add) {
	        list.push(itemName);
	      }
	      if (index >= 0 && remove) {
	        list.splice(index, 1);
	      }
	      element.className = list.join(' ');
	      return index >= 0;
	    }
	    if (!hasDOM) {
	      return;
	    }
	    var div = document.createElement('div');
	    if ('classList' in div) {
	      return;
	    }
	    var classListPrototype = {
	      add: function add(name) {
	        changeList(this.element, name, true, false);
	      },
	      contains: function contains(name) {
	        return changeList(this.element, name, false, false);
	      },
	      remove: function remove(name) {
	        changeList(this.element, name, false, true);
	      },
	      toggle: function toggle(name) {
	        changeList(this.element, name, true, true);
	      }
	    };
	    Object.defineProperty(HTMLElement.prototype, 'classList', {
	      get: function get() {
	        if (this._classList) {
	          return this._classList;
	        }
	        var classList = Object.create(classListPrototype, {
	          element: {
	            value: this,
	            writable: false,
	            enumerable: true
	          }
	        });
	        Object.defineProperty(this, '_classList', {
	          value: classList,
	          writable: false,
	          enumerable: false
	        });
	        return classList;
	      },

	      enumerable: true
	    });
	  })();
	  (function checkWorkerConsoleCompatibility() {
	    if (typeof importScripts === 'undefined' || 'console' in globalScope) {
	      return;
	    }
	    var consoleTimer = {};
	    var workerConsole = {
	      log: function log() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_log',
	          data: args
	        });
	      },
	      error: function error() {
	        var args = Array.prototype.slice.call(arguments);
	        globalScope.postMessage({
	          targetName: 'main',
	          action: 'console_error',
	          data: args
	        });
	      },
	      time: function time(name) {
	        consoleTimer[name] = Date.now();
	      },
	      timeEnd: function timeEnd(name) {
	        var time = consoleTimer[name];
	        if (!time) {
	          throw new Error('Unknown timer name ' + name);
	        }
	        this.log('Timer:', name, Date.now() - time);
	      }
	    };
	    globalScope.console = workerConsole;
	  })();
	  (function checkConsoleCompatibility() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!('console' in window)) {
	      window.console = {
	        log: function log() {},
	        error: function error() {},
	        warn: function warn() {}
	      };
	      return;
	    }
	    if (!('bind' in console.log)) {
	      console.log = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.log);
	      console.error = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.error);
	      console.warn = function (fn) {
	        return function (msg) {
	          return fn(msg);
	        };
	      }(console.warn);
	      return;
	    }
	  })();
	  (function checkOnClickCompatibility() {
	    function ignoreIfTargetDisabled(event) {
	      if (isDisabled(event.target)) {
	        event.stopPropagation();
	      }
	    }
	    function isDisabled(node) {
	      return node.disabled || node.parentNode && isDisabled(node.parentNode);
	    }
	    if (isOpera) {
	      document.addEventListener('click', ignoreIfTargetDisabled, true);
	    }
	  })();
	  (function checkOnBlobSupport() {
	    if (isIE || isIOSChrome) {
	      PDFJS.disableCreateObjectURL = true;
	    }
	  })();
	  (function checkNavigatorLanguage() {
	    if (typeof navigator === 'undefined') {
	      return;
	    }
	    if ('language' in navigator) {
	      return;
	    }
	    PDFJS.locale = navigator.userLanguage || 'en-US';
	  })();
	  (function checkRangeRequests() {
	    if (isSafari || isAndroidPre3 || isChromeWithRangeBug || isIOS) {
	      PDFJS.disableRange = true;
	      PDFJS.disableStream = true;
	    }
	  })();
	  (function checkHistoryManipulation() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!history.pushState || isAndroidPre3) {
	      PDFJS.disableHistory = true;
	    }
	  })();
	  (function checkSetPresenceInImageData() {
	    if (!hasDOM) {
	      return;
	    }
	    if (window.CanvasPixelArray) {
	      if (typeof window.CanvasPixelArray.prototype.set !== 'function') {
	        window.CanvasPixelArray.prototype.set = function (arr) {
	          for (var i = 0, ii = this.length; i < ii; i++) {
	            this[i] = arr[i];
	          }
	        };
	      }
	    } else {
	      var polyfill = false,
	          versionMatch;
	      if (isChrome) {
	        versionMatch = userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
	        polyfill = versionMatch && parseInt(versionMatch[2]) < 21;
	      } else if (isAndroid) {
	        polyfill = isAndroidPre5;
	      } else if (isSafari) {
	        versionMatch = userAgent.match(/Version\/([0-9]+)\.([0-9]+)\.([0-9]+) Safari\//);
	        polyfill = versionMatch && parseInt(versionMatch[1]) < 6;
	      }
	      if (polyfill) {
	        var contextPrototype = window.CanvasRenderingContext2D.prototype;
	        var createImageData = contextPrototype.createImageData;
	        contextPrototype.createImageData = function (w, h) {
	          var imageData = createImageData.call(this, w, h);
	          imageData.data.set = function (arr) {
	            for (var i = 0, ii = this.length; i < ii; i++) {
	              this[i] = arr[i];
	            }
	          };
	          return imageData;
	        };
	        contextPrototype = null;
	      }
	    }
	  })();
	  (function checkRequestAnimationFrame() {
	    function installFakeAnimationFrameFunctions() {
	      window.requestAnimationFrame = function (callback) {
	        return window.setTimeout(callback, 20);
	      };
	      window.cancelAnimationFrame = function (timeoutID) {
	        window.clearTimeout(timeoutID);
	      };
	    }
	    if (!hasDOM) {
	      return;
	    }
	    if (isIOS) {
	      installFakeAnimationFrameFunctions();
	      return;
	    }
	    if ('requestAnimationFrame' in window) {
	      return;
	    }
	    window.requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
	    if (window.requestAnimationFrame) {
	      return;
	    }
	    installFakeAnimationFrameFunctions();
	  })();
	  (function checkCanvasSizeLimitation() {
	    if (isIOS || isAndroid) {
	      PDFJS.maxCanvasPixels = 5242880;
	    }
	  })();
	  (function checkFullscreenSupport() {
	    if (!hasDOM) {
	      return;
	    }
	    if (isIE && window.parent !== window) {
	      PDFJS.disableFullscreen = true;
	    }
	  })();
	  (function checkCurrentScript() {
	    if (!hasDOM) {
	      return;
	    }
	    if ('currentScript' in document) {
	      return;
	    }
	    Object.defineProperty(document, 'currentScript', {
	      get: function get() {
	        var scripts = document.getElementsByTagName('script');
	        return scripts[scripts.length - 1];
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkInputTypeNumberAssign() {
	    if (!hasDOM) {
	      return;
	    }
	    var el = document.createElement('input');
	    try {
	      el.type = 'number';
	    } catch (ex) {
	      var inputProto = el.constructor.prototype;
	      var typeProperty = Object.getOwnPropertyDescriptor(inputProto, 'type');
	      Object.defineProperty(inputProto, 'type', {
	        get: function get() {
	          return typeProperty.get.call(this);
	        },
	        set: function set(value) {
	          typeProperty.set.call(this, value === 'number' ? 'text' : value);
	        },

	        enumerable: true,
	        configurable: true
	      });
	    }
	  })();
	  (function checkDocumentReadyState() {
	    if (!hasDOM) {
	      return;
	    }
	    if (!document.attachEvent) {
	      return;
	    }
	    var documentProto = document.constructor.prototype;
	    var readyStateProto = Object.getOwnPropertyDescriptor(documentProto, 'readyState');
	    Object.defineProperty(documentProto, 'readyState', {
	      get: function get() {
	        var value = readyStateProto.get.call(this);
	        return value === 'interactive' ? 'loading' : value;
	      },
	      set: function set(value) {
	        readyStateProto.set.call(this, value);
	      },

	      enumerable: true,
	      configurable: true
	    });
	  })();
	  (function checkChildNodeRemove() {
	    if (!hasDOM) {
	      return;
	    }
	    if (typeof Element.prototype.remove !== 'undefined') {
	      return;
	    }
	    Element.prototype.remove = function () {
	      if (this.parentNode) {
	        this.parentNode.removeChild(this);
	      }
	    };
	  })();
	  (function checkPromise() {
	    if (globalScope.Promise) {
	      if (typeof globalScope.Promise.all !== 'function') {
	        globalScope.Promise.all = function (iterable) {
	          var count = 0,
	              results = [],
	              resolve,
	              reject;
	          var promise = new globalScope.Promise(function (resolve_, reject_) {
	            resolve = resolve_;
	            reject = reject_;
	          });
	          iterable.forEach(function (p, i) {
	            count++;
	            p.then(function (result) {
	              results[i] = result;
	              count--;
	              if (count === 0) {
	                resolve(results);
	              }
	            }, reject);
	          });
	          if (count === 0) {
	            resolve(results);
	          }
	          return promise;
	        };
	      }
	      if (typeof globalScope.Promise.resolve !== 'function') {
	        globalScope.Promise.resolve = function (value) {
	          return new globalScope.Promise(function (resolve) {
	            resolve(value);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.reject !== 'function') {
	        globalScope.Promise.reject = function (reason) {
	          return new globalScope.Promise(function (resolve, reject) {
	            reject(reason);
	          });
	        };
	      }
	      if (typeof globalScope.Promise.prototype.catch !== 'function') {
	        globalScope.Promise.prototype.catch = function (onReject) {
	          return globalScope.Promise.prototype.then(undefined, onReject);
	        };
	      }
	      return;
	    }
	    var STATUS_PENDING = 0;
	    var STATUS_RESOLVED = 1;
	    var STATUS_REJECTED = 2;
	    var REJECTION_TIMEOUT = 500;
	    var HandlerManager = {
	      handlers: [],
	      running: false,
	      unhandledRejections: [],
	      pendingRejectionCheck: false,
	      scheduleHandlers: function scheduleHandlers(promise) {
	        if (promise._status === STATUS_PENDING) {
	          return;
	        }
	        this.handlers = this.handlers.concat(promise._handlers);
	        promise._handlers = [];
	        if (this.running) {
	          return;
	        }
	        this.running = true;
	        setTimeout(this.runHandlers.bind(this), 0);
	      },
	      runHandlers: function runHandlers() {
	        var RUN_TIMEOUT = 1;
	        var timeoutAt = Date.now() + RUN_TIMEOUT;
	        while (this.handlers.length > 0) {
	          var handler = this.handlers.shift();
	          var nextStatus = handler.thisPromise._status;
	          var nextValue = handler.thisPromise._value;
	          try {
	            if (nextStatus === STATUS_RESOLVED) {
	              if (typeof handler.onResolve === 'function') {
	                nextValue = handler.onResolve(nextValue);
	              }
	            } else if (typeof handler.onReject === 'function') {
	              nextValue = handler.onReject(nextValue);
	              nextStatus = STATUS_RESOLVED;
	              if (handler.thisPromise._unhandledRejection) {
	                this.removeUnhandeledRejection(handler.thisPromise);
	              }
	            }
	          } catch (ex) {
	            nextStatus = STATUS_REJECTED;
	            nextValue = ex;
	          }
	          handler.nextPromise._updateStatus(nextStatus, nextValue);
	          if (Date.now() >= timeoutAt) {
	            break;
	          }
	        }
	        if (this.handlers.length > 0) {
	          setTimeout(this.runHandlers.bind(this), 0);
	          return;
	        }
	        this.running = false;
	      },
	      addUnhandledRejection: function addUnhandledRejection(promise) {
	        this.unhandledRejections.push({
	          promise: promise,
	          time: Date.now()
	        });
	        this.scheduleRejectionCheck();
	      },
	      removeUnhandeledRejection: function removeUnhandeledRejection(promise) {
	        promise._unhandledRejection = false;
	        for (var i = 0; i < this.unhandledRejections.length; i++) {
	          if (this.unhandledRejections[i].promise === promise) {
	            this.unhandledRejections.splice(i);
	            i--;
	          }
	        }
	      },
	      scheduleRejectionCheck: function scheduleRejectionCheck() {
	        var _this = this;

	        if (this.pendingRejectionCheck) {
	          return;
	        }
	        this.pendingRejectionCheck = true;
	        setTimeout(function () {
	          _this.pendingRejectionCheck = false;
	          var now = Date.now();
	          for (var i = 0; i < _this.unhandledRejections.length; i++) {
	            if (now - _this.unhandledRejections[i].time > REJECTION_TIMEOUT) {
	              var unhandled = _this.unhandledRejections[i].promise._value;
	              var msg = 'Unhandled rejection: ' + unhandled;
	              if (unhandled.stack) {
	                msg += '\n' + unhandled.stack;
	              }
	              try {
	                throw new Error(msg);
	              } catch (_) {
	                console.warn(msg);
	              }
	              _this.unhandledRejections.splice(i);
	              i--;
	            }
	          }
	          if (_this.unhandledRejections.length) {
	            _this.scheduleRejectionCheck();
	          }
	        }, REJECTION_TIMEOUT);
	      }
	    };
	    var Promise = function Promise(resolver) {
	      this._status = STATUS_PENDING;
	      this._handlers = [];
	      try {
	        resolver.call(this, this._resolve.bind(this), this._reject.bind(this));
	      } catch (e) {
	        this._reject(e);
	      }
	    };
	    Promise.all = function Promise_all(promises) {
	      var resolveAll, rejectAll;
	      var deferred = new Promise(function (resolve, reject) {
	        resolveAll = resolve;
	        rejectAll = reject;
	      });
	      var unresolved = promises.length;
	      var results = [];
	      if (unresolved === 0) {
	        resolveAll(results);
	        return deferred;
	      }
	      function reject(reason) {
	        if (deferred._status === STATUS_REJECTED) {
	          return;
	        }
	        results = [];
	        rejectAll(reason);
	      }
	      for (var i = 0, ii = promises.length; i < ii; ++i) {
	        var promise = promises[i];
	        var resolve = function (i) {
	          return function (value) {
	            if (deferred._status === STATUS_REJECTED) {
	              return;
	            }
	            results[i] = value;
	            unresolved--;
	            if (unresolved === 0) {
	              resolveAll(results);
	            }
	          };
	        }(i);
	        if (Promise.isPromise(promise)) {
	          promise.then(resolve, reject);
	        } else {
	          resolve(promise);
	        }
	      }
	      return deferred;
	    };
	    Promise.isPromise = function Promise_isPromise(value) {
	      return value && typeof value.then === 'function';
	    };
	    Promise.resolve = function Promise_resolve(value) {
	      return new Promise(function (resolve) {
	        resolve(value);
	      });
	    };
	    Promise.reject = function Promise_reject(reason) {
	      return new Promise(function (resolve, reject) {
	        reject(reason);
	      });
	    };
	    Promise.prototype = {
	      _status: null,
	      _value: null,
	      _handlers: null,
	      _unhandledRejection: null,
	      _updateStatus: function Promise__updateStatus(status, value) {
	        if (this._status === STATUS_RESOLVED || this._status === STATUS_REJECTED) {
	          return;
	        }
	        if (status === STATUS_RESOLVED && Promise.isPromise(value)) {
	          value.then(this._updateStatus.bind(this, STATUS_RESOLVED), this._updateStatus.bind(this, STATUS_REJECTED));
	          return;
	        }
	        this._status = status;
	        this._value = value;
	        if (status === STATUS_REJECTED && this._handlers.length === 0) {
	          this._unhandledRejection = true;
	          HandlerManager.addUnhandledRejection(this);
	        }
	        HandlerManager.scheduleHandlers(this);
	      },
	      _resolve: function Promise_resolve(value) {
	        this._updateStatus(STATUS_RESOLVED, value);
	      },
	      _reject: function Promise_reject(reason) {
	        this._updateStatus(STATUS_REJECTED, reason);
	      },
	      then: function Promise_then(onResolve, onReject) {
	        var nextPromise = new Promise(function (resolve, reject) {
	          this.resolve = resolve;
	          this.reject = reject;
	        });
	        this._handlers.push({
	          thisPromise: this,
	          onResolve: onResolve,
	          onReject: onReject,
	          nextPromise: nextPromise
	        });
	        HandlerManager.scheduleHandlers(this);
	        return nextPromise;
	      },
	      catch: function Promise_catch(onReject) {
	        return this.then(undefined, onReject);
	      }
	    };
	    globalScope.Promise = Promise;
	  })();
	  (function checkWeakMap() {
	    if (globalScope.WeakMap) {
	      return;
	    }
	    var id = 0;
	    function WeakMap() {
	      this.id = '$weakmap' + id++;
	    }
	    WeakMap.prototype = {
	      has: function has(obj) {
	        return !!Object.getOwnPropertyDescriptor(obj, this.id);
	      },
	      get: function get(obj, defaultValue) {
	        return this.has(obj) ? obj[this.id] : defaultValue;
	      },
	      set: function set(obj, value) {
	        Object.defineProperty(obj, this.id, {
	          value: value,
	          enumerable: false,
	          configurable: true
	        });
	      },
	      delete: function _delete(obj) {
	        delete obj[this.id];
	      }
	    };
	    globalScope.WeakMap = WeakMap;
	  })();
	  (function checkURLConstructor() {
	    var hasWorkingUrl = false;
	    try {
	      if (typeof URL === 'function' && _typeof(URL.prototype) === 'object' && 'origin' in URL.prototype) {
	        var u = new URL('b', 'http://a');
	        u.pathname = 'c%20d';
	        hasWorkingUrl = u.href === 'http://a/c%20d';
	      }
	    } catch (e) {}
	    if (hasWorkingUrl) {
	      return;
	    }
	    var relative = Object.create(null);
	    relative['ftp'] = 21;
	    relative['file'] = 0;
	    relative['gopher'] = 70;
	    relative['http'] = 80;
	    relative['https'] = 443;
	    relative['ws'] = 80;
	    relative['wss'] = 443;
	    var relativePathDotMapping = Object.create(null);
	    relativePathDotMapping['%2e'] = '.';
	    relativePathDotMapping['.%2e'] = '..';
	    relativePathDotMapping['%2e.'] = '..';
	    relativePathDotMapping['%2e%2e'] = '..';
	    function isRelativeScheme(scheme) {
	      return relative[scheme] !== undefined;
	    }
	    function invalid() {
	      clear.call(this);
	      this._isInvalid = true;
	    }
	    function IDNAToASCII(h) {
	      if (h === '') {
	        invalid.call(this);
	      }
	      return h.toLowerCase();
	    }
	    function percentEscape(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    function percentEscapeQuery(c) {
	      var unicode = c.charCodeAt(0);
	      if (unicode > 0x20 && unicode < 0x7F && [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1) {
	        return c;
	      }
	      return encodeURIComponent(c);
	    }
	    var EOF,
	        ALPHA = /[a-zA-Z]/,
	        ALPHANUMERIC = /[a-zA-Z0-9\+\-\.]/;
	    function parse(input, stateOverride, base) {
	      function err(message) {
	        errors.push(message);
	      }
	      var state = stateOverride || 'scheme start',
	          cursor = 0,
	          buffer = '',
	          seenAt = false,
	          seenBracket = false,
	          errors = [];
	      loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {
	        var c = input[cursor];
	        switch (state) {
	          case 'scheme start':
	            if (c && ALPHA.test(c)) {
	              buffer += c.toLowerCase();
	              state = 'scheme';
	            } else if (!stateOverride) {
	              buffer = '';
	              state = 'no scheme';
	              continue;
	            } else {
	              err('Invalid scheme.');
	              break loop;
	            }
	            break;
	          case 'scheme':
	            if (c && ALPHANUMERIC.test(c)) {
	              buffer += c.toLowerCase();
	            } else if (c === ':') {
	              this._scheme = buffer;
	              buffer = '';
	              if (stateOverride) {
	                break loop;
	              }
	              if (isRelativeScheme(this._scheme)) {
	                this._isRelative = true;
	              }
	              if (this._scheme === 'file') {
	                state = 'relative';
	              } else if (this._isRelative && base && base._scheme === this._scheme) {
	                state = 'relative or authority';
	              } else if (this._isRelative) {
	                state = 'authority first slash';
	              } else {
	                state = 'scheme data';
	              }
	            } else if (!stateOverride) {
	              buffer = '';
	              cursor = 0;
	              state = 'no scheme';
	              continue;
	            } else if (c === EOF) {
	              break loop;
	            } else {
	              err('Code point not allowed in scheme: ' + c);
	              break loop;
	            }
	            break;
	          case 'scheme data':
	            if (c === '?') {
	              this._query = '?';
	              state = 'query';
	            } else if (c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else {
	              if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	                this._schemeData += percentEscape(c);
	              }
	            }
	            break;
	          case 'no scheme':
	            if (!base || !isRelativeScheme(base._scheme)) {
	              err('Missing scheme.');
	              invalid.call(this);
	            } else {
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative or authority':
	            if (c === '/' && input[cursor + 1] === '/') {
	              state = 'authority ignore slashes';
	            } else {
	              err('Expected /, got: ' + c);
	              state = 'relative';
	              continue;
	            }
	            break;
	          case 'relative':
	            this._isRelative = true;
	            if (this._scheme !== 'file') {
	              this._scheme = base._scheme;
	            }
	            if (c === EOF) {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._username = base._username;
	              this._password = base._password;
	              break loop;
	            } else if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              state = 'relative slash';
	            } else if (c === '?') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = '?';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'query';
	            } else if (c === '#') {
	              this._host = base._host;
	              this._port = base._port;
	              this._path = base._path.slice();
	              this._query = base._query;
	              this._fragment = '#';
	              this._username = base._username;
	              this._password = base._password;
	              state = 'fragment';
	            } else {
	              var nextC = input[cursor + 1];
	              var nextNextC = input[cursor + 2];
	              if (this._scheme !== 'file' || !ALPHA.test(c) || nextC !== ':' && nextC !== '|' || nextNextC !== EOF && nextNextC !== '/' && nextNextC !== '\\' && nextNextC !== '?' && nextNextC !== '#') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	                this._path = base._path.slice();
	                this._path.pop();
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'relative slash':
	            if (c === '/' || c === '\\') {
	              if (c === '\\') {
	                err('\\ is an invalid code point.');
	              }
	              if (this._scheme === 'file') {
	                state = 'file host';
	              } else {
	                state = 'authority ignore slashes';
	              }
	            } else {
	              if (this._scheme !== 'file') {
	                this._host = base._host;
	                this._port = base._port;
	                this._username = base._username;
	                this._password = base._password;
	              }
	              state = 'relative path';
	              continue;
	            }
	            break;
	          case 'authority first slash':
	            if (c === '/') {
	              state = 'authority second slash';
	            } else {
	              err('Expected \'/\', got: ' + c);
	              state = 'authority ignore slashes';
	              continue;
	            }
	            break;
	          case 'authority second slash':
	            state = 'authority ignore slashes';
	            if (c !== '/') {
	              err('Expected \'/\', got: ' + c);
	              continue;
	            }
	            break;
	          case 'authority ignore slashes':
	            if (c !== '/' && c !== '\\') {
	              state = 'authority';
	              continue;
	            } else {
	              err('Expected authority, got: ' + c);
	            }
	            break;
	          case 'authority':
	            if (c === '@') {
	              if (seenAt) {
	                err('@ already seen.');
	                buffer += '%40';
	              }
	              seenAt = true;
	              for (var i = 0; i < buffer.length; i++) {
	                var cp = buffer[i];
	                if (cp === '\t' || cp === '\n' || cp === '\r') {
	                  err('Invalid whitespace in authority.');
	                  continue;
	                }
	                if (cp === ':' && this._password === null) {
	                  this._password = '';
	                  continue;
	                }
	                var tempC = percentEscape(cp);
	                if (this._password !== null) {
	                  this._password += tempC;
	                } else {
	                  this._username += tempC;
	                }
	              }
	              buffer = '';
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              cursor -= buffer.length;
	              buffer = '';
	              state = 'host';
	              continue;
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'file host':
	            if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              if (buffer.length === 2 && ALPHA.test(buffer[0]) && (buffer[1] === ':' || buffer[1] === '|')) {
	                state = 'relative path';
	              } else if (buffer.length === 0) {
	                state = 'relative path start';
	              } else {
	                this._host = IDNAToASCII.call(this, buffer);
	                buffer = '';
	                state = 'relative path start';
	              }
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid whitespace in file host.');
	            } else {
	              buffer += c;
	            }
	            break;
	          case 'host':
	          case 'hostname':
	            if (c === ':' && !seenBracket) {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'port';
	              if (stateOverride === 'hostname') {
	                break loop;
	              }
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#') {
	              this._host = IDNAToASCII.call(this, buffer);
	              buffer = '';
	              state = 'relative path start';
	              if (stateOverride) {
	                break loop;
	              }
	              continue;
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              if (c === '[') {
	                seenBracket = true;
	              } else if (c === ']') {
	                seenBracket = false;
	              }
	              buffer += c;
	            } else {
	              err('Invalid code point in host/hostname: ' + c);
	            }
	            break;
	          case 'port':
	            if (/[0-9]/.test(c)) {
	              buffer += c;
	            } else if (c === EOF || c === '/' || c === '\\' || c === '?' || c === '#' || stateOverride) {
	              if (buffer !== '') {
	                var temp = parseInt(buffer, 10);
	                if (temp !== relative[this._scheme]) {
	                  this._port = temp + '';
	                }
	                buffer = '';
	              }
	              if (stateOverride) {
	                break loop;
	              }
	              state = 'relative path start';
	              continue;
	            } else if (c === '\t' || c === '\n' || c === '\r') {
	              err('Invalid code point in port: ' + c);
	            } else {
	              invalid.call(this);
	            }
	            break;
	          case 'relative path start':
	            if (c === '\\') {
	              err('\'\\\' not allowed in path.');
	            }
	            state = 'relative path';
	            if (c !== '/' && c !== '\\') {
	              continue;
	            }
	            break;
	          case 'relative path':
	            if (c === EOF || c === '/' || c === '\\' || !stateOverride && (c === '?' || c === '#')) {
	              if (c === '\\') {
	                err('\\ not allowed in relative path.');
	              }
	              var tmp;
	              if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {
	                buffer = tmp;
	              }
	              if (buffer === '..') {
	                this._path.pop();
	                if (c !== '/' && c !== '\\') {
	                  this._path.push('');
	                }
	              } else if (buffer === '.' && c !== '/' && c !== '\\') {
	                this._path.push('');
	              } else if (buffer !== '.') {
	                if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 && ALPHA.test(buffer[0]) && buffer[1] === '|') {
	                  buffer = buffer[0] + ':';
	                }
	                this._path.push(buffer);
	              }
	              buffer = '';
	              if (c === '?') {
	                this._query = '?';
	                state = 'query';
	              } else if (c === '#') {
	                this._fragment = '#';
	                state = 'fragment';
	              }
	            } else if (c !== '\t' && c !== '\n' && c !== '\r') {
	              buffer += percentEscape(c);
	            }
	            break;
	          case 'query':
	            if (!stateOverride && c === '#') {
	              this._fragment = '#';
	              state = 'fragment';
	            } else if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._query += percentEscapeQuery(c);
	            }
	            break;
	          case 'fragment':
	            if (c !== EOF && c !== '\t' && c !== '\n' && c !== '\r') {
	              this._fragment += c;
	            }
	            break;
	        }
	        cursor++;
	      }
	    }
	    function clear() {
	      this._scheme = '';
	      this._schemeData = '';
	      this._username = '';
	      this._password = null;
	      this._host = '';
	      this._port = '';
	      this._path = [];
	      this._query = '';
	      this._fragment = '';
	      this._isInvalid = false;
	      this._isRelative = false;
	    }
	    function JURL(url, base) {
	      if (base !== undefined && !(base instanceof JURL)) {
	        base = new JURL(String(base));
	      }
	      this._url = url;
	      clear.call(this);
	      var input = url.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, '');
	      parse.call(this, input, null, base);
	    }
	    JURL.prototype = {
	      toString: function toString() {
	        return this.href;
	      },

	      get href() {
	        if (this._isInvalid) {
	          return this._url;
	        }
	        var authority = '';
	        if (this._username !== '' || this._password !== null) {
	          authority = this._username + (this._password !== null ? ':' + this._password : '') + '@';
	        }
	        return this.protocol + (this._isRelative ? '//' + authority + this.host : '') + this.pathname + this._query + this._fragment;
	      },
	      set href(href) {
	        clear.call(this);
	        parse.call(this, href);
	      },
	      get protocol() {
	        return this._scheme + ':';
	      },
	      set protocol(protocol) {
	        if (this._isInvalid) {
	          return;
	        }
	        parse.call(this, protocol + ':', 'scheme start');
	      },
	      get host() {
	        return this._isInvalid ? '' : this._port ? this._host + ':' + this._port : this._host;
	      },
	      set host(host) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, host, 'host');
	      },
	      get hostname() {
	        return this._host;
	      },
	      set hostname(hostname) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, hostname, 'hostname');
	      },
	      get port() {
	        return this._port;
	      },
	      set port(port) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        parse.call(this, port, 'port');
	      },
	      get pathname() {
	        return this._isInvalid ? '' : this._isRelative ? '/' + this._path.join('/') : this._schemeData;
	      },
	      set pathname(pathname) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._path = [];
	        parse.call(this, pathname, 'relative path start');
	      },
	      get search() {
	        return this._isInvalid || !this._query || this._query === '?' ? '' : this._query;
	      },
	      set search(search) {
	        if (this._isInvalid || !this._isRelative) {
	          return;
	        }
	        this._query = '?';
	        if (search[0] === '?') {
	          search = search.slice(1);
	        }
	        parse.call(this, search, 'query');
	      },
	      get hash() {
	        return this._isInvalid || !this._fragment || this._fragment === '#' ? '' : this._fragment;
	      },
	      set hash(hash) {
	        if (this._isInvalid) {
	          return;
	        }
	        this._fragment = '#';
	        if (hash[0] === '#') {
	          hash = hash.slice(1);
	        }
	        parse.call(this, hash, 'fragment');
	      },
	      get origin() {
	        var host;
	        if (this._isInvalid || !this._scheme) {
	          return '';
	        }
	        switch (this._scheme) {
	          case 'data':
	          case 'file':
	          case 'javascript':
	          case 'mailto':
	            return 'null';
	        }
	        host = this.host;
	        if (!host) {
	          return '';
	        }
	        return this._scheme + '://' + host;
	      }
	    };
	    var OriginalURL = globalScope.URL;
	    if (OriginalURL) {
	      JURL.createObjectURL = function (blob) {
	        return OriginalURL.createObjectURL.apply(OriginalURL, arguments);
	      };
	      JURL.revokeObjectURL = function (url) {
	        OriginalURL.revokeObjectURL(url);
	      };
	    }
	    globalScope.URL = JURL;
	  })();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __w_pdfjs_require__(9)))

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=pdf.worker.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _SortableComposition = __webpack_require__(189);

	Object.defineProperty(exports, 'sortable', {
	  enumerable: true,
	  get: function get() {
	    return _SortableComposition.SortableComposition;
	  }
	});

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.swapArrayElements = swapArrayElements;
	exports.isMouseBeyond = isMouseBeyond;
	exports.SortableComposition = SortableComposition;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*** Helper functions - they are decoupled from component itself for testability */

	/**
	 * @param {array} items
	 * @param {number} indexFrom
	 * @param {number} indexTo
	 * @returns {array}
	 */
	function swapArrayElements(items, indexFrom, indexTo) {
	  var item = items[indexTo];
	  items[indexTo] = items[indexFrom];
	  items[indexFrom] = item;
	  return items;
	}

	/**
	 * @param {number} mousePos
	 * @param {number} elementPos
	 * @param {number} elementSize
	 * @returns {boolean}
	 */
	function isMouseBeyond(mousePos, elementPos, elementSize) {
	  //TODO refactor for UP
	  var breakPoint = elementSize / 2; //break point is set to the middle line of element
	  var mouseOverlap = mousePos - elementPos;
	  return mouseOverlap > breakPoint;
	}

	/*** Higher-order component - this component works like a factory for draggable items */

	function SortableComposition(Component) {

	  var elementEdge = 0;
	  var updateEdge = true;

	  return _react2.default.createClass({

	    proptypes: {
	      items: _react2.default.PropTypes.array.isRequired,
	      updateState: _react2.default.PropTypes.func.isRequired,
	      sortId: _react2.default.PropTypes.number,
	      outline: _react2.default.PropTypes.string.isRequired, // list | grid
	      draggingIndex: _react2.default.PropTypes.number,
	      childProps: _react2.default.PropTypes.object
	    },

	    getInitialState: function getInitialState() {
	      return {
	        draggingIndex: null
	      };
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	      this.setState({
	        draggingIndex: nextProps.draggingIndex
	      });
	    },
	    sortEnd: function sortEnd(e) {
	      e.preventDefault();
	      this.props.updateState({
	        draggingIndex: null
	      });
	    },
	    sortStart: function sortStart(e) {
	      var draggingIndex = e.currentTarget.dataset.id;

	      this.props.updateState({
	        draggingIndex: draggingIndex
	      });
	      this.setState({
	        draggingIndex: draggingIndex
	      });

	      var dt = e.dataTransfer;
	      if (dt !== undefined) {
	        e.dataTransfer.setData('text', e.target);

	        //fix http://stackoverflow.com/questions/27656183/preserve-appearance-of-dragged-a-element-when-using-html5-draggable-attribute
	        if (dt.setDragImage && e.currentTarget.tagName.toLowerCase() === 'a') {
	          dt.setDragImage(e.target, 0, 0);
	        }
	      }
	      updateEdge = true;
	    },
	    dragOver: function dragOver(e) {
	      e.preventDefault();
	      var mouseBeyond;
	      var positionX, positionY;
	      var height, topOffset;
	      var items = this.props.items;
	      var overEl = e.currentTarget; //underlying element //TODO: not working for touch
	      var indexDragged = Number(overEl.dataset.id); //index of underlying element in the set DOM elements
	      var indexFrom = Number(this.state.draggingIndex);

	      height = overEl.getBoundingClientRect().height;

	      positionX = e.clientX;
	      positionY = e.clientY;
	      topOffset = overEl.getBoundingClientRect().top;

	      if (this.props.outline === "list") {
	        mouseBeyond = isMouseBeyond(positionY, topOffset, height);
	      }

	      if (this.props.outline === "grid") {
	        mouseBeyond = isMouseBeyond(positionX, overEl.getBoundingClientRect().left, overEl.getBoundingClientRect().width);
	      }

	      if (indexDragged !== indexFrom && mouseBeyond) {
	        items = swapArrayElements(items, indexFrom, indexDragged);
	        this.props.updateState({
	          items: items, draggingIndex: indexDragged
	        });
	      }
	    },
	    isDragging: function isDragging() {
	      return this.props.draggingIndex == this.props.sortId;
	    },
	    render: function render() {
	      var draggingClassName = Component.displayName + "-dragging";
	      return _react2.default.createElement(Component, _extends({
	        className: this.isDragging() ? draggingClassName : "",
	        draggable: true,
	        onDragOver: this.dragOver,
	        onDragStart: this.sortStart,
	        onDragEnd: this.sortEnd,
	        onDrop: function onDrop(e) {
	          e.preventDefault();
	        },
	        onTouchStart: this.sortStart,
	        onTouchMove: this.dragOver,
	        onTouchEnd: this.sortEnd,
	        children: this.props.children,
	        'data-id': this.props.sortId
	      }, this.props.childProps || {}));
	    }
	  });
	}

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Draft
	 */

	'use strict';

	var AtomicBlockUtils = __webpack_require__(191);
	var BlockMapBuilder = __webpack_require__(192);
	var CharacterMetadata = __webpack_require__(194);
	var CompositeDraftDecorator = __webpack_require__(227);
	var ContentBlock = __webpack_require__(195);
	var ContentState = __webpack_require__(217);
	var DefaultDraftBlockRenderMap = __webpack_require__(228);
	var DefaultDraftInlineStyle = __webpack_require__(230);
	var DraftEditor = __webpack_require__(231);
	var DraftEditorBlock = __webpack_require__(237);
	var DraftEntity = __webpack_require__(218);
	var DraftModifier = __webpack_require__(197);
	var DraftEntityInstance = __webpack_require__(219);
	var EditorState = __webpack_require__(214);
	var KeyBindingUtil = __webpack_require__(288);
	var RichTextEditorUtil = __webpack_require__(319);
	var SelectionState = __webpack_require__(220);

	var convertFromDraftStateToRaw = __webpack_require__(321);
	var convertFromHTMLToContentBlocks = __webpack_require__(311);
	var convertFromRawToDraftState = __webpack_require__(325);
	var generateRandomKey = __webpack_require__(206);
	var getDefaultKeyBinding = __webpack_require__(318);
	var getVisibleSelectionRect = __webpack_require__(329);

	var DraftPublic = {
	  Editor: DraftEditor,
	  EditorBlock: DraftEditorBlock,
	  EditorState: EditorState,

	  CompositeDecorator: CompositeDraftDecorator,
	  Entity: DraftEntity,
	  EntityInstance: DraftEntityInstance,

	  BlockMapBuilder: BlockMapBuilder,
	  CharacterMetadata: CharacterMetadata,
	  ContentBlock: ContentBlock,
	  ContentState: ContentState,
	  SelectionState: SelectionState,

	  AtomicBlockUtils: AtomicBlockUtils,
	  KeyBindingUtil: KeyBindingUtil,
	  Modifier: DraftModifier,
	  RichUtils: RichTextEditorUtil,

	  DefaultDraftBlockRenderMap: DefaultDraftBlockRenderMap,
	  DefaultDraftInlineStyle: DefaultDraftInlineStyle,

	  convertFromHTML: convertFromHTMLToContentBlocks,
	  convertFromRaw: convertFromRawToDraftState,
	  convertToRaw: convertFromDraftStateToRaw,
	  genKey: generateRandomKey,
	  getDefaultKeyBinding: getDefaultKeyBinding,
	  getVisibleSelectionRect: getVisibleSelectionRect
	};

	module.exports = DraftPublic;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AtomicBlockUtils
	 * @typechecks
	 * 
	 */

	'use strict';

	var BlockMapBuilder = __webpack_require__(192);
	var CharacterMetadata = __webpack_require__(194);
	var ContentBlock = __webpack_require__(195);
	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);
	var Immutable = __webpack_require__(193);

	var generateRandomKey = __webpack_require__(206);

	var List = Immutable.List;
	var Repeat = Immutable.Repeat;


	var AtomicBlockUtils = {
	  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {
	    var contentState = editorState.getCurrentContent();
	    var selectionState = editorState.getSelection();

	    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');

	    var targetSelection = afterRemoval.getSelectionAfter();
	    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);
	    var insertionTarget = afterSplit.getSelectionAfter();

	    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');

	    var charData = CharacterMetadata.create({ entity: entityKey });

	    var fragmentArray = [new ContentBlock({
	      key: generateRandomKey(),
	      type: 'atomic',
	      text: character,
	      characterList: List(Repeat(charData, character.length))
	    }), new ContentBlock({
	      key: generateRandomKey(),
	      type: 'unstyled',
	      text: '',
	      characterList: List()
	    })];

	    var fragment = BlockMapBuilder.createFromArray(fragmentArray);

	    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);

	    var newContent = withAtomicBlock.merge({
	      selectionBefore: selectionState,
	      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)
	    });

	    return EditorState.push(editorState, newContent, 'insert-fragment');
	  }
	};

	module.exports = AtomicBlockUtils;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BlockMapBuilder
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	var OrderedMap = Immutable.OrderedMap;


	var BlockMapBuilder = {
	  createFromArray: function createFromArray(blocks) {
	    return OrderedMap(blocks.map(function (block) {
	      return [block.getKey(), block];
	    }));
	  }
	};

	module.exports = BlockMapBuilder;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */

	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  global.Immutable = factory();
	}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }

	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }


	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }


	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }


	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }



	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }

	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }

	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }

	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }

	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }

	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;

	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;


	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';

	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;

	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};

	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };

	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }

	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }

	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}

	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }

	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }

	  function wrapIndex(iter, index) {
	    // This implements "is array index" which the ECMAString spec defines as:
	    //
	    //     A String property name P is an array index if and only if
	    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	    //     to 2^32−1.
	    //
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	    if (typeof index !== 'number') {
	      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	      if ('' + uint32Index !== index || uint32Index === 4294967295) {
	        return NaN;
	      }
	      index = uint32Index;
	    }
	    return index < 0 ? ensureSize(iter) + index : index;
	  }

	  function returnTrue() {
	    return true;
	  }

	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }

	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }

	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }

	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }

	  /* global Symbol */

	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;

	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';

	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


	  function Iterator(next) {
	      this.next = next;
	    }

	    Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };


	  Iterator.KEYS = ITERATE_KEYS;
	  Iterator.VALUES = ITERATE_VALUES;
	  Iterator.ENTRIES = ITERATE_ENTRIES;

	  Iterator.prototype.inspect =
	  Iterator.prototype.toSource = function () { return this.toString(); }
	  Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };


	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }

	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }

	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }

	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }

	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }

	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }

	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }

	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };

	    Seq.prototype.toSeq = function() {
	      return this;
	    };

	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };

	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };

	    // abstract __iterateUncached(fn, reverse)

	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };

	    // abstract __iteratorUncached(type, reverse)

	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };



	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }

	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };



	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }

	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };

	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };

	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };

	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };

	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };



	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }

	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };

	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };



	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;

	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

	  Seq.prototype[IS_SEQ_SENTINEL] = true;



	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }

	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };

	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };



	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }

	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };

	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };

	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };

	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }

	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };

	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };



	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }

	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };

	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };




	  // # pragma Helper functions

	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }

	  var EMPTY_SEQ;

	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }

	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }

	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }

	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }

	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }

	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }

	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }

	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }

	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }

	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	        return true;
	      }
	      if (!valueA || !valueB) {
	        return false;
	      }
	    }
	    if (typeof valueA.equals === 'function' &&
	        typeof valueB.equals === 'function' &&
	        valueA.equals(valueB)) {
	      return true;
	    }
	    return false;
	  }

	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }

	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }

	    var notAssociative = !isAssociative(a);

	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }

	    var flipped = false;

	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        if (typeof a.cacheResult === 'function') {
	          a.cacheResult();
	        }
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }

	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });

	    return allEqual && a.size === bSize;
	  }

	  createClass(Repeat, IndexedSeq);

	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }

	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };

	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };

	    Repeat.prototype.includes = function(searchValue) {
	      return is(this._value, searchValue);
	    };

	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };

	    Repeat.prototype.reverse = function() {
	      return this;
	    };

	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };

	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };

	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };

	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };


	  var EMPTY_REPEAT;

	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }

	  createClass(Range, IndexedSeq);

	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }

	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step > 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };

	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };

	    Range.prototype.includes = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };

	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };

	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };

	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };

	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };

	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };

	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };


	  var EMPTY_RANGE;

	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }


	  createClass(KeyedCollection, Collection);function KeyedCollection() {}

	  createClass(IndexedCollection, Collection);function IndexedCollection() {}

	  createClass(SetCollection, Collection);function SetCollection() {}


	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;

	  var imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };

	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }

	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    if (type === 'object') {
	      return hashJSObj(o);
	    }
	    if (typeof o.toString === 'function') {
	      return hashString(o.toString());
	    }
	    throw new Error('Value type ' + type + ' cannot be hashed.');
	  }

	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }

	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }

	  function hashJSObj(obj) {
	    var hash;
	    if (usingWeakMap) {
	      hash = weakMap.get(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = obj[UID_HASH_KEY];
	    if (hash !== undefined) {
	      return hash;
	    }

	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash !== undefined) {
	        return hash;
	      }

	      hash = getIENodeHash(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }

	    if (usingWeakMap) {
	      weakMap.set(obj, hash);
	    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable !== undefined &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType !== undefined) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }

	    return hash;
	  }

	  // Get references to ES5 object methods.
	  var isExtensible = Object.isExtensible;

	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());

	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }

	  // If possible, use a WeakMap.
	  var usingWeakMap = typeof WeakMap === 'function';
	  var weakMap;
	  if (usingWeakMap) {
	    weakMap = new WeakMap();
	  }

	  var objHashUID = 0;

	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }

	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};

	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }

	  createClass(Map, KeyedCollection);

	    // @pragma Construction

	    function Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) && !isOrdered(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };

	    // @pragma Access

	    Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };

	    // @pragma Modification

	    Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };

	    Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };

	    Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };

	    Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };

	    Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };

	    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };

	    Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };

	    // @pragma Composition

	    Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };

	    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };

	    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.merge === 'function' ?
	          m.merge.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger, arguments);
	    };

	    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
	    };

	    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.mergeDeep === 'function' ?
	          m.mergeDeep.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };

	    Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };

	    // @pragma Mutability

	    Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };

	    Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };

	    Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };

	    Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };

	    Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };

	    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };

	    Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };


	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }

	  Map.isMap = isMap;

	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

	  var MapPrototype = Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;


	  // #pragma Trie Nodes



	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }

	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && entries.length === 1) {
	        return; // undefined
	      }

	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new ArrayMapNode(ownerID, newEntries);
	    };




	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }

	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };

	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;

	      if (!exists && value === NOT_SET) {
	        return this;
	      }

	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

	      if (newNode === node) {
	        return this;
	      }

	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }

	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }

	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };




	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }

	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };

	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];

	      if (removed && !node) {
	        return this;
	      }

	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }

	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };




	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }

	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }

	      var removed = value === NOT_SET;

	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };




	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }

	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };

	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }

	      SetRef(didAlter);

	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }

	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }

	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };



	  // #pragma Iterators

	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  }

	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  }

	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  }

	  createClass(MapIterator, Iterator);

	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }

	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };


	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }

	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }

	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }

	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }

	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }

	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }

	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }

	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }

	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }

	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }

	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }

	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }

	  function deepMerger(existing, value, key) {
	    return existing && existing.mergeDeep && isIterable(value) ?
	      existing.mergeDeep(value) :
	      is(existing, value) ? existing : value;
	  }

	  function deepMergerWith(merger) {
	    return function(existing, value, key)  {
	      if (existing && existing.mergeDeepWith && isIterable(value)) {
	        return existing.mergeDeepWith(merger, value);
	      }
	      var nextValue = merger(existing, value, key);
	      return is(existing, nextValue) ? existing : nextValue;
	    };
	  }

	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value, key)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        }
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }

	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }

	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }

	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }

	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }

	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }

	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	  createClass(List, IndexedCollection);

	    // @pragma Construction

	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }

	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };

	    // @pragma Access

	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index >= 0 && index < this.size) {
	        index += this._origin;
	        var node = listNodeFor(this, index);
	        return node && node.array[index & MASK];
	      }
	      return notSetValue;
	    };

	    // @pragma Modification

	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };

	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };

	    List.prototype.insert = function(index, value) {
	      return this.splice(index, 0, value);
	    };

	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };

	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };

	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };

	    // @pragma Composition

	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };

	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };

	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger, arguments);
	    };

	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMergerWith(merger), iters);
	    };

	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };

	    // @pragma Iteration

	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };

	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };

	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };

	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };


	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }

	  List.isList = isList;

	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;



	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }

	    // TODO: seems like these methods are very similar

	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };

	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }

	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	          return this;
	        }
	      }

	      var editable = editableVNode(this, ownerID);
	      editable.array.splice(sizeIndex + 1);
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };



	  var DONE = {};

	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;

	    return iterateNodeOrLeaf(list._root, list._level, 0);

	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }

	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }

	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }

	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }

	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }

	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);

	    if (index !== index) {
	      return list;
	    }

	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value)
	      });
	    }

	    index += list._origin;

	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }

	    if (!didAlter.value) {
	      return list;
	    }

	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }

	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }

	    var newNode;

	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }

	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }

	    SetRef(didAlter);

	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }

	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }

	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }

	  function setListBounds(list, begin, end) {
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }

	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }

	    var newLevel = list._level;
	    var newRoot = list._root;

	    // New origin might need creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }

	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);

	    // New size might need creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }

	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }

	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }

	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;

	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }

	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }

	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }

	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }

	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }

	  createClass(OrderedMap, Map);

	    // @pragma Construction

	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };

	    // @pragma Access

	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };

	    // @pragma Modification

	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };

	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };

	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };

	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };

	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };

	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };

	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };


	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }

	  OrderedMap.isOrderedMap = isOrderedMap;

	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }

	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }

	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }

	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }

	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };

	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };

	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };

	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };

	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };

	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          ((ii = reverse ? resolveSize(this) : 0),
	            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };

	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };

	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToIndexedSequence.prototype.includes = function(value) {
	      return this._iter.includes(value);
	    };

	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };

	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };



	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.includes(key);
	    };

	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };

	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };



	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }

	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };

	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedIterable = isIterable(entry);
	          return fn(
	            indexedIterable ? entry.get(1) : entry[1],
	            indexedIterable ? entry.get(0) : entry[0],
	            this$0
	          );
	        }
	      }, reverse);
	    };

	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            var indexedIterable = isIterable(entry);
	            return iteratorValue(
	              type,
	              indexedIterable ? entry.get(0) : entry[0],
	              indexedIterable ? entry.get(1) : entry[1],
	              step
	            );
	          }
	        }
	      });
	    };


	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;


	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.includes(key)};
	    flipSequence.includes = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    }
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    }
	    return flipSequence;
	  }


	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    }
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    }
	    return mappedSequence;
	  }


	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.includes = function(value ) {return iterable.includes(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }


	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    }
	    return filterSequence;
	  }


	  function countByFactory(iterable, grouper, context) {
	    var groups = Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }


	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }


	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;

	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }

	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }

	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);

	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size and these do not resolve to NaN.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }

	    // Note: resolvedEnd is undefined when the original sequence's length is
	    // unknown and this slice did not supply an end and should contain all
	    // elements after resolvedBegin.
	    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	    var resolvedSize = resolvedEnd - resolvedBegin;
	    var sliceSize;
	    if (resolvedSize === resolvedSize) {
	      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	    }

	    var sliceSeq = makeSequence(iterable);

	    // If iterable.size is undefined, the size of the realized sliceSeq is
	    // unknown at this point unless the number of items to slice is 0
	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      }
	    }

	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };

	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize !== 0 && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (skipped++ < resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    }

	    return sliceSeq;
	  }


	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }


	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }


	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});

	    if (iters.length === 0) {
	      return iterable;
	    }

	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }

	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }


	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    }
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    }
	    return flatSequence;
	  }


	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }


	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }


	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }


	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }

	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }


	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }


	  // #pragma Helper Functions

	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }

	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }

	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }

	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }

	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }

	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }

	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }

	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }

	  createClass(Record, KeyedCollection);

	    function Record(defaultValues, name) {
	      var hasInitialized;

	      var RecordType = function Record(values) {
	        if (values instanceof RecordType) {
	          return values;
	        }
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        if (!hasInitialized) {
	          hasInitialized = true;
	          var keys = Object.keys(defaultValues);
	          setProps(RecordTypePrototype, keys);
	          RecordTypePrototype.size = keys.length;
	          RecordTypePrototype._name = name;
	          RecordTypePrototype._keys = keys;
	          RecordTypePrototype._defaultValues = defaultValues;
	        }
	        this._map = Map(values);
	      };

	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;

	      return RecordType;
	    }

	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };

	    // @pragma Access

	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };

	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };

	    // @pragma Modification

	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var RecordType = this.constructor;
	      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
	    };

	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };

	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };

	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };


	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;


	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }

	  function recordName(record) {
	    return record._name || record.constructor.name || 'Record';
	  }

	  function setProps(prototype, names) {
	    try {
	      names.forEach(setProp.bind(undefined, prototype));
	    } catch (error) {
	      // Object.defineProperty failed. Probably IE8.
	    }
	  }

	  function setProp(prototype, name) {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      }
	    });
	  }

	  createClass(Set, SetCollection);

	    // @pragma Construction

	    function Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) && !isOrdered(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    Set.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };

	    // @pragma Access

	    Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };

	    // @pragma Modification

	    Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };

	    Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };

	    Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };

	    // @pragma Composition

	    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };

	    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };

	    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };

	    Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };

	    Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };

	    Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };

	    Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };

	    Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };


	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }

	  Set.isSet = isSet;

	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

	  var SetPrototype = Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;

	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;

	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }

	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }

	  createClass(OrderedSet, Set);

	    // @pragma Construction

	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };


	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }

	  OrderedSet.isOrderedSet = isOrderedSet;

	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;

	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }

	  createClass(Stack, IndexedCollection);

	    // @pragma Construction

	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }

	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };

	    // @pragma Access

	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };

	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };

	    // @pragma Modification

	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };

	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };

	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };

	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };

	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };

	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    // @pragma Mutability

	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };

	    // @pragma Iteration

	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };

	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };


	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }

	  Stack.isStack = isStack;

	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;


	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }

	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }

	  Iterable.Iterator = Iterator;

	  mixin(Iterable, {

	    // ### Conversion to other types

	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },

	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },

	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },

	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },

	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Map(this.toKeyedSeq());
	    },

	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },

	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },

	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Set(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },

	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },

	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },


	    // ### Common JavaScript methods and properties

	    toString: function() {
	      return '[Iterable]';
	    },

	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },

	    includes: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },

	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },

	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },

	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },

	    findEntry: function(predicate, context) {
	      var found;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },

	    findLastEntry: function(predicate, context) {
	      return this.toSeq().reverse().findEntry(predicate, context);
	    },

	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },

	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },

	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },

	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },

	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },

	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },

	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },

	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },

	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },


	    // ### More sequential methods

	    butLast: function() {
	      return this.slice(0, -1);
	    },

	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },

	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },

	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },

	    equals: function(other) {
	      return deepEqual(this, other);
	    },

	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },

	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },

	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },

	    first: function() {
	      return this.find(returnTrue);
	    },

	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },

	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },

	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },

	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },

	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },

	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },

	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },

	    isSubset: function(iter) {
	      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.includes(value)});
	    },

	    isSuperset: function(iter) {
	      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
	      return iter.isSubset(this);
	    },

	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },

	    last: function() {
	      return this.toSeq().reverse().first();
	    },

	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },

	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },

	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },

	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },

	    rest: function() {
	      return this.slice(1);
	    },

	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },

	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },

	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },

	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },

	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },

	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },

	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },

	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },

	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },


	    // ### Hashable Object

	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    }


	    // ### Internal

	    // abstract __iterate(fn, reverse)

	    // abstract __iterator(type, reverse)
	  });

	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;
	  IterablePrototype.contains = IterablePrototype.includes;

	  // Temporary warning about using length
	  (function () {
	    try {
	      Object.defineProperty(IterablePrototype, 'length', {
	        get: function () {
	          if (!Iterable.noLengthWarning) {
	            var stack;
	            try {
	              throw new Error();
	            } catch (error) {
	              stack = error.stack;
	            }
	            if (stack.indexOf('_wrapObject') === -1) {
	              console && console.warn && console.warn(
	                'iterable.length has been deprecated, '+
	                'use iterable.size or iterable.count(). '+
	                'This warning will become a silent error in a future version. ' +
	                stack
	              );
	              return this.size;
	            }
	          }
	        }
	      });
	    } catch (e) {}
	  })();



	  mixin(KeyedIterable, {

	    // ### More sequential methods

	    flip: function() {
	      return reify(this, flipFactory(this));
	    },

	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },

	    findLastKey: function(predicate, context) {
	      return this.toSeq().reverse().findKey(predicate, context);
	    },

	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },

	    lastKeyOf: function(searchValue) {
	      return this.findLastKey(function(value ) {return is(value, searchValue)});
	    },

	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },

	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    }

	  });

	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



	  mixin(IndexedIterable, {

	    // ### Conversion to other types

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },

	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    indexOf: function(searchValue) {
	      var key = this.toKeyedSeq().keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    lastIndexOf: function(searchValue) {
	      var key = this.toKeyedSeq().reverse().keyOf(searchValue);
	      return key === undefined ? -1 : key;

	      // var index =
	      // return this.toSeq().reverse().indexOf(searchValue);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },

	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      // If index is negative, it should resolve relative to the size of the
	      // collection. However size may be expensive to compute if not cached, so
	      // only call count() if the number is in fact negative.
	      index = resolveBegin(index, index < 0 ? this.count() : this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },


	    // ### More collection methods

	    findLastIndex: function(predicate, context) {
	      var key = this.toKeyedSeq().findLastKey(predicate, context);
	      return key === undefined ? -1 : key;
	    },

	    first: function() {
	      return this.get(0);
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },

	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },

	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },

	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },

	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },

	    last: function() {
	      return this.get(-1);
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },

	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },

	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    }

	  });

	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



	  mixin(SetIterable, {

	    // ### ES6 Collection methods (ES6 Array and Map)

	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },

	    includes: function(value) {
	      return this.has(value);
	    },


	    // ### More sequential methods

	    keySeq: function() {
	      return this.valueSeq();
	    }

	  });

	  SetIterable.prototype.has = IterablePrototype.includes;


	  // Mixin subclasses

	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);

	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);


	  // #pragma Helper functions

	  function keyMapper(v, k) {
	    return k;
	  }

	  function entryMapper(v, k) {
	    return [k, v];
	  }

	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }

	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }

	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : value;
	  }

	  function defaultZipper() {
	    return arrCopy(arguments);
	  }

	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }

	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }

	  function murmurHashOfSize(size, h) {
	    h = imul(h, 0xCC9E2D51);
	    h = imul(h << 15 | h >>> -15, 0x1B873593);
	    h = imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }

	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }

	  var Immutable = {

	    Iterable: Iterable,

	    Seq: Seq,
	    Collection: Collection,
	    Map: Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: Set,
	    OrderedSet: OrderedSet,

	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,

	    is: is,
	    fromJS: fromJS

	  };

	  return Immutable;

	}));

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CharacterMetadata
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _require = __webpack_require__(193);

	var Map = _require.Map;
	var OrderedSet = _require.OrderedSet;
	var Record = _require.Record;

	// Immutable.map is typed such that the value for every key in the map
	// must be the same type

	var EMPTY_SET = OrderedSet();

	var defaultRecord = {
	  style: EMPTY_SET,
	  entity: null
	};

	var CharacterMetadataRecord = Record(defaultRecord);

	var CharacterMetadata = function (_CharacterMetadataRec) {
	  _inherits(CharacterMetadata, _CharacterMetadataRec);

	  function CharacterMetadata() {
	    _classCallCheck(this, CharacterMetadata);

	    return _possibleConstructorReturn(this, _CharacterMetadataRec.apply(this, arguments));
	  }

	  CharacterMetadata.prototype.getStyle = function getStyle() {
	    return this.get('style');
	  };

	  CharacterMetadata.prototype.getEntity = function getEntity() {
	    return this.get('entity');
	  };

	  CharacterMetadata.prototype.hasStyle = function hasStyle(style) {
	    return this.getStyle().has(style);
	  };

	  CharacterMetadata.applyStyle = function applyStyle(record, style) {
	    var withStyle = record.set('style', record.getStyle().add(style));
	    return CharacterMetadata.create(withStyle);
	  };

	  CharacterMetadata.removeStyle = function removeStyle(record, style) {
	    var withoutStyle = record.set('style', record.getStyle().remove(style));
	    return CharacterMetadata.create(withoutStyle);
	  };

	  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {
	    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);
	    return CharacterMetadata.create(withEntity);
	  };

	  /**
	   * Use this function instead of the `CharacterMetadata` constructor.
	   * Since most content generally uses only a very small number of
	   * style/entity permutations, we can reuse these objects as often as
	   * possible.
	   */


	  CharacterMetadata.create = function create(config) {
	    if (!config) {
	      return EMPTY;
	    }

	    var defaultConfig = { style: EMPTY_SET, entity: null };

	    // Fill in unspecified properties, if necessary.
	    var configMap = Map(defaultConfig).merge(config);

	    var existing = pool.get(configMap);
	    if (existing) {
	      return existing;
	    }

	    var newCharacter = new CharacterMetadata(configMap);
	    pool = pool.set(configMap, newCharacter);
	    return newCharacter;
	  };

	  return CharacterMetadata;
	}(CharacterMetadataRecord);

	var EMPTY = new CharacterMetadata();
	var pool = Map([[Map(defaultRecord), EMPTY]]);

	CharacterMetadata.EMPTY = EMPTY;

	module.exports = CharacterMetadata;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ContentBlock
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Immutable = __webpack_require__(193);

	var findRangesImmutable = __webpack_require__(196);

	var List = Immutable.List;
	var Map = Immutable.Map;
	var OrderedSet = Immutable.OrderedSet;
	var Record = Immutable.Record;


	var EMPTY_SET = OrderedSet();

	var defaultRecord = {
	  key: '',
	  type: 'unstyled',
	  text: '',
	  characterList: List(),
	  depth: 0,
	  data: Map()
	};

	var ContentBlockRecord = Record(defaultRecord);

	var ContentBlock = function (_ContentBlockRecord) {
	  _inherits(ContentBlock, _ContentBlockRecord);

	  function ContentBlock() {
	    _classCallCheck(this, ContentBlock);

	    return _possibleConstructorReturn(this, _ContentBlockRecord.apply(this, arguments));
	  }

	  ContentBlock.prototype.getKey = function getKey() {
	    return this.get('key');
	  };

	  ContentBlock.prototype.getType = function getType() {
	    return this.get('type');
	  };

	  ContentBlock.prototype.getText = function getText() {
	    return this.get('text');
	  };

	  ContentBlock.prototype.getCharacterList = function getCharacterList() {
	    return this.get('characterList');
	  };

	  ContentBlock.prototype.getLength = function getLength() {
	    return this.getText().length;
	  };

	  ContentBlock.prototype.getDepth = function getDepth() {
	    return this.get('depth');
	  };

	  ContentBlock.prototype.getData = function getData() {
	    return this.get('data');
	  };

	  ContentBlock.prototype.getInlineStyleAt = function getInlineStyleAt(offset) {
	    var character = this.getCharacterList().get(offset);
	    return character ? character.getStyle() : EMPTY_SET;
	  };

	  ContentBlock.prototype.getEntityAt = function getEntityAt(offset) {
	    var character = this.getCharacterList().get(offset);
	    return character ? character.getEntity() : null;
	  };

	  /**
	   * Execute a callback for every contiguous range of styles within the block.
	   */


	  ContentBlock.prototype.findStyleRanges = function findStyleRanges(filterFn, callback) {
	    findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);
	  };

	  /**
	   * Execute a callback for every contiguous range of entities within the block.
	   */


	  ContentBlock.prototype.findEntityRanges = function findEntityRanges(filterFn, callback) {
	    findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);
	  };

	  return ContentBlock;
	}(ContentBlockRecord);

	function haveEqualStyle(charA, charB) {
	  return charA.getStyle() === charB.getStyle();
	}

	function haveEqualEntity(charA, charB) {
	  return charA.getEntity() === charB.getEntity();
	}

	module.exports = ContentBlock;

/***/ },
/* 196 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findRangesImmutable
	 * 
	 */

	'use strict';

	/**
	 * Search through an array to find contiguous stretches of elements that
	 * match a specified filter function.
	 *
	 * When ranges are found, execute a specified `found` function to supply
	 * the values to the caller.
	 */
	function findRangesImmutable(haystack, areEqualFn, filterFn, foundFn) {
	  if (!haystack.size) {
	    return;
	  }

	  var cursor = 0;

	  haystack.reduce(function (value, nextValue, nextIndex) {
	    /* $FlowFixMe(>=0.28.0): `value` could be undefined! */
	    if (!areEqualFn(value, nextValue)) {
	      /* $FlowFixMe(>=0.28.0): `value` could be undefined! */
	      if (filterFn(value)) {
	        foundFn(cursor, nextIndex);
	      }
	      cursor = nextIndex;
	    }
	    return nextValue;
	  });

	  filterFn(haystack.last()) && foundFn(cursor, haystack.count());
	}

	module.exports = findRangesImmutable;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftModifier
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);
	var ContentStateInlineStyle = __webpack_require__(198);
	var Immutable = __webpack_require__(193);

	var applyEntityToContentState = __webpack_require__(199);
	var getCharacterRemovalRange = __webpack_require__(201);
	var getContentStateFragment = __webpack_require__(205);
	var insertFragmentIntoContentState = __webpack_require__(208);
	var insertTextIntoContentState = __webpack_require__(210);
	var invariant = __webpack_require__(204);
	var modifyBlockForContentState = __webpack_require__(211);
	var removeEntitiesAtEdges = __webpack_require__(207);
	var removeRangeFromContentState = __webpack_require__(212);
	var splitBlockInContentState = __webpack_require__(213);

	var OrderedSet = Immutable.OrderedSet;

	/**
	 * `DraftModifier` provides a set of convenience methods that apply
	 * modifications to a `ContentState` object based on a target `SelectionState`.
	 *
	 * Any change to a `ContentState` should be decomposable into a series of
	 * transaction functions that apply the required changes and return output
	 * `ContentState` objects.
	 *
	 * These functions encapsulate some of the most common transaction sequences.
	 */

	var DraftModifier = {
	  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);
	    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);

	    var character = CharacterMetadata.create({
	      style: inlineStyle || OrderedSet(),
	      entity: entityKey || null
	    });

	    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);
	  },

	  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {
	    !targetRange.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;
	    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);
	  },

	  moveText: function moveText(contentState, removalRange, targetRange) {
	    var movedFragment = getContentStateFragment(contentState, removalRange);

	    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');

	    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);
	  },

	  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);
	    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);

	    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);
	  },

	  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {
	    // Check whether the selection state overlaps with a single entity.
	    // If so, try to remove the appropriate substring of the entity text.
	    if (rangeToRemove.getAnchorKey() === rangeToRemove.getFocusKey()) {
	      var key = rangeToRemove.getAnchorKey();
	      var startOffset = rangeToRemove.getStartOffset();
	      var endOffset = rangeToRemove.getEndOffset();
	      var block = contentState.getBlockForKey(key);

	      var startEntity = block.getEntityAt(startOffset);
	      var endEntity = block.getEntityAt(endOffset - 1);
	      if (startEntity && startEntity === endEntity) {
	        var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), block, rangeToRemove, removalDirection);
	        return removeRangeFromContentState(contentState, adjustedRemovalRange);
	      }
	    }

	    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);
	    return removeRangeFromContentState(withoutEntities, rangeToRemove);
	  },

	  splitBlock: function splitBlock(contentState, selectionState) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);
	    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);

	    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());
	  },

	  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {
	    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);
	  },

	  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {
	    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);
	  },

	  setBlockType: function setBlockType(contentState, selectionState, blockType) {
	    return modifyBlockForContentState(contentState, selectionState, function (block) {
	      return block.merge({ type: blockType, depth: 0 });
	    });
	  },

	  setBlockData: function setBlockData(contentState, selectionState, blockData) {
	    return modifyBlockForContentState(contentState, selectionState, function (block) {
	      return block.merge({ data: blockData });
	    });
	  },

	  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {
	    return modifyBlockForContentState(contentState, selectionState, function (block) {
	      return block.merge({ data: block.getData().merge(blockData) });
	    });
	  },

	  applyEntity: function applyEntity(contentState, selectionState, entityKey) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);
	    return applyEntityToContentState(withoutEntities, selectionState, entityKey);
	  }
	};

	module.exports = DraftModifier;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ContentStateInlineStyle
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);

	var _require = __webpack_require__(193);

	var Map = _require.Map;


	var ContentStateInlineStyle = {
	  add: function add(contentState, selectionState, inlineStyle) {
	    return modifyInlineStyle(contentState, selectionState, inlineStyle, true);
	  },

	  remove: function remove(contentState, selectionState, inlineStyle) {
	    return modifyInlineStyle(contentState, selectionState, inlineStyle, false);
	  }
	};

	function modifyInlineStyle(contentState, selectionState, inlineStyle, addOrRemove) {
	  var blockMap = contentState.getBlockMap();
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  var newBlocks = blockMap.skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {
	    var sliceStart;
	    var sliceEnd;

	    if (startKey === endKey) {
	      sliceStart = startOffset;
	      sliceEnd = endOffset;
	    } else {
	      sliceStart = blockKey === startKey ? startOffset : 0;
	      sliceEnd = blockKey === endKey ? endOffset : block.getLength();
	    }

	    var chars = block.getCharacterList();
	    var current;
	    while (sliceStart < sliceEnd) {
	      current = chars.get(sliceStart);
	      chars = chars.set(sliceStart, addOrRemove ? CharacterMetadata.applyStyle(current, inlineStyle) : CharacterMetadata.removeStyle(current, inlineStyle));
	      sliceStart++;
	    }

	    return block.set('characterList', chars);
	  });

	  return contentState.merge({
	    blockMap: blockMap.merge(newBlocks),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState
	  });
	}

	module.exports = ContentStateInlineStyle;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule applyEntityToContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	var applyEntityToContentBlock = __webpack_require__(200);

	function applyEntityToContentState(contentState, selectionState, entityKey) {
	  var blockMap = contentState.getBlockMap();
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  var newBlocks = blockMap.skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).toOrderedMap().merge(Immutable.OrderedMap([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {
	    var sliceStart = blockKey === startKey ? startOffset : 0;
	    var sliceEnd = blockKey === endKey ? endOffset : block.getLength();
	    return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);
	  });

	  return contentState.merge({
	    blockMap: blockMap.merge(newBlocks),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState
	  });
	}

	module.exports = applyEntityToContentState;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule applyEntityToContentBlock
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);

	function applyEntityToContentBlock(contentBlock, start, end, entityKey) {
	  var characterList = contentBlock.getCharacterList();
	  while (start < end) {
	    characterList = characterList.set(start, CharacterMetadata.applyEntity(characterList.get(start), entityKey));
	    start++;
	  }
	  return contentBlock.set('characterList', characterList);
	}

	module.exports = applyEntityToContentBlock;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getCharacterRemovalRange
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftEntitySegments = __webpack_require__(202);

	var getRangesForDraftEntity = __webpack_require__(203);
	var invariant = __webpack_require__(204);

	/**
	 * Given a SelectionState and a removal direction, determine the entire range
	 * that should be removed from a ContentState. This is based on any entities
	 * within the target, with their `mutability` values taken into account.
	 *
	 * For instance, if we are attempting to remove part of an "immutable" entity
	 * range, the entire entity must be removed. The returned `SelectionState`
	 * will be adjusted accordingly.
	 */
	function getCharacterRemovalRange(entityMap, block, selectionState, direction) {
	  var start = selectionState.getStartOffset();
	  var end = selectionState.getEndOffset();
	  var entityKey = block.getEntityAt(start);
	  if (!entityKey) {
	    return selectionState;
	  }

	  var entity = entityMap.__get(entityKey);
	  var mutability = entity.getMutability();

	  // `MUTABLE` entities can just have the specified range of text removed
	  // directly. No adjustments are needed.
	  if (mutability === 'MUTABLE') {
	    return selectionState;
	  }

	  // Find the entity range that overlaps with our removal range.
	  var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function (range) {
	    return start < range.end && end > range.start;
	  });

	  !(entityRanges.length == 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There should only be one entity range within this removal range.') : invariant(false) : void 0;

	  var entityRange = entityRanges[0];

	  // For `IMMUTABLE` entity types, we will remove the entire entity range.
	  if (mutability === 'IMMUTABLE') {
	    return selectionState.merge({
	      anchorOffset: entityRange.start,
	      focusOffset: entityRange.end,
	      isBackward: false
	    });
	  }

	  // For `SEGMENTED` entity types, determine the appropriate segment to
	  // remove.
	  var removalRange = DraftEntitySegments.getRemovalRange(start, end, block.getText().slice(entityRange.start, entityRange.end), entityRange.start, direction);

	  return selectionState.merge({
	    anchorOffset: removalRange.start,
	    focusOffset: removalRange.end,
	    isBackward: false
	  });
	}

	module.exports = getCharacterRemovalRange;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 202 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEntitySegments
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	 * Identify the range to delete from a segmented entity.
	 *
	 * Rules:
	 *
	 *  Example: 'John F. Kennedy'
	 *
	 *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])
	 *     will return the range of that text.
	 *
	 *       'John F. Kennedy' -> 'John F.'
	 *                  ^
	 *
	 *   - Forward deletion of whitespace will remove the following section:
	 *
	 *       'John F. Kennedy' -> 'John Kennedy'
	 *            ^
	 *
	 *   - Backward deletion of whitespace will remove the previous section:
	 *
	 *       'John F. Kennedy' -> 'F. Kennedy'
	 *            ^
	 */
	var DraftEntitySegments = {
	  getRemovalRange: function getRemovalRange(selectionStart, selectionEnd, text, entityStart, direction) {
	    var segments = text.split(' ');
	    segments = segments.map(function ( /*string*/segment, /*number*/ii) {
	      if (direction === 'forward') {
	        if (ii > 0) {
	          return ' ' + segment;
	        }
	      } else if (ii < segments.length - 1) {
	        return segment + ' ';
	      }
	      return segment;
	    });

	    var segmentStart = entityStart;
	    var segmentEnd;
	    var segment;
	    var removalStart = null;
	    var removalEnd = null;

	    for (var jj = 0; jj < segments.length; jj++) {
	      segment = segments[jj];
	      segmentEnd = segmentStart + segment.length;

	      // Our selection overlaps this segment.
	      if (selectionStart < segmentEnd && segmentStart < selectionEnd) {
	        if (removalStart !== null) {
	          removalEnd = segmentEnd;
	        } else {
	          removalStart = segmentStart;
	          removalEnd = segmentEnd;
	        }
	      } else if (removalStart !== null) {
	        break;
	      }

	      segmentStart = segmentEnd;
	    }

	    var entityEnd = entityStart + text.length;
	    var atStart = removalStart === entityStart;
	    var atEnd = removalEnd === entityEnd;

	    if (!atStart && atEnd || atStart && !atEnd) {
	      if (direction === 'forward') {
	        if (removalEnd !== entityEnd) {
	          removalEnd++;
	        }
	      } else if (removalStart !== entityStart) {
	        removalStart--;
	      }
	    }

	    return {
	      start: removalStart,
	      end: removalEnd
	    };
	  }
	};

	module.exports = DraftEntitySegments;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getRangesForDraftEntity
	 * @typechecks
	 * 
	 */

	'use strict';

	var invariant = __webpack_require__(204);

	/**
	 * Obtain the start and end positions of the range that has the
	 * specified entity applied to it.
	 *
	 * Entity keys are applied only to contiguous stretches of text, so this
	 * method searches for the first instance of the entity key and returns
	 * the subsequent range.
	 */
	function getRangesForDraftEntity(block, key) {
	  var ranges = [];
	  block.findEntityRanges(function (c) {
	    return c.getEntity() === key;
	  }, function (start, end) {
	    ranges.push({ start: start, end: end });
	  });

	  !!!ranges.length ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Entity key not found in this range.') : invariant(false) : void 0;

	  return ranges;
	}

	module.exports = getRangesForDraftEntity;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getContentStateFragment
	 * @typechecks
	 * 
	 */

	'use strict';

	var generateRandomKey = __webpack_require__(206);
	var removeEntitiesAtEdges = __webpack_require__(207);

	function getContentStateFragment(contentState, selectionState) {
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  // Edge entities should be stripped to ensure that we don't preserve
	  // invalid partial entities when the fragment is reused. We do, however,
	  // preserve entities that are entirely within the selection range.
	  var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);

	  var blockMap = contentWithoutEdgeEntities.getBlockMap();
	  var blockKeys = blockMap.keySeq();
	  var startIndex = blockKeys.indexOf(startKey);
	  var endIndex = blockKeys.indexOf(endKey) + 1;

	  var slice = blockMap.slice(startIndex, endIndex).map(function (block, blockKey) {
	    var newKey = generateRandomKey();

	    var text = block.getText();
	    var chars = block.getCharacterList();

	    if (startKey === endKey) {
	      return block.merge({
	        key: newKey,
	        text: text.slice(startOffset, endOffset),
	        characterList: chars.slice(startOffset, endOffset)
	      });
	    }

	    if (blockKey === startKey) {
	      return block.merge({
	        key: newKey,
	        text: text.slice(startOffset),
	        characterList: chars.slice(startOffset)
	      });
	    }

	    if (blockKey === endKey) {
	      return block.merge({
	        key: newKey,
	        text: text.slice(0, endOffset),
	        characterList: chars.slice(0, endOffset)
	      });
	    }

	    return block.set('key', newKey);
	  });

	  return slice.toOrderedMap();
	}

	module.exports = getContentStateFragment;

/***/ },
/* 206 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule generateRandomKey
	 * @typechecks
	 * 
	 */

	'use strict';

	var seenKeys = {};
	var MULTIPLIER = Math.pow(2, 24);

	function generateRandomKey() {
	  var key = void 0;
	  while (key === undefined || seenKeys.hasOwnProperty(key) || !isNaN(+key)) {
	    key = Math.floor(Math.random() * MULTIPLIER).toString(32);
	  }
	  seenKeys[key] = true;
	  return key;
	}

	module.exports = generateRandomKey;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule removeEntitiesAtEdges
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);

	var findRangesImmutable = __webpack_require__(196);
	var invariant = __webpack_require__(204);

	function removeEntitiesAtEdges(contentState, selectionState) {
	  var blockMap = contentState.getBlockMap();
	  var entityMap = contentState.getEntityMap();

	  var updatedBlocks = {};

	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var startBlock = blockMap.get(startKey);
	  var updatedStart = removeForBlock(entityMap, startBlock, startOffset);

	  if (updatedStart !== startBlock) {
	    updatedBlocks[startKey] = updatedStart;
	  }

	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();
	  var endBlock = blockMap.get(endKey);
	  if (startKey === endKey) {
	    endBlock = updatedStart;
	  }

	  var updatedEnd = removeForBlock(entityMap, endBlock, endOffset);

	  if (updatedEnd !== endBlock) {
	    updatedBlocks[endKey] = updatedEnd;
	  }

	  if (!Object.keys(updatedBlocks).length) {
	    return contentState.set('selectionAfter', selectionState);
	  }

	  return contentState.merge({
	    blockMap: blockMap.merge(updatedBlocks),
	    selectionAfter: selectionState
	  });
	}

	function getRemovalRange(characters, key, offset) {
	  var removalRange;
	  findRangesImmutable(characters, function (a, b) {
	    return a.getEntity() === b.getEntity();
	  }, function (element) {
	    return element.getEntity() === key;
	  }, function (start, end) {
	    if (start <= offset && end >= offset) {
	      removalRange = { start: start, end: end };
	    }
	  });
	  !(typeof removalRange === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Removal range must exist within character list.') : invariant(false) : void 0;
	  return removalRange;
	}

	function removeForBlock(entityMap, block, offset) {
	  var chars = block.getCharacterList();
	  var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;
	  var charAfter = offset < chars.count() ? chars.get(offset) : undefined;
	  var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;
	  var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;

	  if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {
	    var entity = entityMap.__get(entityAfterCursor);
	    if (entity.getMutability() !== 'MUTABLE') {
	      var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset);

	      var start = _getRemovalRange.start;
	      var end = _getRemovalRange.end;

	      var current;
	      while (start < end) {
	        current = chars.get(start);
	        chars = chars.set(start, CharacterMetadata.applyEntity(current, null));
	        start++;
	      }
	      return block.set('characterList', chars);
	    }
	  }

	  return block;
	}

	module.exports = removeEntitiesAtEdges;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule insertFragmentIntoContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var BlockMapBuilder = __webpack_require__(192);

	var generateRandomKey = __webpack_require__(206);
	var insertIntoList = __webpack_require__(209);
	var invariant = __webpack_require__(204);

	function insertFragmentIntoContentState(contentState, selectionState, fragment) {
	  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertFragment` should only be called with a collapsed selection state.') : invariant(false) : void 0;

	  var targetKey = selectionState.getStartKey();
	  var targetOffset = selectionState.getStartOffset();

	  var blockMap = contentState.getBlockMap();

	  var fragmentSize = fragment.size;
	  var finalKey;
	  var finalOffset;

	  if (fragmentSize === 1) {
	    var targetBlock = blockMap.get(targetKey);
	    var pastedBlock = fragment.first();
	    var text = targetBlock.getText();
	    var chars = targetBlock.getCharacterList();

	    var newBlock = targetBlock.merge({
	      text: text.slice(0, targetOffset) + pastedBlock.getText() + text.slice(targetOffset),
	      characterList: insertIntoList(chars, pastedBlock.getCharacterList(), targetOffset),
	      data: pastedBlock.getData()
	    });

	    blockMap = blockMap.set(targetKey, newBlock);

	    finalKey = targetKey;
	    finalOffset = targetOffset + pastedBlock.getText().length;

	    return contentState.merge({
	      blockMap: blockMap.set(targetKey, newBlock),
	      selectionBefore: selectionState,
	      selectionAfter: selectionState.merge({
	        anchorKey: finalKey,
	        anchorOffset: finalOffset,
	        focusKey: finalKey,
	        focusOffset: finalOffset,
	        isBackward: false
	      })
	    });
	  }

	  var newBlockArr = [];

	  contentState.getBlockMap().forEach(function (block, blockKey) {
	    if (blockKey !== targetKey) {
	      newBlockArr.push(block);
	      return;
	    }

	    var text = block.getText();
	    var chars = block.getCharacterList();

	    // Modify head portion of block.
	    var blockSize = text.length;
	    var headText = text.slice(0, targetOffset);
	    var headCharacters = chars.slice(0, targetOffset);
	    var appendToHead = fragment.first();

	    var modifiedHead = block.merge({
	      text: headText + appendToHead.getText(),
	      characterList: headCharacters.concat(appendToHead.getCharacterList()),
	      type: headText ? block.getType() : appendToHead.getType(),
	      data: appendToHead.getData()
	    });

	    newBlockArr.push(modifiedHead);

	    // Insert fragment blocks after the head and before the tail.
	    fragment.slice(1, fragmentSize - 1).forEach(function (fragmentBlock) {
	      newBlockArr.push(fragmentBlock.set('key', generateRandomKey()));
	    });

	    // Modify tail portion of block.
	    var tailText = text.slice(targetOffset, blockSize);
	    var tailCharacters = chars.slice(targetOffset, blockSize);
	    var prependToTail = fragment.last();
	    finalKey = generateRandomKey();

	    var modifiedTail = prependToTail.merge({
	      key: finalKey,
	      text: prependToTail.getText() + tailText,
	      characterList: prependToTail.getCharacterList().concat(tailCharacters),
	      data: prependToTail.getData()
	    });

	    newBlockArr.push(modifiedTail);
	  });

	  finalOffset = fragment.last().getLength();

	  return contentState.merge({
	    blockMap: BlockMapBuilder.createFromArray(newBlockArr),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState.merge({
	      anchorKey: finalKey,
	      anchorOffset: finalOffset,
	      focusKey: finalKey,
	      focusOffset: finalOffset,
	      isBackward: false
	    })
	  });
	}

	module.exports = insertFragmentIntoContentState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 209 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule insertIntoList
	 * 
	 */

	'use strict';

	/**
	 * Maintain persistence for target list when appending and prepending.
	 */
	function insertIntoList(targetList, toInsert, offset) {
	  if (offset === targetList.count()) {
	    toInsert.forEach(function (c) {
	      targetList = targetList.push(c);
	    });
	  } else if (offset === 0) {
	    toInsert.reverse().forEach(function (c) {
	      targetList = targetList.unshift(c);
	    });
	  } else {
	    var head = targetList.slice(0, offset);
	    var tail = targetList.slice(offset);
	    targetList = head.concat(toInsert, tail).toList();
	  }
	  return targetList;
	}

	module.exports = insertIntoList;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule insertTextIntoContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	var insertIntoList = __webpack_require__(209);
	var invariant = __webpack_require__(204);

	var Repeat = Immutable.Repeat;


	function insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {
	  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;

	  var len = text.length;
	  if (!len) {
	    return contentState;
	  }

	  var blockMap = contentState.getBlockMap();
	  var key = selectionState.getStartKey();
	  var offset = selectionState.getStartOffset();
	  var block = blockMap.get(key);
	  var blockText = block.getText();

	  var newBlock = block.merge({
	    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),
	    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)
	  });

	  var newOffset = offset + len;

	  return contentState.merge({
	    blockMap: blockMap.set(key, newBlock),
	    selectionAfter: selectionState.merge({
	      anchorOffset: newOffset,
	      focusOffset: newOffset
	    })
	  });
	}

	module.exports = insertTextIntoContentState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule modifyBlockForContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	var Map = Immutable.Map;


	function modifyBlockForContentState(contentState, selectionState, operation) {
	  var startKey = selectionState.getStartKey();
	  var endKey = selectionState.getEndKey();
	  var blockMap = contentState.getBlockMap();
	  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);

	  return contentState.merge({
	    blockMap: blockMap.merge(newBlocks),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState
	  });
	}

	module.exports = modifyBlockForContentState;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule removeRangeFromContentState
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	function removeRangeFromContentState(contentState, selectionState) {
	  if (selectionState.isCollapsed()) {
	    return contentState;
	  }

	  var blockMap = contentState.getBlockMap();
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  var startBlock = blockMap.get(startKey);
	  var endBlock = blockMap.get(endKey);
	  var characterList;

	  if (startBlock === endBlock) {
	    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);
	  } else {
	    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));
	  }

	  var modifiedStart = startBlock.merge({
	    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),
	    characterList: characterList
	  });

	  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat(Immutable.Map([[endKey, null]])).map(function (_, k) {
	    return k === startKey ? modifiedStart : null;
	  });

	  blockMap = blockMap.merge(newBlocks).filter(function (block) {
	    return !!block;
	  });

	  return contentState.merge({
	    blockMap: blockMap,
	    selectionBefore: selectionState,
	    selectionAfter: selectionState.merge({
	      anchorKey: startKey,
	      anchorOffset: startOffset,
	      focusKey: startKey,
	      focusOffset: startOffset,
	      isBackward: false
	    })
	  });
	}

	/**
	 * Maintain persistence for target list when removing characters on the
	 * head and tail of the character list.
	 */
	function removeFromList(targetList, startOffset, endOffset) {
	  if (startOffset === 0) {
	    while (startOffset < endOffset) {
	      targetList = targetList.shift();
	      startOffset++;
	    }
	  } else if (endOffset === targetList.count()) {
	    while (endOffset > startOffset) {
	      targetList = targetList.pop();
	      endOffset--;
	    }
	  } else {
	    var head = targetList.slice(0, startOffset);
	    var tail = targetList.slice(endOffset);
	    targetList = head.concat(tail).toList();
	  }
	  return targetList;
	}

	module.exports = removeRangeFromContentState;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule splitBlockInContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	var generateRandomKey = __webpack_require__(206);
	var invariant = __webpack_require__(204);

	var Map = Immutable.Map;


	function splitBlockInContentState(contentState, selectionState) {
	  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Selection range must be collapsed.') : invariant(false) : void 0;

	  var key = selectionState.getAnchorKey();
	  var offset = selectionState.getAnchorOffset();
	  var blockMap = contentState.getBlockMap();
	  var blockToSplit = blockMap.get(key);

	  var text = blockToSplit.getText();
	  var chars = blockToSplit.getCharacterList();

	  var blockAbove = blockToSplit.merge({
	    text: text.slice(0, offset),
	    characterList: chars.slice(0, offset)
	  });

	  var keyBelow = generateRandomKey();
	  var blockBelow = blockAbove.merge({
	    key: keyBelow,
	    text: text.slice(offset),
	    characterList: chars.slice(offset),
	    data: Map()
	  });

	  var blocksBefore = blockMap.toSeq().takeUntil(function (v) {
	    return v === blockToSplit;
	  });
	  var blocksAfter = blockMap.toSeq().skipUntil(function (v) {
	    return v === blockToSplit;
	  }).rest();
	  var newBlocks = blocksBefore.concat([[blockAbove.getKey(), blockAbove], [blockBelow.getKey(), blockBelow]], blocksAfter).toOrderedMap();

	  return contentState.merge({
	    blockMap: newBlocks,
	    selectionBefore: selectionState,
	    selectionAfter: selectionState.merge({
	      anchorKey: keyBelow,
	      anchorOffset: 0,
	      focusKey: keyBelow,
	      focusOffset: 0,
	      isBackward: false
	    })
	  });
	}

	module.exports = splitBlockInContentState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EditorState
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var BlockTree = __webpack_require__(215);
	var ContentState = __webpack_require__(217);
	var EditorBidiService = __webpack_require__(222);
	var Immutable = __webpack_require__(193);
	var SelectionState = __webpack_require__(220);

	var OrderedSet = Immutable.OrderedSet;
	var Record = Immutable.Record;
	var Stack = Immutable.Stack;


	var defaultRecord = {
	  allowUndo: true,
	  currentContent: null,
	  decorator: null,
	  directionMap: null,
	  forceSelection: false,
	  inCompositionMode: false,
	  inlineStyleOverride: null,
	  lastChangeType: null,
	  nativelyRenderedContent: null,
	  redoStack: Stack(),
	  selection: null,
	  treeMap: null,
	  undoStack: Stack()
	};

	var EditorStateRecord = Record(defaultRecord);

	var EditorState = function () {
	  EditorState.createEmpty = function createEmpty(decorator) {
	    return EditorState.createWithContent(ContentState.createFromText(''), decorator);
	  };

	  EditorState.createWithContent = function createWithContent(contentState, decorator) {
	    var firstKey = contentState.getBlockMap().first().getKey();
	    return EditorState.create({
	      currentContent: contentState,
	      undoStack: Stack(),
	      redoStack: Stack(),
	      decorator: decorator || null,
	      selection: SelectionState.createEmpty(firstKey)
	    });
	  };

	  EditorState.create = function create(config) {
	    var currentContent = config.currentContent;
	    var decorator = config.decorator;

	    var recordConfig = _extends({}, config, {
	      treeMap: generateNewTreeMap(currentContent, decorator),
	      directionMap: EditorBidiService.getDirectionMap(currentContent)
	    });
	    return new EditorState(new EditorStateRecord(recordConfig));
	  };

	  EditorState.set = function set(editorState, put) {
	    var map = editorState.getImmutable().withMutations(function (state) {
	      var existingDecorator = state.get('decorator');
	      var decorator = existingDecorator;
	      if (put.decorator === null) {
	        decorator = null;
	      } else if (put.decorator) {
	        decorator = put.decorator;
	      }

	      var newContent = put.currentContent || editorState.getCurrentContent();

	      if (decorator !== existingDecorator) {
	        var treeMap = state.get('treeMap');
	        var newTreeMap;
	        if (decorator && existingDecorator) {
	          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);
	        } else {
	          newTreeMap = generateNewTreeMap(newContent, decorator);
	        }

	        state.merge({
	          decorator: decorator,
	          treeMap: newTreeMap,
	          nativelyRenderedContent: null
	        });
	        return;
	      }

	      var existingContent = editorState.getCurrentContent();
	      if (newContent !== existingContent) {
	        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));
	      }

	      state.merge(put);
	    });

	    return new EditorState(map);
	  };

	  EditorState.prototype.toJS = function toJS() {
	    return this.getImmutable().toJS();
	  };

	  EditorState.prototype.getAllowUndo = function getAllowUndo() {
	    return this.getImmutable().get('allowUndo');
	  };

	  EditorState.prototype.getCurrentContent = function getCurrentContent() {
	    return this.getImmutable().get('currentContent');
	  };

	  EditorState.prototype.getUndoStack = function getUndoStack() {
	    return this.getImmutable().get('undoStack');
	  };

	  EditorState.prototype.getRedoStack = function getRedoStack() {
	    return this.getImmutable().get('redoStack');
	  };

	  EditorState.prototype.getSelection = function getSelection() {
	    return this.getImmutable().get('selection');
	  };

	  EditorState.prototype.getDecorator = function getDecorator() {
	    return this.getImmutable().get('decorator');
	  };

	  EditorState.prototype.isInCompositionMode = function isInCompositionMode() {
	    return this.getImmutable().get('inCompositionMode');
	  };

	  EditorState.prototype.mustForceSelection = function mustForceSelection() {
	    return this.getImmutable().get('forceSelection');
	  };

	  EditorState.prototype.getNativelyRenderedContent = function getNativelyRenderedContent() {
	    return this.getImmutable().get('nativelyRenderedContent');
	  };

	  EditorState.prototype.getLastChangeType = function getLastChangeType() {
	    return this.getImmutable().get('lastChangeType');
	  };

	  /**
	   * While editing, the user may apply inline style commands with a collapsed
	   * cursor, intending to type text that adopts the specified style. In this
	   * case, we track the specified style as an "override" that takes precedence
	   * over the inline style of the text adjacent to the cursor.
	   *
	   * If null, there is no override in place.
	   */


	  EditorState.prototype.getInlineStyleOverride = function getInlineStyleOverride() {
	    return this.getImmutable().get('inlineStyleOverride');
	  };

	  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {
	    return EditorState.set(editorState, { inlineStyleOverride: inlineStyleOverride });
	  };

	  /**
	   * Get the appropriate inline style for the editor state. If an
	   * override is in place, use it. Otherwise, the current style is
	   * based on the location of the selection state.
	   */


	  EditorState.prototype.getCurrentInlineStyle = function getCurrentInlineStyle() {
	    var override = this.getInlineStyleOverride();
	    if (override != null) {
	      return override;
	    }

	    var content = this.getCurrentContent();
	    var selection = this.getSelection();

	    if (selection.isCollapsed()) {
	      return getInlineStyleForCollapsedSelection(content, selection);
	    }

	    return getInlineStyleForNonCollapsedSelection(content, selection);
	  };

	  EditorState.prototype.getBlockTree = function getBlockTree(blockKey) {
	    return this.getImmutable().getIn(['treeMap', blockKey]);
	  };

	  EditorState.prototype.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {
	    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();
	    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);
	  };

	  EditorState.prototype.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {
	    var content = this.getCurrentContent();
	    var blockMap = content.getBlockMap();
	    var last = blockMap.last();
	    var end = last.getLength();
	    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);
	  };

	  EditorState.prototype.getDirectionMap = function getDirectionMap() {
	    return this.getImmutable().get('directionMap');
	  };

	  /**
	   * Incorporate native DOM selection changes into the EditorState. This
	   * method can be used when we simply want to accept whatever the DOM
	   * has given us to represent selection, and we do not need to re-render
	   * the editor.
	   *
	   * To forcibly move the DOM selection, see `EditorState.forceSelection`.
	   */


	  EditorState.acceptSelection = function acceptSelection(editorState, selection) {
	    return updateSelection(editorState, selection, false);
	  };

	  /**
	   * At times, we need to force the DOM selection to be where we
	   * need it to be. This can occur when the anchor or focus nodes
	   * are non-text nodes, for instance. In this case, we want to trigger
	   * a re-render of the editor, which in turn forces selection into
	   * the correct place in the DOM. The `forceSelection` method
	   * accomplishes this.
	   *
	   * This method should be used in cases where you need to explicitly
	   * move the DOM selection from one place to another without a change
	   * in ContentState.
	   */


	  EditorState.forceSelection = function forceSelection(editorState, selection) {
	    if (!selection.getHasFocus()) {
	      selection = selection.set('hasFocus', true);
	    }
	    return updateSelection(editorState, selection, true);
	  };

	  /**
	   * Move selection to the end of the editor without forcing focus.
	   */


	  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {
	    var content = editorState.getCurrentContent();
	    var lastBlock = content.getLastBlock();
	    var lastKey = lastBlock.getKey();
	    var length = lastBlock.getLength();

	    return EditorState.acceptSelection(editorState, new SelectionState({
	      anchorKey: lastKey,
	      anchorOffset: length,
	      focusKey: lastKey,
	      focusOffset: length,
	      isBackward: false
	    }));
	  };

	  /**
	   * Force focus to the end of the editor. This is useful in scenarios
	   * where we want to programmatically focus the input and it makes sense
	   * to allow the user to continue working seamlessly.
	   */


	  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {
	    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);
	    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());
	  };

	  /**
	   * Push the current ContentState onto the undo stack if it should be
	   * considered a boundary state, and set the provided ContentState as the
	   * new current content.
	   */


	  EditorState.push = function push(editorState, contentState, changeType) {
	    if (editorState.getCurrentContent() === contentState) {
	      return editorState;
	    }

	    var forceSelection = changeType !== 'insert-characters';
	    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());

	    if (!editorState.getAllowUndo()) {
	      return EditorState.set(editorState, {
	        currentContent: contentState,
	        directionMap: directionMap,
	        lastChangeType: changeType,
	        selection: contentState.getSelectionAfter(),
	        forceSelection: forceSelection,
	        inlineStyleOverride: null
	      });
	    }

	    var selection = editorState.getSelection();
	    var currentContent = editorState.getCurrentContent();
	    var undoStack = editorState.getUndoStack();
	    var newContent = contentState;

	    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {
	      undoStack = undoStack.push(currentContent);
	      newContent = newContent.set('selectionBefore', selection);
	    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {
	      // Preserve the previous selection.
	      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());
	    }

	    var inlineStyleOverride = editorState.getInlineStyleOverride();

	    // Don't discard inline style overrides on block type or depth changes.
	    if (changeType !== 'adjust-depth' && changeType !== 'change-block-type') {
	      inlineStyleOverride = null;
	    }

	    var editorStateChanges = {
	      currentContent: newContent,
	      directionMap: directionMap,
	      undoStack: undoStack,
	      redoStack: Stack(),
	      lastChangeType: changeType,
	      selection: contentState.getSelectionAfter(),
	      forceSelection: forceSelection,
	      inlineStyleOverride: inlineStyleOverride
	    };

	    return EditorState.set(editorState, editorStateChanges);
	  };

	  /**
	   * Make the top ContentState in the undo stack the new current content and
	   * push the current content onto the redo stack.
	   */


	  EditorState.undo = function undo(editorState) {
	    if (!editorState.getAllowUndo()) {
	      return editorState;
	    }

	    var undoStack = editorState.getUndoStack();
	    var newCurrentContent = undoStack.peek();
	    if (!newCurrentContent) {
	      return editorState;
	    }

	    var currentContent = editorState.getCurrentContent();
	    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());

	    return EditorState.set(editorState, {
	      currentContent: newCurrentContent,
	      directionMap: directionMap,
	      undoStack: undoStack.shift(),
	      redoStack: editorState.getRedoStack().push(currentContent),
	      forceSelection: true,
	      inlineStyleOverride: null,
	      lastChangeType: 'undo',
	      nativelyRenderedContent: null,
	      selection: currentContent.getSelectionBefore()
	    });
	  };

	  /**
	   * Make the top ContentState in the redo stack the new current content and
	   * push the current content onto the undo stack.
	   */


	  EditorState.redo = function redo(editorState) {
	    if (!editorState.getAllowUndo()) {
	      return editorState;
	    }

	    var redoStack = editorState.getRedoStack();
	    var newCurrentContent = redoStack.peek();
	    if (!newCurrentContent) {
	      return editorState;
	    }

	    var currentContent = editorState.getCurrentContent();
	    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());

	    return EditorState.set(editorState, {
	      currentContent: newCurrentContent,
	      directionMap: directionMap,
	      undoStack: editorState.getUndoStack().push(currentContent),
	      redoStack: redoStack.shift(),
	      forceSelection: true,
	      inlineStyleOverride: null,
	      lastChangeType: 'redo',
	      nativelyRenderedContent: null,
	      selection: newCurrentContent.getSelectionAfter()
	    });
	  };

	  /**
	   * Not for public consumption.
	   */


	  function EditorState(immutable) {
	    _classCallCheck(this, EditorState);

	    this._immutable = immutable;
	  }

	  /**
	   * Not for public consumption.
	   */


	  EditorState.prototype.getImmutable = function getImmutable() {
	    return this._immutable;
	  };

	  return EditorState;
	}();

	/**
	 * Set the supplied SelectionState as the new current selection, and set
	 * the `force` flag to trigger manual selection placement by the view.
	 */


	function updateSelection(editorState, selection, forceSelection) {
	  return EditorState.set(editorState, {
	    selection: selection,
	    forceSelection: forceSelection,
	    nativelyRenderedContent: null,
	    inlineStyleOverride: null
	  });
	}

	/**
	 * Regenerate the entire tree map for a given ContentState and decorator.
	 * Returns an OrderedMap that maps all available ContentBlock objects.
	 */
	function generateNewTreeMap(contentState, decorator) {
	  return contentState.getBlockMap().map(function (block) {
	    return BlockTree.generate(contentState, block, decorator);
	  }).toOrderedMap();
	}

	/**
	 * Regenerate tree map objects for all ContentBlocks that have changed
	 * between the current editorState and newContent. Returns an OrderedMap
	 * with only changed regenerated tree map objects.
	 */
	function regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {
	  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);
	  var prevBlockMap = contentState.getBlockMap();
	  var prevTreeMap = editorState.getImmutable().get('treeMap');
	  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {
	    return block !== prevBlockMap.get(key);
	  }).map(function (block) {
	    return BlockTree.generate(contentState, block, decorator);
	  }));
	}

	/**
	 * Generate tree map objects for a new decorator object, preserving any
	 * decorations that are unchanged from the previous decorator.
	 *
	 * Note that in order for this to perform optimally, decoration Lists for
	 * decorators should be preserved when possible to allow for direct immutable
	 * List comparison.
	 */
	function regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {
	  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {
	    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);
	  }).map(function (block) {
	    return BlockTree.generate(content, block, decorator);
	  }));
	}

	/**
	 * Return whether a change should be considered a boundary state, given
	 * the previous change type. Allows us to discard potential boundary states
	 * during standard typing or deletion behavior.
	 */
	function mustBecomeBoundary(editorState, changeType) {
	  var lastChangeType = editorState.getLastChangeType();
	  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';
	}

	function getInlineStyleForCollapsedSelection(content, selection) {
	  var startKey = selection.getStartKey();
	  var startOffset = selection.getStartOffset();
	  var startBlock = content.getBlockForKey(startKey);

	  // If the cursor is not at the start of the block, look backward to
	  // preserve the style of the preceding character.
	  if (startOffset > 0) {
	    return startBlock.getInlineStyleAt(startOffset - 1);
	  }

	  // The caret is at position zero in this block. If the block has any
	  // text at all, use the style of the first character.
	  if (startBlock.getLength()) {
	    return startBlock.getInlineStyleAt(0);
	  }

	  // Otherwise, look upward in the document to find the closest character.
	  return lookUpwardForInlineStyle(content, startKey);
	}

	function getInlineStyleForNonCollapsedSelection(content, selection) {
	  var startKey = selection.getStartKey();
	  var startOffset = selection.getStartOffset();
	  var startBlock = content.getBlockForKey(startKey);

	  // If there is a character just inside the selection, use its style.
	  if (startOffset < startBlock.getLength()) {
	    return startBlock.getInlineStyleAt(startOffset);
	  }

	  // Check if the selection at the end of a non-empty block. Use the last
	  // style in the block.
	  if (startOffset > 0) {
	    return startBlock.getInlineStyleAt(startOffset - 1);
	  }

	  // Otherwise, look upward in the document to find the closest character.
	  return lookUpwardForInlineStyle(content, startKey);
	}

	function lookUpwardForInlineStyle(content, fromKey) {
	  var previousBlock = content.getBlockBefore(fromKey);
	  var previousLength;

	  while (previousBlock) {
	    previousLength = previousBlock.getLength();
	    if (previousLength) {
	      return previousBlock.getInlineStyleAt(previousLength - 1);
	    }
	    previousBlock = content.getBlockBefore(previousBlock.getKey());
	  }

	  return OrderedSet();
	}

	module.exports = EditorState;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BlockTree
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);

	var emptyFunction = __webpack_require__(216);
	var findRangesImmutable = __webpack_require__(196);

	var List = Immutable.List;
	var Repeat = Immutable.Repeat;
	var Record = Immutable.Record;


	var returnTrue = emptyFunction.thatReturnsTrue;

	var FINGERPRINT_DELIMITER = '-';

	var defaultLeafRange = {
	  start: null,
	  end: null
	};

	var LeafRange = Record(defaultLeafRange);

	var defaultDecoratorRange = {
	  start: null,
	  end: null,
	  decoratorKey: null,
	  leaves: null
	};

	var DecoratorRange = Record(defaultDecoratorRange);

	var BlockTree = {
	  /**
	   * Generate a block tree for a given ContentBlock/decorator pair.
	   */
	  generate: function generate(contentState, block, decorator) {
	    var textLength = block.getLength();
	    if (!textLength) {
	      return List.of(new DecoratorRange({
	        start: 0,
	        end: 0,
	        decoratorKey: null,
	        leaves: List.of(new LeafRange({ start: 0, end: 0 }))
	      }));
	    }

	    var leafSets = [];
	    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));

	    var chars = block.getCharacterList();

	    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {
	      leafSets.push(new DecoratorRange({
	        start: start,
	        end: end,
	        decoratorKey: decorations.get(start),
	        leaves: generateLeaves(chars.slice(start, end).toList(), start)
	      }));
	    });

	    return List(leafSets);
	  },

	  /**
	   * Create a string representation of the given tree map. This allows us
	   * to rapidly determine whether a tree has undergone a significant
	   * structural change.
	   */
	  getFingerprint: function getFingerprint(tree) {
	    return tree.map(function (leafSet) {
	      var decoratorKey = leafSet.get('decoratorKey');
	      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';
	      return '' + fingerprintString + '.' + leafSet.get('leaves').size;
	    }).join(FINGERPRINT_DELIMITER);
	  }
	};

	/**
	 * Generate LeafRange records for a given character list.
	 */
	function generateLeaves(characters, offset) {
	  var leaves = [];
	  var inlineStyles = characters.map(function (c) {
	    return c.getStyle();
	  }).toList();
	  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {
	    leaves.push(new LeafRange({
	      start: start + offset,
	      end: end + offset
	    }));
	  });
	  return List(leaves);
	}

	function areEqual(a, b) {
	  return a === b;
	}

	module.exports = BlockTree;

/***/ },
/* 216 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BlockMapBuilder = __webpack_require__(192);
	var CharacterMetadata = __webpack_require__(194);
	var ContentBlock = __webpack_require__(195);
	var DraftEntity = __webpack_require__(218);
	var Immutable = __webpack_require__(193);
	var SelectionState = __webpack_require__(220);

	var generateRandomKey = __webpack_require__(206);
	var sanitizeDraftText = __webpack_require__(221);

	var List = Immutable.List;
	var Record = Immutable.Record;
	var Repeat = Immutable.Repeat;


	var defaultRecord = {
	  entityMap: null,
	  blockMap: null,
	  selectionBefore: null,
	  selectionAfter: null
	};

	var ContentStateRecord = Record(defaultRecord);

	var ContentState = function (_ContentStateRecord) {
	  _inherits(ContentState, _ContentStateRecord);

	  function ContentState() {
	    _classCallCheck(this, ContentState);

	    return _possibleConstructorReturn(this, _ContentStateRecord.apply(this, arguments));
	  }

	  ContentState.prototype.getEntityMap = function getEntityMap() {
	    // TODO: update this when we fully remove DraftEntity
	    return DraftEntity;
	  };

	  ContentState.prototype.getBlockMap = function getBlockMap() {
	    return this.get('blockMap');
	  };

	  ContentState.prototype.getSelectionBefore = function getSelectionBefore() {
	    return this.get('selectionBefore');
	  };

	  ContentState.prototype.getSelectionAfter = function getSelectionAfter() {
	    return this.get('selectionAfter');
	  };

	  ContentState.prototype.getBlockForKey = function getBlockForKey(key) {
	    var block = this.getBlockMap().get(key);
	    return block;
	  };

	  ContentState.prototype.getKeyBefore = function getKeyBefore(key) {
	    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {
	      return v === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getKeyAfter = function getKeyAfter(key) {
	    return this.getBlockMap().keySeq().skipUntil(function (v) {
	      return v === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getBlockAfter = function getBlockAfter(key) {
	    return this.getBlockMap().skipUntil(function (_, k) {
	      return k === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getBlockBefore = function getBlockBefore(key) {
	    return this.getBlockMap().reverse().skipUntil(function (_, k) {
	      return k === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getBlocksAsArray = function getBlocksAsArray() {
	    return this.getBlockMap().toArray();
	  };

	  ContentState.prototype.getFirstBlock = function getFirstBlock() {
	    return this.getBlockMap().first();
	  };

	  ContentState.prototype.getLastBlock = function getLastBlock() {
	    return this.getBlockMap().last();
	  };

	  ContentState.prototype.getPlainText = function getPlainText(delimiter) {
	    return this.getBlockMap().map(function (block) {
	      return block ? block.getText() : '';
	    }).join(delimiter || '\n');
	  };

	  ContentState.prototype.getLastCreatedEntityKey = function getLastCreatedEntityKey() {
	    // TODO: update this when we fully remove DraftEntity
	    return DraftEntity.__getLastCreatedEntityKey();
	  };

	  ContentState.prototype.hasText = function hasText() {
	    var blockMap = this.getBlockMap();
	    return blockMap.size > 1 || blockMap.first().getLength() > 0;
	  };

	  ContentState.prototype.createEntity = function createEntity(type, mutability, data) {
	    // TODO: update this when we fully remove DraftEntity
	    DraftEntity.__create(type, mutability, data);
	    return this;
	  };

	  ContentState.prototype.mergeEntityData = function mergeEntityData(key, toMerge) {
	    // TODO: update this when we fully remove DraftEntity
	    DraftEntity.__mergeData(key, toMerge);
	    return this;
	  };

	  ContentState.prototype.replaceEntityData = function replaceEntityData(key, newData) {
	    // TODO: update this when we fully remove DraftEntity
	    DraftEntity.__replaceData(key, newData);
	    return this;
	  };

	  ContentState.prototype.addEntity = function addEntity(instance) {
	    // TODO: update this when we fully remove DraftEntity
	    DraftEntity.__add(instance);
	    return this;
	  };

	  ContentState.prototype.getEntity = function getEntity(key) {
	    // TODO: update this when we fully remove DraftEntity
	    return DraftEntity.__get(key);
	  };

	  ContentState.createFromBlockArray = function createFromBlockArray(
	  // TODO: update flow type when we completely deprecate the old entity API
	  blocks, entityMap) {
	    // TODO: remove this when we completely deprecate the old entity API
	    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;
	    var blockMap = BlockMapBuilder.createFromArray(theBlocks);
	    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());
	    return new ContentState({
	      blockMap: blockMap,
	      entityMap: entityMap || DraftEntity,
	      selectionBefore: selectionState,
	      selectionAfter: selectionState
	    });
	  };

	  ContentState.createFromText = function createFromText(text) {
	    var delimiter = arguments.length <= 1 || arguments[1] === undefined ? /\r\n?|\n/g : arguments[1];

	    var strings = text.split(delimiter);
	    var blocks = strings.map(function (block) {
	      block = sanitizeDraftText(block);
	      return new ContentBlock({
	        key: generateRandomKey(),
	        text: block,
	        type: 'unstyled',
	        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))
	      });
	    });
	    return ContentState.createFromBlockArray(blocks);
	  };

	  return ContentState;
	}(ContentStateRecord);

	module.exports = ContentState;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEntity
	 * @typechecks
	 * 
	 */

	var DraftEntityInstance = __webpack_require__(219);
	var Immutable = __webpack_require__(193);

	var invariant = __webpack_require__(204);

	var Map = Immutable.Map;


	var instances = Map();
	var instanceKey = 0;

	/**
	 * Temporary utility for generating the warnings
	 */
	function logWarning(oldMethodCall, newMethodCall) {
	  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\nPlease use "' + newMethodCall + '" instead.');
	}

	/**
	 * A "document entity" is an object containing metadata associated with a
	 * piece of text in a ContentBlock.
	 *
	 * For example, a `link` entity might include a `uri` property. When a
	 * ContentBlock is rendered in the browser, text that refers to that link
	 * entity may be rendered as an anchor, with the `uri` as the href value.
	 *
	 * In a ContentBlock, every position in the text may correspond to zero
	 * or one entities. This correspondence is tracked using a key string,
	 * generated via DraftEntity.create() and used to obtain entity metadata
	 * via DraftEntity.get().
	 */
	var DraftEntity = {
	  /**
	   * WARNING: This method will be deprecated soon!
	   * Please use 'contentState.getLastCreatedEntityKey' instead.
	   * ---
	   * Get the random key string from whatever entity was last created.
	   * We need this to support the new API, as part of transitioning to put Entity
	   * storage in contentState.
	   */
	  getLastCreatedEntityKey: function getLastCreatedEntityKey() {
	    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');
	    return DraftEntity.__getLastCreatedEntityKey();
	  },

	  /**
	   * WARNING: This method will be deprecated soon!
	   * Please use 'contentState.createEntity' instead.
	   * ---
	   * Create a DraftEntityInstance and store it for later retrieval.
	   *
	   * A random key string will be generated and returned. This key may
	   * be used to track the entity's usage in a ContentBlock, and for
	   * retrieving data about the entity at render time.
	   */
	  create: function create(type, mutability, data) {
	    logWarning('DraftEntity.create', 'contentState.createEntity');
	    return DraftEntity.__create(type, mutability, data);
	  },

	  /**
	   * WARNING: This method will be deprecated soon!
	   * Please use 'contentState.addEntity' instead.
	   * ---
	   * Add an existing DraftEntityInstance to the DraftEntity map. This is
	   * useful when restoring instances from the server.
	   */
	  add: function add(instance) {
	    logWarning('DraftEntity.add', 'contentState.addEntity');
	    return DraftEntity.__add(instance);
	  },

	  /**
	   * WARNING: This method will be deprecated soon!
	   * Please use 'contentState.getEntity' instead.
	   * ---
	   * Retrieve the entity corresponding to the supplied key string.
	   */
	  get: function get(key) {
	    logWarning('DraftEntity.get', 'contentState.getEntity');
	    return DraftEntity.__get(key);
	  },

	  /**
	   * WARNING: This method will be deprecated soon!
	   * Please use 'contentState.mergeEntityData' instead.
	   * ---
	   * Entity instances are immutable. If you need to update the data for an
	   * instance, this method will merge your data updates and return a new
	   * instance.
	   */
	  mergeData: function mergeData(key, toMerge) {
	    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');
	    return DraftEntity.__mergeData(key, toMerge);
	  },

	  /**
	   * WARNING: This method will be deprecated soon!
	   * Please use 'contentState.replaceEntityData' instead.
	   * ---
	   * Completely replace the data for a given instance.
	   */
	  replaceData: function replaceData(key, newData) {
	    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');
	    return DraftEntity.__replaceData(key, newData);
	  },

	  // ***********************************WARNING******************************
	  // --- the above public API will be deprecated in the next version of Draft!
	  // The methods below this line are private - don't call them directly.

	  /**
	   * Get the random key string from whatever entity was last created.
	   * We need this to support the new API, as part of transitioning to put Entity
	   * storage in contentState.
	   */
	  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {
	    return '' + instanceKey;
	  },

	  /**
	   * Create a DraftEntityInstance and store it for later retrieval.
	   *
	   * A random key string will be generated and returned. This key may
	   * be used to track the entity's usage in a ContentBlock, and for
	   * retrieving data about the entity at render time.
	   */
	  __create: function __create(type, mutability, data) {
	    return DraftEntity.__add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));
	  },

	  /**
	   * Add an existing DraftEntityInstance to the DraftEntity map. This is
	   * useful when restoring instances from the server.
	   */
	  __add: function __add(instance) {
	    var key = '' + ++instanceKey;
	    instances = instances.set(key, instance);
	    return key;
	  },

	  /**
	   * Retrieve the entity corresponding to the supplied key string.
	   */
	  __get: function __get(key) {
	    var instance = instances.get(key);
	    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key.') : invariant(false) : void 0;
	    return instance;
	  },

	  /**
	   * Entity instances are immutable. If you need to update the data for an
	   * instance, this method will merge your data updates and return a new
	   * instance.
	   */
	  __mergeData: function __mergeData(key, toMerge) {
	    var instance = DraftEntity.__get(key);
	    var newData = _extends({}, instance.getData(), toMerge);
	    var newInstance = instance.set('data', newData);
	    instances = instances.set(key, newInstance);
	    return newInstance;
	  },

	  /**
	   * Completely replace the data for a given instance.
	   */
	  __replaceData: function __replaceData(key, newData) {
	    var instance = DraftEntity.__get(key);
	    var newInstance = instance.set('data', newData);
	    instances = instances.set(key, newInstance);
	    return newInstance;
	  }
	};

	module.exports = DraftEntity;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEntityInstance
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Immutable = __webpack_require__(193);

	var Record = Immutable.Record;


	var DraftEntityInstanceRecord = Record({
	  type: 'TOKEN',
	  mutability: 'IMMUTABLE',
	  data: Object
	});

	/**
	 * An instance of a document entity, consisting of a `type` and relevant
	 * `data`, metadata about the entity.
	 *
	 * For instance, a "link" entity might provide a URI, and a "mention"
	 * entity might provide the mentioned user's ID. These pieces of data
	 * may be used when rendering the entity as part of a ContentBlock DOM
	 * representation. For a link, the data would be used as an href for
	 * the rendered anchor. For a mention, the ID could be used to retrieve
	 * a hovercard.
	 */

	var DraftEntityInstance = function (_DraftEntityInstanceR) {
	  _inherits(DraftEntityInstance, _DraftEntityInstanceR);

	  function DraftEntityInstance() {
	    _classCallCheck(this, DraftEntityInstance);

	    return _possibleConstructorReturn(this, _DraftEntityInstanceR.apply(this, arguments));
	  }

	  DraftEntityInstance.prototype.getType = function getType() {
	    return this.get('type');
	  };

	  DraftEntityInstance.prototype.getMutability = function getMutability() {
	    return this.get('mutability');
	  };

	  DraftEntityInstance.prototype.getData = function getData() {
	    return this.get('data');
	  };

	  return DraftEntityInstance;
	}(DraftEntityInstanceRecord);

	module.exports = DraftEntityInstance;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectionState
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Immutable = __webpack_require__(193);

	var Record = Immutable.Record;


	var defaultRecord = {
	  anchorKey: '',
	  anchorOffset: 0,
	  focusKey: '',
	  focusOffset: 0,
	  isBackward: false,
	  hasFocus: false
	};

	var SelectionStateRecord = Record(defaultRecord);

	var SelectionState = function (_SelectionStateRecord) {
	  _inherits(SelectionState, _SelectionStateRecord);

	  function SelectionState() {
	    _classCallCheck(this, SelectionState);

	    return _possibleConstructorReturn(this, _SelectionStateRecord.apply(this, arguments));
	  }

	  SelectionState.prototype.serialize = function serialize() {
	    return 'Anchor: ' + this.getAnchorKey() + ':' + this.getAnchorOffset() + ', ' + 'Focus: ' + this.getFocusKey() + ':' + this.getFocusOffset() + ', ' + 'Is Backward: ' + String(this.getIsBackward()) + ', ' + 'Has Focus: ' + String(this.getHasFocus());
	  };

	  SelectionState.prototype.getAnchorKey = function getAnchorKey() {
	    return this.get('anchorKey');
	  };

	  SelectionState.prototype.getAnchorOffset = function getAnchorOffset() {
	    return this.get('anchorOffset');
	  };

	  SelectionState.prototype.getFocusKey = function getFocusKey() {
	    return this.get('focusKey');
	  };

	  SelectionState.prototype.getFocusOffset = function getFocusOffset() {
	    return this.get('focusOffset');
	  };

	  SelectionState.prototype.getIsBackward = function getIsBackward() {
	    return this.get('isBackward');
	  };

	  SelectionState.prototype.getHasFocus = function getHasFocus() {
	    return this.get('hasFocus');
	  };

	  /**
	   * Return whether the specified range overlaps with an edge of the
	   * SelectionState.
	   */


	  SelectionState.prototype.hasEdgeWithin = function hasEdgeWithin(blockKey, start, end) {
	    var anchorKey = this.getAnchorKey();
	    var focusKey = this.getFocusKey();

	    if (anchorKey === focusKey && anchorKey === blockKey) {
	      var selectionStart = this.getStartOffset();
	      var selectionEnd = this.getEndOffset();
	      return start <= selectionEnd && selectionStart <= end;
	    }

	    if (blockKey !== anchorKey && blockKey !== focusKey) {
	      return false;
	    }

	    var offsetToCheck = blockKey === anchorKey ? this.getAnchorOffset() : this.getFocusOffset();

	    return start <= offsetToCheck && end >= offsetToCheck;
	  };

	  SelectionState.prototype.isCollapsed = function isCollapsed() {
	    return this.getAnchorKey() === this.getFocusKey() && this.getAnchorOffset() === this.getFocusOffset();
	  };

	  SelectionState.prototype.getStartKey = function getStartKey() {
	    return this.getIsBackward() ? this.getFocusKey() : this.getAnchorKey();
	  };

	  SelectionState.prototype.getStartOffset = function getStartOffset() {
	    return this.getIsBackward() ? this.getFocusOffset() : this.getAnchorOffset();
	  };

	  SelectionState.prototype.getEndKey = function getEndKey() {
	    return this.getIsBackward() ? this.getAnchorKey() : this.getFocusKey();
	  };

	  SelectionState.prototype.getEndOffset = function getEndOffset() {
	    return this.getIsBackward() ? this.getAnchorOffset() : this.getFocusOffset();
	  };

	  SelectionState.createEmpty = function createEmpty(key) {
	    return new SelectionState({
	      anchorKey: key,
	      anchorOffset: 0,
	      focusKey: key,
	      focusOffset: 0,
	      isBackward: false,
	      hasFocus: false
	    });
	  };

	  return SelectionState;
	}(SelectionStateRecord);

	module.exports = SelectionState;

/***/ },
/* 221 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule sanitizeDraftText
	 * 
	 */

	'use strict';

	var REGEX_BLOCK_DELIMITER = new RegExp('\r', 'g');

	function sanitizeDraftText(input) {
	  return input.replace(REGEX_BLOCK_DELIMITER, '');
	}

	module.exports = sanitizeDraftText;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EditorBidiService
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(193);
	var UnicodeBidiService = __webpack_require__(223);

	var nullthrows = __webpack_require__(226);

	var OrderedMap = Immutable.OrderedMap;


	var bidiService;

	var EditorBidiService = {
	  getDirectionMap: function getDirectionMap(content, prevBidiMap) {
	    if (!bidiService) {
	      bidiService = new UnicodeBidiService();
	    } else {
	      bidiService.reset();
	    }

	    var blockMap = content.getBlockMap();
	    var nextBidi = blockMap.valueSeq().map(function (block) {
	      return nullthrows(bidiService).getDirection(block.getText());
	    });
	    var bidiMap = OrderedMap(blockMap.keySeq().zip(nextBidi));

	    if (prevBidiMap != null && Immutable.is(prevBidiMap, bidiMap)) {
	      return prevBidiMap;
	    }

	    return bidiMap;
	  }
	};

	module.exports = EditorBidiService;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/**
	 * Stateful API for text direction detection
	 *
	 * This class can be used in applications where you need to detect the
	 * direction of a sequence of text blocks, where each direction shall be used
	 * as the fallback direction for the next one.
	 *
	 * NOTE: A default direction, if not provided, is set based on the global
	 *       direction, as defined by `UnicodeBidiDirection`.
	 *
	 * == Example ==
	 * ```
	 * var UnicodeBidiService = require('UnicodeBidiService');
	 *
	 * var bidiService = new UnicodeBidiService();
	 *
	 * ...
	 *
	 * bidiService.reset();
	 * for (var para in paragraphs) {
	 *   var dir = bidiService.getDirection(para);
	 *   ...
	 * }
	 * ```
	 *
	 * Part of our implementation of Unicode Bidirectional Algorithm (UBA)
	 * Unicode Standard Annex #9 (UAX9)
	 * http://www.unicode.org/reports/tr9/
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var UnicodeBidi = __webpack_require__(224);
	var UnicodeBidiDirection = __webpack_require__(225);

	var invariant = __webpack_require__(204);

	var UnicodeBidiService = function () {

	  /**
	   * Stateful class for paragraph direction detection
	   *
	   * @param defaultDir  Default direction of the service
	   */
	  function UnicodeBidiService(defaultDir) {
	    _classCallCheck(this, UnicodeBidiService);

	    if (!defaultDir) {
	      defaultDir = UnicodeBidiDirection.getGlobalDir();
	    } else {
	      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;
	    }
	    this._defaultDir = defaultDir;
	    this.reset();
	  }

	  /**
	   * Reset the internal state
	   *
	   * Instead of creating a new instance, you can just reset() your instance
	   * everytime you start a new loop.
	   */


	  UnicodeBidiService.prototype.reset = function reset() {
	    this._lastDir = this._defaultDir;
	  };

	  /**
	   * Returns the direction of a block of text, and remembers it as the
	   * fall-back direction for the next paragraph.
	   *
	   * @param str  A text block, e.g. paragraph, table cell, tag
	   * @return     The resolved direction
	   */


	  UnicodeBidiService.prototype.getDirection = function getDirection(str) {
	    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);
	    return this._lastDir;
	  };

	  return UnicodeBidiService;
	}();

	module.exports = UnicodeBidiService;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/**
	 * Basic (stateless) API for text direction detection
	 *
	 * Part of our implementation of Unicode Bidirectional Algorithm (UBA)
	 * Unicode Standard Annex #9 (UAX9)
	 * http://www.unicode.org/reports/tr9/
	 */

	'use strict';

	var UnicodeBidiDirection = __webpack_require__(225);

	var invariant = __webpack_require__(204);

	/**
	 * RegExp ranges of characters with a *Strong* Bidi_Class value.
	 *
	 * Data is based on DerivedBidiClass.txt in UCD version 7.0.0.
	 *
	 * NOTE: For performance reasons, we only support Unicode's
	 *       Basic Multilingual Plane (BMP) for now.
	 */
	var RANGE_BY_BIDI_TYPE = {

	  L: 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BB' + '\u01BC-\u01BF\u01C0-\u01C3\u01C4-\u0293\u0294\u0295-\u02AF\u02B0-\u02B8' + '\u02BB-\u02C1\u02D0-\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376-\u0377' + '\u037A\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1' + '\u03A3-\u03F5\u03F7-\u0481\u0482\u048A-\u052F\u0531-\u0556\u0559' + '\u055A-\u055F\u0561-\u0587\u0589\u0903\u0904-\u0939\u093B\u093D' + '\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0950\u0958-\u0961\u0964-\u0965' + '\u0966-\u096F\u0970\u0971\u0972-\u0980\u0982-\u0983\u0985-\u098C' + '\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD' + '\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09CE\u09D7\u09DC-\u09DD' + '\u09DF-\u09E1\u09E6-\u09EF\u09F0-\u09F1\u09F4-\u09F9\u09FA\u0A03' + '\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33' + '\u0A35-\u0A36\u0A38-\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F' + '\u0A72-\u0A74\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0' + '\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0AD0' + '\u0AE0-\u0AE1\u0AE6-\u0AEF\u0AF0\u0B02-\u0B03\u0B05-\u0B0C\u0B0F-\u0B10' + '\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40' + '\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0B5C-\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F' + '\u0B70\u0B71\u0B72-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95' + '\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9' + '\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7' + '\u0BE6-\u0BEF\u0BF0-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10' + '\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C59\u0C60-\u0C61' + '\u0C66-\u0C6F\u0C7F\u0C82-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8' + '\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CBE\u0CBF\u0CC0-\u0CC4\u0CC6' + '\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0CDE\u0CE0-\u0CE1\u0CE6-\u0CEF' + '\u0CF1-\u0CF2\u0D02-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D' + '\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D57\u0D60-\u0D61' + '\u0D66-\u0D6F\u0D70-\u0D75\u0D79\u0D7A-\u0D7F\u0D82-\u0D83\u0D85-\u0D96' + '\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF' + '\u0DE6-\u0DEF\u0DF2-\u0DF3\u0DF4\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45' + '\u0E46\u0E4F\u0E50-\u0E59\u0E5A-\u0E5B\u0E81-\u0E82\u0E84\u0E87-\u0E88' + '\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7' + '\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6' + '\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F01-\u0F03\u0F04-\u0F12\u0F13\u0F14' + '\u0F15-\u0F17\u0F1A-\u0F1F\u0F20-\u0F29\u0F2A-\u0F33\u0F34\u0F36\u0F38' + '\u0F3E-\u0F3F\u0F40-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C' + '\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FCF\u0FD0-\u0FD4\u0FD5-\u0FD8' + '\u0FD9-\u0FDA\u1000-\u102A\u102B-\u102C\u1031\u1038\u103B-\u103C\u103F' + '\u1040-\u1049\u104A-\u104F\u1050-\u1055\u1056-\u1057\u105A-\u105D\u1061' + '\u1062-\u1064\u1065-\u1066\u1067-\u106D\u106E-\u1070\u1075-\u1081' + '\u1083-\u1084\u1087-\u108C\u108E\u108F\u1090-\u1099\u109A-\u109C' + '\u109E-\u109F\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FB\u10FC' + '\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288' + '\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5' + '\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u1368' + '\u1369-\u137C\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166D-\u166E' + '\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EB-\u16ED\u16EE-\u16F0' + '\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1735-\u1736' + '\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5' + '\u17C7-\u17C8\u17D4-\u17D6\u17D7\u17D8-\u17DA\u17DC\u17E0-\u17E9' + '\u1810-\u1819\u1820-\u1842\u1843\u1844-\u1877\u1880-\u18A8\u18AA' + '\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930-\u1931' + '\u1933-\u1938\u1946-\u194F\u1950-\u196D\u1970-\u1974\u1980-\u19AB' + '\u19B0-\u19C0\u19C1-\u19C7\u19C8-\u19C9\u19D0-\u19D9\u19DA\u1A00-\u1A16' + '\u1A19-\u1A1A\u1A1E-\u1A1F\u1A20-\u1A54\u1A55\u1A57\u1A61\u1A63-\u1A64' + '\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AA6\u1AA7\u1AA8-\u1AAD' + '\u1B04\u1B05-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B45-\u1B4B' + '\u1B50-\u1B59\u1B5A-\u1B60\u1B61-\u1B6A\u1B74-\u1B7C\u1B82\u1B83-\u1BA0' + '\u1BA1\u1BA6-\u1BA7\u1BAA\u1BAE-\u1BAF\u1BB0-\u1BB9\u1BBA-\u1BE5\u1BE7' + '\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1BFC-\u1BFF\u1C00-\u1C23\u1C24-\u1C2B' + '\u1C34-\u1C35\u1C3B-\u1C3F\u1C40-\u1C49\u1C4D-\u1C4F\u1C50-\u1C59' + '\u1C5A-\u1C77\u1C78-\u1C7D\u1C7E-\u1C7F\u1CC0-\u1CC7\u1CD3\u1CE1' + '\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF2-\u1CF3\u1CF5-\u1CF6\u1D00-\u1D2B' + '\u1D2C-\u1D6A\u1D6B-\u1D77\u1D78\u1D79-\u1D9A\u1D9B-\u1DBF\u1E00-\u1F15' + '\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D' + '\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC' + '\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E' + '\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D' + '\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2135-\u2138\u2139' + '\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2182\u2183-\u2184' + '\u2185-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF' + '\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7C-\u2C7D\u2C7E-\u2CE4' + '\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F' + '\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE' + '\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005\u3006\u3007' + '\u3021-\u3029\u302E-\u302F\u3031-\u3035\u3038-\u303A\u303B\u303C' + '\u3041-\u3096\u309D-\u309E\u309F\u30A1-\u30FA\u30FC-\u30FE\u30FF' + '\u3105-\u312D\u3131-\u318E\u3190-\u3191\u3192-\u3195\u3196-\u319F' + '\u31A0-\u31BA\u31F0-\u31FF\u3200-\u321C\u3220-\u3229\u322A-\u3247' + '\u3248-\u324F\u3260-\u327B\u327F\u3280-\u3289\u328A-\u32B0\u32C0-\u32CB' + '\u32D0-\u32FE\u3300-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DB5' + '\u4E00-\u9FCC\uA000-\uA014\uA015\uA016-\uA48C\uA4D0-\uA4F7\uA4F8-\uA4FD' + '\uA4FE-\uA4FF\uA500-\uA60B\uA60C\uA610-\uA61F\uA620-\uA629\uA62A-\uA62B' + '\uA640-\uA66D\uA66E\uA680-\uA69B\uA69C-\uA69D\uA6A0-\uA6E5\uA6E6-\uA6EF' + '\uA6F2-\uA6F7\uA722-\uA76F\uA770\uA771-\uA787\uA789-\uA78A\uA78B-\uA78E' + '\uA790-\uA7AD\uA7B0-\uA7B1\uA7F7\uA7F8-\uA7F9\uA7FA\uA7FB-\uA801' + '\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA823-\uA824\uA827\uA830-\uA835' + '\uA836-\uA837\uA840-\uA873\uA880-\uA881\uA882-\uA8B3\uA8B4-\uA8C3' + '\uA8CE-\uA8CF\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8F8-\uA8FA\uA8FB\uA900-\uA909' + '\uA90A-\uA925\uA92E-\uA92F\uA930-\uA946\uA952-\uA953\uA95F\uA960-\uA97C' + '\uA983\uA984-\uA9B2\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uA9C1-\uA9CD' + '\uA9CF\uA9D0-\uA9D9\uA9DE-\uA9DF\uA9E0-\uA9E4\uA9E6\uA9E7-\uA9EF' + '\uA9F0-\uA9F9\uA9FA-\uA9FE\uAA00-\uAA28\uAA2F-\uAA30\uAA33-\uAA34' + '\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F\uAA60-\uAA6F' + '\uAA70\uAA71-\uAA76\uAA77-\uAA79\uAA7A\uAA7B\uAA7D\uAA7E-\uAAAF\uAAB1' + '\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAADD\uAADE-\uAADF' + '\uAAE0-\uAAEA\uAAEB\uAAEE-\uAAEF\uAAF0-\uAAF1\uAAF2\uAAF3-\uAAF4\uAAF5' + '\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E' + '\uAB30-\uAB5A\uAB5B\uAB5C-\uAB5F\uAB64-\uAB65\uABC0-\uABE2\uABE3-\uABE4' + '\uABE6-\uABE7\uABE9-\uABEA\uABEB\uABEC\uABF0-\uABF9\uAC00-\uD7A3' + '\uD7B0-\uD7C6\uD7CB-\uD7FB\uE000-\uF8FF\uF900-\uFA6D\uFA70-\uFAD9' + '\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFF6F\uFF70' + '\uFF71-\uFF9D\uFF9E-\uFF9F\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF' + '\uFFD2-\uFFD7\uFFDA-\uFFDC',

	  R: '\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05D0-\u05EA\u05EB-\u05EF' + '\u05F0-\u05F2\u05F3-\u05F4\u05F5-\u05FF\u07C0-\u07C9\u07CA-\u07EA' + '\u07F4-\u07F5\u07FA\u07FB-\u07FF\u0800-\u0815\u081A\u0824\u0828' + '\u082E-\u082F\u0830-\u083E\u083F\u0840-\u0858\u085C-\u085D\u085E' + '\u085F-\u089F\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB37\uFB38-\uFB3C' + '\uFB3D\uFB3E\uFB3F\uFB40-\uFB41\uFB42\uFB43-\uFB44\uFB45\uFB46-\uFB4F',

	  AL: '\u0608\u060B\u060D\u061B\u061C\u061D\u061E-\u061F\u0620-\u063F\u0640' + '\u0641-\u064A\u066D\u066E-\u066F\u0671-\u06D3\u06D4\u06D5\u06E5-\u06E6' + '\u06EE-\u06EF\u06FA-\u06FC\u06FD-\u06FE\u06FF\u0700-\u070D\u070E\u070F' + '\u0710\u0712-\u072F\u074B-\u074C\u074D-\u07A5\u07B1\u07B2-\u07BF' + '\u08A0-\u08B2\u08B3-\u08E3\uFB50-\uFBB1\uFBB2-\uFBC1\uFBC2-\uFBD2' + '\uFBD3-\uFD3D\uFD40-\uFD4F\uFD50-\uFD8F\uFD90-\uFD91\uFD92-\uFDC7' + '\uFDC8-\uFDCF\uFDF0-\uFDFB\uFDFC\uFDFE-\uFDFF\uFE70-\uFE74\uFE75' + '\uFE76-\uFEFC\uFEFD-\uFEFE'

	};

	var REGEX_STRONG = new RegExp('[' + RANGE_BY_BIDI_TYPE.L + RANGE_BY_BIDI_TYPE.R + RANGE_BY_BIDI_TYPE.AL + ']');

	var REGEX_RTL = new RegExp('[' + RANGE_BY_BIDI_TYPE.R + RANGE_BY_BIDI_TYPE.AL + ']');

	/**
	 * Returns the first strong character (has Bidi_Class value of L, R, or AL).
	 *
	 * @param str  A text block; e.g. paragraph, table cell, tag
	 * @return     A character with strong bidi direction, or null if not found
	 */
	function firstStrongChar(str) {
	  var match = REGEX_STRONG.exec(str);
	  return match == null ? null : match[0];
	}

	/**
	 * Returns the direction of a block of text, based on the direction of its
	 * first strong character (has Bidi_Class value of L, R, or AL).
	 *
	 * @param str  A text block; e.g. paragraph, table cell, tag
	 * @return     The resolved direction
	 */
	function firstStrongCharDir(str) {
	  var strongChar = firstStrongChar(str);
	  if (strongChar == null) {
	    return UnicodeBidiDirection.NEUTRAL;
	  }
	  return REGEX_RTL.exec(strongChar) ? UnicodeBidiDirection.RTL : UnicodeBidiDirection.LTR;
	}

	/**
	 * Returns the direction of a block of text, based on the direction of its
	 * first strong character (has Bidi_Class value of L, R, or AL), or a fallback
	 * direction, if no strong character is found.
	 *
	 * This function is supposed to be used in respect to Higher-Level Protocol
	 * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)
	 *
	 * @param str       A text block; e.g. paragraph, table cell, tag
	 * @param fallback  Fallback direction, used if no strong direction detected
	 *                  for the block (default = NEUTRAL)
	 * @return          The resolved direction
	 */
	function resolveBlockDir(str, fallback) {
	  fallback = fallback || UnicodeBidiDirection.NEUTRAL;
	  if (!str.length) {
	    return fallback;
	  }
	  var blockDir = firstStrongCharDir(str);
	  return blockDir === UnicodeBidiDirection.NEUTRAL ? fallback : blockDir;
	}

	/**
	 * Returns the direction of a block of text, based on the direction of its
	 * first strong character (has Bidi_Class value of L, R, or AL), or a fallback
	 * direction, if no strong character is found.
	 *
	 * NOTE: This function is similar to resolveBlockDir(), but uses the global
	 * direction as the fallback, so it *always* returns a Strong direction,
	 * making it useful for integration in places that you need to make the final
	 * decision, like setting some CSS class.
	 *
	 * This function is supposed to be used in respect to Higher-Level Protocol
	 * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)
	 *
	 * @param str             A text block; e.g. paragraph, table cell
	 * @param strongFallback  Fallback direction, used if no strong direction
	 *                        detected for the block (default = global direction)
	 * @return                The resolved Strong direction
	 */
	function getDirection(str, strongFallback) {
	  if (!strongFallback) {
	    strongFallback = UnicodeBidiDirection.getGlobalDir();
	  }
	  !UnicodeBidiDirection.isStrong(strongFallback) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Fallback direction must be a strong direction') : invariant(false) : void 0;
	  return resolveBlockDir(str, strongFallback);
	}

	/**
	 * Returns true if getDirection(arguments...) returns LTR.
	 *
	 * @param str             A text block; e.g. paragraph, table cell
	 * @param strongFallback  Fallback direction, used if no strong direction
	 *                        detected for the block (default = global direction)
	 * @return                True if the resolved direction is LTR
	 */
	function isDirectionLTR(str, strongFallback) {
	  return getDirection(str, strongFallback) === UnicodeBidiDirection.LTR;
	}

	/**
	 * Returns true if getDirection(arguments...) returns RTL.
	 *
	 * @param str             A text block; e.g. paragraph, table cell
	 * @param strongFallback  Fallback direction, used if no strong direction
	 *                        detected for the block (default = global direction)
	 * @return                True if the resolved direction is RTL
	 */
	function isDirectionRTL(str, strongFallback) {
	  return getDirection(str, strongFallback) === UnicodeBidiDirection.RTL;
	}

	var UnicodeBidi = {
	  firstStrongChar: firstStrongChar,
	  firstStrongCharDir: firstStrongCharDir,
	  resolveBlockDir: resolveBlockDir,
	  getDirection: getDirection,
	  isDirectionLTR: isDirectionLTR,
	  isDirectionRTL: isDirectionRTL
	};

	module.exports = UnicodeBidi;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/**
	 * Constants to represent text directionality
	 *
	 * Also defines a *global* direciton, to be used in bidi algorithms as a
	 * default fallback direciton, when no better direction is found or provided.
	 *
	 * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial
	 *       global direction value based on the application.
	 *
	 * Part of the implementation of Unicode Bidirectional Algorithm (UBA)
	 * Unicode Standard Annex #9 (UAX9)
	 * http://www.unicode.org/reports/tr9/
	 */

	'use strict';

	var invariant = __webpack_require__(204);

	var NEUTRAL = 'NEUTRAL'; // No strong direction
	var LTR = 'LTR'; // Left-to-Right direction
	var RTL = 'RTL'; // Right-to-Left direction

	var globalDir = null;

	// == Helpers ==

	/**
	 * Check if a directionality value is a Strong one
	 */
	function isStrong(dir) {
	  return dir === LTR || dir === RTL;
	}

	/**
	 * Get string value to be used for `dir` HTML attribute or `direction` CSS
	 * property.
	 */
	function getHTMLDir(dir) {
	  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;
	  return dir === LTR ? 'ltr' : 'rtl';
	}

	/**
	 * Get string value to be used for `dir` HTML attribute or `direction` CSS
	 * property, but returns null if `dir` has same value as `otherDir`.
	 * `null`.
	 */
	function getHTMLDirIfDifferent(dir, otherDir) {
	  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;
	  !isStrong(otherDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;
	  return dir === otherDir ? null : getHTMLDir(dir);
	}

	// == Global Direction ==

	/**
	 * Set the global direction.
	 */
	function setGlobalDir(dir) {
	  globalDir = dir;
	}

	/**
	 * Initialize the global direction
	 */
	function initGlobalDir() {
	  setGlobalDir(LTR);
	}

	/**
	 * Get the global direction
	 */
	function getGlobalDir() {
	  if (!globalDir) {
	    this.initGlobalDir();
	  }
	  !globalDir ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;
	  return globalDir;
	}

	var UnicodeBidiDirection = {
	  // Values
	  NEUTRAL: NEUTRAL,
	  LTR: LTR,
	  RTL: RTL,
	  // Helpers
	  isStrong: isStrong,
	  getHTMLDir: getHTMLDir,
	  getHTMLDirIfDifferent: getHTMLDirIfDifferent,
	  // Global Direction
	  setGlobalDir: setGlobalDir,
	  initGlobalDir: initGlobalDir,
	  getGlobalDir: getGlobalDir
	};

	module.exports = UnicodeBidiDirection;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 226 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var nullthrows = function nullthrows(x) {
	  if (x != null) {
	    return x;
	  }
	  throw new Error("Got unexpected null or undefined");
	};

	module.exports = nullthrows;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CompositeDraftDecorator
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Immutable = __webpack_require__(193);

	var List = Immutable.List;


	var DELIMITER = '.';

	/**
	 * A CompositeDraftDecorator traverses through a list of DraftDecorator
	 * instances to identify sections of a ContentBlock that should be rendered
	 * in a "decorated" manner. For example, hashtags, mentions, and links may
	 * be intended to stand out visually, be rendered as anchors, etc.
	 *
	 * The list of decorators supplied to the constructor will be used in the
	 * order they are provided. This allows the caller to specify a priority for
	 * string matching, in case of match collisions among decorators.
	 *
	 * For instance, I may have a link with a `#` in its text. Though this section
	 * of text may match our hashtag decorator, it should not be treated as a
	 * hashtag. I should therefore list my link DraftDecorator
	 * before my hashtag DraftDecorator when constructing this composite
	 * decorator instance.
	 *
	 * Thus, when a collision like this is encountered, the earlier match is
	 * preserved and the new match is discarded.
	 */

	var CompositeDraftDecorator = function () {
	  function CompositeDraftDecorator(decorators) {
	    _classCallCheck(this, CompositeDraftDecorator);

	    // Copy the decorator array, since we use this array order to determine
	    // precedence of decoration matching. If the array is mutated externally,
	    // we don't want to be affected here.
	    this._decorators = decorators.slice();
	  }

	  CompositeDraftDecorator.prototype.getDecorations = function getDecorations(block, contentState) {
	    var decorations = Array(block.getText().length).fill(null);

	    this._decorators.forEach(function ( /*object*/decorator, /*number*/ii) {
	      var counter = 0;
	      var strategy = decorator.strategy;
	      var callback = function callback( /*number*/start, /*number*/end) {
	        // Find out if any of our matching range is already occupied
	        // by another decorator. If so, discard the match. Otherwise, store
	        // the component key for rendering.
	        if (canOccupySlice(decorations, start, end)) {
	          occupySlice(decorations, start, end, ii + DELIMITER + counter);
	          counter++;
	        }
	      };
	      strategy(block, callback, contentState);
	    });

	    return List(decorations);
	  };

	  CompositeDraftDecorator.prototype.getComponentForKey = function getComponentForKey(key) {
	    var componentKey = parseInt(key.split(DELIMITER)[0], 10);
	    return this._decorators[componentKey].component;
	  };

	  CompositeDraftDecorator.prototype.getPropsForKey = function getPropsForKey(key) {
	    var componentKey = parseInt(key.split(DELIMITER)[0], 10);
	    return this._decorators[componentKey].props;
	  };

	  return CompositeDraftDecorator;
	}();

	/**
	 * Determine whether we can occupy the specified slice of the decorations
	 * array.
	 */


	function canOccupySlice(decorations, start, end) {
	  for (var ii = start; ii < end; ii++) {
	    if (decorations[ii] != null) {
	      return false;
	    }
	  }
	  return true;
	}

	/**
	 * Splice the specified component into our decoration array at the desired
	 * range.
	 */
	function occupySlice(targetArr, start, end, componentKey) {
	  for (var ii = start; ii < end; ii++) {
	    targetArr[ii] = componentKey;
	  }
	}

	module.exports = CompositeDraftDecorator;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultDraftBlockRenderMap
	 * 
	 */

	'use strict';

	var _require = __webpack_require__(193);

	var Map = _require.Map;

	var React = __webpack_require__(1);

	var cx = __webpack_require__(229);

	var UL_WRAP = React.createElement('ul', { className: cx('public/DraftStyleDefault/ul') });
	var OL_WRAP = React.createElement('ol', { className: cx('public/DraftStyleDefault/ol') });
	var PRE_WRAP = React.createElement('pre', { className: cx('public/DraftStyleDefault/pre') });

	var DefaultDraftBlockRenderMap = Map({
	  'header-one': {
	    element: 'h1'
	  },
	  'header-two': {
	    element: 'h2'
	  },
	  'header-three': {
	    element: 'h3'
	  },
	  'header-four': {
	    element: 'h4'
	  },
	  'header-five': {
	    element: 'h5'
	  },
	  'header-six': {
	    element: 'h6'
	  },
	  'unordered-list-item': {
	    element: 'li',
	    wrapper: UL_WRAP
	  },
	  'ordered-list-item': {
	    element: 'li',
	    wrapper: OL_WRAP
	  },
	  'blockquote': {
	    element: 'blockquote'
	  },
	  'atomic': {
	    element: 'figure'
	  },
	  'code-block': {
	    element: 'pre',
	    wrapper: PRE_WRAP
	  },
	  'unstyled': {
	    element: 'div',
	    aliasedElements: ['p']
	  }
	});

	module.exports = DefaultDraftBlockRenderMap;

/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */
	function cx(classNames) {
	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function (className) {
	      return classNames[className];
	    }).map(replace).join(' ');
	  }
	  return Array.prototype.map.call(arguments, replace).join(' ');
	}

	function replace(str) {
	  return str.replace(/\//g, '-');
	}

	module.exports = cx;

/***/ },
/* 230 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultDraftInlineStyle
	 * 
	 */

	'use strict';

	module.exports = {
	  BOLD: {
	    fontWeight: 'bold'
	  },

	  CODE: {
	    fontFamily: 'monospace',
	    wordWrap: 'break-word'
	  },

	  ITALIC: {
	    fontStyle: 'italic'
	  },

	  STRIKETHROUGH: {
	    textDecoration: 'line-through'
	  },

	  UNDERLINE: {
	    textDecoration: 'underline'
	  }
	};

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditor.react
	 * @typechecks
	 * 
	 * @preventMunge
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DefaultDraftBlockRenderMap = __webpack_require__(228);
	var DefaultDraftInlineStyle = __webpack_require__(230);
	var DraftEditorCompositionHandler = __webpack_require__(232);
	var DraftEditorContents = __webpack_require__(236);
	var DraftEditorDragHandler = __webpack_require__(265);
	var DraftEditorEditHandler = __webpack_require__(274);
	var DraftEditorPlaceholder = __webpack_require__(317);
	var EditorState = __webpack_require__(214);
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(32);
	var Scroll = __webpack_require__(253);
	var Style = __webpack_require__(254);
	var UserAgent = __webpack_require__(240);

	var cx = __webpack_require__(229);
	var emptyFunction = __webpack_require__(216);
	var generateRandomKey = __webpack_require__(206);
	var getDefaultKeyBinding = __webpack_require__(318);
	var nullthrows = __webpack_require__(226);
	var getScrollPosition = __webpack_require__(260);

	var isIE = UserAgent.isBrowser('IE');

	// IE does not support the `input` event on contentEditable, so we can't
	// observe spellcheck behavior.
	var allowSpellCheck = !isIE;

	// Define a set of handler objects to correspond to each possible `mode`
	// of editor behavior.
	var handlerMap = {
	  'edit': DraftEditorEditHandler,
	  'composite': DraftEditorCompositionHandler,
	  'drag': DraftEditorDragHandler,
	  'cut': null,
	  'render': null
	};

	/**
	 * `DraftEditor` is the root editor component. It composes a `contentEditable`
	 * div, and provides a wide variety of useful function props for managing the
	 * state of the editor. See `DraftEditorProps` for details.
	 */
	var DraftEditor = function (_React$Component) {
	  _inherits(DraftEditor, _React$Component);

	  function DraftEditor(props) {
	    _classCallCheck(this, DraftEditor);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this._blockSelectEvents = false;
	    _this._clipboard = null;
	    _this._handler = null;
	    _this._dragCount = 0;
	    _this._editorKey = generateRandomKey();
	    _this._placeholderAccessibilityID = 'placeholder-' + _this._editorKey;
	    _this._latestEditorState = props.editorState;

	    _this._onBeforeInput = _this._buildHandler('onBeforeInput');
	    _this._onBlur = _this._buildHandler('onBlur');
	    _this._onCharacterData = _this._buildHandler('onCharacterData');
	    _this._onCompositionEnd = _this._buildHandler('onCompositionEnd');
	    _this._onCompositionStart = _this._buildHandler('onCompositionStart');
	    _this._onCopy = _this._buildHandler('onCopy');
	    _this._onCut = _this._buildHandler('onCut');
	    _this._onDragEnd = _this._buildHandler('onDragEnd');
	    _this._onDragOver = _this._buildHandler('onDragOver');
	    _this._onDragStart = _this._buildHandler('onDragStart');
	    _this._onDrop = _this._buildHandler('onDrop');
	    _this._onInput = _this._buildHandler('onInput');
	    _this._onFocus = _this._buildHandler('onFocus');
	    _this._onKeyDown = _this._buildHandler('onKeyDown');
	    _this._onKeyPress = _this._buildHandler('onKeyPress');
	    _this._onKeyUp = _this._buildHandler('onKeyUp');
	    _this._onMouseDown = _this._buildHandler('onMouseDown');
	    _this._onMouseUp = _this._buildHandler('onMouseUp');
	    _this._onPaste = _this._buildHandler('onPaste');
	    _this._onSelect = _this._buildHandler('onSelect');

	    // Manual binding for public and internal methods.
	    _this.focus = _this._focus.bind(_this);
	    _this.blur = _this._blur.bind(_this);
	    _this.setMode = _this._setMode.bind(_this);
	    _this.exitCurrentMode = _this._exitCurrentMode.bind(_this);
	    _this.restoreEditorDOM = _this._restoreEditorDOM.bind(_this);
	    _this.setClipboard = _this._setClipboard.bind(_this);
	    _this.getClipboard = _this._getClipboard.bind(_this);
	    _this.getEditorKey = function () {
	      return _this._editorKey;
	    };
	    _this.update = _this._update.bind(_this);
	    _this.onDragEnter = _this._onDragEnter.bind(_this);
	    _this.onDragLeave = _this._onDragLeave.bind(_this);

	    // See `_restoreEditorDOM()`.
	    _this.state = { containerKey: 0 };
	    return _this;
	  }

	  /**
	   * Build a method that will pass the event to the specified handler method.
	   * This allows us to look up the correct handler function for the current
	   * editor mode, if any has been specified.
	   */


	  /**
	   * Define proxies that can route events to the current handler.
	   */


	  DraftEditor.prototype._buildHandler = function _buildHandler(eventName) {
	    var _this2 = this;

	    return function (e) {
	      if (!_this2.props.readOnly) {
	        var method = _this2._handler && _this2._handler[eventName];
	        method && method(_this2, e);
	      }
	    };
	  };

	  DraftEditor.prototype._showPlaceholder = function _showPlaceholder() {
	    return !!this.props.placeholder && !this.props.editorState.isInCompositionMode() && !this.props.editorState.getCurrentContent().hasText();
	  };

	  DraftEditor.prototype._renderPlaceholder = function _renderPlaceholder() {
	    if (this._showPlaceholder()) {
	      return React.createElement(DraftEditorPlaceholder, {
	        text: nullthrows(this.props.placeholder),
	        editorState: this.props.editorState,
	        textAlignment: this.props.textAlignment,
	        accessibilityID: this._placeholderAccessibilityID
	      });
	    }
	    return null;
	  };

	  DraftEditor.prototype.render = function render() {
	    var _props = this.props;
	    var readOnly = _props.readOnly;
	    var textAlignment = _props.textAlignment;

	    var rootClass = cx({
	      'DraftEditor/root': true,
	      'DraftEditor/alignLeft': textAlignment === 'left',
	      'DraftEditor/alignRight': textAlignment === 'right',
	      'DraftEditor/alignCenter': textAlignment === 'center'
	    });

	    var contentStyle = {
	      outline: 'none',
	      whiteSpace: 'pre-wrap',
	      wordWrap: 'break-word'
	    };

	    return React.createElement(
	      'div',
	      { className: rootClass },
	      this._renderPlaceholder(),
	      React.createElement(
	        'div',
	        {
	          className: cx('DraftEditor/editorContainer'),
	          key: 'editor' + this.state.containerKey,
	          ref: 'editorContainer' },
	        React.createElement(
	          'div',
	          {
	            'aria-activedescendant': readOnly ? null : this.props.ariaActiveDescendantID,
	            'aria-autocomplete': readOnly ? null : this.props.ariaAutoComplete,
	            'aria-describedby': this._showPlaceholder() ? this._placeholderAccessibilityID : null,
	            'aria-expanded': readOnly ? null : this.props.ariaExpanded,
	            'aria-haspopup': readOnly ? null : this.props.ariaHasPopup,
	            'aria-label': this.props.ariaLabel,
	            'aria-owns': readOnly ? null : this.props.ariaOwneeID,
	            className: cx('public/DraftEditor/content'),
	            contentEditable: !readOnly,
	            'data-testid': this.props.webDriverTestID,
	            onBeforeInput: this._onBeforeInput,
	            onBlur: this._onBlur,
	            onCompositionEnd: this._onCompositionEnd,
	            onCompositionStart: this._onCompositionStart,
	            onCopy: this._onCopy,
	            onCut: this._onCut,
	            onDragEnd: this._onDragEnd,
	            onDragEnter: this.onDragEnter,
	            onDragLeave: this.onDragLeave,
	            onDragOver: this._onDragOver,
	            onDragStart: this._onDragStart,
	            onDrop: this._onDrop,
	            onFocus: this._onFocus,
	            onInput: this._onInput,
	            onKeyDown: this._onKeyDown,
	            onKeyPress: this._onKeyPress,
	            onKeyUp: this._onKeyUp,
	            onMouseUp: this._onMouseUp,
	            onPaste: this._onPaste,
	            onSelect: this._onSelect,
	            ref: 'editor',
	            role: readOnly ? null : this.props.role || 'textbox',
	            spellCheck: allowSpellCheck && this.props.spellCheck,
	            style: contentStyle,
	            suppressContentEditableWarning: true,
	            tabIndex: this.props.tabIndex },
	          React.createElement(DraftEditorContents, {
	            blockRenderMap: this.props.blockRenderMap,
	            blockRendererFn: this.props.blockRendererFn,
	            blockStyleFn: this.props.blockStyleFn,
	            customStyleMap: _extends({}, DefaultDraftInlineStyle, this.props.customStyleMap),
	            customStyleFn: this.props.customStyleFn,
	            editorKey: this._editorKey,
	            editorState: this.props.editorState
	          })
	        )
	      )
	    );
	  };

	  DraftEditor.prototype.componentDidMount = function componentDidMount() {
	    this.setMode('edit');

	    /**
	     * IE has a hardcoded "feature" that attempts to convert link text into
	     * anchors in contentEditable DOM. This breaks the editor's expectations of
	     * the DOM, and control is lost. Disable it to make IE behave.
	     * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/
	     * ie9-beta-minor-change-list.aspx
	     */
	    if (isIE) {
	      document.execCommand('AutoUrlDetect', false, false);
	    }
	  };

	  /**
	   * Prevent selection events from affecting the current editor state. This
	   * is mostly intended to defend against IE, which fires off `selectionchange`
	   * events regardless of whether the selection is set via the browser or
	   * programmatically. We only care about selection events that occur because
	   * of browser interaction, not re-renders and forced selections.
	   */


	  DraftEditor.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    this._blockSelectEvents = true;
	    this._latestEditorState = nextProps.editorState;
	  };

	  DraftEditor.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._blockSelectEvents = false;
	  };

	  /**
	   * Used via `this.focus()`.
	   *
	   * Force focus back onto the editor node.
	   *
	   * Forcing focus causes the browser to scroll to the top of the editor, which
	   * may be undesirable when the editor is taller than the viewport. To solve
	   * this, either use a specified scroll position (in cases like `cut` behavior
	   * where it should be restored to a known position) or store the current
	   * scroll state and put it back in place after focus has been forced.
	   */


	  DraftEditor.prototype._focus = function _focus(scrollPosition) {
	    var editorState = this.props.editorState;

	    var alreadyHasFocus = editorState.getSelection().getHasFocus();
	    var editorNode = ReactDOM.findDOMNode(this.refs.editor);

	    var scrollParent = Style.getScrollParent(editorNode);

	    var _ref = scrollPosition || getScrollPosition(scrollParent);

	    var x = _ref.x;
	    var y = _ref.y;


	    editorNode.focus();
	    if (scrollParent === window) {
	      window.scrollTo(x, y);
	    } else {
	      Scroll.setTop(scrollParent, y);
	    }

	    // On Chrome and Safari, calling focus on contenteditable focuses the
	    // cursor at the first character. This is something you don't expect when
	    // you're clicking on an input element but not directly on a character.
	    // Put the cursor back where it was before the blur.
	    if (!alreadyHasFocus) {
	      this.update(EditorState.forceSelection(editorState, editorState.getSelection()));
	    }
	  };

	  DraftEditor.prototype._blur = function _blur() {
	    ReactDOM.findDOMNode(this.refs.editor).blur();
	  };

	  /**
	   * Used via `this.setMode(...)`.
	   *
	   * Set the behavior mode for the editor component. This switches the current
	   * handler module to ensure that DOM events are managed appropriately for
	   * the active mode.
	   */


	  DraftEditor.prototype._setMode = function _setMode(mode) {
	    this._handler = handlerMap[mode];
	  };

	  DraftEditor.prototype._exitCurrentMode = function _exitCurrentMode() {
	    this.setMode('edit');
	  };

	  /**
	   * Used via `this.restoreEditorDOM()`.
	   *
	   * Force a complete re-render of the editor based on the current EditorState.
	   * This is useful when we know we are going to lose control of the DOM
	   * state (cut command, IME) and we want to make sure that reconciliation
	   * occurs on a version of the DOM that is synchronized with our EditorState.
	   */


	  DraftEditor.prototype._restoreEditorDOM = function _restoreEditorDOM(scrollPosition) {
	    var _this3 = this;

	    this.setState({ containerKey: this.state.containerKey + 1 }, function () {
	      _this3._focus(scrollPosition);
	    });
	  };

	  /**
	   * Used via `this.setClipboard(...)`.
	   *
	   * Set the clipboard state for a cut/copy event.
	   */


	  DraftEditor.prototype._setClipboard = function _setClipboard(clipboard) {
	    this._clipboard = clipboard;
	  };

	  /**
	   * Used via `this.getClipboard()`.
	   *
	   * Retrieve the clipboard state for a cut/copy event.
	   */


	  DraftEditor.prototype._getClipboard = function _getClipboard() {
	    return this._clipboard;
	  };

	  /**
	   * Used via `this.update(...)`.
	   *
	   * Propagate a new `EditorState` object to higher-level components. This is
	   * the method by which event handlers inform the `DraftEditor` component of
	   * state changes. A component that composes a `DraftEditor` **must** provide
	   * an `onChange` prop to receive state updates passed along from this
	   * function.
	   */


	  DraftEditor.prototype._update = function _update(editorState) {
	    this._latestEditorState = editorState;
	    this.props.onChange(editorState);
	  };

	  /**
	   * Used in conjunction with `_onDragLeave()`, by counting the number of times
	   * a dragged element enters and leaves the editor (or any of its children),
	   * to determine when the dragged element absolutely leaves the editor.
	   */


	  DraftEditor.prototype._onDragEnter = function _onDragEnter() {
	    this._dragCount++;
	  };

	  /**
	   * See `_onDragEnter()`.
	   */


	  DraftEditor.prototype._onDragLeave = function _onDragLeave() {
	    this._dragCount--;
	    if (this._dragCount === 0) {
	      this.exitCurrentMode();
	    }
	  };

	  return DraftEditor;
	}(React.Component);

	DraftEditor.defaultProps = {
	  blockRenderMap: DefaultDraftBlockRenderMap,
	  blockRendererFn: emptyFunction.thatReturnsNull,
	  blockStyleFn: emptyFunction.thatReturns(''),
	  keyBindingFn: getDefaultKeyBinding,
	  readOnly: false,
	  spellCheck: false,
	  stripPastedStyles: false
	};


	module.exports = DraftEditor;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorCompositionHandler
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);
	var Keys = __webpack_require__(233);

	var getEntityKeyForSelection = __webpack_require__(234);
	var isSelectionAtLeafStart = __webpack_require__(235);

	/**
	 * Millisecond delay to allow `compositionstart` to fire again upon
	 * `compositionend`.
	 *
	 * This is used for Korean input to ensure that typing can continue without
	 * the editor trying to render too quickly. More specifically, Safari 7.1+
	 * triggers `compositionstart` a little slower than Chrome/FF, which
	 * leads to composed characters being resolved and re-render occurring
	 * sooner than we want.
	 */
	var RESOLVE_DELAY = 20;

	/**
	 * A handful of variables used to track the current composition and its
	 * resolution status. These exist at the module level because it is not
	 * possible to have compositions occurring in multiple editors simultaneously,
	 * and it simplifies state management with respect to the DraftEditor component.
	 */
	var resolved = false;
	var stillComposing = false;
	var textInputData = '';

	var DraftEditorCompositionHandler = {
	  onBeforeInput: function onBeforeInput(editor, e) {
	    textInputData = (textInputData || '') + e.data;
	  },

	  /**
	   * A `compositionstart` event has fired while we're still in composition
	   * mode. Continue the current composition session to prevent a re-render.
	   */
	  onCompositionStart: function onCompositionStart(editor) {
	    stillComposing = true;
	  },

	  /**
	   * Attempt to end the current composition session.
	   *
	   * Defer handling because browser will still insert the chars into active
	   * element after `compositionend`. If a `compositionstart` event fires
	   * before `resolveComposition` executes, our composition session will
	   * continue.
	   *
	   * The `resolved` flag is useful because certain IME interfaces fire the
	   * `compositionend` event multiple times, thus queueing up multiple attempts
	   * at handling the composition. Since handling the same composition event
	   * twice could break the DOM, we only use the first event. Example: Arabic
	   * Google Input Tools on Windows 8.1 fires `compositionend` three times.
	   */
	  onCompositionEnd: function onCompositionEnd(editor) {
	    resolved = false;
	    stillComposing = false;
	    setTimeout(function () {
	      if (!resolved) {
	        DraftEditorCompositionHandler.resolveComposition(editor);
	      }
	    }, RESOLVE_DELAY);
	  },

	  /**
	   * In Safari, keydown events may fire when committing compositions. If
	   * the arrow keys are used to commit, prevent default so that the cursor
	   * doesn't move, otherwise it will jump back noticeably on re-render.
	   */
	  onKeyDown: function onKeyDown(editor, e) {
	    if (!stillComposing) {
	      // If a keydown event is received after compositionend but before the
	      // 20ms timer expires (ex: type option-E then backspace, or type A then
	      // backspace in 2-Set Korean), we should immediately resolve the
	      // composition and reinterpret the key press in edit mode.
	      DraftEditorCompositionHandler.resolveComposition(editor);
	      editor._onKeyDown(e);
	      return;
	    }
	    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {
	      e.preventDefault();
	    }
	  },

	  /**
	   * Keypress events may fire when committing compositions. In Firefox,
	   * pressing RETURN commits the composition and inserts extra newline
	   * characters that we do not want. `preventDefault` allows the composition
	   * to be committed while preventing the extra characters.
	   */
	  onKeyPress: function onKeyPress(editor, e) {
	    if (e.which === Keys.RETURN) {
	      e.preventDefault();
	    }
	  },

	  /**
	   * Attempt to insert composed characters into the document.
	   *
	   * If we are still in a composition session, do nothing. Otherwise, insert
	   * the characters into the document and terminate the composition session.
	   *
	   * If no characters were composed -- for instance, the user
	   * deleted all composed characters and committed nothing new --
	   * force a re-render. We also re-render when the composition occurs
	   * at the beginning of a leaf, to ensure that if the browser has
	   * created a new text node for the composition, we will discard it.
	   *
	   * Resetting innerHTML will move focus to the beginning of the editor,
	   * so we update to force it back to the correct place.
	   */
	  resolveComposition: function resolveComposition(editor) {
	    if (stillComposing) {
	      return;
	    }

	    resolved = true;
	    var composedChars = textInputData;
	    textInputData = '';

	    var editorState = EditorState.set(editor._latestEditorState, {
	      inCompositionMode: false
	    });

	    var currentStyle = editorState.getCurrentInlineStyle();
	    var entityKey = getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection());

	    var mustReset = !composedChars || isSelectionAtLeafStart(editorState) || currentStyle.size > 0 || entityKey !== null;

	    if (mustReset) {
	      editor.restoreEditorDOM();
	    }

	    editor.exitCurrentMode();

	    if (composedChars) {
	      // If characters have been composed, re-rendering with the update
	      // is sufficient to reset the editor.
	      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), composedChars, currentStyle, entityKey);
	      editor.update(EditorState.push(editorState, contentState, 'insert-characters'));
	      return;
	    }

	    if (mustReset) {
	      editor.update(EditorState.set(editorState, {
	        nativelyRenderedContent: null,
	        forceSelection: true
	      }));
	    }
	  }
	};

	module.exports = DraftEditorCompositionHandler;

/***/ },
/* 233 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	module.exports = {
	  BACKSPACE: 8,
	  TAB: 9,
	  RETURN: 13,
	  ALT: 18,
	  ESC: 27,
	  SPACE: 32,
	  PAGE_UP: 33,
	  PAGE_DOWN: 34,
	  END: 35,
	  HOME: 36,
	  LEFT: 37,
	  UP: 38,
	  RIGHT: 39,
	  DOWN: 40,
	  DELETE: 46,
	  COMMA: 188,
	  PERIOD: 190,
	  A: 65,
	  Z: 90,
	  ZERO: 48,
	  NUMPAD_0: 96,
	  NUMPAD_9: 105
	};

/***/ },
/* 234 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEntityKeyForSelection
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	 * Return the entity key that should be used when inserting text for the
	 * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`
	 * and `SEGMENTED` entities should not be used for insertion behavior.
	 */
	function getEntityKeyForSelection(contentState, targetSelection) {
	  var entityKey;

	  if (targetSelection.isCollapsed()) {
	    var key = targetSelection.getAnchorKey();
	    var offset = targetSelection.getAnchorOffset();
	    if (offset > 0) {
	      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);
	      return filterKey(contentState.getEntityMap(), entityKey);
	    }
	    return null;
	  }

	  var startKey = targetSelection.getStartKey();
	  var startOffset = targetSelection.getStartOffset();
	  var startBlock = contentState.getBlockForKey(startKey);

	  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);

	  return filterKey(contentState.getEntityMap(), entityKey);
	}

	/**
	 * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,
	 * return it. If not, return null.
	 */
	function filterKey(entityMap, entityKey) {
	  if (entityKey) {
	    var entity = entityMap.__get(entityKey);
	    return entity.getMutability() === 'MUTABLE' ? entityKey : null;
	  }
	  return null;
	}

	module.exports = getEntityKeyForSelection;

/***/ },
/* 235 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isSelectionAtLeafStart
	 * @typechecks
	 * 
	 */

	'use strict';

	function isSelectionAtLeafStart(editorState) {
	  var selection = editorState.getSelection();
	  var anchorKey = selection.getAnchorKey();
	  var blockTree = editorState.getBlockTree(anchorKey);
	  var offset = selection.getStartOffset();

	  var isAtStart = false;

	  blockTree.some(function (leafSet) {
	    if (offset === leafSet.get('start')) {
	      isAtStart = true;
	      return true;
	    }

	    if (offset < leafSet.get('end')) {
	      return leafSet.get('leaves').some(function (leaf) {
	        var leafStart = leaf.get('start');
	        if (offset === leafStart) {
	          isAtStart = true;
	          return true;
	        }

	        return false;
	      });
	    }

	    return false;
	  });

	  return isAtStart;
	}

	module.exports = isSelectionAtLeafStart;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorContents.react
	 * @typechecks
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DraftEditorBlock = __webpack_require__(237);
	var DraftOffsetKey = __webpack_require__(252);
	var EditorState = __webpack_require__(214);
	var React = __webpack_require__(1);

	var cx = __webpack_require__(229);
	var joinClasses = __webpack_require__(264);
	var nullthrows = __webpack_require__(226);

	/**
	 * `DraftEditorContents` is the container component for all block components
	 * rendered for a `DraftEditor`. It is optimized to aggressively avoid
	 * re-rendering blocks whenever possible.
	 *
	 * This component is separate from `DraftEditor` because certain props
	 * (for instance, ARIA props) must be allowed to update without affecting
	 * the contents of the editor.
	 */
	var DraftEditorContents = function (_React$Component) {
	  _inherits(DraftEditorContents, _React$Component);

	  function DraftEditorContents() {
	    _classCallCheck(this, DraftEditorContents);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DraftEditorContents.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    var prevEditorState = this.props.editorState;
	    var nextEditorState = nextProps.editorState;

	    var prevDirectionMap = prevEditorState.getDirectionMap();
	    var nextDirectionMap = nextEditorState.getDirectionMap();

	    // Text direction has changed for one or more blocks. We must re-render.
	    if (prevDirectionMap !== nextDirectionMap) {
	      return true;
	    }

	    var didHaveFocus = prevEditorState.getSelection().getHasFocus();
	    var nowHasFocus = nextEditorState.getSelection().getHasFocus();

	    if (didHaveFocus !== nowHasFocus) {
	      return true;
	    }

	    var nextNativeContent = nextEditorState.getNativelyRenderedContent();

	    var wasComposing = prevEditorState.isInCompositionMode();
	    var nowComposing = nextEditorState.isInCompositionMode();

	    // If the state is unchanged or we're currently rendering a natively
	    // rendered state, there's nothing new to be done.
	    if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {
	      return false;
	    }

	    var prevContent = prevEditorState.getCurrentContent();
	    var nextContent = nextEditorState.getCurrentContent();
	    var prevDecorator = prevEditorState.getDecorator();
	    var nextDecorator = nextEditorState.getDecorator();
	    return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();
	  };

	  DraftEditorContents.prototype.render = function render() {
	    var _props = this.props;
	    var blockRenderMap = _props.blockRenderMap;
	    var blockRendererFn = _props.blockRendererFn;
	    var customStyleMap = _props.customStyleMap;
	    var customStyleFn = _props.customStyleFn;
	    var editorState = _props.editorState;


	    var content = editorState.getCurrentContent();
	    var selection = editorState.getSelection();
	    var forceSelection = editorState.mustForceSelection();
	    var decorator = editorState.getDecorator();
	    var directionMap = nullthrows(editorState.getDirectionMap());

	    var blocksAsArray = content.getBlocksAsArray();
	    var processedBlocks = [];
	    var currentDepth = null;
	    var lastWrapperTemplate = null;

	    for (var ii = 0; ii < blocksAsArray.length; ii++) {
	      var _block = blocksAsArray[ii];
	      var key = _block.getKey();
	      var blockType = _block.getType();

	      var customRenderer = blockRendererFn(_block);
	      var CustomComponent = void 0,
	          customProps = void 0,
	          customEditable = void 0;
	      if (customRenderer) {
	        CustomComponent = customRenderer.component;
	        customProps = customRenderer.props;
	        customEditable = customRenderer.editable;
	      }

	      var direction = directionMap.get(key);
	      var offsetKey = DraftOffsetKey.encode(key, 0, 0);
	      var componentProps = {
	        contentState: content,
	        block: _block,
	        blockProps: customProps,
	        customStyleMap: customStyleMap,
	        customStyleFn: customStyleFn,
	        decorator: decorator,
	        direction: direction,
	        forceSelection: forceSelection,
	        key: key,
	        offsetKey: offsetKey,
	        selection: selection,
	        tree: editorState.getBlockTree(key)
	      };

	      var configForType = blockRenderMap.get(blockType);
	      var wrapperTemplate = configForType.wrapper;

	      var _Element = configForType.element || blockRenderMap.get('unstyled').element;

	      var depth = _block.getDepth();
	      var className = this.props.blockStyleFn(_block);

	      // List items are special snowflakes, since we handle nesting and
	      // counters manually.
	      if (_Element === 'li') {
	        var shouldResetCount = lastWrapperTemplate !== wrapperTemplate || currentDepth === null || depth > currentDepth;
	        className = joinClasses(className, getListItemClasses(blockType, depth, shouldResetCount, direction));
	      }

	      var Component = CustomComponent || DraftEditorBlock;
	      var childProps = {
	        className: className,
	        'data-block': true,
	        'data-editor': this.props.editorKey,
	        'data-offset-key': offsetKey,
	        key: key
	      };
	      if (customEditable !== undefined) {
	        childProps = _extends({}, childProps, {
	          contentEditable: customEditable,
	          suppressContentEditableWarning: true
	        });
	      }

	      var child = React.createElement(_Element, childProps, React.createElement(Component, componentProps));

	      processedBlocks.push({
	        block: child,
	        wrapperTemplate: wrapperTemplate,
	        key: key,
	        offsetKey: offsetKey
	      });

	      if (wrapperTemplate) {
	        currentDepth = _block.getDepth();
	      } else {
	        currentDepth = null;
	      }
	      lastWrapperTemplate = wrapperTemplate;
	    }

	    // Group contiguous runs of blocks that have the same wrapperTemplate
	    var outputBlocks = [];
	    for (var _ii = 0; _ii < processedBlocks.length;) {
	      var info = processedBlocks[_ii];
	      if (info.wrapperTemplate) {
	        var blocks = [];
	        do {
	          blocks.push(processedBlocks[_ii].block);
	          _ii++;
	        } while (_ii < processedBlocks.length && processedBlocks[_ii].wrapperTemplate === info.wrapperTemplate);
	        var wrapperElement = React.cloneElement(info.wrapperTemplate, {
	          key: info.key + '-wrap',
	          'data-offset-key': info.offsetKey
	        }, blocks);
	        outputBlocks.push(wrapperElement);
	      } else {
	        outputBlocks.push(info.block);
	        _ii++;
	      }
	    }

	    return React.createElement(
	      'div',
	      { 'data-contents': 'true' },
	      outputBlocks
	    );
	  };

	  return DraftEditorContents;
	}(React.Component);

	/**
	 * Provide default styling for list items. This way, lists will be styled with
	 * proper counters and indentation even if the caller does not specify
	 * their own styling at all. If more than five levels of nesting are needed,
	 * the necessary CSS classes can be provided via `blockStyleFn` configuration.
	 */


	function getListItemClasses(type, depth, shouldResetCount, direction) {
	  return cx({
	    'public/DraftStyleDefault/unorderedListItem': type === 'unordered-list-item',
	    'public/DraftStyleDefault/orderedListItem': type === 'ordered-list-item',
	    'public/DraftStyleDefault/reset': shouldResetCount,
	    'public/DraftStyleDefault/depth0': depth === 0,
	    'public/DraftStyleDefault/depth1': depth === 1,
	    'public/DraftStyleDefault/depth2': depth === 2,
	    'public/DraftStyleDefault/depth3': depth === 3,
	    'public/DraftStyleDefault/depth4': depth === 4,
	    'public/DraftStyleDefault/listLTR': direction === 'LTR',
	    'public/DraftStyleDefault/listRTL': direction === 'RTL'
	  });
	}

	module.exports = DraftEditorContents;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorBlock.react
	 * @typechecks
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ContentBlock = __webpack_require__(195);
	var ContentState = __webpack_require__(217);
	var DraftEditorLeaf = __webpack_require__(238);
	var DraftOffsetKey = __webpack_require__(252);
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(32);
	var Scroll = __webpack_require__(253);
	var SelectionState = __webpack_require__(220);
	var Style = __webpack_require__(254);
	var UnicodeBidi = __webpack_require__(224);
	var UnicodeBidiDirection = __webpack_require__(225);

	var cx = __webpack_require__(229);
	var getElementPosition = __webpack_require__(258);
	var getScrollPosition = __webpack_require__(260);
	var getViewportDimensions = __webpack_require__(263);
	var nullthrows = __webpack_require__(226);

	var SCROLL_BUFFER = 10;

	/**
	 * The default block renderer for a `DraftEditor` component.
	 *
	 * A `DraftEditorBlock` is able to render a given `ContentBlock` to its
	 * appropriate decorator and inline style components.
	 */
	var DraftEditorBlock = function (_React$Component) {
	  _inherits(DraftEditorBlock, _React$Component);

	  function DraftEditorBlock() {
	    _classCallCheck(this, DraftEditorBlock);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DraftEditorBlock.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return this.props.block !== nextProps.block || this.props.tree !== nextProps.tree || this.props.direction !== nextProps.direction || isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) && nextProps.forceSelection;
	  };

	  /**
	   * When a block is mounted and overlaps the selection state, we need to make
	   * sure that the cursor is visible to match native behavior. This may not
	   * be the case if the user has pressed `RETURN` or pasted some content, since
	   * programatically creating these new blocks and setting the DOM selection
	   * will miss out on the browser natively scrolling to that position.
	   *
	   * To replicate native behavior, if the block overlaps the selection state
	   * on mount, force the scroll position. Check the scroll state of the scroll
	   * parent, and adjust it to align the entire block to the bottom of the
	   * scroll parent.
	   */


	  DraftEditorBlock.prototype.componentDidMount = function componentDidMount() {
	    var selection = this.props.selection;
	    var endKey = selection.getEndKey();
	    if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {
	      return;
	    }

	    var blockNode = ReactDOM.findDOMNode(this);
	    var scrollParent = Style.getScrollParent(blockNode);
	    var scrollPosition = getScrollPosition(scrollParent);
	    var scrollDelta;

	    if (scrollParent === window) {
	      var nodePosition = getElementPosition(blockNode);
	      var nodeBottom = nodePosition.y + nodePosition.height;
	      var viewportHeight = getViewportDimensions().height;
	      scrollDelta = nodeBottom - viewportHeight;
	      if (scrollDelta > 0) {
	        window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);
	      }
	    } else {
	      var blockBottom = blockNode.offsetHeight + blockNode.offsetTop;
	      var scrollBottom = scrollParent.offsetHeight + scrollPosition.y;
	      scrollDelta = blockBottom - scrollBottom;
	      if (scrollDelta > 0) {
	        Scroll.setTop(scrollParent, Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER);
	      }
	    }
	  };

	  DraftEditorBlock.prototype._renderChildren = function _renderChildren() {
	    var _this2 = this;

	    var block = this.props.block;
	    var blockKey = block.getKey();
	    var text = block.getText();
	    var lastLeafSet = this.props.tree.size - 1;
	    var hasSelection = isBlockOnSelectionEdge(this.props.selection, blockKey);

	    return this.props.tree.map(function (leafSet, ii) {
	      var leavesForLeafSet = leafSet.get('leaves');
	      var lastLeaf = leavesForLeafSet.size - 1;
	      var leaves = leavesForLeafSet.map(function (leaf, jj) {
	        var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);
	        var start = leaf.get('start');
	        var end = leaf.get('end');
	        return React.createElement(DraftEditorLeaf, {
	          key: offsetKey,
	          offsetKey: offsetKey,
	          blockKey: blockKey,
	          start: start,
	          selection: hasSelection ? _this2.props.selection : undefined,
	          forceSelection: _this2.props.forceSelection,
	          text: text.slice(start, end),
	          styleSet: block.getInlineStyleAt(start),
	          customStyleMap: _this2.props.customStyleMap,
	          customStyleFn: _this2.props.customStyleFn,
	          isLast: ii === lastLeafSet && jj === lastLeaf
	        });
	      }).toArray();

	      var decoratorKey = leafSet.get('decoratorKey');
	      if (decoratorKey == null) {
	        return leaves;
	      }

	      if (!_this2.props.decorator) {
	        return leaves;
	      }

	      var decorator = nullthrows(_this2.props.decorator);

	      var DecoratorComponent = decorator.getComponentForKey(decoratorKey);
	      if (!DecoratorComponent) {
	        return leaves;
	      }

	      var decoratorProps = decorator.getPropsForKey(decoratorKey);
	      var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, ii, 0);
	      var decoratedText = text.slice(leavesForLeafSet.first().get('start'), leavesForLeafSet.last().get('end'));

	      // Resetting dir to the same value on a child node makes Chrome/Firefox
	      // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/
	      var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(UnicodeBidi.getDirection(decoratedText), _this2.props.direction);

	      return React.createElement(
	        DecoratorComponent,
	        _extends({}, decoratorProps, {
	          contentState: _this2.props.contentState,
	          decoratedText: decoratedText,
	          dir: dir,
	          key: decoratorOffsetKey,
	          entityKey: block.getEntityAt(leafSet.get('start')),
	          offsetKey: decoratorOffsetKey }),
	        leaves
	      );
	    }).toArray();
	  };

	  DraftEditorBlock.prototype.render = function render() {
	    var _props = this.props;
	    var direction = _props.direction;
	    var offsetKey = _props.offsetKey;

	    var className = cx({
	      'public/DraftStyleDefault/block': true,
	      'public/DraftStyleDefault/ltr': direction === 'LTR',
	      'public/DraftStyleDefault/rtl': direction === 'RTL'
	    });

	    return React.createElement(
	      'div',
	      { 'data-offset-key': offsetKey, className: className },
	      this._renderChildren()
	    );
	  };

	  return DraftEditorBlock;
	}(React.Component);

	/**
	 * Return whether a block overlaps with either edge of the `SelectionState`.
	 */


	function isBlockOnSelectionEdge(selection, key) {
	  return selection.getAnchorKey() === key || selection.getFocusKey() === key;
	}

	module.exports = DraftEditorBlock;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorLeaf.react
	 * @typechecks
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DraftEditorTextNode = __webpack_require__(239);
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(32);
	var SelectionState = __webpack_require__(220);

	var setDraftEditorSelection = __webpack_require__(247);

	/**
	 * All leaf nodes in the editor are spans with single text nodes. Leaf
	 * elements are styled based on the merging of an optional custom style map
	 * and a default style map.
	 *
	 * `DraftEditorLeaf` also provides a wrapper for calling into the imperative
	 * DOM Selection API. In this way, top-level components can declaratively
	 * maintain the selection state.
	 */
	var DraftEditorLeaf = function (_React$Component) {
	  _inherits(DraftEditorLeaf, _React$Component);

	  function DraftEditorLeaf() {
	    _classCallCheck(this, DraftEditorLeaf);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  /**
	   * By making individual leaf instances aware of their context within
	   * the text of the editor, we can set our selection range more
	   * easily than we could in the non-React world.
	   *
	   * Note that this depends on our maintaining tight control over the
	   * DOM structure of the TextEditor component. If leaves had multiple
	   * text nodes, this would be harder.
	   */
	  DraftEditorLeaf.prototype._setSelection = function _setSelection() {
	    var selection = this.props.selection;

	    // If selection state is irrelevant to the parent block, no-op.

	    if (selection == null || !selection.getHasFocus()) {
	      return;
	    }

	    var _props = this.props;
	    var blockKey = _props.blockKey;
	    var start = _props.start;
	    var text = _props.text;

	    var end = start + text.length;
	    if (!selection.hasEdgeWithin(blockKey, start, end)) {
	      return;
	    }

	    // Determine the appropriate target node for selection. If the child
	    // is not a text node, it is a <br /> spacer. In this case, use the
	    // <span> itself as the selection target.
	    var node = ReactDOM.findDOMNode(this);
	    var child = node.firstChild;
	    var targetNode = void 0;

	    if (child.nodeType === Node.TEXT_NODE) {
	      targetNode = child;
	    } else if (child.tagName === 'BR') {
	      targetNode = node;
	    } else {
	      targetNode = child.firstChild;
	    }

	    setDraftEditorSelection(selection, targetNode, blockKey, start, end);
	  };

	  DraftEditorLeaf.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return ReactDOM.findDOMNode(this.refs.leaf).textContent !== nextProps.text || nextProps.styleSet !== this.props.styleSet || nextProps.forceSelection;
	  };

	  DraftEditorLeaf.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._setSelection();
	  };

	  DraftEditorLeaf.prototype.componentDidMount = function componentDidMount() {
	    this._setSelection();
	  };

	  DraftEditorLeaf.prototype.render = function render() {
	    var text = this.props.text;

	    // If the leaf is at the end of its block and ends in a soft newline, append
	    // an extra line feed character. Browsers collapse trailing newline
	    // characters, which leaves the cursor in the wrong place after a
	    // shift+enter. The extra character repairs this.

	    if (text.endsWith('\n') && this.props.isLast) {
	      text += '\n';
	    }

	    var _props2 = this.props;
	    var customStyleMap = _props2.customStyleMap;
	    var customStyleFn = _props2.customStyleFn;
	    var offsetKey = _props2.offsetKey;
	    var styleSet = _props2.styleSet;

	    var styleObj = styleSet.reduce(function (map, styleName) {
	      var mergedStyles = {};
	      var style = customStyleMap[styleName];

	      if (style !== undefined && map.textDecoration !== style.textDecoration) {
	        // .trim() is necessary for IE9/10/11 and Edge
	        mergedStyles.textDecoration = [map.textDecoration, style.textDecoration].join(' ').trim();
	      }

	      return _assign(map, style, mergedStyles);
	    }, {});

	    if (customStyleFn) {
	      var newStyles = customStyleFn(styleSet);
	      styleObj = _assign(styleObj, newStyles);
	    }

	    return React.createElement(
	      'span',
	      {
	        'data-offset-key': offsetKey,
	        ref: 'leaf',
	        style: styleObj },
	      React.createElement(
	        DraftEditorTextNode,
	        null,
	        text
	      )
	    );
	  };

	  return DraftEditorLeaf;
	}(React.Component);

	module.exports = DraftEditorLeaf;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorTextNode.react
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(32);
	var UserAgent = __webpack_require__(240);

	// In IE, spans with <br> tags render as two newlines. By rendering a span
	// with only a newline character, we can be sure to render a single line.
	var useNewlineChar = UserAgent.isBrowser('IE <= 11');

	/**
	 * Check whether the node should be considered a newline.
	 */
	function isNewline(node) {
	  return useNewlineChar ? node.textContent === '\n' : node.tagName === 'BR';
	}

	/**
	 * Placeholder elements for empty text content.
	 *
	 * What is this `data-text` attribute, anyway? It turns out that we need to
	 * put an attribute on the lowest-level text node in order to preserve correct
	 * spellcheck handling. If the <span> is naked, Chrome and Safari may do
	 * bizarre things to do the DOM -- split text nodes, create extra spans, etc.
	 * If the <span> has an attribute, this appears not to happen.
	 * See http://jsfiddle.net/9khdavod/ for the failure case, and
	 * http://jsfiddle.net/7pg143f7/ for the fixed case.
	 */
	var NEWLINE_A = useNewlineChar ? React.createElement(
	  'span',
	  { key: 'A', 'data-text': 'true' },
	  '\n'
	) : React.createElement('br', { key: 'A', 'data-text': 'true' });

	var NEWLINE_B = useNewlineChar ? React.createElement(
	  'span',
	  { key: 'B', 'data-text': 'true' },
	  '\n'
	) : React.createElement('br', { key: 'B', 'data-text': 'true' });

	/**
	 * The lowest-level component in a `DraftEditor`, the text node component
	 * replaces the default React text node implementation. This allows us to
	 * perform custom handling of newline behavior and avoid re-rendering text
	 * nodes with DOM state that already matches the expectations of our immutable
	 * editor state.
	 */
	var DraftEditorTextNode = function (_React$Component) {
	  _inherits(DraftEditorTextNode, _React$Component);

	  function DraftEditorTextNode(props) {
	    _classCallCheck(this, DraftEditorTextNode);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this._forceFlag = false;
	    return _this;
	  }

	  DraftEditorTextNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    var node = ReactDOM.findDOMNode(this);
	    var shouldBeNewline = nextProps.children === '';
	    if (shouldBeNewline) {
	      return !isNewline(node);
	    }
	    return node.textContent !== nextProps.children;
	  };

	  DraftEditorTextNode.prototype.componentWillUpdate = function componentWillUpdate() {
	    // By flipping this flag, we also keep flipping keys which forces
	    // React to remount this node every time it rerenders.
	    this._forceFlag = !this._forceFlag;
	  };

	  DraftEditorTextNode.prototype.render = function render() {
	    if (this.props.children === '') {
	      return this._forceFlag ? NEWLINE_A : NEWLINE_B;
	    }
	    return React.createElement(
	      'span',
	      { key: this._forceFlag ? 'A' : 'B', 'data-text': 'true' },
	      this.props.children
	    );
	  };

	  return DraftEditorTextNode;
	}(React.Component);

	module.exports = DraftEditorTextNode;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var UserAgentData = __webpack_require__(241);
	var VersionRange = __webpack_require__(244);

	var mapObject = __webpack_require__(245);
	var memoizeStringOnly = __webpack_require__(246);

	/**
	 * Checks to see whether `name` and `version` satisfy `query`.
	 *
	 * @param {string} name Name of the browser, device, engine or platform
	 * @param {?string} version Version of the browser, engine or platform
	 * @param {string} query Query of form "Name [range expression]"
	 * @param {?function} normalizer Optional pre-processor for range expression
	 * @return {boolean}
	 */
	function compare(name, version, query, normalizer) {
	  // check for exact match with no version
	  if (name === query) {
	    return true;
	  }

	  // check for non-matching names
	  if (!query.startsWith(name)) {
	    return false;
	  }

	  // full comparison with version
	  var range = query.slice(name.length);
	  if (version) {
	    range = normalizer ? normalizer(range) : range;
	    return VersionRange.contains(range, version);
	  }

	  return false;
	}

	/**
	 * Normalizes `version` by stripping any "NT" prefix, but only on the Windows
	 * platform.
	 *
	 * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.
	 *
	 * @param {string} version
	 * @return {string}
	 */
	function normalizePlatformVersion(version) {
	  if (UserAgentData.platformName === 'Windows') {
	    return version.replace(/^\s*NT/, '');
	  }

	  return version;
	}

	/**
	 * Provides client-side access to the authoritative PHP-generated User Agent
	 * information supplied by the server.
	 */
	var UserAgent = {
	  /**
	   * Check if the User Agent browser matches `query`.
	   *
	   * `query` should be a string like "Chrome" or "Chrome > 33".
	   *
	   * Valid browser names include:
	   *
	   * - ACCESS NetFront
	   * - AOL
	   * - Amazon Silk
	   * - Android
	   * - BlackBerry
	   * - BlackBerry PlayBook
	   * - Chrome
	   * - Chrome for iOS
	   * - Chrome frame
	   * - Facebook PHP SDK
	   * - Facebook for iOS
	   * - Firefox
	   * - IE
	   * - IE Mobile
	   * - Mobile Safari
	   * - Motorola Internet Browser
	   * - Nokia
	   * - Openwave Mobile Browser
	   * - Opera
	   * - Opera Mini
	   * - Opera Mobile
	   * - Safari
	   * - UIWebView
	   * - Unknown
	   * - webOS
	   * - etc...
	   *
	   * An authoritative list can be found in the PHP `BrowserDetector` class and
	   * related classes in the same file (see calls to `new UserAgentBrowser` here:
	   * https://fburl.com/50728104).
	   *
	   * @note Function results are memoized
	   *
	   * @param {string} query Query of the form "Name [range expression]"
	   * @return {boolean}
	   */
	  isBrowser: function isBrowser(query) {
	    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);
	  },


	  /**
	   * Check if the User Agent browser uses a 32 or 64 bit architecture.
	   *
	   * @note Function results are memoized
	   *
	   * @param {string} query Query of the form "32" or "64".
	   * @return {boolean}
	   */
	  isBrowserArchitecture: function isBrowserArchitecture(query) {
	    return compare(UserAgentData.browserArchitecture, null, query);
	  },


	  /**
	   * Check if the User Agent device matches `query`.
	   *
	   * `query` should be a string like "iPhone" or "iPad".
	   *
	   * Valid device names include:
	   *
	   * - Kindle
	   * - Kindle Fire
	   * - Unknown
	   * - iPad
	   * - iPhone
	   * - iPod
	   * - etc...
	   *
	   * An authoritative list can be found in the PHP `DeviceDetector` class and
	   * related classes in the same file (see calls to `new UserAgentDevice` here:
	   * https://fburl.com/50728332).
	   *
	   * @note Function results are memoized
	   *
	   * @param {string} query Query of the form "Name"
	   * @return {boolean}
	   */
	  isDevice: function isDevice(query) {
	    return compare(UserAgentData.deviceName, null, query);
	  },


	  /**
	   * Check if the User Agent rendering engine matches `query`.
	   *
	   * `query` should be a string like "WebKit" or "WebKit >= 537".
	   *
	   * Valid engine names include:
	   *
	   * - Gecko
	   * - Presto
	   * - Trident
	   * - WebKit
	   * - etc...
	   *
	   * An authoritative list can be found in the PHP `RenderingEngineDetector`
	   * class related classes in the same file (see calls to `new
	   * UserAgentRenderingEngine` here: https://fburl.com/50728617).
	   *
	   * @note Function results are memoized
	   *
	   * @param {string} query Query of the form "Name [range expression]"
	   * @return {boolean}
	   */
	  isEngine: function isEngine(query) {
	    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);
	  },


	  /**
	   * Check if the User Agent platform matches `query`.
	   *
	   * `query` should be a string like "Windows" or "iOS 5 - 6".
	   *
	   * Valid platform names include:
	   *
	   * - Android
	   * - BlackBerry OS
	   * - Java ME
	   * - Linux
	   * - Mac OS X
	   * - Mac OS X Calendar
	   * - Mac OS X Internet Account
	   * - Symbian
	   * - SymbianOS
	   * - Windows
	   * - Windows Mobile
	   * - Windows Phone
	   * - iOS
	   * - iOS Facebook Integration Account
	   * - iOS Facebook Social Sharing UI
	   * - webOS
	   * - Chrome OS
	   * - etc...
	   *
	   * An authoritative list can be found in the PHP `PlatformDetector` class and
	   * related classes in the same file (see calls to `new UserAgentPlatform`
	   * here: https://fburl.com/50729226).
	   *
	   * @note Function results are memoized
	   *
	   * @param {string} query Query of the form "Name [range expression]"
	   * @return {boolean}
	   */
	  isPlatform: function isPlatform(query) {
	    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);
	  },


	  /**
	   * Check if the User Agent platform is a 32 or 64 bit architecture.
	   *
	   * @note Function results are memoized
	   *
	   * @param {string} query Query of the form "32" or "64".
	   * @return {boolean}
	   */
	  isPlatformArchitecture: function isPlatformArchitecture(query) {
	    return compare(UserAgentData.platformArchitecture, null, query);
	  }
	};

	module.exports = mapObject(UserAgent, memoizeStringOnly);

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * Usage note:
	 * This module makes a best effort to export the same data we would internally.
	 * At Facebook we use a server-generated module that does the parsing and
	 * exports the data for the client to use. We can't rely on a server-side
	 * implementation in open source so instead we make use of an open source
	 * library to do the heavy lifting and then make some adjustments as necessary.
	 * It's likely there will be some differences. Some we can smooth over.
	 * Others are going to be harder.
	 */

	'use strict';

	var UAParser = __webpack_require__(242);

	var UNKNOWN = 'Unknown';

	var PLATFORM_MAP = {
	  'Mac OS': 'Mac OS X'
	};

	/**
	 * Convert from UAParser platform name to what we expect.
	 */
	function convertPlatformName(name) {
	  return PLATFORM_MAP[name] || name;
	}

	/**
	 * Get the version number in parts. This is very naive. We actually get major
	 * version as a part of UAParser already, which is generally good enough, but
	 * let's get the minor just in case.
	 */
	function getBrowserVersion(version) {
	  if (!version) {
	    return {
	      major: '',
	      minor: ''
	    };
	  }
	  var parts = version.split('.');
	  return {
	    major: parts[0],
	    minor: parts[1]
	  };
	}

	/**
	 * Get the UA data fom UAParser and then convert it to the format we're
	 * expecting for our APIS.
	 */
	var parser = new UAParser();
	var results = parser.getResult();

	// Do some conversion first.
	var browserVersionData = getBrowserVersion(results.browser.version);
	var uaData = {
	  browserArchitecture: results.cpu.architecture || UNKNOWN,
	  browserFullVersion: results.browser.version || UNKNOWN,
	  browserMinorVersion: browserVersionData.minor || UNKNOWN,
	  browserName: results.browser.name || UNKNOWN,
	  browserVersion: results.browser.major || UNKNOWN,
	  deviceName: results.device.model || UNKNOWN,
	  engineName: results.engine.name || UNKNOWN,
	  engineVersion: results.engine.version || UNKNOWN,
	  platformArchitecture: results.cpu.architecture || UNKNOWN,
	  platformName: convertPlatformName(results.os.name) || UNKNOWN,
	  platformVersion: results.os.version || UNKNOWN,
	  platformFullVersion: results.os.version || UNKNOWN
	};

	module.exports = uaData;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * UAParser.js v0.7.12
	 * Lightweight JavaScript-based User-Agent string parser
	 * https://github.com/faisalman/ua-parser-js
	 *
	 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
	 * Dual licensed under GPLv2 & MIT
	 */

	(function (window, undefined) {

	    'use strict';

	    //////////////
	    // Constants
	    /////////////


	    var LIBVERSION  = '0.7.12',
	        EMPTY       = '',
	        UNKNOWN     = '?',
	        FUNC_TYPE   = 'function',
	        UNDEF_TYPE  = 'undefined',
	        OBJ_TYPE    = 'object',
	        STR_TYPE    = 'string',
	        MAJOR       = 'major', // deprecated
	        MODEL       = 'model',
	        NAME        = 'name',
	        TYPE        = 'type',
	        VENDOR      = 'vendor',
	        VERSION     = 'version',
	        ARCHITECTURE= 'architecture',
	        CONSOLE     = 'console',
	        MOBILE      = 'mobile',
	        TABLET      = 'tablet',
	        SMARTTV     = 'smarttv',
	        WEARABLE    = 'wearable',
	        EMBEDDED    = 'embedded';


	    ///////////
	    // Helper
	    //////////


	    var util = {
	        extend : function (regexes, extensions) {
	            var margedRegexes = {};
	            for (var i in regexes) {
	                if (extensions[i] && extensions[i].length % 2 === 0) {
	                    margedRegexes[i] = extensions[i].concat(regexes[i]);
	                } else {
	                    margedRegexes[i] = regexes[i];
	                }
	            }
	            return margedRegexes;
	        },
	        has : function (str1, str2) {
	          if (typeof str1 === "string") {
	            return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
	          } else {
	            return false;
	          }
	        },
	        lowerize : function (str) {
	            return str.toLowerCase();
	        },
	        major : function (version) {
	            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g,'').split(".")[0] : undefined;
	        },
	        trim : function (str) {
	          return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
	        }
	    };


	    ///////////////
	    // Map helper
	    //////////////


	    var mapper = {

	        rgx : function () {

	            var result, i = 0, j, k, p, q, matches, match, args = arguments;

	            // loop through all regexes maps
	            while (i < args.length && !matches) {

	                var regex = args[i],       // even sequence (0,2,4,..)
	                    props = args[i + 1];   // odd sequence (1,3,5,..)

	                // construct object barebones
	                if (typeof result === UNDEF_TYPE) {
	                    result = {};
	                    for (p in props) {
	                        if (props.hasOwnProperty(p)){
	                            q = props[p];
	                            if (typeof q === OBJ_TYPE) {
	                                result[q[0]] = undefined;
	                            } else {
	                                result[q] = undefined;
	                            }
	                        }
	                    }
	                }

	                // try matching uastring with regexes
	                j = k = 0;
	                while (j < regex.length && !matches) {
	                    matches = regex[j++].exec(this.getUA());
	                    if (!!matches) {
	                        for (p = 0; p < props.length; p++) {
	                            match = matches[++k];
	                            q = props[p];
	                            // check if given property is actually array
	                            if (typeof q === OBJ_TYPE && q.length > 0) {
	                                if (q.length == 2) {
	                                    if (typeof q[1] == FUNC_TYPE) {
	                                        // assign modified match
	                                        result[q[0]] = q[1].call(this, match);
	                                    } else {
	                                        // assign given value, ignore regex match
	                                        result[q[0]] = q[1];
	                                    }
	                                } else if (q.length == 3) {
	                                    // check whether function or regex
	                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
	                                        // call function (usually string mapper)
	                                        result[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
	                                    } else {
	                                        // sanitize match using given regex
	                                        result[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
	                                    }
	                                } else if (q.length == 4) {
	                                        result[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
	                                }
	                            } else {
	                                result[q] = match ? match : undefined;
	                            }
	                        }
	                    }
	                }
	                i += 2;
	            }
	            return result;
	        },

	        str : function (str, map) {

	            for (var i in map) {
	                // check if array
	                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
	                    for (var j = 0; j < map[i].length; j++) {
	                        if (util.has(map[i][j], str)) {
	                            return (i === UNKNOWN) ? undefined : i;
	                        }
	                    }
	                } else if (util.has(map[i], str)) {
	                    return (i === UNKNOWN) ? undefined : i;
	                }
	            }
	            return str;
	        }
	    };


	    ///////////////
	    // String map
	    //////////////


	    var maps = {

	        browser : {
	            oldsafari : {
	                version : {
	                    '1.0'   : '/8',
	                    '1.2'   : '/1',
	                    '1.3'   : '/3',
	                    '2.0'   : '/412',
	                    '2.0.2' : '/416',
	                    '2.0.3' : '/417',
	                    '2.0.4' : '/419',
	                    '?'     : '/'
	                }
	            }
	        },

	        device : {
	            amazon : {
	                model : {
	                    'Fire Phone' : ['SD', 'KF']
	                }
	            },
	            sprint : {
	                model : {
	                    'Evo Shift 4G' : '7373KT'
	                },
	                vendor : {
	                    'HTC'       : 'APA',
	                    'Sprint'    : 'Sprint'
	                }
	            }
	        },

	        os : {
	            windows : {
	                version : {
	                    'ME'        : '4.90',
	                    'NT 3.11'   : 'NT3.51',
	                    'NT 4.0'    : 'NT4.0',
	                    '2000'      : 'NT 5.0',
	                    'XP'        : ['NT 5.1', 'NT 5.2'],
	                    'Vista'     : 'NT 6.0',
	                    '7'         : 'NT 6.1',
	                    '8'         : 'NT 6.2',
	                    '8.1'       : 'NT 6.3',
	                    '10'        : ['NT 6.4', 'NT 10.0'],
	                    'RT'        : 'ARM'
	                }
	            }
	        }
	    };


	    //////////////
	    // Regex map
	    /////////////


	    var regexes = {

	        browser : [[

	            // Presto based
	            /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
	            /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,                      // Opera Mobi/Tablet
	            /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
	            /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
	            ], [NAME, VERSION], [

	            /(opios)[\/\s]+([\w\.]+)/i                                          // Opera mini on iphone >= 8.0
	            ], [[NAME, 'Opera Mini'], VERSION], [

	            /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
	            ], [[NAME, 'Opera'], VERSION], [

	            // Mixed
	            /(kindle)\/([\w\.]+)/i,                                             // Kindle
	            /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,
	                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer

	            // Trident based
	            /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
	                                                                                // Avant/IEMobile/SlimBrowser/Baidu
	            /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer

	            // Webkit/KHTML based
	            /(rekonq)\/([\w\.]+)*/i,                                            // Rekonq
	            /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i
	                                                                                // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS
	            ], [NAME, VERSION], [

	            /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i                         // IE11
	            ], [[NAME, 'IE'], VERSION], [

	            /(edge)\/((\d+)?[\w\.]+)/i                                          // Microsoft Edge
	            ], [NAME, VERSION], [

	            /(yabrowser)\/([\w\.]+)/i                                           // Yandex
	            ], [[NAME, 'Yandex'], VERSION], [

	            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
	            ], [[NAME, /_/g, ' '], VERSION], [

	            /(micromessenger)\/([\w\.]+)/i                                      // WeChat
	            ], [[NAME, 'WeChat'], VERSION], [

	            /xiaomi\/miuibrowser\/([\w\.]+)/i                                   // MIUI Browser
	            ], [VERSION, [NAME, 'MIUI Browser']], [

	            /\swv\).+(chrome)\/([\w\.]+)/i                                      // Chrome WebView
	            ], [[NAME, /(.+)/, '$1 WebView'], VERSION], [

	            /android.+samsungbrowser\/([\w\.]+)/i,
	            /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i        // Android Browser
	            ], [VERSION, [NAME, 'Android Browser']], [

	            /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,
	                                                                                // Chrome/OmniWeb/Arora/Tizen/Nokia
	            /(qqbrowser)[\/\s]?([\w\.]+)/i
	                                                                                // QQBrowser
	            ], [NAME, VERSION], [

	            /(uc\s?browser)[\/\s]?([\w\.]+)/i,
	            /ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,
	            /juc.+(ucweb)[\/\s]?([\w\.]+)/i
	                                                                                // UCBrowser
	            ], [[NAME, 'UCBrowser'], VERSION], [

	            /(dolfin)\/([\w\.]+)/i                                              // Dolphin
	            ], [[NAME, 'Dolphin'], VERSION], [

	            /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
	            ], [[NAME, 'Chrome'], VERSION], [

	            /;fbav\/([\w\.]+);/i                                                // Facebook App for iOS
	            ], [VERSION, [NAME, 'Facebook']], [

	            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
	            ], [VERSION, [NAME, 'Firefox']], [

	            /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i                       // Mobile Safari
	            ], [VERSION, [NAME, 'Mobile Safari']], [

	            /version\/([\w\.]+).+?(mobile\s?safari|safari)/i                    // Safari & Safari Mobile
	            ], [VERSION, NAME], [

	            /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
	            ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

	            /(konqueror)\/([\w\.]+)/i,                                          // Konqueror
	            /(webkit|khtml)\/([\w\.]+)/i
	            ], [NAME, VERSION], [

	            // Gecko based
	            /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
	            ], [[NAME, 'Netscape'], VERSION], [
	            /(swiftfox)/i,                                                      // Swiftfox
	            /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
	                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
	            /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,
	                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
	            /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,                          // Mozilla

	            // Other
	            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
	                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
	            /(links)\s\(([\w\.]+)/i,                                            // Links
	            /(gobrowser)\/?([\w\.]+)*/i,                                        // GoBrowser
	            /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
	            /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
	            ], [NAME, VERSION]

	            /* /////////////////////
	            // Media players BEGIN
	            ////////////////////////

	            , [

	            /(apple(?:coremedia|))\/((\d+)[\w\._]+)/i,                          // Generic Apple CoreMedia
	            /(coremedia) v((\d+)[\w\._]+)/i
	            ], [NAME, VERSION], [

	            /(aqualung|lyssna|bsplayer)\/((\d+)?[\w\.-]+)/i                     // Aqualung/Lyssna/BSPlayer
	            ], [NAME, VERSION], [

	            /(ares|ossproxy)\s((\d+)[\w\.-]+)/i                                 // Ares/OSSProxy
	            ], [NAME, VERSION], [

	            /(audacious|audimusicstream|amarok|bass|core|dalvik|gnomemplayer|music on console|nsplayer|psp-internetradioplayer|videos)\/((\d+)[\w\.-]+)/i,
	                                                                                // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/Dalvik/GnomeMplayer/MoC
	                                                                                // NSPlayer/PSP-InternetRadioPlayer/Videos
	            /(clementine|music player daemon)\s((\d+)[\w\.-]+)/i,               // Clementine/MPD
	            /(lg player|nexplayer)\s((\d+)[\d\.]+)/i,
	            /player\/(nexplayer|lg player)\s((\d+)[\w\.-]+)/i                   // NexPlayer/LG Player
	            ], [NAME, VERSION], [
	            /(nexplayer)\s((\d+)[\w\.-]+)/i                                     // Nexplayer
	            ], [NAME, VERSION], [

	            /(flrp)\/((\d+)[\w\.-]+)/i                                          // Flip Player
	            ], [[NAME, 'Flip Player'], VERSION], [

	            /(fstream|nativehost|queryseekspider|ia-archiver|facebookexternalhit)/i
	                                                                                // FStream/NativeHost/QuerySeekSpider/IA Archiver/facebookexternalhit
	            ], [NAME], [

	            /(gstreamer) souphttpsrc (?:\([^\)]+\)){0,1} libsoup\/((\d+)[\w\.-]+)/i
	                                                                                // Gstreamer
	            ], [NAME, VERSION], [

	            /(htc streaming player)\s[\w_]+\s\/\s((\d+)[\d\.]+)/i,              // HTC Streaming Player
	            /(java|python-urllib|python-requests|wget|libcurl)\/((\d+)[\w\.-_]+)/i,
	                                                                                // Java/urllib/requests/wget/cURL
	            /(lavf)((\d+)[\d\.]+)/i                                             // Lavf (FFMPEG)
	            ], [NAME, VERSION], [

	            /(htc_one_s)\/((\d+)[\d\.]+)/i                                      // HTC One S
	            ], [[NAME, /_/g, ' '], VERSION], [

	            /(mplayer)(?:\s|\/)(?:(?:sherpya-){0,1}svn)(?:-|\s)(r\d+(?:-\d+[\w\.-]+){0,1})/i
	                                                                                // MPlayer SVN
	            ], [NAME, VERSION], [

	            /(mplayer)(?:\s|\/|[unkow-]+)((\d+)[\w\.-]+)/i                      // MPlayer
	            ], [NAME, VERSION], [

	            /(mplayer)/i,                                                       // MPlayer (no other info)
	            /(yourmuze)/i,                                                      // YourMuze
	            /(media player classic|nero showtime)/i                             // Media Player Classic/Nero ShowTime
	            ], [NAME], [

	            /(nero (?:home|scout))\/((\d+)[\w\.-]+)/i                           // Nero Home/Nero Scout
	            ], [NAME, VERSION], [

	            /(nokia\d+)\/((\d+)[\w\.-]+)/i                                      // Nokia
	            ], [NAME, VERSION], [

	            /\s(songbird)\/((\d+)[\w\.-]+)/i                                    // Songbird/Philips-Songbird
	            ], [NAME, VERSION], [

	            /(winamp)3 version ((\d+)[\w\.-]+)/i,                               // Winamp
	            /(winamp)\s((\d+)[\w\.-]+)/i,
	            /(winamp)mpeg\/((\d+)[\w\.-]+)/i
	            ], [NAME, VERSION], [

	            /(ocms-bot|tapinradio|tunein radio|unknown|winamp|inlight radio)/i  // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)
	                                                                                // inlight radio
	            ], [NAME], [

	            /(quicktime|rma|radioapp|radioclientapplication|soundtap|totem|stagefright|streamium)\/((\d+)[\w\.-]+)/i
	                                                                                // QuickTime/RealMedia/RadioApp/RadioClientApplication/
	                                                                                // SoundTap/Totem/Stagefright/Streamium
	            ], [NAME, VERSION], [

	            /(smp)((\d+)[\d\.]+)/i                                              // SMP
	            ], [NAME, VERSION], [

	            /(vlc) media player - version ((\d+)[\w\.]+)/i,                     // VLC Videolan
	            /(vlc)\/((\d+)[\w\.-]+)/i,
	            /(xbmc|gvfs|xine|xmms|irapp)\/((\d+)[\w\.-]+)/i,                    // XBMC/gvfs/Xine/XMMS/irapp
	            /(foobar2000)\/((\d+)[\d\.]+)/i,                                    // Foobar2000
	            /(itunes)\/((\d+)[\d\.]+)/i                                         // iTunes
	            ], [NAME, VERSION], [

	            /(wmplayer)\/((\d+)[\w\.-]+)/i,                                     // Windows Media Player
	            /(windows-media-player)\/((\d+)[\w\.-]+)/i
	            ], [[NAME, /-/g, ' '], VERSION], [

	            /windows\/((\d+)[\w\.-]+) upnp\/[\d\.]+ dlnadoc\/[\d\.]+ (home media server)/i
	                                                                                // Windows Media Server
	            ], [VERSION, [NAME, 'Windows']], [

	            /(com\.riseupradioalarm)\/((\d+)[\d\.]*)/i                          // RiseUP Radio Alarm
	            ], [NAME, VERSION], [

	            /(rad.io)\s((\d+)[\d\.]+)/i,                                        // Rad.io
	            /(radio.(?:de|at|fr))\s((\d+)[\d\.]+)/i
	            ], [[NAME, 'rad.io'], VERSION]

	            //////////////////////
	            // Media players END
	            ////////////////////*/

	        ],

	        cpu : [[

	            /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i                     // AMD64
	            ], [[ARCHITECTURE, 'amd64']], [

	            /(ia32(?=;))/i                                                      // IA32 (quicktime)
	            ], [[ARCHITECTURE, util.lowerize]], [

	            /((?:i[346]|x)86)[;\)]/i                                            // IA32
	            ], [[ARCHITECTURE, 'ia32']], [

	            // PocketPC mistakenly identified as PowerPC
	            /windows\s(ce|mobile);\sppc;/i
	            ], [[ARCHITECTURE, 'arm']], [

	            /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i                           // PowerPC
	            ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [

	            /(sun4\w)[;\)]/i                                                    // SPARC
	            ], [[ARCHITECTURE, 'sparc']], [

	            /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
	                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
	            ], [[ARCHITECTURE, util.lowerize]]
	        ],

	        device : [[

	            /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i                         // iPad/PlayBook
	            ], [MODEL, VENDOR, [TYPE, TABLET]], [

	            /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
	            ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

	            /(apple\s{0,1}tv)/i                                                 // Apple TV
	            ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple']], [

	            /(archos)\s(gamepad2?)/i,                                           // Archos
	            /(hp).+(touchpad)/i,                                                // HP TouchPad
	            /(hp).+(tablet)/i,                                                  // HP Tablet
	            /(kindle)\/([\w\.]+)/i,                                             // Kindle
	            /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
	            /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
	            ], [VENDOR, MODEL, [TYPE, TABLET]], [

	            /(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i                               // Kindle Fire HD
	            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
	            /(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i                  // Fire Phone
	            ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [

	            /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
	            ], [MODEL, VENDOR, [TYPE, MOBILE]], [
	            /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
	            ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

	            /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
	            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
	                                                                                // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Huawei/Meizu/Motorola/Polytron
	            /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
	            /(asus)-?(\w+)/i                                                    // Asus
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	            /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
	            ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
	                                                                                // Asus Tablets
	            /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i
	            ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

	            /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
	            /(sony)?(?:sgp.+)\sbuild\//i
	            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
	            /(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i
	            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Phone'], [TYPE, MOBILE]], [

	            /\s(ouya)\s/i,                                                      // Ouya
	            /(nintendo)\s([wids3u]+)/i                                          // Nintendo
	            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

	            /android.+;\s(shield)\sbuild/i                                      // Nvidia
	            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

	            /(playstation\s[34portablevi]+)/i                                   // Playstation
	            ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

	            /(sprint\s(\w+))/i                                                  // Sprint Phones
	            ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

	            /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i                         // Lenovo tablets
	            ], [VENDOR, MODEL, [TYPE, TABLET]], [

	            /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,                               // HTC
	            /(zte)-(\w+)*/i,                                                    // ZTE
	            /(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i
	                                                                                // Alcatel/GeeksPhone/Huawei/Lenovo/Nexian/Panasonic/Sony
	            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

	            /(nexus\s9)/i                                                       // HTC Nexus 9
	            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

	            /(nexus\s6p)/i                                                      // Huawei Nexus 6P
	            ], [MODEL, [VENDOR, 'Huawei'], [TYPE, MOBILE]], [

	            /(microsoft);\s(lumia[\s\w]+)/i                                     // Microsoft Lumia
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

	            /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
	            ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
	            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
	            ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

	                                                                                // Motorola
	            /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,
	            /mot[\s-]?(\w+)*/i,
	            /(XT\d{3,4}) build\//i,
	            /(nexus\s6)/i
	            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
	            /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
	            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

	            /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i            // HbbTV devices
	            ], [[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]], [

	            /hbbtv.+maple;(\d+)/i
	            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, 'Samsung'], [TYPE, SMARTTV]], [

	            /\(dtv[\);].+(aquos)/i                                              // Sharp
	            ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [

	            /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
	            /((SM-T\w+))/i
	            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
	            /smart-tv.+(samsung)/i
	            ], [VENDOR, [TYPE, SMARTTV], MODEL], [
	            /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
	            /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,
	            /sec-((sgh\w+))/i
	            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [

	            /sie-(\w+)*/i                                                       // Siemens
	            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

	            /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
	            /(nokia)[\s_-]?([\w-]+)*/i
	            ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

	            /android\s3\.[\s\w;-]{10}(a\d{3})/i                                 // Acer
	            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

	            /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
	            ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
	            /(lg) netcast\.tv/i                                                 // LG SmartTV
	            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
	            /(nexus\s[45])/i,                                                   // LG
	            /lg[e;\s\/-]+(\w+)*/i
	            ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

	            /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
	            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

	            /linux;.+((jolla));/i                                               // Jolla
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

	            /((pebble))app\/[\d\.]+\s/i                                         // Pebble
	            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

	            /android.+;\s(glass)\s\d/i                                          // Google Glass
	            ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

	            /android.+(\w+)\s+build\/hm\1/i,                                    // Xiaomi Hongmi 'numeric' models
	            /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,               // Xiaomi Hongmi
	            /android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i    // Xiaomi Mi
	            ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [

	            /android.+a000(1)\s+build/i                                         // OnePlus
	            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

	            /\s(tablet)[;\/]/i,                                                 // Unidentifiable Tablet
	            /\s(mobile)(?:[;\/]|\ssafari)/i                                     // Unidentifiable Mobile
	            ], [[TYPE, util.lowerize], VENDOR, MODEL]

	            /*//////////////////////////
	            // TODO: move to string map
	            ////////////////////////////

	            /(C6603)/i                                                          // Sony Xperia Z C6603
	            ], [[MODEL, 'Xperia Z C6603'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
	            /(C6903)/i                                                          // Sony Xperia Z 1
	            ], [[MODEL, 'Xperia Z 1'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [

	            /(SM-G900[F|H])/i                                                   // Samsung Galaxy S5
	            ], [[MODEL, 'Galaxy S5'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	            /(SM-G7102)/i                                                       // Samsung Galaxy Grand 2
	            ], [[MODEL, 'Galaxy Grand 2'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	            /(SM-G530H)/i                                                       // Samsung Galaxy Grand Prime
	            ], [[MODEL, 'Galaxy Grand Prime'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	            /(SM-G313HZ)/i                                                      // Samsung Galaxy V
	            ], [[MODEL, 'Galaxy V'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	            /(SM-T805)/i                                                        // Samsung Galaxy Tab S 10.5
	            ], [[MODEL, 'Galaxy Tab S 10.5'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
	            /(SM-G800F)/i                                                       // Samsung Galaxy S5 Mini
	            ], [[MODEL, 'Galaxy S5 Mini'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	            /(SM-T311)/i                                                        // Samsung Galaxy Tab 3 8.0
	            ], [[MODEL, 'Galaxy Tab 3 8.0'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [

	            /(R1001)/i                                                          // Oppo R1001
	            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
	            /(X9006)/i                                                          // Oppo Find 7a
	            ], [[MODEL, 'Find 7a'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	            /(R2001)/i                                                          // Oppo YOYO R2001
	            ], [[MODEL, 'Yoyo R2001'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	            /(R815)/i                                                           // Oppo Clover R815
	            ], [[MODEL, 'Clover R815'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	             /(U707)/i                                                          // Oppo Find Way S
	            ], [[MODEL, 'Find Way S'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [

	            /(T3C)/i                                                            // Advan Vandroid T3C
	            ], [MODEL, [VENDOR, 'Advan'], [TYPE, TABLET]], [
	            /(ADVAN T1J\+)/i                                                    // Advan Vandroid T1J+
	            ], [[MODEL, 'Vandroid T1J+'], [VENDOR, 'Advan'], [TYPE, TABLET]], [
	            /(ADVAN S4A)/i                                                      // Advan Vandroid S4A
	            ], [[MODEL, 'Vandroid S4A'], [VENDOR, 'Advan'], [TYPE, MOBILE]], [

	            /(V972M)/i                                                          // ZTE V972M
	            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [

	            /(i-mobile)\s(IQ\s[\d\.]+)/i                                        // i-mobile IQ
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	            /(IQ6.3)/i                                                          // i-mobile IQ IQ 6.3
	            ], [[MODEL, 'IQ 6.3'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
	            /(i-mobile)\s(i-style\s[\d\.]+)/i                                   // i-mobile i-STYLE
	            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	            /(i-STYLE2.1)/i                                                     // i-mobile i-STYLE 2.1
	            ], [[MODEL, 'i-STYLE 2.1'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [

	            /(mobiistar touch LAI 512)/i                                        // mobiistar touch LAI 512
	            ], [[MODEL, 'Touch LAI 512'], [VENDOR, 'mobiistar'], [TYPE, MOBILE]], [

	            /////////////
	            // END TODO
	            ///////////*/

	        ],

	        engine : [[

	            /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
	            ], [VERSION, [NAME, 'EdgeHTML']], [

	            /(presto)\/([\w\.]+)/i,                                             // Presto
	            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,     // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m
	            /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
	            /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
	            ], [NAME, VERSION], [

	            /rv\:([\w\.]+).*(gecko)/i                                           // Gecko
	            ], [VERSION, NAME]
	        ],

	        os : [[

	            // Windows based
	            /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
	            ], [NAME, VERSION], [
	            /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
	            /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i,                  // Windows Phone
	            /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
	            ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
	            /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
	            ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

	            // Mobile/Embedded OS
	            /\((bb)(10);/i                                                      // BlackBerry 10
	            ], [[NAME, 'BlackBerry'], VERSION], [
	            /(blackberry)\w*\/?([\w\.]+)*/i,                                    // Blackberry
	            /(tizen)[\/\s]([\w\.]+)/i,                                          // Tizen
	            /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,
	                                                                                // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki
	            /linux;.+(sailfish);/i                                              // Sailfish OS
	            ], [NAME, VERSION], [
	            /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i                 // Symbian
	            ], [[NAME, 'Symbian'], VERSION], [
	            /\((series40);/i                                                    // Series 40
	            ], [NAME], [
	            /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
	            ], [[NAME, 'Firefox OS'], VERSION], [

	            // Console
	            /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation

	            // GNU/Linux based
	            /(mint)[\/\s\(]?(\w+)*/i,                                           // Mint
	            /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
	            /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]+)*/i,
	                                                                                // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
	                                                                                // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
	            /(hurd|linux)\s?([\w\.]+)*/i,                                       // Hurd/Linux
	            /(gnu)\s?([\w\.]+)*/i                                               // GNU
	            ], [NAME, VERSION], [

	            /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
	            ], [[NAME, 'Chromium OS'], VERSION],[

	            // Solaris
	            /(sunos)\s?([\w\.]+\d)*/i                                           // Solaris
	            ], [[NAME, 'Solaris'], VERSION], [

	            // BSD based
	            /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i                   // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
	            ], [NAME, VERSION],[

	            /(haiku)\s(\w+)/i                                                  // Haiku
	            ], [NAME, VERSION],[

	            /(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i              // iOS
	            ], [[NAME, 'iOS'], [VERSION, /_/g, '.']], [

	            /(mac\sos\sx)\s?([\w\s\.]+\w)*/i,
	            /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
	            ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

	            // Other
	            /((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,                            // Solaris
	            /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,                               // AIX
	            /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
	                                                                                // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS
	            /(unix)\s?([\w\.]+)*/i                                              // UNIX
	            ], [NAME, VERSION]
	        ]
	    };


	    /////////////////
	    // Constructor
	    ////////////////


	    var UAParser = function (uastring, extensions) {

	        if (!(this instanceof UAParser)) {
	            return new UAParser(uastring, extensions).getResult();
	        }

	        var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
	        var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;

	        this.getBrowser = function () {
	            var browser = mapper.rgx.apply(this, rgxmap.browser);
	            browser.major = util.major(browser.version);
	            return browser;
	        };
	        this.getCPU = function () {
	            return mapper.rgx.apply(this, rgxmap.cpu);
	        };
	        this.getDevice = function () {
	            return mapper.rgx.apply(this, rgxmap.device);
	        };
	        this.getEngine = function () {
	            return mapper.rgx.apply(this, rgxmap.engine);
	        };
	        this.getOS = function () {
	            return mapper.rgx.apply(this, rgxmap.os);
	        };
	        this.getResult = function() {
	            return {
	                ua      : this.getUA(),
	                browser : this.getBrowser(),
	                engine  : this.getEngine(),
	                os      : this.getOS(),
	                device  : this.getDevice(),
	                cpu     : this.getCPU()
	            };
	        };
	        this.getUA = function () {
	            return ua;
	        };
	        this.setUA = function (uastring) {
	            ua = uastring;
	            return this;
	        };
	        return this;
	    };

	    UAParser.VERSION = LIBVERSION;
	    UAParser.BROWSER = {
	        NAME    : NAME,
	        MAJOR   : MAJOR, // deprecated
	        VERSION : VERSION
	    };
	    UAParser.CPU = {
	        ARCHITECTURE : ARCHITECTURE
	    };
	    UAParser.DEVICE = {
	        MODEL   : MODEL,
	        VENDOR  : VENDOR,
	        TYPE    : TYPE,
	        CONSOLE : CONSOLE,
	        MOBILE  : MOBILE,
	        SMARTTV : SMARTTV,
	        TABLET  : TABLET,
	        WEARABLE: WEARABLE,
	        EMBEDDED: EMBEDDED
	    };
	    UAParser.ENGINE = {
	        NAME    : NAME,
	        VERSION : VERSION
	    };
	    UAParser.OS = {
	        NAME    : NAME,
	        VERSION : VERSION
	    };


	    ///////////
	    // Export
	    //////////


	    // check js environment
	    if (typeof(exports) !== UNDEF_TYPE) {
	        // nodejs env
	        if (typeof module !== UNDEF_TYPE && module.exports) {
	            exports = module.exports = UAParser;
	        }
	        exports.UAParser = UAParser;
	    } else {
	        // requirejs env (optional)
	        if ("function" === FUNC_TYPE && __webpack_require__(243)) {
	            !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	                return UAParser;
	            }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	        } else {
	            // browser env
	            window.UAParser = UAParser;
	        }
	    }

	    // jQuery/Zepto specific (optional)
	    // Note:
	    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
	    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
	    //   and we should catch that.
	    var $ = window.jQuery || window.Zepto;
	    if (typeof $ !== UNDEF_TYPE) {
	        var parser = new UAParser();
	        $.ua = parser.getResult();
	        $.ua.get = function() {
	            return parser.getUA();
	        };
	        $.ua.set = function (uastring) {
	            parser.setUA(uastring);
	            var result = parser.getResult();
	            for (var prop in result) {
	                $.ua[prop] = result[prop];
	            }
	        };
	    }

	})(typeof window === 'object' ? window : this);


/***/ },
/* 243 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var invariant = __webpack_require__(204);

	var componentRegex = /\./;
	var orRegex = /\|\|/;
	var rangeRegex = /\s+\-\s+/;
	var modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\s*(.+)/;
	var numericRegex = /^(\d*)(.*)/;

	/**
	 * Splits input `range` on "||" and returns true if any subrange matches
	 * `version`.
	 *
	 * @param {string} range
	 * @param {string} version
	 * @returns {boolean}
	 */
	function checkOrExpression(range, version) {
	  var expressions = range.split(orRegex);

	  if (expressions.length > 1) {
	    return expressions.some(function (range) {
	      return VersionRange.contains(range, version);
	    });
	  } else {
	    range = expressions[0].trim();
	    return checkRangeExpression(range, version);
	  }
	}

	/**
	 * Splits input `range` on " - " (the surrounding whitespace is required) and
	 * returns true if version falls between the two operands.
	 *
	 * @param {string} range
	 * @param {string} version
	 * @returns {boolean}
	 */
	function checkRangeExpression(range, version) {
	  var expressions = range.split(rangeRegex);

	  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the "-" operator expects exactly 2 operands') : invariant(false) : void 0;

	  if (expressions.length === 1) {
	    return checkSimpleExpression(expressions[0], version);
	  } else {
	    var startVersion = expressions[0],
	        endVersion = expressions[1];

	    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the "-" operator must be simple (no modifiers)') : invariant(false) : void 0;

	    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);
	  }
	}

	/**
	 * Checks if `range` matches `version`. `range` should be a "simple" range (ie.
	 * not a compound range using the " - " or "||" operators).
	 *
	 * @param {string} range
	 * @param {string} version
	 * @returns {boolean}
	 */
	function checkSimpleExpression(range, version) {
	  range = range.trim();
	  if (range === '') {
	    return true;
	  }

	  var versionComponents = version.split(componentRegex);

	  var _getModifierAndCompon = getModifierAndComponents(range),
	      modifier = _getModifierAndCompon.modifier,
	      rangeComponents = _getModifierAndCompon.rangeComponents;

	  switch (modifier) {
	    case '<':
	      return checkLessThan(versionComponents, rangeComponents);
	    case '<=':
	      return checkLessThanOrEqual(versionComponents, rangeComponents);
	    case '>=':
	      return checkGreaterThanOrEqual(versionComponents, rangeComponents);
	    case '>':
	      return checkGreaterThan(versionComponents, rangeComponents);
	    case '~':
	    case '~>':
	      return checkApproximateVersion(versionComponents, rangeComponents);
	    default:
	      return checkEqual(versionComponents, rangeComponents);
	  }
	}

	/**
	 * Checks whether `a` is less than `b`.
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {boolean}
	 */
	function checkLessThan(a, b) {
	  return compareComponents(a, b) === -1;
	}

	/**
	 * Checks whether `a` is less than or equal to `b`.
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {boolean}
	 */
	function checkLessThanOrEqual(a, b) {
	  var result = compareComponents(a, b);
	  return result === -1 || result === 0;
	}

	/**
	 * Checks whether `a` is equal to `b`.
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {boolean}
	 */
	function checkEqual(a, b) {
	  return compareComponents(a, b) === 0;
	}

	/**
	 * Checks whether `a` is greater than or equal to `b`.
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {boolean}
	 */
	function checkGreaterThanOrEqual(a, b) {
	  var result = compareComponents(a, b);
	  return result === 1 || result === 0;
	}

	/**
	 * Checks whether `a` is greater than `b`.
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {boolean}
	 */
	function checkGreaterThan(a, b) {
	  return compareComponents(a, b) === 1;
	}

	/**
	 * Checks whether `a` is "reasonably close" to `b` (as described in
	 * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is "1.3.1"
	 * then "reasonably close" is defined as ">= 1.3.1 and < 1.4".
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {boolean}
	 */
	function checkApproximateVersion(a, b) {
	  var lowerBound = b.slice();
	  var upperBound = b.slice();

	  if (upperBound.length > 1) {
	    upperBound.pop();
	  }
	  var lastIndex = upperBound.length - 1;
	  var numeric = parseInt(upperBound[lastIndex], 10);
	  if (isNumber(numeric)) {
	    upperBound[lastIndex] = numeric + 1 + '';
	  }

	  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);
	}

	/**
	 * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version
	 * components from `range`.
	 *
	 * For example, given `range` ">= 1.2.3" returns an object with a `modifier` of
	 * `">="` and `components` of `[1, 2, 3]`.
	 *
	 * @param {string} range
	 * @returns {object}
	 */
	function getModifierAndComponents(range) {
	  var rangeComponents = range.split(componentRegex);
	  var matches = rangeComponents[0].match(modifierRegex);
	  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;

	  return {
	    modifier: matches[1],
	    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))
	  };
	}

	/**
	 * Determines if `number` is a number.
	 *
	 * @param {mixed} number
	 * @returns {boolean}
	 */
	function isNumber(number) {
	  return !isNaN(number) && isFinite(number);
	}

	/**
	 * Tests whether `range` is a "simple" version number without any modifiers
	 * (">", "~" etc).
	 *
	 * @param {string} range
	 * @returns {boolean}
	 */
	function isSimpleVersion(range) {
	  return !getModifierAndComponents(range).modifier;
	}

	/**
	 * Zero-pads array `array` until it is at least `length` long.
	 *
	 * @param {array} array
	 * @param {number} length
	 */
	function zeroPad(array, length) {
	  for (var i = array.length; i < length; i++) {
	    array[i] = '0';
	  }
	}

	/**
	 * Normalizes `a` and `b` in preparation for comparison by doing the following:
	 *
	 * - zero-pads `a` and `b`
	 * - marks any "x", "X" or "*" component in `b` as equivalent by zero-ing it out
	 *   in both `a` and `b`
	 * - marks any final "*" component in `b` as a greedy wildcard by zero-ing it
	 *   and all of its successors in `a`
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {array<array<string>>}
	 */
	function normalizeVersions(a, b) {
	  a = a.slice();
	  b = b.slice();

	  zeroPad(a, b.length);

	  // mark "x" and "*" components as equal
	  for (var i = 0; i < b.length; i++) {
	    var matches = b[i].match(/^[x*]$/i);
	    if (matches) {
	      b[i] = a[i] = '0';

	      // final "*" greedily zeros all remaining components
	      if (matches[0] === '*' && i === b.length - 1) {
	        for (var j = i; j < a.length; j++) {
	          a[j] = '0';
	        }
	      }
	    }
	  }

	  zeroPad(b, a.length);

	  return [a, b];
	}

	/**
	 * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.
	 *
	 * For example, `10-alpha` is greater than `2-beta`.
	 *
	 * @param {string} a
	 * @param {string} b
	 * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
	 * or greater than `b`, respectively
	 */
	function compareNumeric(a, b) {
	  var aPrefix = a.match(numericRegex)[1];
	  var bPrefix = b.match(numericRegex)[1];
	  var aNumeric = parseInt(aPrefix, 10);
	  var bNumeric = parseInt(bPrefix, 10);

	  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {
	    return compare(aNumeric, bNumeric);
	  } else {
	    return compare(a, b);
	  }
	}

	/**
	 * Returns the ordering of `a` and `b`.
	 *
	 * @param {string|number} a
	 * @param {string|number} b
	 * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
	 * or greater than `b`, respectively
	 */
	function compare(a, b) {
	  !(typeof a === typeof b) ? process.env.NODE_ENV !== 'production' ? invariant(false, '"a" and "b" must be of the same type') : invariant(false) : void 0;

	  if (a > b) {
	    return 1;
	  } else if (a < b) {
	    return -1;
	  } else {
	    return 0;
	  }
	}

	/**
	 * Compares arrays of version components.
	 *
	 * @param {array<string>} a
	 * @param {array<string>} b
	 * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
	 * or greater than `b`, respectively
	 */
	function compareComponents(a, b) {
	  var _normalizeVersions = normalizeVersions(a, b),
	      aNormalized = _normalizeVersions[0],
	      bNormalized = _normalizeVersions[1];

	  for (var i = 0; i < bNormalized.length; i++) {
	    var result = compareNumeric(aNormalized[i], bNormalized[i]);
	    if (result) {
	      return result;
	    }
	  }

	  return 0;
	}

	var VersionRange = {
	  /**
	   * Checks whether `version` satisfies the `range` specification.
	   *
	   * We support a subset of the expressions defined in
	   * https://www.npmjs.org/doc/misc/semver.html:
	   *
	   *    version   Must match version exactly
	   *    =version  Same as just version
	   *    >version  Must be greater than version
	   *    >=version Must be greater than or equal to version
	   *    <version  Must be less than version
	   *    <=version Must be less than or equal to version
	   *    ~version  Must be at least version, but less than the next significant
	   *              revision above version:
	   *              "~1.2.3" is equivalent to ">= 1.2.3 and < 1.3"
	   *    ~>version Equivalent to ~version
	   *    1.2.x     Must match "1.2.x", where "x" is a wildcard that matches
	   *              anything
	   *    1.2.*     Similar to "1.2.x", but "*" in the trailing position is a
	   *              "greedy" wildcard, so will match any number of additional
	   *              components:
	   *              "1.2.*" will match "1.2.1", "1.2.1.1", "1.2.1.1.1" etc
	   *    *         Any version
	   *    ""        (Empty string) Same as *
	   *    v1 - v2   Equivalent to ">= v1 and <= v2"
	   *    r1 || r2  Passes if either r1 or r2 are satisfied
	   *
	   * @param {string} range
	   * @param {string} version
	   * @returns {boolean}
	   */
	  contains: function contains(range, version) {
	    return checkOrExpression(range.trim(), version.trim());
	  }
	};

	module.exports = VersionRange;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 245 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 246 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setDraftEditorSelection
	 * @typechecks
	 * 
	 */

	'use strict';

	var containsNode = __webpack_require__(248);
	var getActiveElement = __webpack_require__(251);

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 */
	function setDraftEditorSelection(selectionState, node, blockKey, nodeStart, nodeEnd) {
	  // It's possible that the editor has been removed from the DOM but
	  // our selection code doesn't know it yet. Forcing selection in
	  // this case may lead to errors, so just bail now.
	  if (!containsNode(document.documentElement, node)) {
	    return;
	  }

	  var selection = global.getSelection();
	  var anchorKey = selectionState.getAnchorKey();
	  var anchorOffset = selectionState.getAnchorOffset();
	  var focusKey = selectionState.getFocusKey();
	  var focusOffset = selectionState.getFocusOffset();
	  var isBackward = selectionState.getIsBackward();

	  // IE doesn't support backward selection. Swap key/offset pairs.
	  if (!selection.extend && isBackward) {
	    var tempKey = anchorKey;
	    var tempOffset = anchorOffset;
	    anchorKey = focusKey;
	    anchorOffset = focusOffset;
	    focusKey = tempKey;
	    focusOffset = tempOffset;
	    isBackward = false;
	  }

	  var hasAnchor = anchorKey === blockKey && nodeStart <= anchorOffset && nodeEnd >= anchorOffset;

	  var hasFocus = focusKey === blockKey && nodeStart <= focusOffset && nodeEnd >= focusOffset;

	  // If the selection is entirely bound within this node, set the selection
	  // and be done.
	  if (hasAnchor && hasFocus) {
	    selection.removeAllRanges();
	    addPointToSelection(selection, node, anchorOffset - nodeStart);
	    addFocusToSelection(selection, node, focusOffset - nodeStart);
	    return;
	  }

	  if (!isBackward) {
	    // If the anchor is within this node, set the range start.
	    if (hasAnchor) {
	      selection.removeAllRanges();
	      addPointToSelection(selection, node, anchorOffset - nodeStart);
	    }

	    // If the focus is within this node, we can assume that we have
	    // already set the appropriate start range on the selection, and
	    // can simply extend the selection.
	    if (hasFocus) {
	      addFocusToSelection(selection, node, focusOffset - nodeStart);
	    }
	  } else {
	    // If this node has the focus, set the selection range to be a
	    // collapsed range beginning here. Later, when we encounter the anchor,
	    // we'll use this information to extend the selection.
	    if (hasFocus) {
	      selection.removeAllRanges();
	      addPointToSelection(selection, node, focusOffset - nodeStart);
	    }

	    // If this node has the anchor, we may assume that the correct
	    // focus information is already stored on the selection object.
	    // We keep track of it, reset the selection range, and extend it
	    // back to the focus point.
	    if (hasAnchor) {
	      var storedFocusNode = selection.focusNode;
	      var storedFocusOffset = selection.focusOffset;

	      selection.removeAllRanges();
	      addPointToSelection(selection, node, anchorOffset - nodeStart);
	      addFocusToSelection(selection, storedFocusNode, storedFocusOffset);
	    }
	  }
	}

	/**
	 * Extend selection towards focus point.
	 */
	function addFocusToSelection(selection, node, offset) {
	  if (selection.extend && containsNode(getActiveElement(), node)) {
	    // If `extend` is called while another element has focus, an error is
	    // thrown. We therefore disable `extend` if the active element is somewhere
	    // other than the node we are selecting. This should only occur in Firefox,
	    // since it is the only browser to support multiple selections.
	    // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.
	    selection.extend(node, offset);
	  } else {
	    // IE doesn't support extend. This will mean no backward selection.
	    // Extract the existing selection range and add focus to it.
	    // Additionally, clone the selection range. IE11 throws an
	    // InvalidStateError when attempting to access selection properties
	    // after the range is detached.
	    var range = selection.getRangeAt(0);
	    range.setEnd(node, offset);
	    selection.addRange(range.cloneRange());
	  }
	}

	function addPointToSelection(selection, node, offset) {
	  var range = document.createRange();
	  range.setStart(node, offset);
	  selection.addRange(range);
	}

	module.exports = setDraftEditorSelection;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(249);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(250);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 250 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 251 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 252 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftOffsetKey
	 * 
	 */

	'use strict';

	var KEY_DELIMITER = '-';

	var DraftOffsetKey = {
	  encode: function encode(blockKey, decoratorKey, leafKey) {
	    return blockKey + KEY_DELIMITER + decoratorKey + KEY_DELIMITER + leafKey;
	  },

	  decode: function decode(offsetKey) {
	    var _offsetKey$split = offsetKey.split(KEY_DELIMITER);

	    var blockKey = _offsetKey$split[0];
	    var decoratorKey = _offsetKey$split[1];
	    var leafKey = _offsetKey$split[2];

	    return {
	      blockKey: blockKey,
	      decoratorKey: parseInt(decoratorKey, 10),
	      leafKey: parseInt(leafKey, 10)
	    };
	  }
	};

	module.exports = DraftOffsetKey;

/***/ },
/* 253 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * @param {DOMElement} element
	 * @param {DOMDocument} doc
	 * @return {boolean}
	 */
	function _isViewportScrollElement(element, doc) {
	  return !!doc && (element === doc.documentElement || element === doc.body);
	}

	/**
	 * Scroll Module. This class contains 4 simple static functions
	 * to be used to access Element.scrollTop/scrollLeft properties.
	 * To solve the inconsistencies between browsers when either
	 * document.body or document.documentElement is supplied,
	 * below logic will be used to alleviate the issue:
	 *
	 * 1. If 'element' is either 'document.body' or 'document.documentElement,
	 *    get whichever element's 'scroll{Top,Left}' is larger.
	 * 2. If 'element' is either 'document.body' or 'document.documentElement',
	 *    set the 'scroll{Top,Left}' on both elements.
	 */

	var Scroll = {
	  /**
	   * @param {DOMElement} element
	   * @return {number}
	   */
	  getTop: function getTop(element) {
	    var doc = element.ownerDocument;
	    return _isViewportScrollElement(element, doc) ?
	    // In practice, they will either both have the same value,
	    // or one will be zero and the other will be the scroll position
	    // of the viewport. So we can use `X || Y` instead of `Math.max(X, Y)`
	    doc.body.scrollTop || doc.documentElement.scrollTop : element.scrollTop;
	  },

	  /**
	   * @param {DOMElement} element
	   * @param {number} newTop
	   */
	  setTop: function setTop(element, newTop) {
	    var doc = element.ownerDocument;
	    if (_isViewportScrollElement(element, doc)) {
	      doc.body.scrollTop = doc.documentElement.scrollTop = newTop;
	    } else {
	      element.scrollTop = newTop;
	    }
	  },

	  /**
	   * @param {DOMElement} element
	   * @return {number}
	   */
	  getLeft: function getLeft(element) {
	    var doc = element.ownerDocument;
	    return _isViewportScrollElement(element, doc) ? doc.body.scrollLeft || doc.documentElement.scrollLeft : element.scrollLeft;
	  },

	  /**
	   * @param {DOMElement} element
	   * @param {number} newLeft
	   */
	  setLeft: function setLeft(element, newLeft) {
	    var doc = element.ownerDocument;
	    if (_isViewportScrollElement(element, doc)) {
	      doc.body.scrollLeft = doc.documentElement.scrollLeft = newLeft;
	    } else {
	      element.scrollLeft = newLeft;
	    }
	  }
	};

	module.exports = Scroll;

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var getStyleProperty = __webpack_require__(255);

	/**
	 * @param {DOMNode} element [description]
	 * @param {string} name Overflow style property name.
	 * @return {boolean} True if the supplied ndoe is scrollable.
	 */
	function _isNodeScrollable(element, name) {
	  var overflow = Style.get(element, name);
	  return overflow === 'auto' || overflow === 'scroll';
	}

	/**
	 * Utilities for querying and mutating style properties.
	 */
	var Style = {
	  /**
	   * Gets the style property for the supplied node. This will return either the
	   * computed style, if available, or the declared style.
	   *
	   * @param {DOMNode} node
	   * @param {string} name Style property name.
	   * @return {?string} Style property value.
	   */
	  get: getStyleProperty,

	  /**
	   * Determines the nearest ancestor of a node that is scrollable.
	   *
	   * NOTE: This can be expensive if used repeatedly or on a node nested deeply.
	   *
	   * @param {?DOMNode} node Node from which to start searching.
	   * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.
	   */
	  getScrollParent: function getScrollParent(node) {
	    if (!node) {
	      return null;
	    }
	    var ownerDocument = node.ownerDocument;
	    while (node && node !== ownerDocument.body) {
	      if (_isNodeScrollable(node, 'overflow') || _isNodeScrollable(node, 'overflowY') || _isNodeScrollable(node, 'overflowX')) {
	        return node;
	      }
	      node = node.parentNode;
	    }
	    return ownerDocument.defaultView || ownerDocument.parentWindow;
	  }

	};

	module.exports = Style;

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var camelize = __webpack_require__(256);
	var hyphenate = __webpack_require__(257);

	function asString(value) /*?string*/{
	  return value == null ? value : String(value);
	}

	function getStyleProperty( /*DOMNode*/node, /*string*/name) /*?string*/{
	  var computedStyle = void 0;

	  // W3C Standard
	  if (window.getComputedStyle) {
	    // In certain cases such as within an iframe in FF3, this returns null.
	    computedStyle = window.getComputedStyle(node, null);
	    if (computedStyle) {
	      return asString(computedStyle.getPropertyValue(hyphenate(name)));
	    }
	  }
	  // Safari
	  if (document.defaultView && document.defaultView.getComputedStyle) {
	    computedStyle = document.defaultView.getComputedStyle(node, null);
	    // A Safari bug causes this to return null for `display: none` elements.
	    if (computedStyle) {
	      return asString(computedStyle.getPropertyValue(hyphenate(name)));
	    }
	    if (name === 'display') {
	      return 'none';
	    }
	  }
	  // Internet Explorer
	  if (node.currentStyle) {
	    if (name === 'float') {
	      return asString(node.currentStyle.cssFloat || node.currentStyle.styleFloat);
	    }
	    return asString(node.currentStyle[camelize(name)]);
	  }
	  return asString(node.style && node.style[camelize(name)]);
	}

	module.exports = getStyleProperty;

/***/ },
/* 256 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 257 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var getElementRect = __webpack_require__(259);

	/**
	 * Gets an element's position in pixels relative to the viewport. The returned
	 * object represents the position of the element's top left corner.
	 *
	 * @param {DOMElement} element
	 * @return {object}
	 */
	function getElementPosition(element) {
	  var rect = getElementRect(element);
	  return {
	    x: rect.left,
	    y: rect.top,
	    width: rect.right - rect.left,
	    height: rect.bottom - rect.top
	  };
	}

	module.exports = getElementPosition;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var containsNode = __webpack_require__(248);

	/**
	 * Gets an element's bounding rect in pixels relative to the viewport.
	 *
	 * @param {DOMElement} elem
	 * @return {object}
	 */
	function getElementRect(elem) {
	  var docElem = elem.ownerDocument.documentElement;

	  // FF 2, Safari 3 and Opera 9.5- do not support getBoundingClientRect().
	  // IE9- will throw if the element is not in the document.
	  if (!('getBoundingClientRect' in elem) || !containsNode(docElem, elem)) {
	    return {
	      left: 0,
	      right: 0,
	      top: 0,
	      bottom: 0
	    };
	  }

	  // Subtracts clientTop/Left because IE8- added a 2px border to the
	  // <html> element (see http://fburl.com/1493213). IE 7 in
	  // Quicksmode does not report clientLeft/clientTop so there
	  // will be an unaccounted offset of 2px when in quirksmode
	  var rect = elem.getBoundingClientRect();

	  return {
	    left: Math.round(rect.left) - docElem.clientLeft,
	    right: Math.round(rect.right) - docElem.clientLeft,
	    top: Math.round(rect.top) - docElem.clientTop,
	    bottom: Math.round(rect.bottom) - docElem.clientTop
	  };
	}

	module.exports = getElementRect;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var getDocumentScrollElement = __webpack_require__(261);
	var getUnboundedScrollPosition = __webpack_require__(262);

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are bounded. This means that if the scroll position is
	 * negative or exceeds the element boundaries (which is possible using inertial
	 * scrolling), you will get zero or the maximum scroll position, respectively.
	 *
	 * If you need the unbound scroll position, use `getUnboundedScrollPosition`.
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getScrollPosition(scrollable) {
	  var documentScrollElement = getDocumentScrollElement(scrollable.ownerDocument || scrollable.document);
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    scrollable = documentScrollElement;
	  }
	  var scrollPosition = getUnboundedScrollPosition(scrollable);

	  var viewport = scrollable === documentScrollElement ? scrollable.ownerDocument.documentElement : scrollable;

	  var xMax = scrollable.scrollWidth - viewport.clientWidth;
	  var yMax = scrollable.scrollHeight - viewport.clientHeight;

	  scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));
	  scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));

	  return scrollPosition;
	}

	module.exports = getScrollPosition;

/***/ },
/* 261 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var isWebkit = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('AppleWebKit') > -1;

	/**
	 * Gets the element with the document scroll properties such as `scrollLeft` and
	 * `scrollHeight`. This may differ across different browsers.
	 *
	 * NOTE: The return value can be null if the DOM is not yet ready.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getDocumentScrollElement(doc) {
	  doc = doc || document;
	  return !isWebkit && doc.compatMode === 'CSS1Compat' ? doc.documentElement : doc.body;
	}

	module.exports = getDocumentScrollElement;

/***/ },
/* 262 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 263 */
/***/ function(module, exports) {

	"use strict";

	function getViewportWidth() {
	  var width = void 0;
	  if (document.documentElement) {
	    width = document.documentElement.clientWidth;
	  }

	  if (!width && document.body) {
	    width = document.body.clientWidth;
	  }

	  return width || 0;
	} /**
	   * Copyright (c) 2013-present, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   * @typechecks
	   */

	function getViewportHeight() {
	  var height = void 0;
	  if (document.documentElement) {
	    height = document.documentElement.clientHeight;
	  }

	  if (!height && document.body) {
	    height = document.body.clientHeight;
	  }

	  return height || 0;
	}

	/**
	 * Gets the viewport dimensions including any scrollbars.
	 */
	function getViewportDimensions() {
	  return {
	    width: window.innerWidth || getViewportWidth(),
	    height: window.innerHeight || getViewportHeight()
	  };
	}

	/**
	 * Gets the viewport dimensions excluding any scrollbars.
	 */
	getViewportDimensions.withoutScrollbars = function () {
	  return {
	    width: getViewportWidth(),
	    height: getViewportHeight()
	  };
	};

	module.exports = getViewportDimensions;

/***/ },
/* 264 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} className
	 * @return {string}
	 */

	function joinClasses(className /*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass = void 0;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorDragHandler
	 * @typechecks
	 * 
	 */

	'use strict';

	var DataTransfer = __webpack_require__(266);
	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);

	var findAncestorOffsetKey = __webpack_require__(269);
	var getTextContentFromFiles = __webpack_require__(271);
	var getUpdatedSelectionState = __webpack_require__(272);
	var nullthrows = __webpack_require__(226);

	var isEventHandled = __webpack_require__(273);

	/**
	 * Get a SelectionState for the supplied mouse event.
	 */
	function getSelectionForEvent(event, editorState) {
	  var node = null;
	  var offset = null;

	  if (typeof document.caretRangeFromPoint === 'function') {
	    var dropRange = document.caretRangeFromPoint(event.x, event.y);
	    node = dropRange.startContainer;
	    offset = dropRange.startOffset;
	  } else if (event.rangeParent) {
	    node = event.rangeParent;
	    offset = event.rangeOffset;
	  } else {
	    return null;
	  }

	  node = nullthrows(node);
	  offset = nullthrows(offset);
	  var offsetKey = nullthrows(findAncestorOffsetKey(node));

	  return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);
	}

	var DraftEditorDragHandler = {
	  /**
	   * Drag originating from input terminated.
	   */
	  onDragEnd: function onDragEnd(editor) {
	    editor.exitCurrentMode();
	  },

	  /**
	   * Handle data being dropped.
	   */
	  onDrop: function onDrop(editor, e) {
	    var data = new DataTransfer(e.nativeEvent.dataTransfer);

	    var editorState = editor._latestEditorState;
	    var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);

	    e.preventDefault();
	    editor.exitCurrentMode();

	    if (dropSelection == null) {
	      return;
	    }

	    var files = data.getFiles();
	    if (files.length > 0) {
	      if (editor.props.handleDroppedFiles && isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))) {
	        return;
	      }

	      getTextContentFromFiles(files, function (fileText) {
	        fileText && editor.update(insertTextAtSelection(editorState, nullthrows(dropSelection), // flow wtf
	        fileText));
	      });
	      return;
	    }

	    var dragType = editor._internalDrag ? 'internal' : 'external';
	    if (editor.props.handleDrop && isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))) {
	      return;
	    }

	    if (editor._internalDrag) {
	      editor.update(moveText(editorState, dropSelection));
	      return;
	    }

	    editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));
	  }

	};

	function moveText(editorState, targetSelection) {
	  var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);
	  return EditorState.push(editorState, newContentState, 'insert-fragment');
	}

	/**
	 * Insert text at a specified selection.
	 */
	function insertTextAtSelection(editorState, selection, text) {
	  var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());
	  return EditorState.push(editorState, newContentState, 'insert-fragment');
	}

	module.exports = DraftEditorDragHandler;

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var PhotosMimeType = __webpack_require__(267);

	var createArrayFromMixed = __webpack_require__(268);
	var emptyFunction = __webpack_require__(216);

	var CR_LF_REGEX = new RegExp('\r\n', 'g');
	var LF_ONLY = '\n';

	var RICH_TEXT_TYPES = {
	  'text/rtf': 1,
	  'text/html': 1
	};

	/**
	 * If DataTransferItem is a file then return the Blob of data.
	 *
	 * @param {object} item
	 * @return {?blob}
	 */
	function getFileFromDataTransfer(item) {
	  if (item.kind == 'file') {
	    return item.getAsFile();
	  }
	}

	var DataTransfer = function () {
	  /**
	   * @param {object} data
	   */
	  function DataTransfer(data) {
	    _classCallCheck(this, DataTransfer);

	    this.data = data;

	    // Types could be DOMStringList or array
	    this.types = data.types ? createArrayFromMixed(data.types) : [];
	  }

	  /**
	   * Is this likely to be a rich text data transfer?
	   *
	   * @return {boolean}
	   */


	  DataTransfer.prototype.isRichText = function isRichText() {
	    // If HTML is available, treat this data as rich text. This way, we avoid
	    // using a pasted image if it is packaged with HTML -- this may occur with
	    // pastes from MS Word, for example.  However this is only rich text if
	    // there's accompanying text.
	    if (this.getHTML() && this.getText()) {
	      return true;
	    }

	    // When an image is copied from a preview window, you end up with two
	    // DataTransferItems one of which is a file's metadata as text.  Skip those.
	    if (this.isImage()) {
	      return false;
	    }

	    return this.types.some(function (type) {
	      return RICH_TEXT_TYPES[type];
	    });
	  };

	  /**
	   * Get raw text.
	   *
	   * @return {?string}
	   */


	  DataTransfer.prototype.getText = function getText() {
	    var text;
	    if (this.data.getData) {
	      if (!this.types.length) {
	        text = this.data.getData('Text');
	      } else if (this.types.indexOf('text/plain') != -1) {
	        text = this.data.getData('text/plain');
	      }
	    }
	    return text ? text.replace(CR_LF_REGEX, LF_ONLY) : null;
	  };

	  /**
	   * Get HTML paste data
	   *
	   * @return {?string}
	   */


	  DataTransfer.prototype.getHTML = function getHTML() {
	    if (this.data.getData) {
	      if (!this.types.length) {
	        return this.data.getData('Text');
	      } else if (this.types.indexOf('text/html') != -1) {
	        return this.data.getData('text/html');
	      }
	    }
	  };

	  /**
	   * Is this a link data transfer?
	   *
	   * @return {boolean}
	   */


	  DataTransfer.prototype.isLink = function isLink() {
	    return this.types.some(function (type) {
	      return type.indexOf('Url') != -1 || type.indexOf('text/uri-list') != -1 || type.indexOf('text/x-moz-url');
	    });
	  };

	  /**
	   * Get a link url.
	   *
	   * @return {?string}
	   */


	  DataTransfer.prototype.getLink = function getLink() {
	    if (this.data.getData) {
	      if (this.types.indexOf('text/x-moz-url') != -1) {
	        var url = this.data.getData('text/x-moz-url').split('\n');
	        return url[0];
	      }
	      return this.types.indexOf('text/uri-list') != -1 ? this.data.getData('text/uri-list') : this.data.getData('url');
	    }

	    return null;
	  };

	  /**
	   * Is this an image data transfer?
	   *
	   * @return {boolean}
	   */


	  DataTransfer.prototype.isImage = function isImage() {
	    var isImage = this.types.some(function (type) {
	      // Firefox will have a type of application/x-moz-file for images during
	      // dragging
	      return type.indexOf('application/x-moz-file') != -1;
	    });

	    if (isImage) {
	      return true;
	    }

	    var items = this.getFiles();
	    for (var i = 0; i < items.length; i++) {
	      var type = items[i].type;
	      if (!PhotosMimeType.isImage(type)) {
	        return false;
	      }
	    }

	    return true;
	  };

	  DataTransfer.prototype.getCount = function getCount() {
	    if (this.data.hasOwnProperty('items')) {
	      return this.data.items.length;
	    } else if (this.data.hasOwnProperty('mozItemCount')) {
	      return this.data.mozItemCount;
	    } else if (this.data.files) {
	      return this.data.files.length;
	    }
	    return null;
	  };

	  /**
	   * Get files.
	   *
	   * @return {array}
	   */


	  DataTransfer.prototype.getFiles = function getFiles() {
	    if (this.data.items) {
	      // createArrayFromMixed doesn't properly handle DataTransferItemLists.
	      return Array.prototype.slice.call(this.data.items).map(getFileFromDataTransfer).filter(emptyFunction.thatReturnsArgument);
	    } else if (this.data.files) {
	      return Array.prototype.slice.call(this.data.files);
	    } else {
	      return [];
	    }
	  };

	  /**
	   * Are there any files to fetch?
	   *
	   * @return {boolean}
	   */


	  DataTransfer.prototype.hasFiles = function hasFiles() {
	    return this.getFiles().length > 0;
	  };

	  return DataTransfer;
	}();

	module.exports = DataTransfer;

/***/ },
/* 267 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	var PhotosMimeType = {
	  isImage: function isImage(mimeString) {
	    return getParts(mimeString)[0] === 'image';
	  },
	  isJpeg: function isJpeg(mimeString) {
	    var parts = getParts(mimeString);
	    return PhotosMimeType.isImage(mimeString) && (
	    // see http://fburl.com/10972194
	    parts[1] === 'jpeg' || parts[1] === 'pjpeg');
	  }
	};

	function getParts(mimeString) {
	  return mimeString.split('/');
	}

	module.exports = PhotosMimeType;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(204);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findAncestorOffsetKey
	 * @typechecks
	 * 
	 */

	'use strict';

	var getSelectionOffsetKeyForNode = __webpack_require__(270);

	/**
	 * Get the key from the node's nearest offset-aware ancestor.
	 */
	function findAncestorOffsetKey(node) {
	  var searchNode = node;
	  while (searchNode && searchNode !== document.documentElement) {
	    var key = getSelectionOffsetKeyForNode(searchNode);
	    if (key != null) {
	      return key;
	    }
	    searchNode = searchNode.parentNode;
	  }
	  return null;
	}

	module.exports = findAncestorOffsetKey;

/***/ },
/* 270 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getSelectionOffsetKeyForNode
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	 * Get offset key from a node or it's child nodes. Return the first offset key
	 * found on the DOM tree of given node.
	 */

	function getSelectionOffsetKeyForNode(node) {
	  if (node instanceof Element) {
	    var offsetKey = node.getAttribute('data-offset-key');
	    if (offsetKey) {
	      return offsetKey;
	    }
	    for (var ii = 0; ii < node.childNodes.length; ii++) {
	      var childOffsetKey = getSelectionOffsetKeyForNode(node.childNodes[ii]);
	      if (childOffsetKey) {
	        return childOffsetKey;
	      }
	    }
	  }
	  return null;
	}

	module.exports = getSelectionOffsetKeyForNode;

/***/ },
/* 271 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentFromFiles
	 * 
	 */

	'use strict';

	var TEXT_CLIPPING_REGEX = /\.textClipping$/;

	var TEXT_TYPES = {
	  'text/plain': true,
	  'text/html': true,
	  'text/rtf': true
	};

	// Somewhat arbitrary upper bound on text size. Let's not lock up the browser.
	var TEXT_SIZE_UPPER_BOUND = 5000;

	/**
	 * Extract the text content from a file list.
	 */
	function getTextContentFromFiles(files, callback) {
	  var readCount = 0;
	  var results = [];
	  files.forEach(function ( /*blob*/file) {
	    readFile(file, function ( /*string*/text) {
	      readCount++;
	      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));
	      if (readCount == files.length) {
	        callback(results.join('\r'));
	      }
	    });
	  });
	}

	/**
	 * todo isaac: Do work to turn html/rtf into a content fragment.
	 */
	function readFile(file, callback) {
	  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {
	    callback('');
	    return;
	  }

	  if (file.type === '') {
	    var contents = '';
	    // Special-case text clippings, which have an empty type but include
	    // `.textClipping` in the file name. `readAsText` results in an empty
	    // string for text clippings, so we force the file name to serve
	    // as the text value for the file.
	    if (TEXT_CLIPPING_REGEX.test(file.name)) {
	      contents = file.name.replace(TEXT_CLIPPING_REGEX, '');
	    }
	    callback(contents);
	    return;
	  }

	  var reader = new FileReader();
	  reader.onload = function () {
	    callback(reader.result);
	  };
	  reader.onerror = function () {
	    callback('');
	  };
	  reader.readAsText(file);
	}

	module.exports = getTextContentFromFiles;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUpdatedSelectionState
	 * 
	 */

	'use strict';

	var DraftOffsetKey = __webpack_require__(252);

	var nullthrows = __webpack_require__(226);

	function getUpdatedSelectionState(editorState, anchorKey, anchorOffset, focusKey, focusOffset) {
	  var selection = nullthrows(editorState.getSelection());
	  if (process.env.NODE_ENV !== 'production') {
	    if (!anchorKey || !focusKey) {
	      /*eslint-disable no-console */
	      console.warn('Invalid selection state.', arguments, editorState.toJS());
	      /*eslint-enable no-console */
	      return selection;
	    }
	  }

	  var anchorPath = DraftOffsetKey.decode(anchorKey);
	  var anchorBlockKey = anchorPath.blockKey;
	  var anchorLeaf = editorState.getBlockTree(anchorBlockKey).getIn([anchorPath.decoratorKey, 'leaves', anchorPath.leafKey]);

	  var focusPath = DraftOffsetKey.decode(focusKey);
	  var focusBlockKey = focusPath.blockKey;
	  var focusLeaf = editorState.getBlockTree(focusBlockKey).getIn([focusPath.decoratorKey, 'leaves', focusPath.leafKey]);

	  var anchorLeafStart = anchorLeaf.get('start');
	  var focusLeafStart = focusLeaf.get('start');

	  var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;
	  var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;

	  var areEqual = selection.getAnchorKey() === anchorBlockKey && selection.getAnchorOffset() === anchorBlockOffset && selection.getFocusKey() === focusBlockKey && selection.getFocusOffset() === focusBlockOffset;

	  if (areEqual) {
	    return selection;
	  }

	  var isBackward = false;
	  if (anchorBlockKey === focusBlockKey) {
	    var anchorLeafEnd = anchorLeaf.get('end');
	    var focusLeafEnd = focusLeaf.get('end');
	    if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {
	      isBackward = focusOffset < anchorOffset;
	    } else {
	      isBackward = focusLeafStart < anchorLeafStart;
	    }
	  } else {
	    var startKey = editorState.getCurrentContent().getBlockMap().keySeq().skipUntil(function (v) {
	      return v === anchorBlockKey || v === focusBlockKey;
	    }).first();
	    isBackward = startKey === focusBlockKey;
	  }

	  return selection.merge({
	    anchorKey: anchorBlockKey,
	    anchorOffset: anchorBlockOffset,
	    focusKey: focusBlockKey,
	    focusOffset: focusBlockOffset,
	    isBackward: isBackward
	  });
	}

	module.exports = getUpdatedSelectionState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 273 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventHandled
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	 * Utility method for determining whether or not the value returned
	 * from a handler indicates that it was handled.
	 */
	function isEventHandled(value) {
	  return value === 'handled' || value === true;
	}

	module.exports = isEventHandled;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorEditHandler
	 * 
	 */

	'use strict';

	var onBeforeInput = __webpack_require__(275);
	var onBlur = __webpack_require__(278);
	var onCompositionStart = __webpack_require__(279);
	var onCopy = __webpack_require__(280);
	var onCut = __webpack_require__(282);
	var onDragOver = __webpack_require__(283);
	var onDragStart = __webpack_require__(284);
	var onFocus = __webpack_require__(285);
	var onInput = __webpack_require__(286);
	var onKeyDown = __webpack_require__(287);
	var onPaste = __webpack_require__(309);
	var onSelect = __webpack_require__(315);

	var DraftEditorEditHandler = {
	  onBeforeInput: onBeforeInput,
	  onBlur: onBlur,
	  onCompositionStart: onCompositionStart,
	  onCopy: onCopy,
	  onCut: onCut,
	  onDragOver: onDragOver,
	  onDragStart: onDragStart,
	  onFocus: onFocus,
	  onInput: onInput,
	  onKeyDown: onKeyDown,
	  onPaste: onPaste,
	  onSelect: onSelect
	};

	module.exports = DraftEditorEditHandler;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnBeforeInput
	 * 
	 */

	'use strict';

	var BlockTree = __webpack_require__(215);
	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);
	var UserAgent = __webpack_require__(240);

	var getEntityKeyForSelection = __webpack_require__(234);
	var isSelectionAtLeafStart = __webpack_require__(235);
	var nullthrows = __webpack_require__(226);
	var setImmediate = __webpack_require__(276);

	var isEventHandled = __webpack_require__(273);

	// When nothing is focused, Firefox regards two characters, `'` and `/`, as
	// commands that should open and focus the "quickfind" search bar. This should
	// *never* happen while a contenteditable is focused, but as of v28, it
	// sometimes does, even when the keypress event target is the contenteditable.
	// This breaks the input. Special case these characters to ensure that when
	// they are typed, we prevent default on the event to make sure not to
	// trigger quickfind.
	var FF_QUICKFIND_CHAR = '\'';
	var FF_QUICKFIND_LINK_CHAR = '\/';
	var isFirefox = UserAgent.isBrowser('Firefox');

	function mustPreventDefaultForCharacter(character) {
	  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);
	}

	/**
	 * Replace the current selection with the specified text string, with the
	 * inline style and entity key applied to the newly inserted text.
	 */
	function replaceText(editorState, text, inlineStyle, entityKey) {
	  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);
	  return EditorState.push(editorState, contentState, 'insert-characters');
	}

	/**
	 * When `onBeforeInput` executes, the browser is attempting to insert a
	 * character into the editor. Apply this character data to the document,
	 * allowing native insertion if possible.
	 *
	 * Native insertion is encouraged in order to limit re-rendering and to
	 * preserve spellcheck highlighting, which disappears or flashes if re-render
	 * occurs on the relevant text nodes.
	 */
	function editOnBeforeInput(editor, e) {
	  if (editor._pendingStateFromBeforeInput !== undefined) {
	    editor.update(editor._pendingStateFromBeforeInput);
	    editor._pendingStateFromBeforeInput = undefined;
	  }

	  var chars = e.data;

	  // In some cases (ex: IE ideographic space insertion) no character data
	  // is provided. There's nothing to do when this happens.
	  if (!chars) {
	    return;
	  }

	  // Allow the top-level component to handle the insertion manually. This is
	  // useful when triggering interesting behaviors for a character insertion,
	  // Simple examples: replacing a raw text ':)' with a smile emoji or image
	  // decorator, or setting a block to be a list item after typing '- ' at the
	  // start of the block.
	  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars))) {
	    e.preventDefault();
	    return;
	  }

	  // If selection is collapsed, conditionally allow native behavior. This
	  // reduces re-renders and preserves spellcheck highlighting. If the selection
	  // is not collapsed, we will re-render.
	  var editorState = editor._latestEditorState;
	  var selection = editorState.getSelection();

	  if (!selection.isCollapsed()) {
	    e.preventDefault();
	    editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));
	    return;
	  }

	  var mayAllowNative = !isSelectionAtLeafStart(editorState);
	  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));

	  if (!mayAllowNative) {
	    e.preventDefault();
	    editor.update(newEditorState);
	    return;
	  }

	  var anchorKey = selection.getAnchorKey();
	  var anchorTree = editorState.getBlockTree(anchorKey);

	  // Check the old and new "fingerprints" of the current block to determine
	  // whether this insertion requires any addition or removal of text nodes,
	  // in which case we would prevent the native character insertion.
	  var originalFingerprint = BlockTree.getFingerprint(anchorTree);
	  var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));

	  if (mustPreventDefaultForCharacter(chars) || originalFingerprint !== newFingerprint || nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey)) {
	    e.preventDefault();
	    editor.update(newEditorState);
	  } else {
	    newEditorState = EditorState.set(newEditorState, {
	      nativelyRenderedContent: newEditorState.getCurrentContent()
	    });
	    // The native event is allowed to occur. To allow user onChange handlers to
	    // change the inserted text, we wait until the text is actually inserted
	    // before we actually update our state. That way when we rerender, the text
	    // we see in the DOM will already have been inserted properly.
	    editor._pendingStateFromBeforeInput = newEditorState;
	    setImmediate(function () {
	      if (editor._pendingStateFromBeforeInput !== undefined) {
	        editor.update(editor._pendingStateFromBeforeInput);
	        editor._pendingStateFromBeforeInput = undefined;
	      }
	    });
	  }
	}

	module.exports = editOnBeforeInput;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	// setimmediate adds setImmediate to the global. We want to make sure we export
	// the actual function.

	__webpack_require__(277);
	module.exports = global.setImmediate;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnBlur
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);
	var UserAgent = __webpack_require__(240);

	var getActiveElement = __webpack_require__(251);

	var isWebKit = UserAgent.isEngine('WebKit');

	function editOnBlur(editor, e) {
	  // Webkit has a bug in which blurring a contenteditable by clicking on
	  // other active elements will trigger the `blur` event but will not remove
	  // the DOM selection from the contenteditable. We therefore force the
	  // issue to be certain, checking whether the active element is `body`
	  // to force it when blurring occurs within the window (as opposed to
	  // clicking to another tab or window).
	  if (isWebKit && getActiveElement() === document.body) {
	    global.getSelection().removeAllRanges();
	  }

	  var editorState = editor._latestEditorState;
	  var currentSelection = editorState.getSelection();
	  if (!currentSelection.getHasFocus()) {
	    return;
	  }

	  var selection = currentSelection.set('hasFocus', false);
	  editor.props.onBlur && editor.props.onBlur(e);
	  editor.update(EditorState.acceptSelection(editorState, selection));
	}

	module.exports = editOnBlur;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnCompositionStart
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);

	/**
	 * The user has begun using an IME input system. Switching to `composite` mode
	 * allows handling composition input and disables other edit behavior.
	 */
	function editOnCompositionStart(editor, e) {
	  editor.setMode('composite');
	  editor.update(EditorState.set(editor._latestEditorState, { inCompositionMode: true }));
	  // Allow composition handler to interpret the compositionstart event
	  editor._onCompositionStart(e);
	}

	module.exports = editOnCompositionStart;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnCopy
	 * 
	 */

	'use strict';

	var getFragmentFromSelection = __webpack_require__(281);

	/**
	 * If we have a selection, create a ContentState fragment and store
	 * it in our internal clipboard. Subsequent paste events will use this
	 * fragment if no external clipboard data is supplied.
	 */
	function editOnCopy(editor, e) {
	  var editorState = editor._latestEditorState;
	  var selection = editorState.getSelection();

	  // No selection, so there's nothing to copy.
	  if (selection.isCollapsed()) {
	    e.preventDefault();
	    return;
	  }

	  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));
	}

	module.exports = editOnCopy;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getFragmentFromSelection
	 * 
	 */

	'use strict';

	var getContentStateFragment = __webpack_require__(205);

	function getFragmentFromSelection(editorState) {
	  var selectionState = editorState.getSelection();

	  if (selectionState.isCollapsed()) {
	    return null;
	  }

	  return getContentStateFragment(editorState.getCurrentContent(), selectionState);
	}

	module.exports = getFragmentFromSelection;

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnCut
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);
	var Style = __webpack_require__(254);

	var getFragmentFromSelection = __webpack_require__(281);
	var getScrollPosition = __webpack_require__(260);

	/**
	 * On `cut` events, native behavior is allowed to occur so that the system
	 * clipboard is set properly. This means that we need to take steps to recover
	 * the editor DOM state after the `cut` has occurred in order to maintain
	 * control of the component.
	 *
	 * In addition, we can keep a copy of the removed fragment, including all
	 * styles and entities, for use as an internal paste.
	 */
	function editOnCut(editor, e) {
	  var editorState = editor._latestEditorState;
	  var selection = editorState.getSelection();

	  // No selection, so there's nothing to cut.
	  if (selection.isCollapsed()) {
	    e.preventDefault();
	    return;
	  }

	  // Track the current scroll position so that it can be forced back in place
	  // after the editor regains control of the DOM.
	  var scrollParent = Style.getScrollParent(e.target);

	  var _getScrollPosition = getScrollPosition(scrollParent);

	  var x = _getScrollPosition.x;
	  var y = _getScrollPosition.y;


	  var fragment = getFragmentFromSelection(editorState);
	  editor.setClipboard(fragment);

	  // Set `cut` mode to disable all event handling temporarily.
	  editor.setMode('cut');

	  // Let native `cut` behavior occur, then recover control.
	  setTimeout(function () {
	    editor.restoreEditorDOM({ x: x, y: y });
	    editor.exitCurrentMode();
	    editor.update(removeFragment(editorState));
	  }, 0);
	}

	function removeFragment(editorState) {
	  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');
	  return EditorState.push(editorState, newContent, 'remove-range');
	}

	module.exports = editOnCut;

/***/ },
/* 283 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnDragOver
	 * 
	 */

	'use strict';

	/**
	 * Drag behavior has begun from outside the editor element.
	 */
	function editOnDragOver(editor, e) {
	  editor._internalDrag = false;
	  editor.setMode('drag');
	  e.preventDefault();
	}

	module.exports = editOnDragOver;

/***/ },
/* 284 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnDragStart
	 * 
	 */

	'use strict';

	/**
	 * A `dragstart` event has begun within the text editor component.
	 */
	function editOnDragStart(editor) {
	  editor._internalDrag = true;
	  editor.setMode('drag');
	}

	module.exports = editOnDragStart;

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnFocus
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);

	function editOnFocus(editor, e) {
	  var editorState = editor._latestEditorState;
	  var currentSelection = editorState.getSelection();
	  if (currentSelection.getHasFocus()) {
	    return;
	  }

	  var selection = currentSelection.set('hasFocus', true);
	  editor.props.onFocus && editor.props.onFocus(e);

	  // When the tab containing this text editor is hidden and the user does a
	  // find-in-page in a _different_ tab, Chrome on Mac likes to forget what the
	  // selection was right after sending this focus event and (if you let it)
	  // moves the cursor back to the beginning of the editor, so we force the
	  // selection here instead of simply accepting it in order to preserve the
	  // old cursor position. See https://crbug.com/540004.
	  editor.update(EditorState.forceSelection(editorState, selection));
	}

	module.exports = editOnFocus;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnInput
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var DraftOffsetKey = __webpack_require__(252);
	var EditorState = __webpack_require__(214);
	var UserAgent = __webpack_require__(240);

	var findAncestorOffsetKey = __webpack_require__(269);
	var nullthrows = __webpack_require__(226);

	var isGecko = UserAgent.isEngine('Gecko');

	var DOUBLE_NEWLINE = '\n\n';

	/**
	 * This function is intended to handle spellcheck and autocorrect changes,
	 * which occur in the DOM natively without any opportunity to observe or
	 * interpret the changes before they occur.
	 *
	 * The `input` event fires in contentEditable elements reliably for non-IE
	 * browsers, immediately after changes occur to the editor DOM. Since our other
	 * handlers override or otherwise handle cover other varieties of text input,
	 * the DOM state should match the model in all controlled input cases. Thus,
	 * when an `input` change leads to a DOM/model mismatch, the change should be
	 * due to a spellcheck change, and we can incorporate it into our model.
	 */
	function editOnInput(editor) {
	  if (editor._pendingStateFromBeforeInput !== undefined) {
	    editor.update(editor._pendingStateFromBeforeInput);
	    editor._pendingStateFromBeforeInput = undefined;
	  }

	  var domSelection = global.getSelection();

	  var anchorNode = domSelection.anchorNode;
	  var isCollapsed = domSelection.isCollapsed;

	  if (anchorNode.nodeType !== Node.TEXT_NODE) {
	    return;
	  }

	  var domText = anchorNode.textContent;
	  var editorState = editor._latestEditorState;
	  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));

	  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey);

	  var blockKey = _DraftOffsetKey$decod.blockKey;
	  var decoratorKey = _DraftOffsetKey$decod.decoratorKey;
	  var leafKey = _DraftOffsetKey$decod.leafKey;

	  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]);

	  var start = _editorState$getBlock.start;
	  var end = _editorState$getBlock.end;


	  var content = editorState.getCurrentContent();
	  var block = content.getBlockForKey(blockKey);
	  var modelText = block.getText().slice(start, end);

	  // Special-case soft newlines here. If the DOM text ends in a soft newline,
	  // we will have manually inserted an extra soft newline in DraftEditorLeaf.
	  // We want to remove this extra newline for the purpose of our comparison
	  // of DOM and model text.
	  if (domText.endsWith(DOUBLE_NEWLINE)) {
	    domText = domText.slice(0, -1);
	  }

	  // No change -- the DOM is up to date. Nothing to do here.
	  if (domText === modelText) {
	    return;
	  }

	  var selection = editorState.getSelection();

	  // We'll replace the entire leaf with the text content of the target.
	  var targetRange = selection.merge({
	    anchorOffset: start,
	    focusOffset: end,
	    isBackward: false
	  });

	  var entityKey = block.getEntityAt(start);
	  var entity = entityKey && content.getEntity(entityKey);
	  var entityType = entity && entity.getMutability();
	  var preserveEntity = entityType === 'MUTABLE';

	  // Immutable or segmented entities cannot properly be handled by the
	  // default browser undo, so we have to use a different change type to
	  // force using our internal undo method instead of falling through to the
	  // native browser undo.
	  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';

	  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);

	  var anchorOffset, focusOffset, startOffset, endOffset;

	  if (isGecko) {
	    // Firefox selection does not change while the context menu is open, so
	    // we preserve the anchor and focus values of the DOM selection.
	    anchorOffset = domSelection.anchorOffset;
	    focusOffset = domSelection.focusOffset;
	    startOffset = start + Math.min(anchorOffset, focusOffset);
	    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);
	    anchorOffset = startOffset;
	    focusOffset = endOffset;
	  } else {
	    // Browsers other than Firefox may adjust DOM selection while the context
	    // menu is open, and Safari autocorrect is prone to providing an inaccurate
	    // DOM selection. Don't trust it. Instead, use our existing SelectionState
	    // and adjust it based on the number of characters changed during the
	    // mutation.
	    var charDelta = domText.length - modelText.length;
	    startOffset = selection.getStartOffset();
	    endOffset = selection.getEndOffset();

	    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;
	    focusOffset = endOffset + charDelta;
	  }

	  // Segmented entities are completely or partially removed when their
	  // text content changes. For this case we do not want any text to be selected
	  // after the change, so we are not merging the selection.
	  var contentWithAdjustedDOMSelection = newContent.merge({
	    selectionBefore: content.getSelectionAfter(),
	    selectionAfter: selection.merge({ anchorOffset: anchorOffset, focusOffset: focusOffset })
	  });

	  editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));
	}

	module.exports = editOnInput;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnKeyDown
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);
	var KeyBindingUtil = __webpack_require__(288);
	var Keys = __webpack_require__(233);
	var SecondaryClipboard = __webpack_require__(289);
	var UserAgent = __webpack_require__(240);

	var keyCommandBackspaceToStartOfLine = __webpack_require__(290);
	var keyCommandBackspaceWord = __webpack_require__(297);
	var keyCommandDeleteWord = __webpack_require__(300);
	var keyCommandInsertNewline = __webpack_require__(302);
	var keyCommandPlainBackspace = __webpack_require__(303);
	var keyCommandPlainDelete = __webpack_require__(304);
	var keyCommandMoveSelectionToEndOfBlock = __webpack_require__(305);
	var keyCommandMoveSelectionToStartOfBlock = __webpack_require__(306);
	var keyCommandTransposeCharacters = __webpack_require__(307);
	var keyCommandUndo = __webpack_require__(308);

	var isEventHandled = __webpack_require__(273);

	var isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;

	var isChrome = UserAgent.isBrowser('Chrome');

	/**
	 * Map a `DraftEditorCommand` command value to a corresponding function.
	 */
	function onKeyCommand(command, editorState) {
	  switch (command) {
	    case 'redo':
	      return EditorState.redo(editorState);
	    case 'delete':
	      return keyCommandPlainDelete(editorState);
	    case 'delete-word':
	      return keyCommandDeleteWord(editorState);
	    case 'backspace':
	      return keyCommandPlainBackspace(editorState);
	    case 'backspace-word':
	      return keyCommandBackspaceWord(editorState);
	    case 'backspace-to-start-of-line':
	      return keyCommandBackspaceToStartOfLine(editorState);
	    case 'split-block':
	      return keyCommandInsertNewline(editorState);
	    case 'transpose-characters':
	      return keyCommandTransposeCharacters(editorState);
	    case 'move-selection-to-start-of-block':
	      return keyCommandMoveSelectionToStartOfBlock(editorState);
	    case 'move-selection-to-end-of-block':
	      return keyCommandMoveSelectionToEndOfBlock(editorState);
	    case 'secondary-cut':
	      return SecondaryClipboard.cut(editorState);
	    case 'secondary-paste':
	      return SecondaryClipboard.paste(editorState);
	    default:
	      return editorState;
	  }
	}

	/**
	 * Intercept keydown behavior to handle keys and commands manually, if desired.
	 *
	 * Keydown combinations may be mapped to `DraftCommand` values, which may
	 * correspond to command functions that modify the editor or its contents.
	 *
	 * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level
	 * component may provide a custom mapping via the `keyBindingFn` prop.
	 */
	function editOnKeyDown(editor, e) {
	  var keyCode = e.which;
	  var editorState = editor._latestEditorState;

	  switch (keyCode) {
	    case Keys.RETURN:
	      e.preventDefault();
	      // The top-level component may manually handle newline insertion. If
	      // no special handling is performed, fall through to command handling.
	      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e))) {
	        return;
	      }
	      break;
	    case Keys.ESC:
	      e.preventDefault();
	      editor.props.onEscape && editor.props.onEscape(e);
	      return;
	    case Keys.TAB:
	      editor.props.onTab && editor.props.onTab(e);
	      return;
	    case Keys.UP:
	      editor.props.onUpArrow && editor.props.onUpArrow(e);
	      return;
	    case Keys.DOWN:
	      editor.props.onDownArrow && editor.props.onDownArrow(e);
	      return;
	    case Keys.SPACE:
	      // Handling for OSX where option + space scrolls.
	      if (isChrome && isOptionKeyCommand(e)) {
	        e.preventDefault();
	        // Insert a nbsp into the editor.
	        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\xA0');
	        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));
	        return;
	      }
	  }

	  var command = editor.props.keyBindingFn(e);

	  // If no command is specified, allow keydown event to continue.
	  if (!command) {
	    return;
	  }

	  if (command === 'undo') {
	    // Since undo requires some special updating behavior to keep the editor
	    // in sync, handle it separately.
	    keyCommandUndo(e, editorState, editor.update);
	    return;
	  }

	  // At this point, we know that we're handling a command of some kind, so
	  // we don't want to insert a character following the keydown.
	  e.preventDefault();

	  // Allow components higher up the tree to handle the command first.
	  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command))) {
	    return;
	  }

	  var newState = onKeyCommand(command, editorState);
	  if (newState !== editorState) {
	    editor.update(newState);
	  }
	}

	module.exports = editOnKeyDown;

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule KeyBindingUtil
	 * @typechecks
	 * 
	 */

	'use strict';

	var UserAgent = __webpack_require__(240);

	var isOSX = UserAgent.isPlatform('Mac OS X');

	var KeyBindingUtil = {
	  /**
	   * Check whether the ctrlKey modifier is *not* being used in conjunction with
	   * the altKey modifier. If they are combined, the result is an `altGraph`
	   * key modifier, which should not be handled by this set of key bindings.
	   */
	  isCtrlKeyCommand: function isCtrlKeyCommand(e) {
	    return !!e.ctrlKey && !e.altKey;
	  },

	  isOptionKeyCommand: function isOptionKeyCommand(e) {
	    return isOSX && e.altKey;
	  },

	  hasCommandModifier: function hasCommandModifier(e) {
	    return isOSX ? !!e.metaKey && !e.altKey : KeyBindingUtil.isCtrlKeyCommand(e);
	  }
	};

	module.exports = KeyBindingUtil;

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SecondaryClipboard
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);

	var getContentStateFragment = __webpack_require__(205);
	var nullthrows = __webpack_require__(226);

	var clipboard = null;

	/**
	 * Some systems offer a "secondary" clipboard to allow quick internal cut
	 * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).
	 */
	var SecondaryClipboard = {
	  cut: function cut(editorState) {
	    var content = editorState.getCurrentContent();
	    var selection = editorState.getSelection();
	    var targetRange = null;

	    if (selection.isCollapsed()) {
	      var anchorKey = selection.getAnchorKey();
	      var blockEnd = content.getBlockForKey(anchorKey).getLength();

	      if (blockEnd === selection.getAnchorOffset()) {
	        return editorState;
	      }

	      targetRange = selection.set('focusOffset', blockEnd);
	    } else {
	      targetRange = selection;
	    }

	    targetRange = nullthrows(targetRange);
	    clipboard = getContentStateFragment(content, targetRange);

	    var afterRemoval = DraftModifier.removeRange(content, targetRange, 'forward');

	    if (afterRemoval === content) {
	      return editorState;
	    }

	    return EditorState.push(editorState, afterRemoval, 'remove-range');
	  },

	  paste: function paste(editorState) {
	    if (!clipboard) {
	      return editorState;
	    }

	    var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), clipboard);

	    return EditorState.push(editorState, newContent, 'insert-fragment');
	  }
	};

	module.exports = SecondaryClipboard;

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandBackspaceToStartOfLine
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);

	var expandRangeToStartOfLine = __webpack_require__(291);
	var getDraftEditorSelectionWithNodes = __webpack_require__(294);
	var moveSelectionBackward = __webpack_require__(295);
	var removeTextWithStrategy = __webpack_require__(296);

	function keyCommandBackspaceToStartOfLine(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {
	      return moveSelectionBackward(strategyState, 1);
	    }

	    var domSelection = global.getSelection();
	    var range = domSelection.getRangeAt(0);
	    range = expandRangeToStartOfLine(range);

	    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;
	  }, 'backward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  return EditorState.push(editorState, afterRemoval, 'remove-range');
	}

	module.exports = keyCommandBackspaceToStartOfLine;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule expandRangeToStartOfLine
	 * @typechecks
	 * 
	 */

	var UnicodeUtils = __webpack_require__(292);

	var getRangeClientRects = __webpack_require__(293);
	var invariant = __webpack_require__(204);

	/**
	 * Return the computed line height, in pixels, for the provided element.
	 */
	function getLineHeightPx(element) {
	  var computed = getComputedStyle(element);
	  var div = document.createElement('div');
	  div.style.fontFamily = computed.fontFamily;
	  div.style.fontSize = computed.fontSize;
	  div.style.fontStyle = computed.fontStyle;
	  div.style.fontWeight = computed.fontWeight;
	  div.style.lineHeight = computed.lineHeight;
	  div.style.position = 'absolute';
	  div.textContent = 'M';

	  // forced layout here
	  document.body.appendChild(div);
	  var rect = div.getBoundingClientRect();
	  document.body.removeChild(div);

	  return rect.height;
	}

	/**
	 * Return whether every ClientRect in the provided list lies on the same line.
	 *
	 * We assume that the rects on the same line all contain the baseline, so the
	 * lowest top line needs to be above the highest bottom line (i.e., if you were
	 * to project the rects onto the y-axis, their intersection would be nonempty).
	 *
	 * In addition, we require that no two boxes are lineHeight (or more) apart at
	 * either top or bottom, which helps protect against false positives for fonts
	 * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino
	 * produces rects of height 58px!).
	 */
	function areRectsOnOneLine(rects, lineHeight) {
	  var minTop = Infinity;
	  var minBottom = Infinity;
	  var maxTop = -Infinity;
	  var maxBottom = -Infinity;

	  for (var ii = 0; ii < rects.length; ii++) {
	    var rect = rects[ii];
	    if (rect.width === 0 || rect.width === 1) {
	      // When a range starts or ends a soft wrap, many browsers (Chrome, IE,
	      // Safari) include an empty rect on the previous or next line. When the
	      // text lies in a container whose position is not integral (e.g., from
	      // margin: auto), Safari makes these empty rects have width 1 (instead of
	      // 0). Having one-pixel-wide characters seems unlikely (and most browsers
	      // report widths in subpixel precision anyway) so it's relatively safe to
	      // skip over them.
	      continue;
	    }
	    minTop = Math.min(minTop, rect.top);
	    minBottom = Math.min(minBottom, rect.bottom);
	    maxTop = Math.max(maxTop, rect.top);
	    maxBottom = Math.max(maxBottom, rect.bottom);
	  }

	  return maxTop <= minBottom && maxTop - minTop < lineHeight && maxBottom - minBottom < lineHeight;
	}

	/**
	 * Return the length of a node, as used by Range offsets.
	 */
	function getNodeLength(node) {
	  // http://www.w3.org/TR/dom/#concept-node-length
	  switch (node.nodeType) {
	    case Node.DOCUMENT_TYPE_NODE:
	      return 0;
	    case Node.TEXT_NODE:
	    case Node.PROCESSING_INSTRUCTION_NODE:
	    case Node.COMMENT_NODE:
	      return node.length;
	    default:
	      return node.childNodes.length;
	  }
	}

	/**
	 * Given a collapsed range, move the start position backwards as far as
	 * possible while the range still spans only a single line.
	 */
	function expandRangeToStartOfLine(range) {
	  !range.collapsed ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expandRangeToStartOfLine: Provided range is not collapsed.') : invariant(false) : void 0;
	  range = range.cloneRange();

	  var containingElement = range.startContainer;
	  if (containingElement.nodeType !== 1) {
	    containingElement = containingElement.parentNode;
	  }
	  var lineHeight = getLineHeightPx(containingElement);

	  // Imagine our text looks like:
	  //   <div><span>once upon a time, there was a <em>boy
	  //   who lived</em> </span><q><strong>under^ the
	  //   stairs</strong> in a small closet.</q></div>
	  // where the caret represents the cursor. First, we crawl up the tree until
	  // the range spans multiple lines (setting the start point to before
	  // "<strong>", then before "<div>"), then at each level we do a search to
	  // find the latest point which is still on a previous line. We'll find that
	  // the break point is inside the span, then inside the <em>, then in its text
	  // node child, the actual break point before "who".

	  var bestContainer = range.endContainer;
	  var bestOffset = range.endOffset;
	  range.setStart(range.startContainer, 0);

	  while (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {
	    bestContainer = range.startContainer;
	    bestOffset = range.startOffset;
	    !bestContainer.parentNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found unexpected detached subtree when traversing.') : invariant(false) : void 0;
	    range.setStartBefore(bestContainer);
	    if (bestContainer.nodeType === 1 && getComputedStyle(bestContainer).display !== 'inline') {
	      // The start of the line is never in a different block-level container.
	      break;
	    }
	  }

	  // In the above example, range now spans from "<div>" to "under",
	  // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].
	  // Picking out which child to recurse into here is a special case since we
	  // don't want to check past <q> -- once we find that the final range starts
	  // in <span>, we can look at all of its children (and all of their children)
	  // to find the break point.

	  // At all times, (bestContainer, bestOffset) is the latest single-line start
	  // point that we know of.
	  var currentContainer = bestContainer;
	  var maxIndexToConsider = bestOffset - 1;

	  do {
	    var nodeValue = currentContainer.nodeValue;

	    for (var ii = maxIndexToConsider; ii >= 0; ii--) {
	      if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)) {
	        // We're in the middle of a surrogate pair -- skip over so we never
	        // return a range with an endpoint in the middle of a code point.
	        continue;
	      }

	      range.setStart(currentContainer, ii);
	      if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {
	        bestContainer = currentContainer;
	        bestOffset = ii;
	      } else {
	        break;
	      }
	    }

	    if (ii === -1 || currentContainer.childNodes.length === 0) {
	      // If ii === -1, then (bestContainer, bestOffset), which is equal to
	      // (currentContainer, 0), was a single-line start point but a start
	      // point before currentContainer wasn't, so the line break seems to
	      // have occurred immediately after currentContainer's start tag
	      //
	      // If currentContainer.childNodes.length === 0, we're already at a
	      // terminal node (e.g., text node) and should return our current best.
	      break;
	    }

	    currentContainer = currentContainer.childNodes[ii];
	    maxIndexToConsider = getNodeLength(currentContainer);
	  } while (true);

	  range.setStart(bestContainer, bestOffset);
	  return range;
	}

	module.exports = expandRangeToStartOfLine;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * Unicode-enabled replacesments for basic String functions.
	 *
	 * All the functions in this module assume that the input string is a valid
	 * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior
	 * will be undefined.
	 *
	 * WARNING: Since this module is typechecks-enforced, you may find new bugs
	 * when replacing normal String functions with ones provided here.
	 */

	'use strict';

	var invariant = __webpack_require__(204);

	// These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a
	// surrogate code unit.
	var SURROGATE_HIGH_START = 0xD800;
	var SURROGATE_HIGH_END = 0xDBFF;
	var SURROGATE_LOW_START = 0xDC00;
	var SURROGATE_LOW_END = 0xDFFF;
	var SURROGATE_UNITS_REGEX = /[\uD800-\uDFFF]/;

	/**
	 * @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]
	 * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range
	 */
	function isCodeUnitInSurrogateRange(codeUnit) {
	  return SURROGATE_HIGH_START <= codeUnit && codeUnit <= SURROGATE_LOW_END;
	}

	/**
	 * Returns whether the two characters starting at `index` form a surrogate pair.
	 * For example, given the string s = "\uD83D\uDE0A", (s, 0) returns true and
	 * (s, 1) returns false.
	 *
	 * @param {string} str
	 * @param {number} index
	 * @return {boolean}
	 */
	function isSurrogatePair(str, index) {
	  !(0 <= index && index < str.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isSurrogatePair: Invalid index %s for string length %s.', index, str.length) : invariant(false) : void 0;
	  if (index + 1 === str.length) {
	    return false;
	  }
	  var first = str.charCodeAt(index);
	  var second = str.charCodeAt(index + 1);
	  return SURROGATE_HIGH_START <= first && first <= SURROGATE_HIGH_END && SURROGATE_LOW_START <= second && second <= SURROGATE_LOW_END;
	}

	/**
	 * @param {string} str  Non-empty string
	 * @return {boolean}    True if the input includes any surrogate code units
	 */
	function hasSurrogateUnit(str) {
	  return SURROGATE_UNITS_REGEX.test(str);
	}

	/**
	 * Return the length of the original Unicode character at given position in the
	 * String by looking into the UTF-16 code unit; that is equal to 1 for any
	 * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and
	 * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact
	 * representing non-BMP characters ([U+10000..U+10FFFF]).
	 *
	 * Examples:
	 * - '\u0020' => 1
	 * - '\u3020' => 1
	 * - '\uD835' => 2
	 * - '\uD835\uDDEF' => 2
	 * - '\uDDEF' => 2
	 *
	 * @param {string} str  Non-empty string
	 * @param {number} pos  Position in the string to look for one code unit
	 * @return {number}      Number 1 or 2
	 */
	function getUTF16Length(str, pos) {
	  return 1 + isCodeUnitInSurrogateRange(str.charCodeAt(pos));
	}

	/**
	 * Fully Unicode-enabled replacement for String#length
	 *
	 * @param {string} str  Valid Unicode string
	 * @return {number}     The number of Unicode characters in the string
	 */
	function strlen(str) {
	  // Call the native functions if there's no surrogate char
	  if (!hasSurrogateUnit(str)) {
	    return str.length;
	  }

	  var len = 0;
	  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {
	    len++;
	  }
	  return len;
	}

	/**
	 * Fully Unicode-enabled replacement for String#substr()
	 *
	 * @param {string} str      Valid Unicode string
	 * @param {number} start    Location in Unicode sequence to begin extracting
	 * @param {?number} length  The number of Unicode characters to extract
	 *                          (default: to the end of the string)
	 * @return {string}         Extracted sub-string
	 */
	function substr(str, start, length) {
	  start = start || 0;
	  length = length === undefined ? Infinity : length || 0;

	  // Call the native functions if there's no surrogate char
	  if (!hasSurrogateUnit(str)) {
	    return str.substr(start, length);
	  }

	  // Obvious cases
	  var size = str.length;
	  if (size <= 0 || start > size || length <= 0) {
	    return '';
	  }

	  // Find the actual starting position
	  var posA = 0;
	  if (start > 0) {
	    for (; start > 0 && posA < size; start--) {
	      posA += getUTF16Length(str, posA);
	    }
	    if (posA >= size) {
	      return '';
	    }
	  } else if (start < 0) {
	    for (posA = size; start < 0 && 0 < posA; start++) {
	      posA -= getUTF16Length(str, posA - 1);
	    }
	    if (posA < 0) {
	      posA = 0;
	    }
	  }

	  // Find the actual ending position
	  var posB = size;
	  if (length < size) {
	    for (posB = posA; length > 0 && posB < size; length--) {
	      posB += getUTF16Length(str, posB);
	    }
	  }

	  return str.substring(posA, posB);
	}

	/**
	 * Fully Unicode-enabled replacement for String#substring()
	 *
	 * @param {string} str    Valid Unicode string
	 * @param {number} start  Location in Unicode sequence to begin extracting
	 * @param {?number} end   Location in Unicode sequence to end extracting
	 *                        (default: end of the string)
	 * @return {string}       Extracted sub-string
	 */
	function substring(str, start, end) {
	  start = start || 0;
	  end = end === undefined ? Infinity : end || 0;

	  if (start < 0) {
	    start = 0;
	  }
	  if (end < 0) {
	    end = 0;
	  }

	  var length = Math.abs(end - start);
	  start = start < end ? start : end;
	  return substr(str, start, length);
	}

	/**
	 * Get a list of Unicode code-points from a String
	 *
	 * @param {string} str        Valid Unicode string
	 * @return {array<number>}    A list of code-points in [0..0x10FFFF]
	 */
	function getCodePoints(str) {
	  var codePoints = [];
	  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {
	    codePoints.push(str.codePointAt(pos));
	  }
	  return codePoints;
	}

	var UnicodeUtils = {
	  getCodePoints: getCodePoints,
	  getUTF16Length: getUTF16Length,
	  hasSurrogateUnit: hasSurrogateUnit,
	  isCodeUnitInSurrogateRange: isCodeUnitInSurrogateRange,
	  isSurrogatePair: isSurrogatePair,
	  strlen: strlen,
	  substring: substring,
	  substr: substr
	};

	module.exports = UnicodeUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getRangeClientRects
	 * @typechecks
	 * 
	 */

	'use strict';

	var UserAgent = __webpack_require__(240);

	var invariant = __webpack_require__(204);

	var isChrome = UserAgent.isBrowser('Chrome');

	// In Chrome, the client rects will include the entire bounds of all nodes that
	// begin (have a start tag) within the selection, even if the selection does
	// not overlap the entire node. To resolve this, we split the range at each
	// start tag and join the client rects together.
	// https://code.google.com/p/chromium/issues/detail?id=324437
	/* eslint-disable consistent-return */
	function getRangeClientRectsChrome(range) {
	  var tempRange = range.cloneRange();
	  var clientRects = [];

	  for (var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode) {
	    // If we've climbed up to the common ancestor, we can now use the
	    // original start point and stop climbing the tree.
	    var atCommonAncestor = ancestor === range.commonAncestorContainer;
	    if (atCommonAncestor) {
	      tempRange.setStart(range.startContainer, range.startOffset);
	    } else {
	      tempRange.setStart(tempRange.endContainer, 0);
	    }
	    var rects = Array.from(tempRange.getClientRects());
	    clientRects.push(rects);
	    if (atCommonAncestor) {
	      var _ref;

	      clientRects.reverse();
	      return (_ref = []).concat.apply(_ref, clientRects);
	    }
	    tempRange.setEndBefore(ancestor);
	  }

	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found an unexpected detached subtree when getting range client rects.') : invariant(false) : void 0;
	}
	/* eslint-enable consistent-return */

	/**
	 * Like range.getClientRects() but normalizes for browser bugs.
	 */
	var getRangeClientRects = isChrome ? getRangeClientRectsChrome : function (range) {
	  return Array.from(range.getClientRects());
	};

	module.exports = getRangeClientRects;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getDraftEditorSelectionWithNodes
	 * @typechecks
	 * 
	 */

	'use strict';

	var findAncestorOffsetKey = __webpack_require__(269);
	var getSelectionOffsetKeyForNode = __webpack_require__(270);
	var getUpdatedSelectionState = __webpack_require__(272);
	var invariant = __webpack_require__(204);
	var nullthrows = __webpack_require__(226);

	/**
	 * Convert the current selection range to an anchor/focus pair of offset keys
	 * and values that can be interpreted by components.
	 */
	function getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var anchorIsTextNode = anchorNode.nodeType === Node.TEXT_NODE;
	  var focusIsTextNode = focusNode.nodeType === Node.TEXT_NODE;

	  // If the selection range lies only on text nodes, the task is simple.
	  // Find the nearest offset-aware elements and use the
	  // offset values supplied by the selection range.
	  if (anchorIsTextNode && focusIsTextNode) {
	    return {
	      selectionState: getUpdatedSelectionState(editorState, nullthrows(findAncestorOffsetKey(anchorNode)), anchorOffset, nullthrows(findAncestorOffsetKey(focusNode)), focusOffset),
	      needsRecovery: false
	    };
	  }

	  var anchorPoint = null;
	  var focusPoint = null;
	  var needsRecovery = true;

	  // An element is selected. Convert this selection range into leaf offset
	  // keys and offset values for consumption at the component level. This
	  // is common in Firefox, where select-all and triple click behavior leads
	  // to entire elements being selected.
	  //
	  // Note that we use the `needsRecovery` parameter in the callback here. This
	  // is because when certain elements are selected, the behavior for subsequent
	  // cursor movement (e.g. via arrow keys) is uncertain and may not match
	  // expectations at the component level. For example, if an entire <div> is
	  // selected and the user presses the right arrow, Firefox keeps the selection
	  // on the <div>. If we allow subsequent keypresses to insert characters
	  // natively, they will be inserted into a browser-created text node to the
	  // right of that <div>. This is obviously undesirable.
	  //
	  // With the `needsRecovery` flag, we inform the caller that it is responsible
	  // for manually setting the selection state on the rendered document to
	  // ensure proper selection state maintenance.

	  if (anchorIsTextNode) {
	    anchorPoint = {
	      key: nullthrows(findAncestorOffsetKey(anchorNode)),
	      offset: anchorOffset
	    };
	    focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);
	  } else if (focusIsTextNode) {
	    focusPoint = {
	      key: nullthrows(findAncestorOffsetKey(focusNode)),
	      offset: focusOffset
	    };
	    anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);
	  } else {
	    anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);
	    focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);

	    // If the selection is collapsed on an empty block, don't force recovery.
	    // This way, on arrow key selection changes, the browser can move the
	    // cursor from a non-zero offset on one block, through empty blocks,
	    // to a matching non-zero offset on other text blocks.
	    if (anchorNode === focusNode && anchorOffset === focusOffset) {
	      needsRecovery = !!anchorNode.firstChild && anchorNode.firstChild.nodeName !== 'BR';
	    }
	  }

	  return {
	    selectionState: getUpdatedSelectionState(editorState, anchorPoint.key, anchorPoint.offset, focusPoint.key, focusPoint.offset),
	    needsRecovery: needsRecovery
	  };
	}

	/**
	 * Identify the first leaf descendant for the given node.
	 */
	function getFirstLeaf(node) {
	  while (node.firstChild && getSelectionOffsetKeyForNode(node.firstChild)) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Identify the last leaf descendant for the given node.
	 */
	function getLastLeaf(node) {
	  while (node.lastChild && getSelectionOffsetKeyForNode(node.lastChild)) {
	    node = node.lastChild;
	  }
	  return node;
	}

	function getPointForNonTextNode(editorRoot, startNode, childOffset) {
	  var node = startNode;
	  var offsetKey = findAncestorOffsetKey(node);

	  !(offsetKey != null || editorRoot && (editorRoot === node || editorRoot.firstChild === node)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown node in selection range.') : invariant(false) : void 0;

	  // If the editorRoot is the selection, step downward into the content
	  // wrapper.
	  if (editorRoot === node) {
	    node = node.firstChild;
	    !(node instanceof Element && node.getAttribute('data-contents') === 'true') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid DraftEditorContents structure.') : invariant(false) : void 0;
	    if (childOffset > 0) {
	      childOffset = node.childNodes.length;
	    }
	  }

	  // If the child offset is zero and we have an offset key, we're done.
	  // If there's no offset key because the entire editor is selected,
	  // find the leftmost ("first") leaf in the tree and use that as the offset
	  // key.
	  if (childOffset === 0) {
	    var key = null;
	    if (offsetKey != null) {
	      key = offsetKey;
	    } else {
	      var firstLeaf = getFirstLeaf(node);
	      key = nullthrows(getSelectionOffsetKeyForNode(firstLeaf));
	    }
	    return { key: key, offset: 0 };
	  }

	  var nodeBeforeCursor = node.childNodes[childOffset - 1];
	  var leafKey = null;
	  var textLength = null;

	  if (!getSelectionOffsetKeyForNode(nodeBeforeCursor)) {
	    // Our target node may be a leaf or a text node, in which case we're
	    // already where we want to be and can just use the child's length as
	    // our offset.
	    leafKey = nullthrows(offsetKey);
	    textLength = getTextContentLength(nodeBeforeCursor);
	  } else {
	    // Otherwise, we'll look at the child to the left of the cursor and find
	    // the last leaf node in its subtree.
	    var lastLeaf = getLastLeaf(nodeBeforeCursor);
	    leafKey = nullthrows(getSelectionOffsetKeyForNode(lastLeaf));
	    textLength = getTextContentLength(lastLeaf);
	  }

	  return {
	    key: leafKey,
	    offset: textLength
	  };
	}

	/**
	 * Return the length of a node's textContent, regarding single newline
	 * characters as zero-length. This allows us to avoid problems with identifying
	 * the correct selection offset for empty blocks in IE, in which we
	 * render newlines instead of break tags.
	 */
	function getTextContentLength(node) {
	  var textContent = node.textContent;
	  return textContent === '\n' ? 0 : textContent.length;
	}

	module.exports = getDraftEditorSelectionWithNodes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 295 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule moveSelectionBackward
	 * 
	 */

	'use strict';

	/**
	 * Given a collapsed selection, move the focus `maxDistance` backward within
	 * the selected block. If the selection will go beyond the start of the block,
	 * move focus to the end of the previous block, but no further.
	 *
	 * This function is not Unicode-aware, so surrogate pairs will be treated
	 * as having length 2.
	 */
	function moveSelectionBackward(editorState, maxDistance) {
	  var selection = editorState.getSelection();
	  var content = editorState.getCurrentContent();
	  var key = selection.getStartKey();
	  var offset = selection.getStartOffset();

	  var focusKey = key;
	  var focusOffset = 0;

	  if (maxDistance > offset) {
	    var keyBefore = content.getKeyBefore(key);
	    if (keyBefore == null) {
	      focusKey = key;
	    } else {
	      focusKey = keyBefore;
	      var blockBefore = content.getBlockForKey(keyBefore);
	      focusOffset = blockBefore.getText().length;
	    }
	  } else {
	    focusOffset = offset - maxDistance;
	  }

	  return selection.merge({
	    focusKey: focusKey,
	    focusOffset: focusOffset,
	    isBackward: true
	  });
	}

	module.exports = moveSelectionBackward;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule removeTextWithStrategy
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);

	/**
	 * For a collapsed selection state, remove text based on the specified strategy.
	 * If the selection state is not collapsed, remove the entire selected range.
	 */
	function removeTextWithStrategy(editorState, strategy, direction) {
	  var selection = editorState.getSelection();
	  var content = editorState.getCurrentContent();
	  var target = selection;
	  if (selection.isCollapsed()) {
	    if (direction === 'forward') {
	      if (editorState.isSelectionAtEndOfContent()) {
	        return content;
	      }
	    } else if (editorState.isSelectionAtStartOfContent()) {
	      return content;
	    }

	    target = strategy(editorState);
	    if (target === selection) {
	      return content;
	    }
	  }
	  return DraftModifier.removeRange(content, target, direction);
	}

	module.exports = removeTextWithStrategy;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandBackspaceWord
	 * 
	 */

	'use strict';

	var DraftRemovableWord = __webpack_require__(298);
	var EditorState = __webpack_require__(214);

	var moveSelectionBackward = __webpack_require__(295);
	var removeTextWithStrategy = __webpack_require__(296);

	/**
	 * Delete the word that is left of the cursor, as well as any spaces or
	 * punctuation after the word.
	 */
	function keyCommandBackspaceWord(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var offset = selection.getStartOffset();
	    // If there are no words before the cursor, remove the preceding newline.
	    if (offset === 0) {
	      return moveSelectionBackward(strategyState, 1);
	    }
	    var key = selection.getStartKey();
	    var content = strategyState.getCurrentContent();
	    var text = content.getBlockForKey(key).getText().slice(0, offset);
	    var toRemove = DraftRemovableWord.getBackward(text);
	    return moveSelectionBackward(strategyState, toRemove.length || 1);
	  }, 'backward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  return EditorState.push(editorState, afterRemoval, 'remove-range');
	}

	module.exports = keyCommandBackspaceWord;

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftRemovableWord
	 * @typechecks
	 * 
	 */

	'use strict';

	var TokenizeUtil = __webpack_require__(299);

	var punctuation = TokenizeUtil.getPunctuation();

	// The apostrophe and curly single quotes behave in a curious way: when
	// surrounded on both sides by word characters, they behave as word chars; when
	// either neighbor is punctuation or an end of the string, they behave as
	// punctuation.
	var CHAMELEON_CHARS = '[\'\u2018\u2019]';

	// Remove the underscore, which should count as part of the removable word. The
	// "chameleon chars" also count as punctuation in this regex.
	var WHITESPACE_AND_PUNCTUATION = '\\s|(?![_])' + punctuation;

	var DELETE_STRING = '^' + '(?:' + WHITESPACE_AND_PUNCTUATION + ')*' + '(?:' + CHAMELEON_CHARS + '|(?!' + WHITESPACE_AND_PUNCTUATION + ').)*' + '(?:(?!' + WHITESPACE_AND_PUNCTUATION + ').)';
	var DELETE_REGEX = new RegExp(DELETE_STRING);

	var BACKSPACE_STRING = '(?:(?!' + WHITESPACE_AND_PUNCTUATION + ').)' + '(?:' + CHAMELEON_CHARS + '|(?!' + WHITESPACE_AND_PUNCTUATION + ').)*' + '(?:' + WHITESPACE_AND_PUNCTUATION + ')*' + '$';
	var BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);

	function getRemovableWord(text, isBackward) {
	  var matches = isBackward ? BACKSPACE_REGEX.exec(text) : DELETE_REGEX.exec(text);
	  return matches ? matches[0] : text;
	}

	var DraftRemovableWord = {
	  getBackward: function getBackward(text) {
	    return getRemovableWord(text, true);
	  },

	  getForward: function getForward(text) {
	    return getRemovableWord(text, false);
	  }
	};

	module.exports = DraftRemovableWord;

/***/ },
/* 299 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @stub
	 * 
	 */

	'use strict';

	// \u00a1-\u00b1\u00b4-\u00b8\u00ba\u00bb\u00bf
	//             is latin supplement punctuation except fractions and superscript
	//             numbers
	// \u2010-\u2027\u2030-\u205e
	//             is punctuation from the general punctuation block:
	//             weird quotes, commas, bullets, dashes, etc.
	// \u30fb\u3001\u3002\u3008-\u3011\u3014-\u301f
	//             is CJK punctuation
	// \uff1a-\uff1f\uff01-\uff0f\uff3b-\uff40\uff5b-\uff65
	//             is some full-width/half-width punctuation
	// \u2E2E\u061f\u066a-\u066c\u061b\u060c\u060d\uFD3e\uFD3F
	//             is some Arabic punctuation marks
	// \u1801\u0964\u104a\u104b
	//             is misc. other language punctuation marks

	var PUNCTUATION = '[.,+*?$|#{}()\'\\^\\-\\[\\]\\\\\\/!@%"~=<>_:;' + '\u30FB\u3001\u3002\u3008-\u3011\u3014-\u301F\uFF1A-\uFF1F\uFF01-\uFF0F' + '\uFF3B-\uFF40\uFF5B-\uFF65\u2E2E\u061F\u066A-\u066C\u061B\u060C\u060D' + '\uFD3E\uFD3F\u1801\u0964\u104A\u104B\u2010-\u2027\u2030-\u205E' + '\xA1-\xB1\xB4-\xB8\xBA\xBB\xBF]';

	module.exports = {
	  getPunctuation: function getPunctuation() {
	    return PUNCTUATION;
	  }
	};

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandDeleteWord
	 * 
	 */

	'use strict';

	var DraftRemovableWord = __webpack_require__(298);
	var EditorState = __webpack_require__(214);

	var moveSelectionForward = __webpack_require__(301);
	var removeTextWithStrategy = __webpack_require__(296);

	/**
	 * Delete the word that is right of the cursor, as well as any spaces or
	 * punctuation before the word.
	 */
	function keyCommandDeleteWord(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var offset = selection.getStartOffset();
	    var key = selection.getStartKey();
	    var content = strategyState.getCurrentContent();
	    var text = content.getBlockForKey(key).getText().slice(offset);
	    var toRemove = DraftRemovableWord.getForward(text);

	    // If there are no words in front of the cursor, remove the newline.
	    return moveSelectionForward(strategyState, toRemove.length || 1);
	  }, 'forward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  return EditorState.push(editorState, afterRemoval, 'remove-range');
	}

	module.exports = keyCommandDeleteWord;

/***/ },
/* 301 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule moveSelectionForward
	 * 
	 */

	'use strict';

	/**
	 * Given a collapsed selection, move the focus `maxDistance` forward within
	 * the selected block. If the selection will go beyond the end of the block,
	 * move focus to the start of the next block, but no further.
	 *
	 * This function is not Unicode-aware, so surrogate pairs will be treated
	 * as having length 2.
	 */
	function moveSelectionForward(editorState, maxDistance) {
	  var selection = editorState.getSelection();
	  var key = selection.getStartKey();
	  var offset = selection.getStartOffset();
	  var content = editorState.getCurrentContent();

	  var focusKey = key;
	  var focusOffset;

	  var block = content.getBlockForKey(key);

	  if (maxDistance > block.getText().length - offset) {
	    focusKey = content.getKeyAfter(key);
	    focusOffset = 0;
	  } else {
	    focusOffset = offset + maxDistance;
	  }

	  return selection.merge({ focusKey: focusKey, focusOffset: focusOffset });
	}

	module.exports = moveSelectionForward;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandInsertNewline
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);

	function keyCommandInsertNewline(editorState) {
	  var contentState = DraftModifier.splitBlock(editorState.getCurrentContent(), editorState.getSelection());
	  return EditorState.push(editorState, contentState, 'split-block');
	}

	module.exports = keyCommandInsertNewline;

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandPlainBackspace
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);
	var UnicodeUtils = __webpack_require__(292);

	var moveSelectionBackward = __webpack_require__(295);
	var removeTextWithStrategy = __webpack_require__(296);

	/**
	 * Remove the selected range. If the cursor is collapsed, remove the preceding
	 * character. This operation is Unicode-aware, so removing a single character
	 * will remove a surrogate pair properly as well.
	 */
	function keyCommandPlainBackspace(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var content = strategyState.getCurrentContent();
	    var key = selection.getAnchorKey();
	    var offset = selection.getAnchorOffset();
	    var charBehind = content.getBlockForKey(key).getText()[offset - 1];
	    return moveSelectionBackward(strategyState, charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1);
	  }, 'backward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  var selection = editorState.getSelection();
	  return EditorState.push(editorState, afterRemoval.set('selectionBefore', selection), selection.isCollapsed() ? 'backspace-character' : 'remove-range');
	}

	module.exports = keyCommandPlainBackspace;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandPlainDelete
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);
	var UnicodeUtils = __webpack_require__(292);

	var moveSelectionForward = __webpack_require__(301);
	var removeTextWithStrategy = __webpack_require__(296);

	/**
	 * Remove the selected range. If the cursor is collapsed, remove the following
	 * character. This operation is Unicode-aware, so removing a single character
	 * will remove a surrogate pair properly as well.
	 */
	function keyCommandPlainDelete(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var content = strategyState.getCurrentContent();
	    var key = selection.getAnchorKey();
	    var offset = selection.getAnchorOffset();
	    var charAhead = content.getBlockForKey(key).getText()[offset];
	    return moveSelectionForward(strategyState, charAhead ? UnicodeUtils.getUTF16Length(charAhead, 0) : 1);
	  }, 'forward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  var selection = editorState.getSelection();

	  return EditorState.push(editorState, afterRemoval.set('selectionBefore', selection), selection.isCollapsed() ? 'delete-character' : 'remove-range');
	}

	module.exports = keyCommandPlainDelete;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandMoveSelectionToEndOfBlock
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);

	/**
	 * See comment for `moveSelectionToStartOfBlock`.
	 */
	function keyCommandMoveSelectionToEndOfBlock(editorState) {
	  var selection = editorState.getSelection();
	  var endKey = selection.getEndKey();
	  var content = editorState.getCurrentContent();
	  var textLength = content.getBlockForKey(endKey).getLength();
	  return EditorState.set(editorState, {
	    selection: selection.merge({
	      anchorKey: endKey,
	      anchorOffset: textLength,
	      focusKey: endKey,
	      focusOffset: textLength,
	      isBackward: false
	    }),
	    forceSelection: true
	  });
	}

	module.exports = keyCommandMoveSelectionToEndOfBlock;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandMoveSelectionToStartOfBlock
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);

	/**
	 * Collapse selection at the start of the first selected block. This is used
	 * for Firefox versions that attempt to navigate forward/backward instead of
	 * moving the cursor. Other browsers are able to move the cursor natively.
	 */
	function keyCommandMoveSelectionToStartOfBlock(editorState) {
	  var selection = editorState.getSelection();
	  var startKey = selection.getStartKey();
	  return EditorState.set(editorState, {
	    selection: selection.merge({
	      anchorKey: startKey,
	      anchorOffset: 0,
	      focusKey: startKey,
	      focusOffset: 0,
	      isBackward: false
	    }),
	    forceSelection: true
	  });
	}

	module.exports = keyCommandMoveSelectionToStartOfBlock;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandTransposeCharacters
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);

	var getContentStateFragment = __webpack_require__(205);

	/**
	 * Transpose the characters on either side of a collapsed cursor, or
	 * if the cursor is at the end of the block, transpose the last two
	 * characters.
	 */
	function keyCommandTransposeCharacters(editorState) {
	  var selection = editorState.getSelection();
	  if (!selection.isCollapsed()) {
	    return editorState;
	  }

	  var offset = selection.getAnchorOffset();
	  if (offset === 0) {
	    return editorState;
	  }

	  var blockKey = selection.getAnchorKey();
	  var content = editorState.getCurrentContent();
	  var block = content.getBlockForKey(blockKey);
	  var length = block.getLength();

	  // Nothing to transpose if there aren't two characters.
	  if (length <= 1) {
	    return editorState;
	  }

	  var removalRange;
	  var finalSelection;

	  if (offset === length) {
	    // The cursor is at the end of the block. Swap the last two characters.
	    removalRange = selection.set('anchorOffset', offset - 1);
	    finalSelection = selection;
	  } else {
	    removalRange = selection.set('focusOffset', offset + 1);
	    finalSelection = removalRange.set('anchorOffset', offset + 1);
	  }

	  // Extract the character to move as a fragment. This preserves its
	  // styling and entity, if any.
	  var movedFragment = getContentStateFragment(content, removalRange);
	  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward');

	  // After the removal, the insertion target is one character back.
	  var selectionAfter = afterRemoval.getSelectionAfter();
	  var targetOffset = selectionAfter.getAnchorOffset() - 1;
	  var targetRange = selectionAfter.merge({
	    anchorOffset: targetOffset,
	    focusOffset: targetOffset
	  });

	  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);

	  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');

	  return EditorState.acceptSelection(newEditorState, finalSelection);
	}

	module.exports = keyCommandTransposeCharacters;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandUndo
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);

	function keyCommandUndo(e, editorState, updateFn) {
	  var undoneState = EditorState.undo(editorState);

	  // If the last change to occur was a spellcheck change, allow the undo
	  // event to fall through to the browser. This allows the browser to record
	  // the unwanted change, which should soon lead it to learn not to suggest
	  // the correction again.
	  if (editorState.getLastChangeType() === 'spellcheck-change') {
	    var nativelyRenderedContent = undoneState.getCurrentContent();
	    updateFn(EditorState.set(undoneState, { nativelyRenderedContent: nativelyRenderedContent }));
	    return;
	  }

	  // Otheriwse, manage the undo behavior manually.
	  e.preventDefault();
	  if (!editorState.getNativelyRenderedContent()) {
	    updateFn(undoneState);
	    return;
	  }

	  // Trigger a re-render with the current content state to ensure that the
	  // component tree has up-to-date props for comparison.
	  updateFn(EditorState.set(editorState, { nativelyRenderedContent: null }));

	  // Wait to ensure that the re-render has occurred before performing
	  // the undo action.
	  setTimeout(function () {
	    updateFn(undoneState);
	  }, 0);
	}

	module.exports = keyCommandUndo;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnPaste
	 * 
	 */

	'use strict';

	var BlockMapBuilder = __webpack_require__(192);
	var CharacterMetadata = __webpack_require__(194);
	var DataTransfer = __webpack_require__(266);
	var DraftModifier = __webpack_require__(197);
	var DraftPasteProcessor = __webpack_require__(310);
	var EditorState = __webpack_require__(214);

	var getEntityKeyForSelection = __webpack_require__(234);
	var getTextContentFromFiles = __webpack_require__(271);
	var isEventHandled = __webpack_require__(273);
	var splitTextIntoTextBlocks = __webpack_require__(314);

	/**
	 * Paste content.
	 */
	function editOnPaste(editor, e) {
	  e.preventDefault();
	  var data = new DataTransfer(e.clipboardData);

	  // Get files, unless this is likely to be a string the user wants inline.
	  if (!data.isRichText()) {
	    var files = data.getFiles();
	    var defaultFileText = data.getText();
	    if (files.length > 0) {
	      // Allow customized paste handling for images, etc. Otherwise, fall
	      // through to insert text contents into the editor.
	      if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {
	        return;
	      }

	      getTextContentFromFiles(files, function ( /*string*/fileText) {
	        fileText = fileText || defaultFileText;
	        if (!fileText) {
	          return;
	        }

	        var editorState = editor._latestEditorState;
	        var blocks = splitTextIntoTextBlocks(fileText);
	        var character = CharacterMetadata.create({
	          style: editorState.getCurrentInlineStyle(),
	          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())
	        });

	        var text = DraftPasteProcessor.processText(blocks, character);
	        var fragment = BlockMapBuilder.createFromArray(text);

	        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);

	        editor.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));
	      });

	      return;
	    }
	  }

	  var textBlocks = [];
	  var text = data.getText();
	  var html = data.getHTML();

	  if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html))) {
	    return;
	  }

	  if (text) {
	    textBlocks = splitTextIntoTextBlocks(text);
	  }

	  if (!editor.props.stripPastedStyles) {
	    // If the text from the paste event is rich content that matches what we
	    // already have on the internal clipboard, assume that we should just use
	    // the clipboard fragment for the paste. This will allow us to preserve
	    // styling and entities, if any are present. Note that newlines are
	    // stripped during comparison -- this is because copy/paste within the
	    // editor in Firefox and IE will not include empty lines. The resulting
	    // paste will preserve the newlines correctly.
	    var internalClipboard = editor.getClipboard();
	    if (data.isRichText() && internalClipboard) {
	      if (
	      // If the editorKey is present in the pasted HTML, it should be safe to
	      // assume this is an internal paste.
	      html.indexOf(editor.getEditorKey()) !== -1 ||
	      // The copy may have been made within a single block, in which case the
	      // editor key won't be part of the paste. In this case, just check
	      // whether the pasted text matches the internal clipboard.
	      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {
	        editor.update(insertFragment(editor._latestEditorState, internalClipboard));
	        return;
	      }
	    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {
	      // Safari does not properly store text/html in some cases.
	      // Use the internalClipboard if present and equal to what is on
	      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.
	      editor.update(insertFragment(editor._latestEditorState, internalClipboard));
	      return;
	    }

	    // If there is html paste data, try to parse that.
	    if (html) {
	      var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);
	      if (htmlFragment) {
	        var contentBlocks = htmlFragment.contentBlocks;
	        var entityMap = htmlFragment.entityMap;

	        if (contentBlocks) {
	          var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);
	          editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));
	          return;
	        }
	      }
	    }

	    // Otherwise, create a new fragment from our pasted text. Also
	    // empty the internal clipboard, since it's no longer valid.
	    editor.setClipboard(null);
	  }

	  if (textBlocks.length) {
	    var editorState = editor._latestEditorState;
	    var character = CharacterMetadata.create({
	      style: editorState.getCurrentInlineStyle(),
	      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())
	    });

	    var textFragment = DraftPasteProcessor.processText(textBlocks, character);

	    var textMap = BlockMapBuilder.createFromArray(textFragment);
	    editor.update(insertFragment(editor._latestEditorState, textMap));
	  }
	}

	function insertFragment(editorState, fragment, entityMap) {
	  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);
	  // TODO: merge the entity map once we stop using DraftEntity
	  // like this:
	  // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);

	  return EditorState.push(editorState, newContent.set('entityMap', entityMap), 'insert-fragment');
	}

	function areTextBlocksAndClipboardEqual(textBlocks, blockMap) {
	  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {
	    return block.getText() === textBlocks[ii];
	  });
	}

	module.exports = editOnPaste;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftPasteProcessor
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);
	var ContentBlock = __webpack_require__(195);
	var Immutable = __webpack_require__(193);

	var convertFromHTMLtoContentBlocks = __webpack_require__(311);
	var generateRandomKey = __webpack_require__(206);
	var getSafeBodyFromHTML = __webpack_require__(313);
	var sanitizeDraftText = __webpack_require__(221);

	var List = Immutable.List;
	var Repeat = Immutable.Repeat;


	var DraftPasteProcessor = {
	  processHTML: function processHTML(html, blockRenderMap) {
	    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);
	  },
	  processText: function processText(textBlocks, character) {
	    return textBlocks.map(function (textLine) {
	      textLine = sanitizeDraftText(textLine);
	      return new ContentBlock({
	        key: generateRandomKey(),
	        type: 'unstyled',
	        text: textLine,
	        characterList: List(Repeat(character, textLine.length))
	      });
	    });
	  }
	};

	module.exports = DraftPasteProcessor;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule convertFromHTMLToContentBlocks
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);
	var ContentBlock = __webpack_require__(195);
	var DefaultDraftBlockRenderMap = __webpack_require__(228);
	var DraftEntity = __webpack_require__(218);
	var Immutable = __webpack_require__(193);
	var URI = __webpack_require__(312);

	var generateRandomKey = __webpack_require__(206);
	var getSafeBodyFromHTML = __webpack_require__(313);
	var invariant = __webpack_require__(204);
	var nullthrows = __webpack_require__(226);
	var sanitizeDraftText = __webpack_require__(221);

	var _require = __webpack_require__(193);

	var Set = _require.Set;
	var List = Immutable.List;
	var OrderedSet = Immutable.OrderedSet;


	var NBSP = '&nbsp;';
	var SPACE = ' ';

	// Arbitrary max indent
	var MAX_DEPTH = 4;

	// used for replacing characters in HTML
	var REGEX_CR = new RegExp('\r', 'g');
	var REGEX_LF = new RegExp('\n', 'g');
	var REGEX_NBSP = new RegExp(NBSP, 'g');
	var REGEX_CARRIAGE = new RegExp('&#13;?', 'g');
	var REGEX_ZWS = new RegExp('&#8203;?', 'g');

	// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
	var boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];
	var notBoldValues = ['light', 'lighter', '100', '200', '300', '400'];

	// Block tag flow is different because LIs do not have
	// a deterministic style ;_;
	var inlineTags = {
	  b: 'BOLD',
	  code: 'CODE',
	  del: 'STRIKETHROUGH',
	  em: 'ITALIC',
	  i: 'ITALIC',
	  s: 'STRIKETHROUGH',
	  strike: 'STRIKETHROUGH',
	  strong: 'BOLD',
	  u: 'UNDERLINE'
	};

	var anchorAttr = ['className', 'href', 'rel', 'target', 'title'];

	var imgAttr = ['alt', 'className', 'height', 'src', 'width'];

	var lastBlock;

	function getEmptyChunk() {
	  return {
	    text: '',
	    inlines: [],
	    entities: [],
	    blocks: []
	  };
	}

	function getWhitespaceChunk(inEntity) {
	  var entities = new Array(1);
	  if (inEntity) {
	    entities[0] = inEntity;
	  }
	  return {
	    text: SPACE,
	    inlines: [OrderedSet()],
	    entities: entities,
	    blocks: []
	  };
	}

	function getSoftNewlineChunk() {
	  return {
	    text: '\n',
	    inlines: [OrderedSet()],
	    entities: new Array(1),
	    blocks: []
	  };
	}

	function getBlockDividerChunk(block, depth) {
	  return {
	    text: '\r',
	    inlines: [OrderedSet()],
	    entities: new Array(1),
	    blocks: [{
	      type: block,
	      depth: Math.max(0, Math.min(MAX_DEPTH, depth))
	    }]
	  };
	}

	function getListBlockType(tag, lastList) {
	  if (tag === 'li') {
	    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';
	  }
	  return null;
	}

	function getBlockMapSupportedTags(blockRenderMap) {
	  var unstyledElement = blockRenderMap.get('unstyled').element;
	  var tags = new Set([]);

	  blockRenderMap.forEach(function (draftBlock) {
	    if (draftBlock.aliasedElements) {
	      draftBlock.aliasedElements.forEach(function (tag) {
	        tags = tags.add(tag);
	      });
	    }

	    tags = tags.add(draftBlock.element);
	  });

	  return tags.filter(function (tag) {
	    return tag && tag !== unstyledElement;
	  }).toArray().sort();
	}

	// custom element conversions
	function getMultiMatchedType(tag, lastList, multiMatchExtractor) {
	  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {
	    var matchType = multiMatchExtractor[ii](tag, lastList);
	    if (matchType) {
	      return matchType;
	    }
	  }
	  return null;
	}

	function getBlockTypeForTag(tag, lastList, blockRenderMap) {
	  var matchedTypes = blockRenderMap.filter(function (draftBlock) {
	    return draftBlock.element === tag || draftBlock.wrapper === tag || draftBlock.aliasedElements && draftBlock.aliasedElements.some(function (alias) {
	      return alias === tag;
	    });
	  }).keySeq().toSet().toArray().sort();

	  // if we dont have any matched type, return unstyled
	  // if we have one matched type return it
	  // if we have multi matched types use the multi-match function to gather type
	  switch (matchedTypes.length) {
	    case 0:
	      return 'unstyled';
	    case 1:
	      return matchedTypes[0];
	    default:
	      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';
	  }
	}

	function processInlineTag(tag, node, currentStyle) {
	  var styleToCheck = inlineTags[tag];
	  if (styleToCheck) {
	    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();
	  } else if (node instanceof HTMLElement) {
	    (function () {
	      var htmlElement = node;
	      currentStyle = currentStyle.withMutations(function (style) {
	        var fontWeight = htmlElement.style.fontWeight;
	        var fontStyle = htmlElement.style.fontStyle;
	        var textDecoration = htmlElement.style.textDecoration;

	        if (boldValues.indexOf(fontWeight) >= 0) {
	          style.add('BOLD');
	        } else if (notBoldValues.indexOf(fontWeight) >= 0) {
	          style.remove('BOLD');
	        }

	        if (fontStyle === 'italic') {
	          style.add('ITALIC');
	        } else if (fontStyle === 'normal') {
	          style.remove('ITALIC');
	        }

	        if (textDecoration === 'underline') {
	          style.add('UNDERLINE');
	        }
	        if (textDecoration === 'line-through') {
	          style.add('STRIKETHROUGH');
	        }
	        if (textDecoration === 'none') {
	          style.remove('UNDERLINE');
	          style.remove('STRIKETHROUGH');
	        }
	      }).toOrderedSet();
	    })();
	  }
	  return currentStyle;
	}

	function joinChunks(A, B) {
	  // Sometimes two blocks will touch in the DOM and we need to strip the
	  // extra delimiter to preserve niceness.
	  var lastInA = A.text.slice(-1);
	  var firstInB = B.text.slice(0, 1);

	  if (lastInA === '\r' && firstInB === '\r') {
	    A.text = A.text.slice(0, -1);
	    A.inlines.pop();
	    A.entities.pop();
	    A.blocks.pop();
	  }

	  // Kill whitespace after blocks
	  if (lastInA === '\r') {
	    if (B.text === SPACE || B.text === '\n') {
	      return A;
	    } else if (firstInB === SPACE || firstInB === '\n') {
	      B.text = B.text.slice(1);
	      B.inlines.shift();
	      B.entities.shift();
	    }
	  }

	  return {
	    text: A.text + B.text,
	    inlines: A.inlines.concat(B.inlines),
	    entities: A.entities.concat(B.entities),
	    blocks: A.blocks.concat(B.blocks)
	  };
	}

	/**
	 * Check to see if we have anything like <p> <blockquote> <h1>... to create
	 * block tags from. If we do, we can use those and ignore <div> tags. If we
	 * don't, we can treat <div> tags as meaningful (unstyled) blocks.
	 */
	function containsSemanticBlockMarkup(html, blockTags) {
	  return blockTags.some(function (tag) {
	    return html.indexOf('<' + tag) !== -1;
	  });
	}

	function hasValidLinkText(link) {
	  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : void 0;
	  var protocol = link.protocol;
	  return protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';
	}

	function genFragment(entityMap, node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity) {
	  var nodeName = node.nodeName.toLowerCase();
	  var newBlock = false;
	  var nextBlockType = 'unstyled';
	  var lastLastBlock = lastBlock;
	  var newEntityMap = entityMap;

	  // Base Case
	  if (nodeName === '#text') {
	    var text = node.textContent;
	    if (text.trim() === '' && inBlock !== 'pre') {
	      return { chunk: getWhitespaceChunk(inEntity), entityMap: entityMap };
	    }
	    if (inBlock !== 'pre') {
	      // Can't use empty string because MSWord
	      text = text.replace(REGEX_LF, SPACE);
	    }

	    // save the last block so we can use it later
	    lastBlock = nodeName;

	    return {
	      chunk: {
	        text: text,
	        inlines: Array(text.length).fill(inlineStyle),
	        entities: Array(text.length).fill(inEntity),
	        blocks: []
	      },
	      entityMap: entityMap
	    };
	  }

	  // save the last block so we can use it later
	  lastBlock = nodeName;

	  // BR tags
	  if (nodeName === 'br') {
	    if (lastLastBlock === 'br' && (!inBlock || getBlockTypeForTag(inBlock, lastList, blockRenderMap) === 'unstyled')) {
	      return { chunk: getBlockDividerChunk('unstyled', depth), entityMap: entityMap };
	    }
	    return { chunk: getSoftNewlineChunk(), entityMap: entityMap };
	  }

	  // IMG tags
	  if (nodeName === 'img' && node instanceof HTMLImageElement && node.attributes.getNamedItem('src') && node.attributes.getNamedItem('src').value) {
	    (function () {
	      var image = node;
	      var entityConfig = {};

	      imgAttr.forEach(function (attr) {
	        var imageAttribute = image.getAttribute(attr);
	        if (imageAttribute) {
	          entityConfig[attr] = imageAttribute;
	        }
	      });
	      var imageURI = new URI(entityConfig.src).toString();
	      node.textContent = imageURI; // Output src if no decorator

	      // TODO: update this when we remove DraftEntity entirely
	      inEntity = DraftEntity.__create('IMAGE', 'MUTABLE', entityConfig || {});
	    })();
	  }

	  var chunk = getEmptyChunk();
	  var newChunk = null;

	  // Inline tags
	  inlineStyle = processInlineTag(nodeName, node, inlineStyle);

	  // Handle lists
	  if (nodeName === 'ul' || nodeName === 'ol') {
	    if (lastList) {
	      depth += 1;
	    }
	    lastList = nodeName;
	  }

	  // Block Tags
	  if (!inBlock && blockTags.indexOf(nodeName) !== -1) {
	    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);
	    inBlock = nodeName;
	    newBlock = true;
	  } else if (lastList && inBlock === 'li' && nodeName === 'li') {
	    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);
	    inBlock = nodeName;
	    newBlock = true;
	    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';
	  }

	  // Recurse through children
	  var child = node.firstChild;
	  if (child != null) {
	    nodeName = child.nodeName.toLowerCase();
	  }

	  var entityId = null;

	  while (child) {
	    if (child instanceof HTMLAnchorElement && child.href && hasValidLinkText(child)) {
	      (function () {
	        var anchor = child;
	        var entityConfig = {};

	        anchorAttr.forEach(function (attr) {
	          var anchorAttribute = anchor.getAttribute(attr);
	          if (anchorAttribute) {
	            entityConfig[attr] = anchorAttribute;
	          }
	        });

	        entityConfig.url = new URI(anchor.href).toString();
	        // TODO: update this when we remove DraftEntity completely
	        entityId = DraftEntity.__create('LINK', 'MUTABLE', entityConfig || {});
	      })();
	    } else {
	      entityId = undefined;
	    }

	    var _genFragment = genFragment(newEntityMap, child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity);

	    var generatedChunk = _genFragment.chunk;
	    var maybeUpdatedEntityMap = _genFragment.entityMap;


	    newChunk = generatedChunk;
	    newEntityMap = maybeUpdatedEntityMap;

	    chunk = joinChunks(chunk, newChunk);
	    var sibling = child.nextSibling;

	    // Put in a newline to break up blocks inside blocks
	    if (sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {
	      chunk = joinChunks(chunk, getSoftNewlineChunk());
	    }
	    if (sibling) {
	      nodeName = sibling.nodeName.toLowerCase();
	    }
	    child = sibling;
	  }

	  if (newBlock) {
	    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth));
	  }

	  return { chunk: chunk, entityMap: newEntityMap };
	}

	function getChunkForHTML(html, DOMBuilder, blockRenderMap, entityMap) {
	  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, '');

	  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);

	  var safeBody = DOMBuilder(html);
	  if (!safeBody) {
	    return null;
	  }
	  lastBlock = null;

	  // Sometimes we aren't dealing with content that contains nice semantic
	  // tags. In this case, use divs to separate everything out into paragraphs
	  // and hope for the best.
	  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div'];

	  // Start with -1 block depth to offset the fact that we are passing in a fake
	  // UL block to start with.

	  var _genFragment2 = genFragment(entityMap, safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap);

	  var chunk = _genFragment2.chunk;
	  var newEntityMap = _genFragment2.entityMap;

	  // join with previous block to prevent weirdness on paste

	  if (chunk.text.indexOf('\r') === 0) {
	    chunk = {
	      text: chunk.text.slice(1),
	      inlines: chunk.inlines.slice(1),
	      entities: chunk.entities.slice(1),
	      blocks: chunk.blocks
	    };
	  }

	  // Kill block delimiter at the end
	  if (chunk.text.slice(-1) === '\r') {
	    chunk.text = chunk.text.slice(0, -1);
	    chunk.inlines = chunk.inlines.slice(0, -1);
	    chunk.entities = chunk.entities.slice(0, -1);
	    chunk.blocks.pop();
	  }

	  // If we saw no block tags, put an unstyled one in
	  if (chunk.blocks.length === 0) {
	    chunk.blocks.push({ type: 'unstyled', depth: 0 });
	  }

	  // Sometimes we start with text that isn't in a block, which is then
	  // followed by blocks. Need to fix up the blocks to add in
	  // an unstyled block for this content
	  if (chunk.text.split('\r').length === chunk.blocks.length + 1) {
	    chunk.blocks.unshift({ type: 'unstyled', depth: 0 });
	  }

	  return { chunk: chunk, entityMap: newEntityMap };
	}

	function convertFromHTMLtoContentBlocks(html) {
	  var DOMBuilder = arguments.length <= 1 || arguments[1] === undefined ? getSafeBodyFromHTML : arguments[1];
	  var blockRenderMap = arguments.length <= 2 || arguments[2] === undefined ? DefaultDraftBlockRenderMap : arguments[2];

	  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute
	  // arbitrary code in whatever environment you're running this in. For an
	  // example of how we try to do this in-browser, see getSafeBodyFromHTML.

	  // TODO: replace DraftEntity with an OrderedMap here
	  var chunkData = getChunkForHTML(html, DOMBuilder, blockRenderMap, DraftEntity);

	  if (chunkData == null) {
	    return null;
	  }

	  var chunk = chunkData.chunk;
	  var newEntityMap = chunkData.entityMap;


	  var start = 0;
	  return {
	    contentBlocks: chunk.text.split('\r').map(function (textBlock, ii) {
	      // Make absolutely certain that our text is acceptable.
	      textBlock = sanitizeDraftText(textBlock);
	      var end = start + textBlock.length;
	      var inlines = nullthrows(chunk).inlines.slice(start, end);
	      var entities = nullthrows(chunk).entities.slice(start, end);
	      var characterList = List(inlines.map(function (style, ii) {
	        var data = { style: style, entity: null };
	        if (entities[ii]) {
	          data.entity = entities[ii];
	        }
	        return CharacterMetadata.create(data);
	      }));
	      start = end + 1;

	      return new ContentBlock({
	        key: generateRandomKey(),
	        type: nullthrows(chunk).blocks[ii].type,
	        depth: nullthrows(chunk).blocks[ii].depth,
	        text: textBlock,
	        characterList: characterList
	      });
	    }),
	    entityMap: newEntityMap
	  };
	}

	module.exports = convertFromHTMLtoContentBlocks;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 312 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var URI = function () {
	  function URI(uri) {
	    _classCallCheck(this, URI);

	    this._uri = uri;
	  }

	  URI.prototype.toString = function toString() {
	    return this._uri;
	  };

	  return URI;
	}();

	module.exports = URI;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getSafeBodyFromHTML
	 * 
	 */

	'use strict';

	var UserAgent = __webpack_require__(240);

	var isOldIE = UserAgent.isBrowser('IE <= 9');

	// Provides a dom node that will not execute scripts
	// https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument
	// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM

	function getSafeBodyFromHTML(html) {
	  var doc;
	  var root = null;
	  // Provides a safe context
	  if (!isOldIE && document.implementation && document.implementation.createHTMLDocument) {
	    doc = document.implementation.createHTMLDocument('foo');
	    doc.documentElement.innerHTML = html;
	    root = doc.getElementsByTagName('body')[0];
	  }
	  return root;
	}

	module.exports = getSafeBodyFromHTML;

/***/ },
/* 314 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule splitTextIntoTextBlocks
	 * 
	 */

	'use strict';

	var NEWLINE_REGEX = /\r\n?|\n/g;

	function splitTextIntoTextBlocks(text) {
	  return text.split(NEWLINE_REGEX);
	}

	module.exports = splitTextIntoTextBlocks;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnSelect
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(214);
	var ReactDOM = __webpack_require__(32);

	var getDraftEditorSelection = __webpack_require__(316);

	function editOnSelect(editor) {
	  if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {
	    return;
	  }

	  var editorState = editor.props.editorState;
	  var documentSelection = getDraftEditorSelection(editorState, ReactDOM.findDOMNode(editor.refs.editorContainer).firstChild);
	  var updatedSelectionState = documentSelection.selectionState;

	  if (updatedSelectionState !== editorState.getSelection()) {
	    if (documentSelection.needsRecovery) {
	      editorState = EditorState.forceSelection(editorState, updatedSelectionState);
	    } else {
	      editorState = EditorState.acceptSelection(editorState, updatedSelectionState);
	    }
	    editor.update(editorState);
	  }
	}

	module.exports = editOnSelect;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getDraftEditorSelection
	 * @typechecks
	 * 
	 */

	'use strict';

	var getDraftEditorSelectionWithNodes = __webpack_require__(294);

	/**
	 * Convert the current selection range to an anchor/focus pair of offset keys
	 * and values that can be interpreted by components.
	 */
	function getDraftEditorSelection(editorState, root) {
	  var selection = global.getSelection();

	  // No active selection.
	  if (selection.rangeCount === 0) {
	    return {
	      selectionState: editorState.getSelection().set('hasFocus', false),
	      needsRecovery: false
	    };
	  }

	  return getDraftEditorSelectionWithNodes(editorState, root, selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	}

	module.exports = getDraftEditorSelection;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorPlaceholder.react
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(1);

	var cx = __webpack_require__(229);

	/**
	 * This component is responsible for rendering placeholder text for the
	 * `DraftEditor` component.
	 *
	 * Override placeholder style via CSS.
	 */
	var DraftEditorPlaceholder = function (_React$Component) {
	  _inherits(DraftEditorPlaceholder, _React$Component);

	  function DraftEditorPlaceholder() {
	    _classCallCheck(this, DraftEditorPlaceholder);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DraftEditorPlaceholder.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return this.props.text !== nextProps.text || this.props.editorState.getSelection().getHasFocus() !== nextProps.editorState.getSelection().getHasFocus();
	  };

	  DraftEditorPlaceholder.prototype.render = function render() {
	    var hasFocus = this.props.editorState.getSelection().getHasFocus();

	    var className = cx({
	      'public/DraftEditorPlaceholder/root': true,
	      'public/DraftEditorPlaceholder/hasFocus': hasFocus
	    });

	    return React.createElement(
	      'div',
	      { className: className },
	      React.createElement(
	        'div',
	        {
	          className: cx('public/DraftEditorPlaceholder/inner'),
	          id: this.props.accessibilityID },
	        this.props.text
	      )
	    );
	  };

	  return DraftEditorPlaceholder;
	}(React.Component);

	module.exports = DraftEditorPlaceholder;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getDefaultKeyBinding
	 * @typechecks
	 * 
	 */

	'use strict';

	var KeyBindingUtil = __webpack_require__(288);
	var Keys = __webpack_require__(233);
	var UserAgent = __webpack_require__(240);

	var isOSX = UserAgent.isPlatform('Mac OS X');
	var isWindows = UserAgent.isPlatform('Windows');

	// Firefox on OSX had a bug resulting in navigation instead of cursor movement.
	// This bug was fixed in Firefox 29. Feature detection is virtually impossible
	// so we just check the version number. See #342765.
	var shouldFixFirefoxMovement = isOSX && UserAgent.isBrowser('Firefox < 29');

	var hasCommandModifier = KeyBindingUtil.hasCommandModifier;
	var isCtrlKeyCommand = KeyBindingUtil.isCtrlKeyCommand;


	function shouldRemoveWord(e) {
	  return isOSX && e.altKey || isCtrlKeyCommand(e);
	}

	/**
	 * Get the appropriate undo/redo command for a Z key command.
	 */
	function getZCommand(e) {
	  if (!hasCommandModifier(e)) {
	    return null;
	  }
	  return e.shiftKey ? 'redo' : 'undo';
	}

	function getDeleteCommand(e) {
	  // Allow default "cut" behavior for Windows on Shift + Delete.
	  if (isWindows && e.shiftKey) {
	    return null;
	  }
	  return shouldRemoveWord(e) ? 'delete-word' : 'delete';
	}

	function getBackspaceCommand(e) {
	  if (hasCommandModifier(e) && isOSX) {
	    return 'backspace-to-start-of-line';
	  }
	  return shouldRemoveWord(e) ? 'backspace-word' : 'backspace';
	}

	/**
	 * Retrieve a bound key command for the given event.
	 */
	function getDefaultKeyBinding(e) {
	  switch (e.keyCode) {
	    case 66:
	      // B
	      return hasCommandModifier(e) ? 'bold' : null;
	    case 68:
	      // D
	      return isCtrlKeyCommand(e) ? 'delete' : null;
	    case 72:
	      // H
	      return isCtrlKeyCommand(e) ? 'backspace' : null;
	    case 73:
	      // I
	      return hasCommandModifier(e) ? 'italic' : null;
	    case 74:
	      // J
	      return hasCommandModifier(e) ? 'code' : null;
	    case 75:
	      // K
	      return !isWindows && isCtrlKeyCommand(e) ? 'secondary-cut' : null;
	    case 77:
	      // M
	      return isCtrlKeyCommand(e) ? 'split-block' : null;
	    case 79:
	      // O
	      return isCtrlKeyCommand(e) ? 'split-block' : null;
	    case 84:
	      // T
	      return isOSX && isCtrlKeyCommand(e) ? 'transpose-characters' : null;
	    case 85:
	      // U
	      return hasCommandModifier(e) ? 'underline' : null;
	    case 87:
	      // W
	      return isOSX && isCtrlKeyCommand(e) ? 'backspace-word' : null;
	    case 89:
	      // Y
	      if (isCtrlKeyCommand(e)) {
	        return isWindows ? 'redo' : 'secondary-paste';
	      }
	      return null;
	    case 90:
	      // Z
	      return getZCommand(e) || null;
	    case Keys.RETURN:
	      return 'split-block';
	    case Keys.DELETE:
	      return getDeleteCommand(e);
	    case Keys.BACKSPACE:
	      return getBackspaceCommand(e);
	    // LEFT/RIGHT handlers serve as a workaround for a Firefox bug.
	    case Keys.LEFT:
	      return shouldFixFirefoxMovement && hasCommandModifier(e) ? 'move-selection-to-start-of-block' : null;
	    case Keys.RIGHT:
	      return shouldFixFirefoxMovement && hasCommandModifier(e) ? 'move-selection-to-end-of-block' : null;
	    default:
	      return null;
	  }
	}

	module.exports = getDefaultKeyBinding;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule RichTextEditorUtil
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(197);
	var EditorState = __webpack_require__(214);
	var SelectionState = __webpack_require__(220);

	var adjustBlockDepthForContentState = __webpack_require__(320);
	var nullthrows = __webpack_require__(226);

	var RichTextEditorUtil = {
	  currentBlockContainsLink: function currentBlockContainsLink(editorState) {
	    var selection = editorState.getSelection();
	    var contentState = editorState.getCurrentContent();
	    var entityMap = contentState.getEntityMap();
	    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {
	      var entity = v.getEntity();
	      return !!entity && entityMap.__get(entity).getType() === 'LINK';
	    });
	  },

	  getCurrentBlockType: function getCurrentBlockType(editorState) {
	    var selection = editorState.getSelection();
	    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();
	  },

	  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {
	    return { url: uri.toString() };
	  },

	  handleKeyCommand: function handleKeyCommand(editorState, command) {
	    switch (command) {
	      case 'bold':
	        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');
	      case 'italic':
	        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');
	      case 'underline':
	        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');
	      case 'code':
	        return RichTextEditorUtil.toggleCode(editorState);
	      case 'backspace':
	      case 'backspace-word':
	      case 'backspace-to-start-of-line':
	        return RichTextEditorUtil.onBackspace(editorState);
	      case 'delete':
	      case 'delete-word':
	      case 'delete-to-end-of-block':
	        return RichTextEditorUtil.onDelete(editorState);
	      default:
	        // they may have custom editor commands; ignore those
	        return null;
	    }
	  },

	  insertSoftNewline: function insertSoftNewline(editorState) {
	    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\n', editorState.getCurrentInlineStyle(), null);

	    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');

	    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());
	  },

	  /**
	   * For collapsed selections at the start of styled blocks, backspace should
	   * just remove the existing style.
	   */
	  onBackspace: function onBackspace(editorState) {
	    var selection = editorState.getSelection();
	    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {
	      return null;
	    }

	    // First, try to remove a preceding atomic block.
	    var content = editorState.getCurrentContent();
	    var startKey = selection.getStartKey();
	    var blockBefore = content.getBlockBefore(startKey);

	    if (blockBefore && blockBefore.getType() === 'atomic') {
	      var blockMap = content.getBlockMap()['delete'](blockBefore.getKey());
	      var withoutAtomicBlock = content.merge({ blockMap: blockMap, selectionAfter: selection });
	      if (withoutAtomicBlock !== content) {
	        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');
	      }
	    }

	    // If that doesn't succeed, try to remove the current block style.
	    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);

	    if (withoutBlockStyle) {
	      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');
	    }

	    return null;
	  },

	  onDelete: function onDelete(editorState) {
	    var selection = editorState.getSelection();
	    if (!selection.isCollapsed()) {
	      return null;
	    }

	    var content = editorState.getCurrentContent();
	    var startKey = selection.getStartKey();
	    var block = content.getBlockForKey(startKey);
	    var length = block.getLength();

	    // The cursor is somewhere within the text. Behave normally.
	    if (selection.getStartOffset() < length) {
	      return null;
	    }

	    var blockAfter = content.getBlockAfter(startKey);

	    if (!blockAfter || blockAfter.getType() !== 'atomic') {
	      return null;
	    }

	    var atomicBlockTarget = selection.merge({
	      focusKey: blockAfter.getKey(),
	      focusOffset: blockAfter.getLength()
	    });

	    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');

	    if (withoutAtomicBlock !== content) {
	      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');
	    }

	    return null;
	  },

	  onTab: function onTab(event, editorState, maxDepth) {
	    var selection = editorState.getSelection();
	    var key = selection.getAnchorKey();
	    if (key !== selection.getFocusKey()) {
	      return editorState;
	    }

	    var content = editorState.getCurrentContent();
	    var block = content.getBlockForKey(key);
	    var type = block.getType();
	    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {
	      return editorState;
	    }

	    event.preventDefault();

	    // Only allow indenting one level beyond the block above, and only if
	    // the block above is a list item as well.
	    var blockAbove = content.getBlockBefore(key);
	    if (!blockAbove) {
	      return editorState;
	    }

	    var typeAbove = blockAbove.getType();
	    if (typeAbove !== 'unordered-list-item' && typeAbove !== 'ordered-list-item') {
	      return editorState;
	    }

	    var depth = block.getDepth();
	    if (!event.shiftKey && depth === maxDepth) {
	      return editorState;
	    }

	    maxDepth = Math.min(blockAbove.getDepth() + 1, maxDepth);

	    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);

	    return EditorState.push(editorState, withAdjustment, 'adjust-depth');
	  },

	  toggleBlockType: function toggleBlockType(editorState, blockType) {
	    var selection = editorState.getSelection();
	    var startKey = selection.getStartKey();
	    var endKey = selection.getEndKey();
	    var content = editorState.getCurrentContent();
	    var target = selection;

	    // Triple-click can lead to a selection that includes offset 0 of the
	    // following block. The `SelectionState` for this case is accurate, but
	    // we should avoid toggling block type for the trailing block because it
	    // is a confusing interaction.
	    if (startKey !== endKey && selection.getEndOffset() === 0) {
	      var blockBefore = nullthrows(content.getBlockBefore(endKey));
	      endKey = blockBefore.getKey();
	      target = target.merge({
	        anchorKey: startKey,
	        anchorOffset: selection.getStartOffset(),
	        focusKey: endKey,
	        focusOffset: blockBefore.getLength(),
	        isBackward: false
	      });
	    }

	    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {
	      return k !== startKey;
	    }).reverse().skipWhile(function (_, k) {
	      return k !== endKey;
	    }).some(function (v) {
	      return v.getType() === 'atomic';
	    });

	    if (hasAtomicBlock) {
	      return editorState;
	    }

	    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;

	    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');
	  },

	  toggleCode: function toggleCode(editorState) {
	    var selection = editorState.getSelection();
	    var anchorKey = selection.getAnchorKey();
	    var focusKey = selection.getFocusKey();

	    if (selection.isCollapsed() || anchorKey !== focusKey) {
	      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');
	    }

	    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');
	  },

	  /**
	   * Toggle the specified inline style for the selection. If the
	   * user's selection is collapsed, apply or remove the style for the
	   * internal state. If it is not collapsed, apply the change directly
	   * to the document state.
	   */
	  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {
	    var selection = editorState.getSelection();
	    var currentStyle = editorState.getCurrentInlineStyle();

	    // If the selection is collapsed, toggle the specified style on or off and
	    // set the result as the new inline style override. This will then be
	    // used as the inline style for the next character to be inserted.
	    if (selection.isCollapsed()) {
	      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));
	    }

	    // If characters are selected, immediately apply or remove the
	    // inline style on the document state itself.
	    var content = editorState.getCurrentContent();
	    var newContent;

	    // If the style is already present for the selection range, remove it.
	    // Otherwise, apply it.
	    if (currentStyle.has(inlineStyle)) {
	      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);
	    } else {
	      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);
	    }

	    return EditorState.push(editorState, newContent, 'change-inline-style');
	  },

	  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {
	    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);

	    return EditorState.push(editorState, withoutLink, 'apply-entity');
	  },

	  /**
	   * When a collapsed cursor is at the start of an empty styled block, allow
	   * certain key commands (newline, backspace) to simply change the
	   * style of the block instead of the default behavior.
	   */
	  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {
	    var selection = editorState.getSelection();
	    var offset = selection.getAnchorOffset();
	    if (selection.isCollapsed() && offset === 0) {
	      var key = selection.getAnchorKey();
	      var content = editorState.getCurrentContent();
	      var block = content.getBlockForKey(key);
	      if (block.getLength() > 0) {
	        return null;
	      }

	      var type = block.getType();
	      var blockBefore = content.getBlockBefore(key);
	      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block') {
	        return null;
	      }

	      if (type !== 'unstyled') {
	        return DraftModifier.setBlockType(content, selection, 'unstyled');
	      }
	    }
	    return null;
	  }
	};

	module.exports = RichTextEditorUtil;

/***/ },
/* 320 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adjustBlockDepthForContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	function adjustBlockDepthForContentState(contentState, selectionState, adjustment, maxDepth) {
	  var startKey = selectionState.getStartKey();
	  var endKey = selectionState.getEndKey();
	  var blockMap = contentState.getBlockMap();
	  var blocks = blockMap.toSeq().skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat([[endKey, blockMap.get(endKey)]]).map(function (block) {
	    var depth = block.getDepth() + adjustment;
	    depth = Math.max(0, Math.min(depth, maxDepth));
	    return block.set('depth', depth);
	  });

	  blockMap = blockMap.merge(blocks);

	  return contentState.merge({
	    blockMap: blockMap,
	    selectionBefore: selectionState,
	    selectionAfter: selectionState
	  });
	}

	module.exports = adjustBlockDepthForContentState;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule convertFromDraftStateToRaw
	 * 
	 */

	'use strict';

	var DraftStringKey = __webpack_require__(322);

	var encodeEntityRanges = __webpack_require__(323);
	var encodeInlineStyleRanges = __webpack_require__(324);

	function convertFromDraftStateToRaw(contentState) {
	  var entityStorageKey = 0;
	  var entityStorageMap = {};
	  var rawBlocks = [];

	  contentState.getBlockMap().forEach(function (block, blockKey) {
	    block.findEntityRanges(function (character) {
	      return character.getEntity() !== null;
	    }, function (start) {
	      // Stringify to maintain order of otherwise numeric keys.
	      var stringifiedEntityKey = DraftStringKey.stringify(block.getEntityAt(start));
	      if (!entityStorageMap.hasOwnProperty(stringifiedEntityKey)) {
	        entityStorageMap[stringifiedEntityKey] = '' + entityStorageKey++;
	      }
	    });

	    rawBlocks.push({
	      key: blockKey,
	      text: block.getText(),
	      type: block.getType(),
	      depth: block.getDepth(),
	      inlineStyleRanges: encodeInlineStyleRanges(block),
	      entityRanges: encodeEntityRanges(block, entityStorageMap),
	      data: block.getData().toObject()
	    });
	  });

	  // Flip storage map so that our storage keys map to global
	  // DraftEntity keys.
	  var entityKeys = Object.keys(entityStorageMap);
	  var flippedStorageMap = {};
	  entityKeys.forEach(function (key, jj) {
	    var entity = contentState.getEntity(DraftStringKey.unstringify(key));
	    flippedStorageMap[jj] = {
	      type: entity.getType(),
	      mutability: entity.getMutability(),
	      data: entity.getData()
	    };
	  });

	  return {
	    entityMap: flippedStorageMap,
	    blocks: rawBlocks
	  };
	}

	module.exports = convertFromDraftStateToRaw;

/***/ },
/* 322 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftStringKey
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftStringKey = {
	  stringify: function stringify(key) {
	    return '_' + String(key);
	  },

	  unstringify: function unstringify(key) {
	    return key.slice(1);
	  }
	};

	module.exports = DraftStringKey;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule encodeEntityRanges
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftStringKey = __webpack_require__(322);
	var UnicodeUtils = __webpack_require__(292);

	var strlen = UnicodeUtils.strlen;

	/**
	 * Convert to UTF-8 character counts for storage.
	 */

	function encodeEntityRanges(block, storageMap) {
	  var encoded = [];
	  block.findEntityRanges(function (character) {
	    return !!character.getEntity();
	  }, function ( /*number*/start, /*number*/end) {
	    var text = block.getText();
	    var key = block.getEntityAt(start);
	    encoded.push({
	      offset: strlen(text.slice(0, start)),
	      length: strlen(text.slice(start, end)),
	      // Encode the key as a number for range storage.
	      key: Number(storageMap[DraftStringKey.stringify(key)])
	    });
	  });
	  return encoded;
	}

	module.exports = encodeEntityRanges;

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule encodeInlineStyleRanges
	 * 
	 */

	'use strict';

	var UnicodeUtils = __webpack_require__(292);

	var findRangesImmutable = __webpack_require__(196);

	var areEqual = function areEqual(a, b) {
	  return a === b;
	};
	var isTruthy = function isTruthy(a) {
	  return !!a;
	};
	var EMPTY_ARRAY = [];

	/**
	 * Helper function for getting encoded styles for each inline style. Convert
	 * to UTF-8 character counts for storage.
	 */
	function getEncodedInlinesForType(block, styleList, styleToEncode) {
	  var ranges = [];

	  // Obtain an array with ranges for only the specified style.
	  var filteredInlines = styleList.map(function (style) {
	    return style.has(styleToEncode);
	  }).toList();

	  findRangesImmutable(filteredInlines, areEqual,
	  // We only want to keep ranges with nonzero style values.
	  isTruthy, function (start, end) {
	    var text = block.getText();
	    ranges.push({
	      offset: UnicodeUtils.strlen(text.slice(0, start)),
	      length: UnicodeUtils.strlen(text.slice(start, end)),
	      style: styleToEncode
	    });
	  });

	  return ranges;
	}

	/*
	 * Retrieve the encoded arrays of inline styles, with each individual style
	 * treated separately.
	 */
	function encodeInlineStyleRanges(block) {
	  var styleList = block.getCharacterList().map(function (c) {
	    return c.getStyle();
	  }).toList();
	  var ranges = styleList.flatten().toSet().map(function (style) {
	    return getEncodedInlinesForType(block, styleList, style);
	  });

	  return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());
	}

	module.exports = encodeInlineStyleRanges;

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule convertFromRawToDraftState
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var ContentBlock = __webpack_require__(195);
	var ContentState = __webpack_require__(217);
	var DraftEntity = __webpack_require__(218);

	var createCharacterList = __webpack_require__(326);
	var decodeEntityRanges = __webpack_require__(327);
	var decodeInlineStyleRanges = __webpack_require__(328);
	var generateRandomKey = __webpack_require__(206);
	var Immutable = __webpack_require__(193);

	var Map = Immutable.Map;


	function convertFromRawToDraftState(rawState) {
	  var blocks = rawState.blocks;
	  var entityMap = rawState.entityMap;


	  var fromStorageToLocal = {};

	  // TODO: Update this once we completely remove DraftEntity
	  Object.keys(entityMap).forEach(function (storageKey) {
	    var encodedEntity = entityMap[storageKey];
	    var type = encodedEntity.type;
	    var mutability = encodedEntity.mutability;
	    var data = encodedEntity.data;

	    var newKey = DraftEntity.__create(type, mutability, data || {});
	    fromStorageToLocal[storageKey] = newKey;
	  });

	  var contentBlocks = blocks.map(function (block) {
	    var key = block.key;
	    var type = block.type;
	    var text = block.text;
	    var depth = block.depth;
	    var inlineStyleRanges = block.inlineStyleRanges;
	    var entityRanges = block.entityRanges;
	    var data = block.data;

	    key = key || generateRandomKey();
	    depth = depth || 0;
	    inlineStyleRanges = inlineStyleRanges || [];
	    entityRanges = entityRanges || [];
	    data = Map(data);

	    var inlineStyles = decodeInlineStyleRanges(text, inlineStyleRanges);

	    // Translate entity range keys to the DraftEntity map.
	    var filteredEntityRanges = entityRanges.filter(function (range) {
	      return fromStorageToLocal.hasOwnProperty(range.key);
	    }).map(function (range) {
	      return _extends({}, range, { key: fromStorageToLocal[range.key] });
	    });

	    var entities = decodeEntityRanges(text, filteredEntityRanges);
	    var characterList = createCharacterList(inlineStyles, entities);

	    return new ContentBlock({ key: key, type: type, text: text, depth: depth, characterList: characterList, data: data });
	  });

	  return ContentState.createFromBlockArray(contentBlocks);
	}

	module.exports = convertFromRawToDraftState;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createCharacterList
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(194);
	var Immutable = __webpack_require__(193);

	var List = Immutable.List;


	function createCharacterList(inlineStyles, entities) {
	  var characterArray = inlineStyles.map(function (style, ii) {
	    var entity = entities[ii];
	    return CharacterMetadata.create({ style: style, entity: entity });
	  });
	  return List(characterArray);
	}

	module.exports = createCharacterList;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule decodeEntityRanges
	 * @typechecks
	 * 
	 */

	'use strict';

	var UnicodeUtils = __webpack_require__(292);

	var substr = UnicodeUtils.substr;

	/**
	 * Convert to native JavaScript string lengths to determine ranges.
	 */

	function decodeEntityRanges(text, ranges) {
	  var entities = Array(text.length).fill(null);
	  if (ranges) {
	    ranges.forEach(function (range) {
	      // Using Unicode-enabled substrings converted to JavaScript lengths,
	      // fill the output array with entity keys.
	      var start = substr(text, 0, range.offset).length;
	      var end = start + substr(text, range.offset, range.length).length;
	      for (var ii = start; ii < end; ii++) {
	        entities[ii] = range.key;
	      }
	    });
	  }
	  return entities;
	}

	module.exports = decodeEntityRanges;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule decodeInlineStyleRanges
	 * @typechecks
	 * 
	 */

	'use strict';

	var UnicodeUtils = __webpack_require__(292);

	var _require = __webpack_require__(193);

	var OrderedSet = _require.OrderedSet;
	var substr = UnicodeUtils.substr;


	var EMPTY_SET = OrderedSet();

	/**
	 * Convert to native JavaScript string lengths to determine ranges.
	 */
	function decodeInlineStyleRanges(text, ranges) {
	  var styles = Array(text.length).fill(EMPTY_SET);
	  if (ranges) {
	    ranges.forEach(function ( /*object*/range) {
	      var cursor = substr(text, 0, range.offset).length;
	      var end = cursor + substr(text, range.offset, range.length).length;
	      while (cursor < end) {
	        styles[cursor] = styles[cursor].add(range.style);
	        cursor++;
	      }
	    });
	  }
	  return styles;
	}

	module.exports = decodeInlineStyleRanges;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVisibleSelectionRect
	 * @typechecks
	 * 
	 */

	'use strict';

	var getRangeBoundingClientRect = __webpack_require__(330);

	/**
	 * Return the bounding ClientRect for the visible DOM selection, if any.
	 * In cases where there are no selected ranges or the bounding rect is
	 * temporarily invalid, return null.
	 */
	function getVisibleSelectionRect(global) {
	  var selection = global.getSelection();
	  if (!selection.rangeCount) {
	    return null;
	  }

	  var range = selection.getRangeAt(0);
	  var boundingRect = getRangeBoundingClientRect(range);
	  var top = boundingRect.top;
	  var right = boundingRect.right;
	  var bottom = boundingRect.bottom;
	  var left = boundingRect.left;

	  // When a re-render leads to a node being removed, the DOM selection will
	  // temporarily be placed on an ancestor node, which leads to an invalid
	  // bounding rect. Discard this state.

	  if (top === 0 && right === 0 && bottom === 0 && left === 0) {
	    return null;
	  }

	  return boundingRect;
	}

	module.exports = getVisibleSelectionRect;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getRangeBoundingClientRect
	 * @typechecks
	 * 
	 */

	'use strict';

	var getRangeClientRects = __webpack_require__(293);

	/**
	 * Like range.getBoundingClientRect() but normalizes for browser bugs.
	 */
	function getRangeBoundingClientRect(range) {
	  // "Return a DOMRect object describing the smallest rectangle that includes
	  // the first rectangle in list and all of the remaining rectangles of which
	  // the height or width is not zero."
	  // http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect
	  var rects = getRangeClientRects(range);
	  var top = 0;
	  var right = 0;
	  var bottom = 0;
	  var left = 0;

	  if (rects.length) {
	    var _rects$ = rects[0];
	    top = _rects$.top;
	    right = _rects$.right;
	    bottom = _rects$.bottom;
	    left = _rects$.left;

	    for (var ii = 1; ii < rects.length; ii++) {
	      var rect = rects[ii];
	      if (rect.height !== 0 || rect.width !== 0) {
	        top = Math.min(top, rect.top);
	        right = Math.max(right, rect.right);
	        bottom = Math.max(bottom, rect.bottom);
	        left = Math.min(left, rect.left);
	      }
	    }
	  }

	  return {
	    top: top,
	    right: right,
	    bottom: bottom,
	    left: left,
	    width: right - left,
	    height: bottom - top
	  };
	}

	module.exports = getRangeBoundingClientRect;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.arrayMove = exports.sortableHandle = exports.sortableElement = exports.sortableContainer = exports.SortableHandle = exports.SortableElement = exports.SortableContainer = undefined;

	var _utils = __webpack_require__(332);

	Object.defineProperty(exports, 'arrayMove', {
	  enumerable: true,
	  get: function get() {
	    return _utils.arrayMove;
	  }
	});

	var _SortableContainer2 = __webpack_require__(333);

	var _SortableContainer3 = _interopRequireDefault(_SortableContainer2);

	var _SortableElement2 = __webpack_require__(483);

	var _SortableElement3 = _interopRequireDefault(_SortableElement2);

	var _SortableHandle2 = __webpack_require__(484);

	var _SortableHandle3 = _interopRequireDefault(_SortableHandle2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.SortableContainer = _SortableContainer3.default;
	exports.SortableElement = _SortableElement3.default;
	exports.SortableHandle = _SortableHandle3.default;
	exports.sortableContainer = _SortableContainer3.default;
	exports.sortableElement = _SortableElement3.default;
	exports.sortableHandle = _SortableHandle3.default;

/***/ },
/* 332 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.arrayMove = arrayMove;
	exports.omit = omit;
	exports.closest = closest;
	exports.limit = limit;
	exports.getElementMargin = getElementMargin;
	exports.provideDisplayName = provideDisplayName;
	function arrayMove(arr, previousIndex, newIndex) {
	  var array = arr.slice(0);
	  if (newIndex >= array.length) {
	    var k = newIndex - array.length;
	    while (k-- + 1) {
	      array.push(undefined);
	    }
	  }
	  array.splice(newIndex, 0, array.splice(previousIndex, 1)[0]);
	  return array;
	}

	function omit(obj) {
	  for (var _len = arguments.length, keysToOmit = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    keysToOmit[_key - 1] = arguments[_key];
	  }

	  return Object.keys(obj).reduce(function (acc, key) {
	    if (keysToOmit.indexOf(key) === -1) acc[key] = obj[key];
	    return acc;
	  }, {});
	}

	var events = exports.events = {
	  start: ['touchstart', 'mousedown'],
	  move: ['touchmove', 'mousemove'],
	  end: ['touchend', 'touchcancel', 'mouseup']
	};

	var vendorPrefix = exports.vendorPrefix = function () {
	  if (typeof window === 'undefined' || typeof document === 'undefined') return ''; // server environment
	  // fix for:
	  //    https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	  //    window.getComputedStyle() returns null inside an iframe with display: none
	  // in this case return an array with a fake mozilla style in it.
	  var styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];
	  var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];

	  switch (pre) {
	    case 'ms':
	      return 'ms';
	    default:
	      return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';
	  }
	}();

	function closest(el, fn) {
	  while (el) {
	    if (fn(el)) return el;
	    el = el.parentNode;
	  }
	}

	function limit(min, max, value) {
	  if (value < min) {
	    return min;
	  }
	  if (value > max) {
	    return max;
	  }
	  return value;
	}

	function getCSSPixelValue(stringValue) {
	  if (stringValue.substr(-2) === 'px') {
	    return parseFloat(stringValue);
	  }
	  return 0;
	}

	function getElementMargin(element) {
	  var style = window.getComputedStyle(element);

	  return {
	    top: getCSSPixelValue(style.marginTop),
	    right: getCSSPixelValue(style.marginRight),
	    bottom: getCSSPixelValue(style.marginBottom),
	    left: getCSSPixelValue(style.marginLeft)
	  };
	}

	function provideDisplayName(prefix, Component) {
	  var componentName = Component.displayName || Component.name;

	  return componentName ? prefix + '(' + componentName + ')' : prefix;
	}

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = sortableContainer;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(334);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(32);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Manager = __webpack_require__(343);

	var _Manager2 = _interopRequireDefault(_Manager);

	var _utils = __webpack_require__(332);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// Export Higher Order Sortable Container Component
	function sortableContainer(WrappedComponent) {
	  var _class, _temp;

	  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { withRef: false };

	  return _temp = _class = function (_Component) {
	    _inherits(_class, _Component);

	    function _class(props) {
	      _classCallCheck(this, _class);

	      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

	      _this.handleStart = function (e) {
	        var _this$props = _this.props,
	            distance = _this$props.distance,
	            shouldCancelStart = _this$props.shouldCancelStart;


	        if (e.button === 2 || shouldCancelStart(e)) {
	          return false;
	        }

	        _this._touched = true;
	        _this._pos = {
	          x: e.clientX,
	          y: e.clientY
	        };

	        var node = (0, _utils.closest)(e.target, function (el) {
	          return el.sortableInfo != null;
	        });

	        if (node && node.sortableInfo && _this.nodeIsChild(node) && !_this.state.sorting) {
	          var useDragHandle = _this.props.useDragHandle;
	          var _node$sortableInfo = node.sortableInfo,
	              index = _node$sortableInfo.index,
	              collection = _node$sortableInfo.collection;


	          if (useDragHandle && !(0, _utils.closest)(e.target, function (el) {
	            return el.sortableHandle != null;
	          })) return;

	          _this.manager.active = { index: index, collection: collection };

	          /*
	          * Fixes a bug in Firefox where the :active state of anchor tags
	          * prevent subsequent 'mousemove' events from being fired
	          * (see https://github.com/clauderic/react-sortable-hoc/issues/118)
	          */
	          if (e.target.tagName.toLowerCase() === 'a') {
	            e.preventDefault();
	          }

	          if (!distance) {
	            if (_this.props.pressDelay === 0) {
	              _this.handlePress(e);
	            } else {
	              _this.pressTimer = setTimeout(function () {
	                return _this.handlePress(e);
	              }, _this.props.pressDelay);
	            }
	          }
	        }
	      };

	      _this.nodeIsChild = function (node) {
	        return node.sortableInfo.manager === _this.manager;
	      };

	      _this.handleMove = function (e) {
	        var _this$props2 = _this.props,
	            distance = _this$props2.distance,
	            pressThreshold = _this$props2.pressThreshold;


	        if (!_this.state.sorting && _this._touched) {
	          _this._delta = {
	            x: _this._pos.x - e.clientX,
	            y: _this._pos.y - e.clientY
	          };
	          var delta = Math.abs(_this._delta.x) + Math.abs(_this._delta.y);

	          if (!distance && (!pressThreshold || pressThreshold && delta >= pressThreshold)) {
	            clearTimeout(_this.cancelTimer);
	            _this.cancelTimer = setTimeout(_this.cancel, 0);
	          } else if (distance && delta >= distance && _this.manager.isActive()) {
	            _this.handlePress(e);
	          }
	        }
	      };

	      _this.handleEnd = function () {
	        var distance = _this.props.distance;


	        _this._touched = false;

	        if (!distance) {
	          _this.cancel();
	        }
	      };

	      _this.cancel = function () {
	        if (!_this.state.sorting) {
	          clearTimeout(_this.pressTimer);
	          _this.manager.active = null;
	        }
	      };

	      _this.handlePress = function (e) {
	        var active = _this.manager.getActive();

	        if (active) {
	          var _this$props3 = _this.props,
	              axis = _this$props3.axis,
	              getHelperDimensions = _this$props3.getHelperDimensions,
	              helperClass = _this$props3.helperClass,
	              hideSortableGhost = _this$props3.hideSortableGhost,
	              onSortStart = _this$props3.onSortStart,
	              useWindowAsScrollContainer = _this$props3.useWindowAsScrollContainer;
	          var node = active.node,
	              collection = active.collection;
	          var index = node.sortableInfo.index;

	          var margin = (0, _utils.getElementMargin)(node);

	          var containerBoundingRect = _this.container.getBoundingClientRect();
	          var dimensions = getHelperDimensions({ index: index, node: node, collection: collection });

	          _this.node = node;
	          _this.margin = margin;
	          _this.width = dimensions.width;
	          _this.height = dimensions.height;
	          _this.marginOffset = {
	            x: _this.margin.left + _this.margin.right,
	            y: Math.max(_this.margin.top, _this.margin.bottom)
	          };
	          _this.boundingClientRect = node.getBoundingClientRect();
	          _this.containerBoundingRect = containerBoundingRect;
	          _this.index = index;
	          _this.newIndex = index;

	          _this.axis = {
	            x: axis.indexOf('x') >= 0,
	            y: axis.indexOf('y') >= 0
	          };
	          _this.offsetEdge = _this.getEdgeOffset(node);
	          _this.initialOffset = _this.getOffset(e);
	          _this.initialScroll = {
	            top: _this.scrollContainer.scrollTop,
	            left: _this.scrollContainer.scrollLeft
	          };

	          var fields = node.querySelectorAll('input, textarea, select');
	          var clonedNode = node.cloneNode(true);
	          var clonedFields = [].concat(_toConsumableArray(clonedNode.querySelectorAll('input, textarea, select'))); // Convert NodeList to Array

	          clonedFields.forEach(function (field, index) {
	            return field.value = fields[index] && fields[index].value;
	          });

	          _this.helper = _this.document.body.appendChild(clonedNode);

	          _this.helper.style.position = 'fixed';
	          _this.helper.style.top = _this.boundingClientRect.top - margin.top + 'px';
	          _this.helper.style.left = _this.boundingClientRect.left - margin.left + 'px';
	          _this.helper.style.width = _this.width + 'px';
	          _this.helper.style.height = _this.height + 'px';
	          _this.helper.style.boxSizing = 'border-box';
	          _this.helper.style.pointerEvents = 'none';

	          if (hideSortableGhost) {
	            _this.sortableGhost = node;
	            node.style.visibility = 'hidden';
	            node.style.opacity = 0;
	          }

	          _this.minTranslate = {};
	          _this.maxTranslate = {};
	          if (_this.axis.x) {
	            _this.minTranslate.x = (useWindowAsScrollContainer ? 0 : containerBoundingRect.left) - _this.boundingClientRect.left - _this.width / 2;
	            _this.maxTranslate.x = (useWindowAsScrollContainer ? _this.contentWindow.innerWidth : containerBoundingRect.left + containerBoundingRect.width) - _this.boundingClientRect.left - _this.width / 2;
	          }
	          if (_this.axis.y) {
	            _this.minTranslate.y = (useWindowAsScrollContainer ? 0 : containerBoundingRect.top) - _this.boundingClientRect.top - _this.height / 2;
	            _this.maxTranslate.y = (useWindowAsScrollContainer ? _this.contentWindow.innerHeight : containerBoundingRect.top + containerBoundingRect.height) - _this.boundingClientRect.top - _this.height / 2;
	          }

	          if (helperClass) {
	            var _this$helper$classLis;

	            (_this$helper$classLis = _this.helper.classList).add.apply(_this$helper$classLis, _toConsumableArray(helperClass.split(' ')));
	          }

	          _this.listenerNode = e.touches ? node : _this.contentWindow;
	          _utils.events.move.forEach(function (eventName) {
	            return _this.listenerNode.addEventListener(eventName, _this.handleSortMove, false);
	          });
	          _utils.events.end.forEach(function (eventName) {
	            return _this.listenerNode.addEventListener(eventName, _this.handleSortEnd, false);
	          });

	          _this.setState({
	            sorting: true,
	            sortingIndex: index
	          });

	          if (onSortStart) onSortStart({ node: node, index: index, collection: collection }, e);
	        }
	      };

	      _this.handleSortMove = function (e) {
	        var onSortMove = _this.props.onSortMove;

	        e.preventDefault(); // Prevent scrolling on mobile

	        _this.updatePosition(e);
	        _this.animateNodes();
	        _this.autoscroll();

	        if (onSortMove) onSortMove(e);
	      };

	      _this.handleSortEnd = function (e) {
	        var _this$props4 = _this.props,
	            hideSortableGhost = _this$props4.hideSortableGhost,
	            onSortEnd = _this$props4.onSortEnd;
	        var collection = _this.manager.active.collection;

	        // Remove the event listeners if the node is still in the DOM

	        if (_this.listenerNode) {
	          _utils.events.move.forEach(function (eventName) {
	            return _this.listenerNode.removeEventListener(eventName, _this.handleSortMove);
	          });
	          _utils.events.end.forEach(function (eventName) {
	            return _this.listenerNode.removeEventListener(eventName, _this.handleSortEnd);
	          });
	        }

	        // Remove the helper from the DOM
	        _this.helper.parentNode.removeChild(_this.helper);

	        if (hideSortableGhost && _this.sortableGhost) {
	          _this.sortableGhost.style.visibility = '';
	          _this.sortableGhost.style.opacity = '';
	        }

	        var nodes = _this.manager.refs[collection];
	        for (var i = 0, len = nodes.length; i < len; i++) {
	          var node = nodes[i];
	          var el = node.node;

	          // Clear the cached offsetTop / offsetLeft value
	          node.edgeOffset = null;

	          // Remove the transforms / transitions
	          el.style[_utils.vendorPrefix + 'Transform'] = '';
	          el.style[_utils.vendorPrefix + 'TransitionDuration'] = '';
	        }

	        // Stop autoscroll
	        clearInterval(_this.autoscrollInterval);
	        _this.autoscrollInterval = null;

	        // Update state
	        _this.manager.active = null;

	        _this.setState({
	          sorting: false,
	          sortingIndex: null
	        });

	        if (typeof onSortEnd === 'function') {
	          onSortEnd({
	            oldIndex: _this.index,
	            newIndex: _this.newIndex,
	            collection: collection
	          }, e);
	        }

	        _this._touched = false;
	      };

	      _this.autoscroll = function () {
	        var translate = _this.translate;
	        var direction = {
	          x: 0,
	          y: 0
	        };
	        var speed = {
	          x: 1,
	          y: 1
	        };
	        var acceleration = {
	          x: 10,
	          y: 10
	        };

	        if (translate.y >= _this.maxTranslate.y - _this.height / 2) {
	          direction.y = 1; // Scroll Down
	          speed.y = acceleration.y * Math.abs((_this.maxTranslate.y - _this.height / 2 - translate.y) / _this.height);
	        } else if (translate.x >= _this.maxTranslate.x - _this.width / 2) {
	          direction.x = 1; // Scroll Right
	          speed.x = acceleration.x * Math.abs((_this.maxTranslate.x - _this.width / 2 - translate.x) / _this.width);
	        } else if (translate.y <= _this.minTranslate.y + _this.height / 2) {
	          direction.y = -1; // Scroll Up
	          speed.y = acceleration.y * Math.abs((translate.y - _this.height / 2 - _this.minTranslate.y) / _this.height);
	        } else if (translate.x <= _this.minTranslate.x + _this.width / 2) {
	          direction.x = -1; // Scroll Left
	          speed.x = acceleration.x * Math.abs((translate.x - _this.width / 2 - _this.minTranslate.x) / _this.width);
	        }

	        if (_this.autoscrollInterval) {
	          clearInterval(_this.autoscrollInterval);
	          _this.autoscrollInterval = null;
	          _this.isAutoScrolling = false;
	        }

	        if (direction.x !== 0 || direction.y !== 0) {
	          _this.autoscrollInterval = setInterval(function () {
	            _this.isAutoScrolling = true;
	            var offset = {
	              left: 1 * speed.x * direction.x,
	              top: 1 * speed.y * direction.y
	            };
	            _this.scrollContainer.scrollTop += offset.top;
	            _this.scrollContainer.scrollLeft += offset.left;
	            _this.translate.x += offset.left;
	            _this.translate.y += offset.top;
	            _this.animateNodes();
	          }, 5);
	        }
	      };

	      _this.manager = new _Manager2.default();
	      _this.events = {
	        start: _this.handleStart,
	        move: _this.handleMove,
	        end: _this.handleEnd
	      };

	      (0, _invariant2.default)(!(props.distance && props.pressDelay), 'Attempted to set both `pressDelay` and `distance` on SortableContainer, you may only use one or the other, not both at the same time.');

	      _this.state = {};
	      return _this;
	    }

	    _createClass(_class, [{
	      key: 'getChildContext',
	      value: function getChildContext() {
	        return {
	          manager: this.manager
	        };
	      }
	    }, {
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        var _this2 = this;

	        var _props = this.props,
	            contentWindow = _props.contentWindow,
	            getContainer = _props.getContainer,
	            useWindowAsScrollContainer = _props.useWindowAsScrollContainer;


	        this.container = typeof getContainer === 'function' ? getContainer(this.getWrappedInstance()) : (0, _reactDom.findDOMNode)(this);
	        this.document = this.container.ownerDocument || document;
	        this.scrollContainer = useWindowAsScrollContainer ? this.document.body : this.container;
	        this.contentWindow = typeof contentWindow === 'function' ? contentWindow() : contentWindow;

	        var _loop = function _loop(key) {
	          if (_this2.events.hasOwnProperty(key)) {
	            _utils.events[key].forEach(function (eventName) {
	              return _this2.container.addEventListener(eventName, _this2.events[key], false);
	            });
	          }
	        };

	        for (var key in this.events) {
	          _loop(key);
	        }
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        var _this3 = this;

	        var _loop2 = function _loop2(key) {
	          if (_this3.events.hasOwnProperty(key)) {
	            _utils.events[key].forEach(function (eventName) {
	              return _this3.container.removeEventListener(eventName, _this3.events[key]);
	            });
	          }
	        };

	        for (var key in this.events) {
	          _loop2(key);
	        }
	      }
	    }, {
	      key: 'getEdgeOffset',
	      value: function getEdgeOffset(node) {
	        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { top: 0, left: 0 };

	        // Get the actual offsetTop / offsetLeft value, no matter how deep the node is nested
	        if (node) {
	          var nodeOffset = {
	            top: offset.top + node.offsetTop,
	            left: offset.left + node.offsetLeft
	          };
	          if (node.parentNode !== this.container) {
	            return this.getEdgeOffset(node.parentNode, nodeOffset);
	          } else {
	            return nodeOffset;
	          }
	        }
	      }
	    }, {
	      key: 'getOffset',
	      value: function getOffset(e) {
	        return {
	          x: e.touches ? e.touches[0].clientX : e.clientX,
	          y: e.touches ? e.touches[0].clientY : e.clientY
	        };
	      }
	    }, {
	      key: 'getLockPixelOffsets',
	      value: function getLockPixelOffsets() {
	        var lockOffset = this.props.lockOffset;


	        if (!Array.isArray(lockOffset)) {
	          lockOffset = [lockOffset, lockOffset];
	        }

	        (0, _invariant2.default)(lockOffset.length === 2, 'lockOffset prop of SortableContainer should be a single ' + 'value or an array of exactly two values. Given %s', lockOffset);

	        var _lockOffset = lockOffset,
	            _lockOffset2 = _slicedToArray(_lockOffset, 2),
	            minLockOffset = _lockOffset2[0],
	            maxLockOffset = _lockOffset2[1];

	        return [this.getLockPixelOffset(minLockOffset), this.getLockPixelOffset(maxLockOffset)];
	      }
	    }, {
	      key: 'getLockPixelOffset',
	      value: function getLockPixelOffset(lockOffset) {
	        var offsetX = lockOffset;
	        var offsetY = lockOffset;
	        var unit = 'px';

	        if (typeof lockOffset === 'string') {
	          var match = /^[+-]?\d*(?:\.\d*)?(px|%)$/.exec(lockOffset);

	          (0, _invariant2.default)(match !== null, 'lockOffset value should be a number or a string of a ' + 'number followed by "px" or "%". Given %s', lockOffset);

	          offsetX = offsetY = parseFloat(lockOffset);
	          unit = match[1];
	        }

	        (0, _invariant2.default)(isFinite(offsetX) && isFinite(offsetY), 'lockOffset value should be a finite. Given %s', lockOffset);

	        if (unit === '%') {
	          offsetX = offsetX * this.width / 100;
	          offsetY = offsetY * this.height / 100;
	        }

	        return {
	          x: offsetX,
	          y: offsetY
	        };
	      }
	    }, {
	      key: 'updatePosition',
	      value: function updatePosition(e) {
	        var _props2 = this.props,
	            lockAxis = _props2.lockAxis,
	            lockToContainerEdges = _props2.lockToContainerEdges;

	        var offset = this.getOffset(e);
	        var translate = {
	          x: offset.x - this.initialOffset.x,
	          y: offset.y - this.initialOffset.y
	        };
	        this.translate = translate;

	        if (lockToContainerEdges) {
	          var _getLockPixelOffsets = this.getLockPixelOffsets(),
	              _getLockPixelOffsets2 = _slicedToArray(_getLockPixelOffsets, 2),
	              minLockOffset = _getLockPixelOffsets2[0],
	              maxLockOffset = _getLockPixelOffsets2[1];

	          var minOffset = {
	            x: this.width / 2 - minLockOffset.x,
	            y: this.height / 2 - minLockOffset.y
	          };
	          var maxOffset = {
	            x: this.width / 2 - maxLockOffset.x,
	            y: this.height / 2 - maxLockOffset.y
	          };

	          translate.x = (0, _utils.limit)(this.minTranslate.x + minOffset.x, this.maxTranslate.x - maxOffset.x, translate.x);
	          translate.y = (0, _utils.limit)(this.minTranslate.y + minOffset.y, this.maxTranslate.y - maxOffset.y, translate.y);
	        }

	        if (lockAxis === 'x') {
	          translate.y = 0;
	        } else if (lockAxis === 'y') {
	          translate.x = 0;
	        }

	        this.helper.style[_utils.vendorPrefix + 'Transform'] = 'translate3d(' + translate.x + 'px,' + translate.y + 'px, 0)';
	      }
	    }, {
	      key: 'animateNodes',
	      value: function animateNodes() {
	        var _props3 = this.props,
	            transitionDuration = _props3.transitionDuration,
	            hideSortableGhost = _props3.hideSortableGhost;

	        var nodes = this.manager.getOrderedRefs();
	        var deltaScroll = {
	          left: this.scrollContainer.scrollLeft - this.initialScroll.left,
	          top: this.scrollContainer.scrollTop - this.initialScroll.top
	        };
	        var sortingOffset = {
	          left: this.offsetEdge.left + this.translate.x + deltaScroll.left,
	          top: this.offsetEdge.top + this.translate.y + deltaScroll.top
	        };
	        this.newIndex = null;

	        for (var i = 0, len = nodes.length; i < len; i++) {
	          var node = nodes[i].node;

	          var index = node.sortableInfo.index;
	          var width = node.offsetWidth;
	          var height = node.offsetHeight;
	          var offset = {
	            width: this.width > width ? width / 2 : this.width / 2,
	            height: this.height > height ? height / 2 : this.height / 2
	          };
	          var translate = {
	            x: 0,
	            y: 0
	          };
	          var edgeOffset = nodes[i].edgeOffset;

	          // If we haven't cached the node's offsetTop / offsetLeft value

	          if (!edgeOffset) {
	            nodes[i].edgeOffset = edgeOffset = this.getEdgeOffset(node);
	          }

	          // Get a reference to the next and previous node
	          var nextNode = i < nodes.length - 1 && nodes[i + 1];
	          var prevNode = i > 0 && nodes[i - 1];

	          // Also cache the next node's edge offset if needed.
	          // We need this for calculating the animation in a grid setup
	          if (nextNode && !nextNode.edgeOffset) {
	            nextNode.edgeOffset = this.getEdgeOffset(nextNode.node);
	          }

	          // If the node is the one we're currently animating, skip it
	          if (index === this.index) {
	            if (hideSortableGhost) {
	              /*
	              * With windowing libraries such as `react-virtualized`, the sortableGhost
	              * node may change while scrolling down and then back up (or vice-versa),
	              * so we need to update the reference to the new node just to be safe.
	              */
	              this.sortableGhost = node;
	              node.style.visibility = 'hidden';
	              node.style.opacity = 0;
	            }
	            continue;
	          }

	          if (transitionDuration) {
	            node.style[_utils.vendorPrefix + 'TransitionDuration'] = transitionDuration + 'ms';
	          }

	          if (this.axis.x) {
	            if (this.axis.y) {
	              // Calculations for a grid setup
	              if (index < this.index && (sortingOffset.left - offset.width <= edgeOffset.left && sortingOffset.top <= edgeOffset.top + offset.height || sortingOffset.top + offset.height <= edgeOffset.top)) {
	                // If the current node is to the left on the same row, or above the node that's being dragged
	                // then move it to the right
	                translate.x = this.width + this.marginOffset.x;
	                if (edgeOffset.left + translate.x > this.containerBoundingRect.width - offset.width) {
	                  // If it moves passed the right bounds, then animate it to the first position of the next row.
	                  // We just use the offset of the next node to calculate where to move, because that node's original position
	                  // is exactly where we want to go
	                  translate.x = nextNode.edgeOffset.left - edgeOffset.left;
	                  translate.y = nextNode.edgeOffset.top - edgeOffset.top;
	                }
	                if (this.newIndex === null) {
	                  this.newIndex = index;
	                }
	              } else if (index > this.index && (sortingOffset.left + offset.width >= edgeOffset.left && sortingOffset.top + offset.height >= edgeOffset.top || sortingOffset.top + offset.height >= edgeOffset.top + height)) {
	                // If the current node is to the right on the same row, or below the node that's being dragged
	                // then move it to the left
	                translate.x = -(this.width + this.marginOffset.x);
	                if (edgeOffset.left + translate.x < this.containerBoundingRect.left + offset.width) {
	                  // If it moves passed the left bounds, then animate it to the last position of the previous row.
	                  // We just use the offset of the previous node to calculate where to move, because that node's original position
	                  // is exactly where we want to go
	                  translate.x = prevNode.edgeOffset.left - edgeOffset.left;
	                  translate.y = prevNode.edgeOffset.top - edgeOffset.top;
	                }
	                this.newIndex = index;
	              }
	            } else {
	              if (index > this.index && sortingOffset.left + offset.width >= edgeOffset.left) {
	                translate.x = -(this.width + this.marginOffset.x);
	                this.newIndex = index;
	              } else if (index < this.index && sortingOffset.left <= edgeOffset.left + offset.width) {
	                translate.x = this.width + this.marginOffset.x;
	                if (this.newIndex == null) {
	                  this.newIndex = index;
	                }
	              }
	            }
	          } else if (this.axis.y) {
	            if (index > this.index && sortingOffset.top + offset.height >= edgeOffset.top) {
	              translate.y = -(this.height + this.marginOffset.y);
	              this.newIndex = index;
	            } else if (index < this.index && sortingOffset.top <= edgeOffset.top + offset.height) {
	              translate.y = this.height + this.marginOffset.y;
	              if (this.newIndex == null) {
	                this.newIndex = index;
	              }
	            }
	          }
	          node.style[_utils.vendorPrefix + 'Transform'] = 'translate3d(' + translate.x + 'px,' + translate.y + 'px,0)';
	        }

	        if (this.newIndex == null) {
	          this.newIndex = this.index;
	        }
	      }
	    }, {
	      key: 'getWrappedInstance',
	      value: function getWrappedInstance() {
	        (0, _invariant2.default)(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableContainer() call');
	        return this.refs.wrappedInstance;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var ref = config.withRef ? 'wrappedInstance' : null;

	        return _react2.default.createElement(WrappedComponent, _extends({
	          ref: ref
	        }, (0, _utils.omit)(this.props, 'contentWindow', 'useWindowAsScrollContainer', 'distance', 'helperClass', 'hideSortableGhost', 'transitionDuration', 'useDragHandle', 'pressDelay', 'pressThreshold', 'shouldCancelStart', 'onSortStart', 'onSortMove', 'onSortEnd', 'axis', 'lockAxis', 'lockOffset', 'lockToContainerEdges', 'getContainer', 'getHelperDimensions')));
	      }
	    }]);

	    return _class;
	  }(_react.Component), _class.displayName = (0, _utils.provideDisplayName)('sortableList', WrappedComponent), _class.defaultProps = {
	    axis: 'y',
	    transitionDuration: 300,
	    pressDelay: 0,
	    pressThreshold: 5,
	    distance: 0,
	    useWindowAsScrollContainer: false,
	    hideSortableGhost: true,
	    contentWindow: typeof window !== 'undefined' ? window : null,
	    shouldCancelStart: function shouldCancelStart(e) {
	      // Cancel sorting if the event target is an `input`, `textarea`, `select` or `option`
	      var disabledElements = ['input', 'textarea', 'select', 'option', 'button'];

	      if (disabledElements.indexOf(e.target.tagName.toLowerCase()) !== -1) {
	        return true; // Return true to cancel sorting
	      }
	    },
	    lockToContainerEdges: false,
	    lockOffset: '50%',
	    getHelperDimensions: function getHelperDimensions(_ref) {
	      var node = _ref.node;
	      return {
	        width: node.offsetWidth,
	        height: node.offsetHeight
	      };
	    }
	  }, _class.propTypes = {
	    axis: _propTypes2.default.oneOf(['x', 'y', 'xy']),
	    distance: _propTypes2.default.number,
	    lockAxis: _propTypes2.default.string,
	    helperClass: _propTypes2.default.string,
	    transitionDuration: _propTypes2.default.number,
	    contentWindow: _propTypes2.default.any,
	    onSortStart: _propTypes2.default.func,
	    onSortMove: _propTypes2.default.func,
	    onSortEnd: _propTypes2.default.func,
	    shouldCancelStart: _propTypes2.default.func,
	    pressDelay: _propTypes2.default.number,
	    useDragHandle: _propTypes2.default.bool,
	    useWindowAsScrollContainer: _propTypes2.default.bool,
	    hideSortableGhost: _propTypes2.default.bool,
	    lockToContainerEdges: _propTypes2.default.bool,
	    lockOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]))]),
	    getContainer: _propTypes2.default.func,
	    getHelperDimensions: _propTypes2.default.func
	  }, _class.childContextTypes = {
	    manager: _propTypes2.default.object.isRequired
	  }, _temp;
	}

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(335)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(341)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(336);
	var invariant = __webpack_require__(337);
	var warning = __webpack_require__(338);

	var ReactPropTypesSecret = __webpack_require__(339);
	var checkPropTypes = __webpack_require__(340);

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(
	          false,
	          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction.thatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 336 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(336);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 339 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(337);
	  var warning = __webpack_require__(338);
	  var ReactPropTypesSecret = __webpack_require__(339);
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(336);
	var invariant = __webpack_require__(337);
	var ReactPropTypesSecret = __webpack_require__(339);

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    invariant(
	      false,
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _find = __webpack_require__(344);

	var _find2 = _interopRequireDefault(_find);

	var _sortBy = __webpack_require__(460);

	var _sortBy2 = _interopRequireDefault(_sortBy);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Manager = function () {
	  function Manager() {
	    _classCallCheck(this, Manager);

	    this.refs = {};
	  }

	  _createClass(Manager, [{
	    key: 'add',
	    value: function add(collection, ref) {
	      if (!this.refs[collection]) {
	        this.refs[collection] = [];
	      }

	      this.refs[collection].push(ref);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(collection, ref) {
	      var index = this.getIndex(collection, ref);

	      if (index !== -1) {
	        this.refs[collection].splice(index, 1);
	      }
	    }
	  }, {
	    key: 'isActive',
	    value: function isActive() {
	      return this.active;
	    }
	  }, {
	    key: 'getActive',
	    value: function getActive() {
	      var _this = this;

	      return (0, _find2.default)(this.refs[this.active.collection],
	      // eslint-disable-next-line eqeqeq
	      function (_ref) {
	        var node = _ref.node;
	        return node.sortableInfo.index == _this.active.index;
	      });
	    }
	  }, {
	    key: 'getIndex',
	    value: function getIndex(collection, ref) {
	      return this.refs[collection].indexOf(ref);
	    }
	  }, {
	    key: 'getOrderedRefs',
	    value: function getOrderedRefs() {
	      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;

	      return (0, _sortBy2.default)(this.refs[collection], function (_ref2) {
	        var node = _ref2.node;
	        return node.sortableInfo.index;
	      });
	    }
	  }]);

	  return Manager;
	}();

	exports.default = Manager;

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var createFind = __webpack_require__(345),
	    findIndex = __webpack_require__(455);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find = createFind(findIndex);

	module.exports = find;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var baseIteratee = __webpack_require__(346),
	    isArrayLike = __webpack_require__(426),
	    keys = __webpack_require__(406);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(findIndexFunc) {
	  return function(collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike(collection)) {
	      var iteratee = baseIteratee(predicate, 3);
	      collection = keys(collection);
	      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}

	module.exports = createFind;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(347),
	    baseMatchesProperty = __webpack_require__(435),
	    identity = __webpack_require__(451),
	    isArray = __webpack_require__(412),
	    property = __webpack_require__(452);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(348),
	    getMatchData = __webpack_require__(432),
	    matchesStrictComparable = __webpack_require__(434);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(349),
	    baseIsEqual = __webpack_require__(393);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(350),
	    stackClear = __webpack_require__(358),
	    stackDelete = __webpack_require__(359),
	    stackGet = __webpack_require__(360),
	    stackHas = __webpack_require__(361),
	    stackSet = __webpack_require__(362);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(351),
	    listCacheDelete = __webpack_require__(352),
	    listCacheGet = __webpack_require__(355),
	    listCacheHas = __webpack_require__(356),
	    listCacheSet = __webpack_require__(357);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;


/***/ },
/* 351 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(353);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(354);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ },
/* 354 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(353);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(353);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(353);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(350);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	module.exports = stackClear;


/***/ },
/* 359 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;


/***/ },
/* 360 */
/***/ function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;


/***/ },
/* 361 */
/***/ function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(350),
	    Map = __webpack_require__(363),
	    MapCache = __webpack_require__(378);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364),
	    root = __webpack_require__(369);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(365),
	    getValue = __webpack_require__(377);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(366),
	    isMasked = __webpack_require__(374),
	    isObject = __webpack_require__(373),
	    toSource = __webpack_require__(376);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(367),
	    isObject = __webpack_require__(373);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(368),
	    getRawTag = __webpack_require__(371),
	    objectToString = __webpack_require__(372);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  value = Object(value);
	  return (symToStringTag && symToStringTag in value)
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(369);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(370);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 370 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(368);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 372 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 373 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(375);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(369);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ },
/* 376 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ },
/* 377 */
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(379),
	    mapCacheDelete = __webpack_require__(387),
	    mapCacheGet = __webpack_require__(390),
	    mapCacheHas = __webpack_require__(391),
	    mapCacheSet = __webpack_require__(392);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(380),
	    ListCache = __webpack_require__(350),
	    Map = __webpack_require__(363);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	module.exports = mapCacheClear;


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(381),
	    hashDelete = __webpack_require__(383),
	    hashGet = __webpack_require__(384),
	    hashHas = __webpack_require__(385),
	    hashSet = __webpack_require__(386);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(382);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ },
/* 383 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(382);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(382);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(382);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(388);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(389);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	module.exports = getMapData;


/***/ },
/* 389 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	module.exports = isKeyable;


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(388);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(388);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(388);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(394),
	    isObject = __webpack_require__(373),
	    isObjectLike = __webpack_require__(411);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(349),
	    equalArrays = __webpack_require__(395),
	    equalByTag = __webpack_require__(401),
	    equalObjects = __webpack_require__(405),
	    getTag = __webpack_require__(427),
	    isArray = __webpack_require__(412),
	    isBuffer = __webpack_require__(413),
	    isTypedArray = __webpack_require__(417);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(396),
	    arraySome = __webpack_require__(399),
	    cacheHas = __webpack_require__(400);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(378),
	    setCacheAdd = __webpack_require__(397),
	    setCacheHas = __webpack_require__(398);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;


/***/ },
/* 397 */
/***/ function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;


/***/ },
/* 398 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;


/***/ },
/* 399 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 400 */
/***/ function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(368),
	    Uint8Array = __webpack_require__(402),
	    eq = __webpack_require__(354),
	    equalArrays = __webpack_require__(395),
	    mapToArray = __webpack_require__(403),
	    setToArray = __webpack_require__(404);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(369);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ },
/* 403 */
/***/ function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ },
/* 404 */
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(406);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(407),
	    baseKeys = __webpack_require__(422),
	    isArrayLike = __webpack_require__(426);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(408),
	    isArguments = __webpack_require__(409),
	    isArray = __webpack_require__(412),
	    isBuffer = __webpack_require__(413),
	    isIndex = __webpack_require__(416),
	    isTypedArray = __webpack_require__(417);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ },
/* 408 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(410),
	    isObjectLike = __webpack_require__(411);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(367),
	    isObjectLike = __webpack_require__(411);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;


/***/ },
/* 411 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 412 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(369),
	    stubFalse = __webpack_require__(415);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(414)(module)))

/***/ },
/* 414 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 415 */
/***/ function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ },
/* 416 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(418),
	    baseUnary = __webpack_require__(420),
	    nodeUtil = __webpack_require__(421);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(367),
	    isLength = __webpack_require__(419),
	    isObjectLike = __webpack_require__(411);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;


/***/ },
/* 419 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 420 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(370);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(414)(module)))

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(423),
	    nativeKeys = __webpack_require__(424);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ },
/* 423 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(425);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ },
/* 425 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(366),
	    isLength = __webpack_require__(419);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(428),
	    Map = __webpack_require__(363),
	    Promise = __webpack_require__(429),
	    Set = __webpack_require__(430),
	    WeakMap = __webpack_require__(431),
	    baseGetTag = __webpack_require__(367),
	    toSource = __webpack_require__(376);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364),
	    root = __webpack_require__(369);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364),
	    root = __webpack_require__(369);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364),
	    root = __webpack_require__(369);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364),
	    root = __webpack_require__(369);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(433),
	    keys = __webpack_require__(406);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(373);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 434 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	module.exports = matchesStrictComparable;


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(393),
	    get = __webpack_require__(436),
	    hasIn = __webpack_require__(448),
	    isKey = __webpack_require__(439),
	    isStrictComparable = __webpack_require__(433),
	    matchesStrictComparable = __webpack_require__(434),
	    toKey = __webpack_require__(447);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(437);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(438),
	    toKey = __webpack_require__(447);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(412),
	    isKey = __webpack_require__(439),
	    stringToPath = __webpack_require__(441),
	    toString = __webpack_require__(444);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	module.exports = castPath;


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(412),
	    isSymbol = __webpack_require__(440);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	module.exports = isKey;


/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(367),
	    isObjectLike = __webpack_require__(411);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(442);

	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	module.exports = stringToPath;


/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(443);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;


/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(378);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;


/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(445);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(368),
	    arrayMap = __webpack_require__(446),
	    isArray = __webpack_require__(412),
	    isSymbol = __webpack_require__(440);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = baseToString;


/***/ },
/* 446 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(440);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toKey;


/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(449),
	    hasPath = __webpack_require__(450);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ },
/* 449 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;


/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(438),
	    isArguments = __webpack_require__(409),
	    isArray = __webpack_require__(412),
	    isIndex = __webpack_require__(416),
	    isLength = __webpack_require__(419),
	    toKey = __webpack_require__(447);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;


/***/ },
/* 451 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(453),
	    basePropertyDeep = __webpack_require__(454),
	    isKey = __webpack_require__(439),
	    toKey = __webpack_require__(447);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 453 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(437);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(456),
	    baseIteratee = __webpack_require__(346),
	    toInteger = __webpack_require__(457);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax(length + index, 0);
	  }
	  return baseFindIndex(array, baseIteratee(predicate, 3), index);
	}

	module.exports = findIndex;


/***/ },
/* 456 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var toFinite = __webpack_require__(458);

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	module.exports = toInteger;


/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(459);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	module.exports = toFinite;


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(373),
	    isSymbol = __webpack_require__(440);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = toNumber;


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(461),
	    baseOrderBy = __webpack_require__(464),
	    baseRest = __webpack_require__(474),
	    isIterateeCall = __webpack_require__(482);

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 */
	var sortBy = baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});

	module.exports = sortBy;


/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(462),
	    isFlattenable = __webpack_require__(463);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ },
/* 462 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(368),
	    isArguments = __webpack_require__(409),
	    isArray = __webpack_require__(412);

	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	module.exports = isFlattenable;


/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(446),
	    baseIteratee = __webpack_require__(346),
	    baseMap = __webpack_require__(465),
	    baseSortBy = __webpack_require__(471),
	    baseUnary = __webpack_require__(420),
	    compareMultiple = __webpack_require__(472),
	    identity = __webpack_require__(451);

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

	  var result = baseMap(collection, function(value, key, collection) {
	    var criteria = arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });

	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}

	module.exports = baseOrderBy;


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(466),
	    isArrayLike = __webpack_require__(426);

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;


/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(467),
	    createBaseEach = __webpack_require__(470);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(468),
	    keys = __webpack_require__(406);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(469);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 469 */
/***/ function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(426);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 471 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	module.exports = baseSortBy;


/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	var compareAscending = __webpack_require__(473);

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}

	module.exports = compareMultiple;


/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(440);

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);

	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);

	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}

	module.exports = compareAscending;


/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(451),
	    overRest = __webpack_require__(475),
	    setToString = __webpack_require__(477);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;


/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(476);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;


/***/ },
/* 476 */
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(478),
	    shortOut = __webpack_require__(481);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;


/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(479),
	    defineProperty = __webpack_require__(480),
	    identity = __webpack_require__(451);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;


/***/ },
/* 479 */
/***/ function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(364);

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	module.exports = defineProperty;


/***/ },
/* 481 */
/***/ function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;


/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(354),
	    isArrayLike = __webpack_require__(426),
	    isIndex = __webpack_require__(416),
	    isObject = __webpack_require__(373);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = sortableElement;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(334);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(32);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _utils = __webpack_require__(332);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// Export Higher Order Sortable Element Component
	function sortableElement(WrappedComponent) {
	  var _class, _temp;

	  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { withRef: false };

	  return _temp = _class = function (_Component) {
	    _inherits(_class, _Component);

	    function _class() {
	      _classCallCheck(this, _class);

	      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
	    }

	    _createClass(_class, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        var _props = this.props,
	            collection = _props.collection,
	            disabled = _props.disabled,
	            index = _props.index;


	        if (!disabled) {
	          this.setDraggable(collection, index);
	        }
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        if (this.props.index !== nextProps.index && this.node) {
	          this.node.sortableInfo.index = nextProps.index;
	        }
	        if (this.props.disabled !== nextProps.disabled) {
	          var collection = nextProps.collection,
	              disabled = nextProps.disabled,
	              index = nextProps.index;

	          if (disabled) {
	            this.removeDraggable(collection);
	          } else {
	            this.setDraggable(collection, index);
	          }
	        } else if (this.props.collection !== nextProps.collection) {
	          this.removeDraggable(this.props.collection);
	          this.setDraggable(nextProps.collection, nextProps.index);
	        }
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        var _props2 = this.props,
	            collection = _props2.collection,
	            disabled = _props2.disabled;


	        if (!disabled) this.removeDraggable(collection);
	      }
	    }, {
	      key: 'setDraggable',
	      value: function setDraggable(collection, index) {
	        var node = this.node = (0, _reactDom.findDOMNode)(this);

	        node.sortableInfo = {
	          index: index,
	          collection: collection,
	          manager: this.context.manager
	        };

	        this.ref = { node: node };
	        this.context.manager.add(collection, this.ref);
	      }
	    }, {
	      key: 'removeDraggable',
	      value: function removeDraggable(collection) {
	        this.context.manager.remove(collection, this.ref);
	      }
	    }, {
	      key: 'getWrappedInstance',
	      value: function getWrappedInstance() {
	        (0, _invariant2.default)(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');
	        return this.refs.wrappedInstance;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var ref = config.withRef ? 'wrappedInstance' : null;

	        return _react2.default.createElement(WrappedComponent, _extends({
	          ref: ref
	        }, (0, _utils.omit)(this.props, 'collection', 'disabled', 'index')));
	      }
	    }]);

	    return _class;
	  }(_react.Component), _class.displayName = (0, _utils.provideDisplayName)('sortableElement', WrappedComponent), _class.contextTypes = {
	    manager: _propTypes2.default.object.isRequired
	  }, _class.propTypes = {
	    index: _propTypes2.default.number.isRequired,
	    collection: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    disabled: _propTypes2.default.bool
	  }, _class.defaultProps = {
	    collection: 0
	  }, _temp;
	}

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = sortableHandle;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _utils = __webpack_require__(332);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// Export Higher Order Sortable Element Component
	function sortableHandle(WrappedComponent) {
	  var _class, _temp;

	  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { withRef: false };

	  return _temp = _class = function (_Component) {
	    _inherits(_class, _Component);

	    function _class() {
	      _classCallCheck(this, _class);

	      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
	    }

	    _createClass(_class, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        var node = (0, _reactDom.findDOMNode)(this);
	        node.sortableHandle = true;
	      }
	    }, {
	      key: 'getWrappedInstance',
	      value: function getWrappedInstance() {
	        (0, _invariant2.default)(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableHandle() call');
	        return this.refs.wrappedInstance;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var ref = config.withRef ? 'wrappedInstance' : null;

	        return _react2.default.createElement(WrappedComponent, _extends({ ref: ref }, this.props));
	      }
	    }]);

	    return _class;
	  }(_react.Component), _class.displayName = (0, _utils.provideDisplayName)('sortableHandle', WrappedComponent), _temp;
	}

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Mock"] = factory();
		else
			root["Mock"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		/* global require, module, window */
		var Handler = __webpack_require__(1)
		var Util = __webpack_require__(3)
		var Random = __webpack_require__(5)
		var RE = __webpack_require__(20)
		var toJSONSchema = __webpack_require__(23)
		var valid = __webpack_require__(25)

		var XHR
		if (typeof window !== 'undefined') XHR = __webpack_require__(27)

		/*!
		    Mock - 模拟请求 & 模拟数据
		    https://github.com/nuysoft/Mock
		    墨智 mozhi.gyy@taobao.com nuysoft@gmail.com
		*/
		var Mock = {
		    Handler: Handler,
		    Random: Random,
		    Util: Util,
		    XHR: XHR,
		    RE: RE,
		    toJSONSchema: toJSONSchema,
		    valid: valid,
		    heredoc: Util.heredoc,
		    setup: function(settings) {
		        return XHR.setup(settings)
		    },
		    _mocked: {}
		}

		Mock.version = '1.0.1-beta3'

		// 避免循环依赖
		if (XHR) XHR.Mock = Mock

		/*
		    * Mock.mock( template )
		    * Mock.mock( function() )
		    * Mock.mock( rurl, template )
		    * Mock.mock( rurl, function(options) )
		    * Mock.mock( rurl, rtype, template )
		    * Mock.mock( rurl, rtype, function(options) )

		    根据数据模板生成模拟数据。
		*/
		Mock.mock = function(rurl, rtype, template) {
		    // Mock.mock(template)
		    if (arguments.length === 1) {
		        return Handler.gen(rurl)
		    }
		    // Mock.mock(rurl, template)
		    if (arguments.length === 2) {
		        template = rtype
		        rtype = undefined
		    }
		    // 拦截 XHR
		    if (XHR) window.XMLHttpRequest = XHR
		    Mock._mocked[rurl + (rtype || '')] = {
		        rurl: rurl,
		        rtype: rtype,
		        template: template
		    }
		    return Mock
		}

		module.exports = Mock

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/* 
		    ## Handler

		    处理数据模板。
		    
		    * Handler.gen( template, name?, context? )

		        入口方法。

		    * Data Template Definition, DTD
		        
		        处理数据模板定义。

		        * Handler.array( options )
		        * Handler.object( options )
		        * Handler.number( options )
		        * Handler.boolean( options )
		        * Handler.string( options )
		        * Handler.function( options )
		        * Handler.regexp( options )
		        
		        处理路径（相对和绝对）。

		        * Handler.getValueByKeyPath( key, options )

		    * Data Placeholder Definition, DPD

		        处理数据占位符定义

		        * Handler.placeholder( placeholder, context, templateContext, options )

		*/

		var Constant = __webpack_require__(2)
		var Util = __webpack_require__(3)
		var Parser = __webpack_require__(4)
		var Random = __webpack_require__(5)
		var RE = __webpack_require__(20)

		var Handler = {
		    extend: Util.extend
		}

		/*
		    template        属性值（即数据模板）
		    name            属性名
		    context         数据上下文，生成后的数据
		    templateContext 模板上下文，

		    Handle.gen(template, name, options)
		    context
		        currentContext, templateCurrentContext, 
		        path, templatePath
		        root, templateRoot
		*/
		Handler.gen = function(template, name, context) {
		    /* jshint -W041 */
		    name = name == undefined ? '' : (name + '')

		    context = context || {}
		    context = {
		            // 当前访问路径，只有属性名，不包括生成规则
		            path: context.path || [Constant.GUID],
		            templatePath: context.templatePath || [Constant.GUID++],
		            // 最终属性值的上下文
		            currentContext: context.currentContext,
		            // 属性值模板的上下文
		            templateCurrentContext: context.templateCurrentContext || template,
		            // 最终值的根
		            root: context.root || context.currentContext,
		            // 模板的根
		            templateRoot: context.templateRoot || context.templateCurrentContext || template
		        }
		        // console.log('path:', context.path.join('.'), template)

		    var rule = Parser.parse(name)
		    var type = Util.type(template)
		    var data

		    if (Handler[type]) {
		        data = Handler[type]({
		            // 属性值类型
		            type: type,
		            // 属性值模板
		            template: template,
		            // 属性名 + 生成规则
		            name: name,
		            // 属性名
		            parsedName: name ? name.replace(Constant.RE_KEY, '$1') : name,

		            // 解析后的生成规则
		            rule: rule,
		            // 相关上下文
		            context: context
		        })

		        if (!context.root) context.root = data
		        return data
		    }

		    return template
		}

		Handler.extend({
		    array: function(options) {
		        var result = [],
		            i, ii;

		        // 'name|1': []
		        // 'name|count': []
		        // 'name|min-max': []
		        if (options.template.length === 0) return result

		        // 'arr': [{ 'email': '@EMAIL' }, { 'email': '@EMAIL' }]
		        if (!options.rule.parameters) {
		            for (i = 0; i < options.template.length; i++) {
		                options.context.path.push(i)
		                options.context.templatePath.push(i)
		                result.push(
		                    Handler.gen(options.template[i], i, {
		                        path: options.context.path,
		                        templatePath: options.context.templatePath,
		                        currentContext: result,
		                        templateCurrentContext: options.template,
		                        root: options.context.root || result,
		                        templateRoot: options.context.templateRoot || options.template
		                    })
		                )
		                options.context.path.pop()
		                options.context.templatePath.pop()
		            }
		        } else {
		            // 'method|1': ['GET', 'POST', 'HEAD', 'DELETE']
		            if (options.rule.min === 1 && options.rule.max === undefined) {
		                // fix #17
		                options.context.path.push(options.name)
		                options.context.templatePath.push(options.name)
		                result = Random.pick(
		                    Handler.gen(options.template, undefined, {
		                        path: options.context.path,
		                        templatePath: options.context.templatePath,
		                        currentContext: result,
		                        templateCurrentContext: options.template,
		                        root: options.context.root || result,
		                        templateRoot: options.context.templateRoot || options.template
		                    })
		                )
		                options.context.path.pop()
		                options.context.templatePath.pop()
		            } else {
		                // 'data|+1': [{}, {}]
		                if (options.rule.parameters[2]) {
		                    options.template.__order_index = options.template.__order_index || 0

		                    options.context.path.push(options.name)
		                    options.context.templatePath.push(options.name)
		                    result = Handler.gen(options.template, undefined, {
		                        path: options.context.path,
		                        templatePath: options.context.templatePath,
		                        currentContext: result,
		                        templateCurrentContext: options.template,
		                        root: options.context.root || result,
		                        templateRoot: options.context.templateRoot || options.template
		                    })[
		                        options.template.__order_index % options.template.length
		                    ]

		                    options.template.__order_index += +options.rule.parameters[2]

		                    options.context.path.pop()
		                    options.context.templatePath.pop()

		                } else {
		                    // 'data|1-10': [{}]
		                    for (i = 0; i < options.rule.count; i++) {
		                        // 'data|1-10': [{}, {}]
		                        for (ii = 0; ii < options.template.length; ii++) {
		                            options.context.path.push(result.length)
		                            options.context.templatePath.push(ii)
		                            result.push(
		                                Handler.gen(options.template[ii], result.length, {
		                                    path: options.context.path,
		                                    templatePath: options.context.templatePath,
		                                    currentContext: result,
		                                    templateCurrentContext: options.template,
		                                    root: options.context.root || result,
		                                    templateRoot: options.context.templateRoot || options.template
		                                })
		                            )
		                            options.context.path.pop()
		                            options.context.templatePath.pop()
		                        }
		                    }
		                }
		            }
		        }
		        return result
		    },
		    object: function(options) {
		        var result = {},
		            keys, fnKeys, key, parsedKey, inc, i;

		        // 'obj|min-max': {}
		        /* jshint -W041 */
		        if (options.rule.min != undefined) {
		            keys = Util.keys(options.template)
		            keys = Random.shuffle(keys)
		            keys = keys.slice(0, options.rule.count)
		            for (i = 0; i < keys.length; i++) {
		                key = keys[i]
		                parsedKey = key.replace(Constant.RE_KEY, '$1')
		                options.context.path.push(parsedKey)
		                options.context.templatePath.push(key)
		                result[parsedKey] = Handler.gen(options.template[key], key, {
		                    path: options.context.path,
		                    templatePath: options.context.templatePath,
		                    currentContext: result,
		                    templateCurrentContext: options.template,
		                    root: options.context.root || result,
		                    templateRoot: options.context.templateRoot || options.template
		                })
		                options.context.path.pop()
		                options.context.templatePath.pop()
		            }

		        } else {
		            // 'obj': {}
		            keys = []
		            fnKeys = [] // #25 改变了非函数属性的顺序，查找起来不方便
		            for (key in options.template) {
		                (typeof options.template[key] === 'function' ? fnKeys : keys).push(key)
		            }
		            keys = keys.concat(fnKeys)

		            /*
		                会改变非函数属性的顺序
		                keys = Util.keys(options.template)
		                keys.sort(function(a, b) {
		                    var afn = typeof options.template[a] === 'function'
		                    var bfn = typeof options.template[b] === 'function'
		                    if (afn === bfn) return 0
		                    if (afn && !bfn) return 1
		                    if (!afn && bfn) return -1
		                })
		            */

		            for (i = 0; i < keys.length; i++) {
		                key = keys[i]
		                parsedKey = key.replace(Constant.RE_KEY, '$1')
		                options.context.path.push(parsedKey)
		                options.context.templatePath.push(key)
		                result[parsedKey] = Handler.gen(options.template[key], key, {
		                    path: options.context.path,
		                    templatePath: options.context.templatePath,
		                    currentContext: result,
		                    templateCurrentContext: options.template,
		                    root: options.context.root || result,
		                    templateRoot: options.context.templateRoot || options.template
		                })
		                options.context.path.pop()
		                options.context.templatePath.pop()
		                    // 'id|+1': 1
		                inc = key.match(Constant.RE_KEY)
		                if (inc && inc[2] && Util.type(options.template[key]) === 'number') {
		                    options.template[key] += parseInt(inc[2], 10)
		                }
		            }
		        }
		        return result
		    },
		    number: function(options) {
		        var result, parts;
		        if (options.rule.decimal) { // float
		            options.template += ''
		            parts = options.template.split('.')
		                // 'float1|.1-10': 10,
		                // 'float2|1-100.1-10': 1,
		                // 'float3|999.1-10': 1,
		                // 'float4|.3-10': 123.123,
		            parts[0] = options.rule.range ? options.rule.count : parts[0]
		            parts[1] = (parts[1] || '').slice(0, options.rule.dcount)
		            while (parts[1].length < options.rule.dcount) {
		                parts[1] += (
		                    // 最后一位不能为 0：如果最后一位为 0，会被 JS 引擎忽略掉。
		                    (parts[1].length < options.rule.dcount - 1) ? Random.character('number') : Random.character('123456789')
		                )
		            }
		            result = parseFloat(parts.join('.'), 10)
		        } else { // integer
		            // 'grade1|1-100': 1,
		            result = options.rule.range && !options.rule.parameters[2] ? options.rule.count : options.template
		        }
		        return result
		    },
		    boolean: function(options) {
		        var result;
		        // 'prop|multiple': false, 当前值是相反值的概率倍数
		        // 'prop|probability-probability': false, 当前值与相反值的概率
		        result = options.rule.parameters ? Random.bool(options.rule.min, options.rule.max, options.template) : options.template
		        return result
		    },
		    string: function(options) {
		        var result = '',
		            i, placeholders, ph, phed;
		        if (options.template.length) {

		            //  'foo': '★',
		            /* jshint -W041 */
		            if (options.rule.count == undefined) {
		                result += options.template
		            }

		            // 'star|1-5': '★',
		            for (i = 0; i < options.rule.count; i++) {
		                result += options.template
		            }
		            // 'email|1-10': '@EMAIL, ',
		            placeholders = result.match(Constant.RE_PLACEHOLDER) || [] // A-Z_0-9 > \w_
		            for (i = 0; i < placeholders.length; i++) {
		                ph = placeholders[i]

		                // 遇到转义斜杠，不需要解析占位符
		                if (/^\\/.test(ph)) {
		                    placeholders.splice(i--, 1)
		                    continue
		                }

		                phed = Handler.placeholder(ph, options.context.currentContext, options.context.templateCurrentContext, options)

		                // 只有一个占位符，并且没有其他字符
		                if (placeholders.length === 1 && ph === result && typeof phed !== typeof result) { // 
		                    result = phed
		                    break

		                    if (Util.isNumeric(phed)) {
		                        result = parseFloat(phed, 10)
		                        break
		                    }
		                    if (/^(true|false)$/.test(phed)) {
		                        result = phed === 'true' ? true :
		                            phed === 'false' ? false :
		                            phed // 已经是布尔值
		                        break
		                    }
		                }
		                result = result.replace(ph, phed)
		            }

		        } else {
		            // 'ASCII|1-10': '',
		            // 'ASCII': '',
		            result = options.rule.range ? Random.string(options.rule.count) : options.template
		        }
		        return result
		    },
		    'function': function(options) {
		        // ( context, options )
		        return options.template.call(options.context.currentContext, options)
		    },
		    'regexp': function(options) {
		        var source = ''

		        // 'name': /regexp/,
		        /* jshint -W041 */
		        if (options.rule.count == undefined) {
		            source += options.template.source // regexp.source
		        }

		        // 'name|1-5': /regexp/,
		        for (var i = 0; i < options.rule.count; i++) {
		            source += options.template.source
		        }

		        return RE.Handler.gen(
		            RE.Parser.parse(
		                source
		            )
		        )
		    }
		})

		Handler.extend({
		    _all: function() {
		        var re = {};
		        for (var key in Random) re[key.toLowerCase()] = key
		        return re
		    },
		    // 处理占位符，转换为最终值
		    placeholder: function(placeholder, obj, templateContext, options) {
		        // console.log(options.context.path)
		        // 1 key, 2 params
		        Constant.RE_PLACEHOLDER.exec('')
		        var parts = Constant.RE_PLACEHOLDER.exec(placeholder),
		            key = parts && parts[1],
		            lkey = key && key.toLowerCase(),
		            okey = this._all()[lkey],
		            params = parts && parts[2] || ''
		        var pathParts = this.splitPathToArray(key)

		        // 解析占位符的参数
		        try {
		            // 1. 尝试保持参数的类型
		            /*
		                #24 [Window Firefox 30.0 引用 占位符 抛错](https://github.com/nuysoft/Mock/issues/24)
		                [BX9056: 各浏览器下 window.eval 方法的执行上下文存在差异](http://www.w3help.org/zh-cn/causes/BX9056)
		                应该属于 Window Firefox 30.0 的 BUG
		            */
		            /* jshint -W061 */
		            params = eval('(function(){ return [].splice.call(arguments, 0 ) })(' + params + ')')
		        } catch (error) {
		            // 2. 如果失败，只能解析为字符串
		            // console.error(error)
		            // if (error instanceof ReferenceError) params = parts[2].split(/,\s*/);
		            // else throw error
		            params = parts[2].split(/,\s*/)
		        }

		        // 占位符优先引用数据模板中的属性
		        if (obj && (key in obj)) return obj[key]

		        // @index @key
		        // if (Constant.RE_INDEX.test(key)) return +options.name
		        // if (Constant.RE_KEY.test(key)) return options.name

		        // 绝对路径 or 相对路径
		        if (
		            key.charAt(0) === '/' ||
		            pathParts.length > 1
		        ) return this.getValueByKeyPath(key, options)

		        // 递归引用数据模板中的属性
		        if (templateContext &&
		            (typeof templateContext === 'object') &&
		            (key in templateContext) &&
		            (placeholder !== templateContext[key]) // fix #15 避免自己依赖自己
		        ) {
		            // 先计算被引用的属性值
		            templateContext[key] = Handler.gen(templateContext[key], key, {
		                currentContext: obj,
		                templateCurrentContext: templateContext
		            })
		            return templateContext[key]
		        }

		        // 如果未找到，则原样返回
		        if (!(key in Random) && !(lkey in Random) && !(okey in Random)) return placeholder

		        // 递归解析参数中的占位符
		        for (var i = 0; i < params.length; i++) {
		            Constant.RE_PLACEHOLDER.exec('')
		            if (Constant.RE_PLACEHOLDER.test(params[i])) {
		                params[i] = Handler.placeholder(params[i], obj, templateContext, options)
		            }
		        }

		        var handle = Random[key] || Random[lkey] || Random[okey]
		        switch (Util.type(handle)) {
		            case 'array':
		                // 自动从数组中取一个，例如 @areas
		                return Random.pick(handle)
		            case 'function':
		                // 执行占位符方法（大多数情况）
		                handle.options = options
		                var re = handle.apply(Random, params)
		                if (re === undefined) re = '' // 因为是在字符串中，所以默认为空字符串。
		                delete handle.options
		                return re
		        }
		    },
		    getValueByKeyPath: function(key, options) {
		        var originalKey = key
		        var keyPathParts = this.splitPathToArray(key)
		        var absolutePathParts = []

		        // 绝对路径
		        if (key.charAt(0) === '/') {
		            absolutePathParts = [options.context.path[0]].concat(
		                this.normalizePath(keyPathParts)
		            )
		        } else {
		            // 相对路径
		            if (keyPathParts.length > 1) {
		                absolutePathParts = options.context.path.slice(0)
		                absolutePathParts.pop()
		                absolutePathParts = this.normalizePath(
		                    absolutePathParts.concat(keyPathParts)
		                )

		            }
		        }

		        key = keyPathParts[keyPathParts.length - 1]
		        var currentContext = options.context.root
		        var templateCurrentContext = options.context.templateRoot
		        for (var i = 1; i < absolutePathParts.length - 1; i++) {
		            currentContext = currentContext[absolutePathParts[i]]
		            templateCurrentContext = templateCurrentContext[absolutePathParts[i]]
		        }
		        // 引用的值已经计算好
		        if (currentContext && (key in currentContext)) return currentContext[key]

		        // 尚未计算，递归引用数据模板中的属性
		        if (templateCurrentContext &&
		            (typeof templateCurrentContext === 'object') &&
		            (key in templateCurrentContext) &&
		            (originalKey !== templateCurrentContext[key]) // fix #15 避免自己依赖自己
		        ) {
		            // 先计算被引用的属性值
		            templateCurrentContext[key] = Handler.gen(templateCurrentContext[key], key, {
		                currentContext: currentContext,
		                templateCurrentContext: templateCurrentContext
		            })
		            return templateCurrentContext[key]
		        }
		    },
		    // https://github.com/kissyteam/kissy/blob/master/src/path/src/path.js
		    normalizePath: function(pathParts) {
		        var newPathParts = []
		        for (var i = 0; i < pathParts.length; i++) {
		            switch (pathParts[i]) {
		                case '..':
		                    newPathParts.pop()
		                    break
		                case '.':
		                    break
		                default:
		                    newPathParts.push(pathParts[i])
		            }
		        }
		        return newPathParts
		    },
		    splitPathToArray: function(path) {
		        var parts = path.split(/\/+/);
		        if (!parts[parts.length - 1]) parts = parts.slice(0, -1)
		        if (!parts[0]) parts = parts.slice(1)
		        return parts;
		    }
		})

		module.exports = Handler

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		/*
		    ## Constant

		    常量集合。
		 */
		/*
		    RE_KEY
		        'name|min-max': value
		        'name|count': value
		        'name|min-max.dmin-dmax': value
		        'name|min-max.dcount': value
		        'name|count.dmin-dmax': value
		        'name|count.dcount': value
		        'name|+step': value

		        1 name, 2 step, 3 range [ min, max ], 4 drange [ dmin, dmax ]

		    RE_PLACEHOLDER
		        placeholder(*)

		    [正则查看工具](http://www.regexper.com/)

		    #26 生成规则 支持 负数，例如 number|-100-100
		*/
		module.exports = {
		    GUID: 1,
		    RE_KEY: /(.+)\|(?:\+(\d+)|([\+\-]?\d+-?[\+\-]?\d*)?(?:\.(\d+-?\d*))?)/,
		    RE_RANGE: /([\+\-]?\d+)-?([\+\-]?\d+)?/,
		    RE_PLACEHOLDER: /\\*@([^@#%&()\?\s]+)(?:\((.*?)\))?/g
		    // /\\*@([^@#%&()\?\s\/\.]+)(?:\((.*?)\))?/g
		    // RE_INDEX: /^index$/,
		    // RE_KEY: /^key$/
		}

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		/*
		    ## Utilities
		*/
		var Util = {}

		Util.extend = function extend() {
		    var target = arguments[0] || {},
		        i = 1,
		        length = arguments.length,
		        options, name, src, copy, clone

		    if (length === 1) {
		        target = this
		        i = 0
		    }

		    for (; i < length; i++) {
		        options = arguments[i]
		        if (!options) continue

		        for (name in options) {
		            src = target[name]
		            copy = options[name]

		            if (target === copy) continue
		            if (copy === undefined) continue

		            if (Util.isArray(copy) || Util.isObject(copy)) {
		                if (Util.isArray(copy)) clone = src && Util.isArray(src) ? src : []
		                if (Util.isObject(copy)) clone = src && Util.isObject(src) ? src : {}

		                target[name] = Util.extend(clone, copy)
		            } else {
		                target[name] = copy
		            }
		        }
		    }

		    return target
		}

		Util.each = function each(obj, iterator, context) {
		    var i, key
		    if (this.type(obj) === 'number') {
		        for (i = 0; i < obj; i++) {
		            iterator(i, i)
		        }
		    } else if (obj.length === +obj.length) {
		        for (i = 0; i < obj.length; i++) {
		            if (iterator.call(context, obj[i], i, obj) === false) break
		        }
		    } else {
		        for (key in obj) {
		            if (iterator.call(context, obj[key], key, obj) === false) break
		        }
		    }
		}

		Util.type = function type(obj) {
		    return (obj === null || obj === undefined) ? String(obj) : Object.prototype.toString.call(obj).match(/\[object (\w+)\]/)[1].toLowerCase()
		}

		Util.each('String Object Array RegExp Function'.split(' '), function(value) {
		    Util['is' + value] = function(obj) {
		        return Util.type(obj) === value.toLowerCase()
		    }
		})

		Util.isObjectOrArray = function(value) {
		    return Util.isObject(value) || Util.isArray(value)
		}

		Util.isNumeric = function(value) {
		    return !isNaN(parseFloat(value)) && isFinite(value)
		}

		Util.keys = function(obj) {
		    var keys = [];
		    for (var key in obj) {
		        if (obj.hasOwnProperty(key)) keys.push(key)
		    }
		    return keys;
		}
		Util.values = function(obj) {
		    var values = [];
		    for (var key in obj) {
		        if (obj.hasOwnProperty(key)) values.push(obj[key])
		    }
		    return values;
		}

		/*
		    ### Mock.heredoc(fn)

		    * Mock.heredoc(fn)

		    以直观、安全的方式书写（多行）HTML 模板。

		    **使用示例**如下所示：

		        var tpl = Mock.heredoc(function() {
		            /*!
		        {{email}}{{age}}
		        <!-- Mock { 
		            email: '@EMAIL',
		            age: '@INT(1,100)'
		        } -->
		            *\/
		        })
		    
		    **相关阅读**
		    * [Creating multiline strings in JavaScript](http://stackoverflow.com/questions/805107/creating-multiline-strings-in-javascript)、
		*/
		Util.heredoc = function heredoc(fn) {
		    // 1. 移除起始的 function(){ /*!
		    // 2. 移除末尾的 */ }
		    // 3. 移除起始和末尾的空格
		    return fn.toString()
		        .replace(/^[^\/]+\/\*!?/, '')
		        .replace(/\*\/[^\/]+$/, '')
		        .replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '') // .trim()
		}

		Util.noop = function() {}

		module.exports = Util

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		/*
			## Parser

			解析数据模板（属性名部分）。

			* Parser.parse( name )
				
				```json
				{
					parameters: [ name, inc, range, decimal ],
					rnage: [ min , max ],

					min: min,
					max: max,
					count : count,

					decimal: decimal,
					dmin: dmin,
					dmax: dmax,
					dcount: dcount
				}
				```
		 */

		var Constant = __webpack_require__(2)
		var Random = __webpack_require__(5)

		/* jshint -W041 */
		module.exports = {
			parse: function(name) {
				name = name == undefined ? '' : (name + '')

				var parameters = (name || '').match(Constant.RE_KEY)

				var range = parameters && parameters[3] && parameters[3].match(Constant.RE_RANGE)
				var min = range && range[1] && parseInt(range[1], 10) // || 1
				var max = range && range[2] && parseInt(range[2], 10) // || 1
					// repeat || min-max || 1
					// var count = range ? !range[2] && parseInt(range[1], 10) || Random.integer(min, max) : 1
				var count = range ? !range[2] ? parseInt(range[1], 10) : Random.integer(min, max) : undefined

				var decimal = parameters && parameters[4] && parameters[4].match(Constant.RE_RANGE)
				var dmin = decimal && decimal[1] && parseInt(decimal[1], 10) // || 0,
				var dmax = decimal && decimal[2] && parseInt(decimal[2], 10) // || 0,
					// int || dmin-dmax || 0
				var dcount = decimal ? !decimal[2] && parseInt(decimal[1], 10) || Random.integer(dmin, dmax) : undefined

				var result = {
					// 1 name, 2 inc, 3 range, 4 decimal
					parameters: parameters,
					// 1 min, 2 max
					range: range,
					min: min,
					max: max,
					// min-max
					count: count,
					// 是否有 decimal
					decimal: decimal,
					dmin: dmin,
					dmax: dmax,
					// dmin-dimax
					dcount: dcount
				}

				for (var r in result) {
					if (result[r] != undefined) return result
				}

				return {}
			}
		}

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## Mock.Random
		    
		    工具类，用于生成各种随机数据。
		*/

		var Util = __webpack_require__(3)

		var Random = {
		    extend: Util.extend
		}

		Random.extend(__webpack_require__(6))
		Random.extend(__webpack_require__(7))
		Random.extend(__webpack_require__(8))
		Random.extend(__webpack_require__(10))
		Random.extend(__webpack_require__(13))
		Random.extend(__webpack_require__(15))
		Random.extend(__webpack_require__(16))
		Random.extend(__webpack_require__(17))
		Random.extend(__webpack_require__(14))
		Random.extend(__webpack_require__(19))

		module.exports = Random

	/***/ },
	/* 6 */
	/***/ function(module, exports) {

		/*
		    ## Basics
		*/
		module.exports = {
		    // 返回一个随机的布尔值。
		    boolean: function(min, max, cur) {
		        if (cur !== undefined) {
		            min = typeof min !== 'undefined' && !isNaN(min) ? parseInt(min, 10) : 1
		            max = typeof max !== 'undefined' && !isNaN(max) ? parseInt(max, 10) : 1
		            return Math.random() > 1.0 / (min + max) * min ? !cur : cur
		        }

		        return Math.random() >= 0.5
		    },
		    bool: function(min, max, cur) {
		        return this.boolean(min, max, cur)
		    },
		    // 返回一个随机的自然数（大于等于 0 的整数）。
		    natural: function(min, max) {
		        min = typeof min !== 'undefined' ? parseInt(min, 10) : 0
		        max = typeof max !== 'undefined' ? parseInt(max, 10) : 9007199254740992 // 2^53
		        return Math.round(Math.random() * (max - min)) + min
		    },
		    // 返回一个随机的整数。
		    integer: function(min, max) {
		        min = typeof min !== 'undefined' ? parseInt(min, 10) : -9007199254740992
		        max = typeof max !== 'undefined' ? parseInt(max, 10) : 9007199254740992 // 2^53
		        return Math.round(Math.random() * (max - min)) + min
		    },
		    int: function(min, max) {
		        return this.integer(min, max)
		    },
		    // 返回一个随机的浮点数。
		    float: function(min, max, dmin, dmax) {
		        dmin = dmin === undefined ? 0 : dmin
		        dmin = Math.max(Math.min(dmin, 17), 0)
		        dmax = dmax === undefined ? 17 : dmax
		        dmax = Math.max(Math.min(dmax, 17), 0)
		        var ret = this.integer(min, max) + '.';
		        for (var i = 0, dcount = this.natural(dmin, dmax); i < dcount; i++) {
		            ret += (
		                // 最后一位不能为 0：如果最后一位为 0，会被 JS 引擎忽略掉。
		                (i < dcount - 1) ? this.character('number') : this.character('123456789')
		            )
		        }
		        return parseFloat(ret, 10)
		    },
		    // 返回一个随机字符。
		    character: function(pool) {
		        var pools = {
		            lower: 'abcdefghijklmnopqrstuvwxyz',
		            upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
		            number: '0123456789',
		            symbol: '!@#$%^&*()[]'
		        }
		        pools.alpha = pools.lower + pools.upper
		        pools['undefined'] = pools.lower + pools.upper + pools.number + pools.symbol

		        pool = pools[('' + pool).toLowerCase()] || pool
		        return pool.charAt(this.natural(0, pool.length - 1))
		    },
		    char: function(pool) {
		        return this.character(pool)
		    },
		    // 返回一个随机字符串。
		    string: function(pool, min, max) {
		        var len
		        switch (arguments.length) {
		            case 0: // ()
		                len = this.natural(3, 7)
		                break
		            case 1: // ( length )
		                len = pool
		                pool = undefined
		                break
		            case 2:
		                // ( pool, length )
		                if (typeof arguments[0] === 'string') {
		                    len = min
		                } else {
		                    // ( min, max )
		                    len = this.natural(pool, min)
		                    pool = undefined
		                }
		                break
		            case 3:
		                len = this.natural(min, max)
		                break
		        }

		        var text = ''
		        for (var i = 0; i < len; i++) {
		            text += this.character(pool)
		        }

		        return text
		    },
		    str: function( /*pool, min, max*/ ) {
		        return this.string.apply(this, arguments)
		    },
		    // 返回一个整型数组。
		    range: function(start, stop, step) {
		        // range( stop )
		        if (arguments.length <= 1) {
		            stop = start || 0;
		            start = 0;
		        }
		        // range( start, stop )
		        step = arguments[2] || 1;

		        start = +start
		        stop = +stop
		        step = +step

		        var len = Math.max(Math.ceil((stop - start) / step), 0);
		        var idx = 0;
		        var range = new Array(len);

		        while (idx < len) {
		            range[idx++] = start;
		            start += step;
		        }

		        return range;
		    }
		}

	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		/*
		    ## Date
		*/
		var patternLetters = {
		    yyyy: 'getFullYear',
		    yy: function(date) {
		        return ('' + date.getFullYear()).slice(2)
		    },
		    y: 'yy',

		    MM: function(date) {
		        var m = date.getMonth() + 1
		        return m < 10 ? '0' + m : m
		    },
		    M: function(date) {
		        return date.getMonth() + 1
		    },

		    dd: function(date) {
		        var d = date.getDate()
		        return d < 10 ? '0' + d : d
		    },
		    d: 'getDate',

		    HH: function(date) {
		        var h = date.getHours()
		        return h < 10 ? '0' + h : h
		    },
		    H: 'getHours',
		    hh: function(date) {
		        var h = date.getHours() % 12
		        return h < 10 ? '0' + h : h
		    },
		    h: function(date) {
		        return date.getHours() % 12
		    },

		    mm: function(date) {
		        var m = date.getMinutes()
		        return m < 10 ? '0' + m : m
		    },
		    m: 'getMinutes',

		    ss: function(date) {
		        var s = date.getSeconds()
		        return s < 10 ? '0' + s : s
		    },
		    s: 'getSeconds',

		    SS: function(date) {
		        var ms = date.getMilliseconds()
		        return ms < 10 && '00' + ms || ms < 100 && '0' + ms || ms
		    },
		    S: 'getMilliseconds',

		    A: function(date) {
		        return date.getHours() < 12 ? 'AM' : 'PM'
		    },
		    a: function(date) {
		        return date.getHours() < 12 ? 'am' : 'pm'
		    },
		    T: 'getTime'
		}
		module.exports = {
		    // 日期占位符集合。
		    _patternLetters: patternLetters,
		    // 日期占位符正则。
		    _rformat: new RegExp((function() {
		        var re = []
		        for (var i in patternLetters) re.push(i)
		        return '(' + re.join('|') + ')'
		    })(), 'g'),
		    // 格式化日期。
		    _formatDate: function(date, format) {
		        return format.replace(this._rformat, function creatNewSubString($0, flag) {
		            return typeof patternLetters[flag] === 'function' ? patternLetters[flag](date) :
		                patternLetters[flag] in patternLetters ? creatNewSubString($0, patternLetters[flag]) :
		                date[patternLetters[flag]]()
		        })
		    },
		    // 生成一个随机的 Date 对象。
		    _randomDate: function(min, max) { // min, max
		        min = min === undefined ? new Date(0) : min
		        max = max === undefined ? new Date() : max
		        return new Date(Math.random() * (max.getTime() - min.getTime()))
		    },
		    // 返回一个随机的日期字符串。
		    date: function(format) {
		        format = format || 'yyyy-MM-dd'
		        return this._formatDate(this._randomDate(), format)
		    },
		    // 返回一个随机的时间字符串。
		    time: function(format) {
		        format = format || 'HH:mm:ss'
		        return this._formatDate(this._randomDate(), format)
		    },
		    // 返回一个随机的日期和时间字符串。
		    datetime: function(format) {
		        format = format || 'yyyy-MM-dd HH:mm:ss'
		        return this._formatDate(this._randomDate(), format)
		    },
		    // 返回当前的日期和时间字符串。
		    now: function(unit, format) {
		        // now(unit) now(format)
		        if (arguments.length === 1) {
		            // now(format)
		            if (!/year|month|day|hour|minute|second|week/.test(unit)) {
		                format = unit
		                unit = ''
		            }
		        }
		        unit = (unit || '').toLowerCase()
		        format = format || 'yyyy-MM-dd HH:mm:ss'

		        var date = new Date()

		        /* jshint -W086 */
		        // 参考自 http://momentjs.cn/docs/#/manipulating/start-of/
		        switch (unit) {
		            case 'year':
		                date.setMonth(0)
		            case 'month':
		                date.setDate(1)
		            case 'week':
		            case 'day':
		                date.setHours(0)
		            case 'hour':
		                date.setMinutes(0)
		            case 'minute':
		                date.setSeconds(0)
		            case 'second':
		                date.setMilliseconds(0)
		        }
		        switch (unit) {
		            case 'week':
		                date.setDate(date.getDate() - date.getDay())
		        }

		        return this._formatDate(date, format)
		    }
		}

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(module) {/* global document  */
		/*
		    ## Image
		*/
		module.exports = {
		    // 常见的广告宽高
		    _adSize: [
		        '300x250', '250x250', '240x400', '336x280', '180x150',
		        '720x300', '468x60', '234x60', '88x31', '120x90',
		        '120x60', '120x240', '125x125', '728x90', '160x600',
		        '120x600', '300x600'
		    ],
		    // 常见的屏幕宽高
		    _screenSize: [
		        '320x200', '320x240', '640x480', '800x480', '800x480',
		        '1024x600', '1024x768', '1280x800', '1440x900', '1920x1200',
		        '2560x1600'
		    ],
		    // 常见的视频宽高
		    _videoSize: ['720x480', '768x576', '1280x720', '1920x1080'],
		    /*
		        生成一个随机的图片地址。

		        替代图片源
		            http://fpoimg.com/
		        参考自 
		            http://rensanning.iteye.com/blog/1933310
		            http://code.tutsplus.com/articles/the-top-8-placeholders-for-web-designers--net-19485
		    */
		    image: function(size, background, foreground, format, text) {
		        // Random.image( size, background, foreground, text )
		        if (arguments.length === 4) {
		            text = format
		            format = undefined
		        }
		        // Random.image( size, background, text )
		        if (arguments.length === 3) {
		            text = foreground
		            foreground = undefined
		        }
		        // Random.image()
		        if (!size) size = this.pick(this._adSize)

		        if (background && ~background.indexOf('#')) background = background.slice(1)
		        if (foreground && ~foreground.indexOf('#')) foreground = foreground.slice(1)

		        // http://dummyimage.com/600x400/cc00cc/470047.png&text=hello
		        return 'http://dummyimage.com/' + size +
		            (background ? '/' + background : '') +
		            (foreground ? '/' + foreground : '') +
		            (format ? '.' + format : '') +
		            (text ? '&text=' + text : '')
		    },
		    img: function() {
		        return this.image.apply(this, arguments)
		    },

		    /*
		        BrandColors
		        http://brandcolors.net/
		        A collection of major brand color codes curated by Galen Gidman.
		        大牌公司的颜色集合

		        // 获取品牌和颜色
		        $('h2').each(function(index, item){
		            item = $(item)
		            console.log('\'' + item.text() + '\'', ':', '\'' + item.next().text() + '\'', ',')
		        })
		    */
		    _brandColors: {
		        '4ormat': '#fb0a2a',
		        '500px': '#02adea',
		        'About.me (blue)': '#00405d',
		        'About.me (yellow)': '#ffcc33',
		        'Addvocate': '#ff6138',
		        'Adobe': '#ff0000',
		        'Aim': '#fcd20b',
		        'Amazon': '#e47911',
		        'Android': '#a4c639',
		        'Angie\'s List': '#7fbb00',
		        'AOL': '#0060a3',
		        'Atlassian': '#003366',
		        'Behance': '#053eff',
		        'Big Cartel': '#97b538',
		        'bitly': '#ee6123',
		        'Blogger': '#fc4f08',
		        'Boeing': '#0039a6',
		        'Booking.com': '#003580',
		        'Carbonmade': '#613854',
		        'Cheddar': '#ff7243',
		        'Code School': '#3d4944',
		        'Delicious': '#205cc0',
		        'Dell': '#3287c1',
		        'Designmoo': '#e54a4f',
		        'Deviantart': '#4e6252',
		        'Designer News': '#2d72da',
		        'Devour': '#fd0001',
		        'DEWALT': '#febd17',
		        'Disqus (blue)': '#59a3fc',
		        'Disqus (orange)': '#db7132',
		        'Dribbble': '#ea4c89',
		        'Dropbox': '#3d9ae8',
		        'Drupal': '#0c76ab',
		        'Dunked': '#2a323a',
		        'eBay': '#89c507',
		        'Ember': '#f05e1b',
		        'Engadget': '#00bdf6',
		        'Envato': '#528036',
		        'Etsy': '#eb6d20',
		        'Evernote': '#5ba525',
		        'Fab.com': '#dd0017',
		        'Facebook': '#3b5998',
		        'Firefox': '#e66000',
		        'Flickr (blue)': '#0063dc',
		        'Flickr (pink)': '#ff0084',
		        'Forrst': '#5b9a68',
		        'Foursquare': '#25a0ca',
		        'Garmin': '#007cc3',
		        'GetGlue': '#2d75a2',
		        'Gimmebar': '#f70078',
		        'GitHub': '#171515',
		        'Google Blue': '#0140ca',
		        'Google Green': '#16a61e',
		        'Google Red': '#dd1812',
		        'Google Yellow': '#fcca03',
		        'Google+': '#dd4b39',
		        'Grooveshark': '#f77f00',
		        'Groupon': '#82b548',
		        'Hacker News': '#ff6600',
		        'HelloWallet': '#0085ca',
		        'Heroku (light)': '#c7c5e6',
		        'Heroku (dark)': '#6567a5',
		        'HootSuite': '#003366',
		        'Houzz': '#73ba37',
		        'HTML5': '#ec6231',
		        'IKEA': '#ffcc33',
		        'IMDb': '#f3ce13',
		        'Instagram': '#3f729b',
		        'Intel': '#0071c5',
		        'Intuit': '#365ebf',
		        'Kickstarter': '#76cc1e',
		        'kippt': '#e03500',
		        'Kodery': '#00af81',
		        'LastFM': '#c3000d',
		        'LinkedIn': '#0e76a8',
		        'Livestream': '#cf0005',
		        'Lumo': '#576396',
		        'Mixpanel': '#a086d3',
		        'Meetup': '#e51937',
		        'Nokia': '#183693',
		        'NVIDIA': '#76b900',
		        'Opera': '#cc0f16',
		        'Path': '#e41f11',
		        'PayPal (dark)': '#1e477a',
		        'PayPal (light)': '#3b7bbf',
		        'Pinboard': '#0000e6',
		        'Pinterest': '#c8232c',
		        'PlayStation': '#665cbe',
		        'Pocket': '#ee4056',
		        'Prezi': '#318bff',
		        'Pusha': '#0f71b4',
		        'Quora': '#a82400',
		        'QUOTE.fm': '#66ceff',
		        'Rdio': '#008fd5',
		        'Readability': '#9c0000',
		        'Red Hat': '#cc0000',
		        'Resource': '#7eb400',
		        'Rockpack': '#0ba6ab',
		        'Roon': '#62b0d9',
		        'RSS': '#ee802f',
		        'Salesforce': '#1798c1',
		        'Samsung': '#0c4da2',
		        'Shopify': '#96bf48',
		        'Skype': '#00aff0',
		        'Snagajob': '#f47a20',
		        'Softonic': '#008ace',
		        'SoundCloud': '#ff7700',
		        'Space Box': '#f86960',
		        'Spotify': '#81b71a',
		        'Sprint': '#fee100',
		        'Squarespace': '#121212',
		        'StackOverflow': '#ef8236',
		        'Staples': '#cc0000',
		        'Status Chart': '#d7584f',
		        'Stripe': '#008cdd',
		        'StudyBlue': '#00afe1',
		        'StumbleUpon': '#f74425',
		        'T-Mobile': '#ea0a8e',
		        'Technorati': '#40a800',
		        'The Next Web': '#ef4423',
		        'Treehouse': '#5cb868',
		        'Trulia': '#5eab1f',
		        'Tumblr': '#34526f',
		        'Twitch.tv': '#6441a5',
		        'Twitter': '#00acee',
		        'TYPO3': '#ff8700',
		        'Ubuntu': '#dd4814',
		        'Ustream': '#3388ff',
		        'Verizon': '#ef1d1d',
		        'Vimeo': '#86c9ef',
		        'Vine': '#00a478',
		        'Virb': '#06afd8',
		        'Virgin Media': '#cc0000',
		        'Wooga': '#5b009c',
		        'WordPress (blue)': '#21759b',
		        'WordPress (orange)': '#d54e21',
		        'WordPress (grey)': '#464646',
		        'Wunderlist': '#2b88d9',
		        'XBOX': '#9bc848',
		        'XING': '#126567',
		        'Yahoo!': '#720e9e',
		        'Yandex': '#ffcc00',
		        'Yelp': '#c41200',
		        'YouTube': '#c4302b',
		        'Zalongo': '#5498dc',
		        'Zendesk': '#78a300',
		        'Zerply': '#9dcc7a',
		        'Zootool': '#5e8b1d'
		    },
		    _brandNames: function() {
		        var brands = [];
		        for (var b in this._brandColors) {
		            brands.push(b)
		        }
		        return brands
		    },
		    /*
		        生成一段随机的 Base64 图片编码。

		        https://github.com/imsky/holder
		        Holder renders image placeholders entirely on the client side.

		        dataImageHolder: function(size) {
		            return 'holder.js/' + size
		        },
		    */
		    dataImage: function(size, text) {
		        var canvas
		        if (typeof document !== 'undefined') {
		            canvas = document.createElement('canvas')
		        } else {
		            /*
		                https://github.com/Automattic/node-canvas
		                    npm install canvas --save
		                安装问题：
		                * http://stackoverflow.com/questions/22953206/gulp-issues-with-cario-install-command-not-found-when-trying-to-installing-canva
		                * https://github.com/Automattic/node-canvas/issues/415
		                * https://github.com/Automattic/node-canvas/wiki/_pages

		                PS：node-canvas 的安装过程实在是太繁琐了，所以不放入 package.json 的 dependencies。
		             */
		            var Canvas = module.require('canvas')
		            canvas = new Canvas()
		        }

		        var ctx = canvas && canvas.getContext && canvas.getContext("2d")
		        if (!canvas || !ctx) return ''

		        if (!size) size = this.pick(this._adSize)
		        text = text !== undefined ? text : size

		        size = size.split('x')

		        var width = parseInt(size[0], 10),
		            height = parseInt(size[1], 10),
		            background = this._brandColors[this.pick(this._brandNames())],
		            foreground = '#FFF',
		            text_height = 14,
		            font = 'sans-serif';

		        canvas.width = width
		        canvas.height = height
		        ctx.textAlign = 'center'
		        ctx.textBaseline = 'middle'
		        ctx.fillStyle = background
		        ctx.fillRect(0, 0, width, height)
		        ctx.fillStyle = foreground
		        ctx.font = 'bold ' + text_height + 'px ' + font
		        ctx.fillText(text, (width / 2), (height / 2), width)
		        return canvas.toDataURL('image/png')
		    }
		}
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module)))

	/***/ },
	/* 9 */
	/***/ function(module, exports) {

		module.exports = function(module) {
			if(!module.webpackPolyfill) {
				module.deprecate = function() {};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		}


	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## Color

		    http://llllll.li/randomColor/
		        A color generator for JavaScript.
		        randomColor generates attractive colors by default. More specifically, randomColor produces bright colors with a reasonably high saturation. This makes randomColor particularly useful for data visualizations and generative art.

		    http://randomcolour.com/
		        var bg_colour = Math.floor(Math.random() * 16777215).toString(16);
		        bg_colour = "#" + ("000000" + bg_colour).slice(-6);
		        document.bgColor = bg_colour;
		    
		    http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
		        Creating random colors is actually more difficult than it seems. The randomness itself is easy, but aesthetically pleasing randomness is more difficult.
		        https://github.com/devongovett/color-generator

		    http://www.paulirish.com/2009/random-hex-color-code-snippets/
		        Random Hex Color Code Generator in JavaScript

		    http://chancejs.com/#color
		        chance.color()
		        // => '#79c157'
		        chance.color({format: 'hex'})
		        // => '#d67118'
		        chance.color({format: 'shorthex'})
		        // => '#60f'
		        chance.color({format: 'rgb'})
		        // => 'rgb(110,52,164)'

		    http://tool.c7sky.com/webcolor
		        网页设计常用色彩搭配表
		    
		    https://github.com/One-com/one-color
		        An OO-based JavaScript color parser/computation toolkit with support for RGB, HSV, HSL, CMYK, and alpha channels.
		        API 很赞

		    https://github.com/harthur/color
		        JavaScript color conversion and manipulation library

		    https://github.com/leaverou/css-colors
		        Share & convert CSS colors
		    http://leaverou.github.io/css-colors/#slategray
		        Type a CSS color keyword, #hex, hsl(), rgba(), whatever:

		    色调 hue
		        http://baike.baidu.com/view/23368.htm
		        色调指的是一幅画中画面色彩的总体倾向，是大的色彩效果。
		    饱和度 saturation
		        http://baike.baidu.com/view/189644.htm
		        饱和度是指色彩的鲜艳程度，也称色彩的纯度。饱和度取决于该色中含色成分和消色成分（灰色）的比例。含色成分越大，饱和度越大；消色成分越大，饱和度越小。
		    亮度 brightness
		        http://baike.baidu.com/view/34773.htm
		        亮度是指发光体（反光体）表面发光（反光）强弱的物理量。
		    照度 luminosity
		        物体被照亮的程度,采用单位面积所接受的光通量来表示,表示单位为勒[克斯](Lux,lx) ,即 1m / m2 。

		    http://stackoverflow.com/questions/1484506/random-color-generator-in-javascript
		        var letters = '0123456789ABCDEF'.split('')
		        var color = '#'
		        for (var i = 0; i < 6; i++) {
		            color += letters[Math.floor(Math.random() * 16)]
		        }
		        return color
		    
		        // 随机生成一个无脑的颜色，格式为 '#RRGGBB'。
		        // _brainlessColor()
		        var color = Math.floor(
		            Math.random() *
		            (16 * 16 * 16 * 16 * 16 * 16 - 1)
		        ).toString(16)
		        color = "#" + ("000000" + color).slice(-6)
		        return color.toUpperCase()
		*/

		var Convert = __webpack_require__(11)
		var DICT = __webpack_require__(12)

		module.exports = {
		    // 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'。
		    color: function(name) {
		        if (name || DICT[name]) return DICT[name].nicer
		        return this.hex()
		    },
		    // #DAC0DE
		    hex: function() {
		        var hsv = this._goldenRatioColor()
		        var rgb = Convert.hsv2rgb(hsv)
		        var hex = Convert.rgb2hex(rgb[0], rgb[1], rgb[2])
		        return hex
		    },
		    // rgb(128,255,255)
		    rgb: function() {
		        var hsv = this._goldenRatioColor()
		        var rgb = Convert.hsv2rgb(hsv)
		        return 'rgb(' +
		            parseInt(rgb[0], 10) + ', ' +
		            parseInt(rgb[1], 10) + ', ' +
		            parseInt(rgb[2], 10) + ')'
		    },
		    // rgba(128,255,255,0.3)
		    rgba: function() {
		        var hsv = this._goldenRatioColor()
		        var rgb = Convert.hsv2rgb(hsv)
		        return 'rgba(' +
		            parseInt(rgb[0], 10) + ', ' +
		            parseInt(rgb[1], 10) + ', ' +
		            parseInt(rgb[2], 10) + ', ' +
		            Math.random().toFixed(2) + ')'
		    },
		    // hsl(300,80%,90%)
		    hsl: function() {
		        var hsv = this._goldenRatioColor()
		        var hsl = Convert.hsv2hsl(hsv)
		        return 'hsl(' +
		            parseInt(hsl[0], 10) + ', ' +
		            parseInt(hsl[1], 10) + ', ' +
		            parseInt(hsl[2], 10) + ')'
		    },
		    // http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
		    // https://github.com/devongovett/color-generator/blob/master/index.js
		    // 随机生成一个有吸引力的颜色。
		    _goldenRatioColor: function(saturation, value) {
		        this._goldenRatio = 0.618033988749895
		        this._hue = this._hue || Math.random()
		        this._hue += this._goldenRatio
		        this._hue %= 1

		        if (typeof saturation !== "number") saturation = 0.5;
		        if (typeof value !== "number") value = 0.95;

		        return [
		            this._hue * 360,
		            saturation * 100,
		            value * 100
		        ]
		    }
		}

	/***/ },
	/* 11 */
	/***/ function(module, exports) {

		/*
		    ## Color Convert

		    http://blog.csdn.net/idfaya/article/details/6770414
		        颜色空间RGB与HSV(HSL)的转换
		*/
		// https://github.com/harthur/color-convert/blob/master/conversions.js
		module.exports = {
			rgb2hsl: function rgb2hsl(rgb) {
				var r = rgb[0] / 255,
					g = rgb[1] / 255,
					b = rgb[2] / 255,
					min = Math.min(r, g, b),
					max = Math.max(r, g, b),
					delta = max - min,
					h, s, l;

				if (max == min)
					h = 0;
				else if (r == max)
					h = (g - b) / delta;
				else if (g == max)
					h = 2 + (b - r) / delta;
				else if (b == max)
					h = 4 + (r - g) / delta;

				h = Math.min(h * 60, 360);

				if (h < 0)
					h += 360;

				l = (min + max) / 2;

				if (max == min)
					s = 0;
				else if (l <= 0.5)
					s = delta / (max + min);
				else
					s = delta / (2 - max - min);

				return [h, s * 100, l * 100];
			},
			rgb2hsv: function rgb2hsv(rgb) {
				var r = rgb[0],
					g = rgb[1],
					b = rgb[2],
					min = Math.min(r, g, b),
					max = Math.max(r, g, b),
					delta = max - min,
					h, s, v;

				if (max === 0)
					s = 0;
				else
					s = (delta / max * 1000) / 10;

				if (max == min)
					h = 0;
				else if (r == max)
					h = (g - b) / delta;
				else if (g == max)
					h = 2 + (b - r) / delta;
				else if (b == max)
					h = 4 + (r - g) / delta;

				h = Math.min(h * 60, 360);

				if (h < 0)
					h += 360;

				v = ((max / 255) * 1000) / 10;

				return [h, s, v];
			},
			hsl2rgb: function hsl2rgb(hsl) {
				var h = hsl[0] / 360,
					s = hsl[1] / 100,
					l = hsl[2] / 100,
					t1, t2, t3, rgb, val;

				if (s === 0) {
					val = l * 255;
					return [val, val, val];
				}

				if (l < 0.5)
					t2 = l * (1 + s);
				else
					t2 = l + s - l * s;
				t1 = 2 * l - t2;

				rgb = [0, 0, 0];
				for (var i = 0; i < 3; i++) {
					t3 = h + 1 / 3 * -(i - 1);
					if (t3 < 0) t3++;
					if (t3 > 1) t3--;

					if (6 * t3 < 1)
						val = t1 + (t2 - t1) * 6 * t3;
					else if (2 * t3 < 1)
						val = t2;
					else if (3 * t3 < 2)
						val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
					else
						val = t1;

					rgb[i] = val * 255;
				}

				return rgb;
			},
			hsl2hsv: function hsl2hsv(hsl) {
				var h = hsl[0],
					s = hsl[1] / 100,
					l = hsl[2] / 100,
					sv, v;
				l *= 2;
				s *= (l <= 1) ? l : 2 - l;
				v = (l + s) / 2;
				sv = (2 * s) / (l + s);
				return [h, sv * 100, v * 100];
			},
			hsv2rgb: function hsv2rgb(hsv) {
				var h = hsv[0] / 60
				var s = hsv[1] / 100
				var v = hsv[2] / 100
				var hi = Math.floor(h) % 6

				var f = h - Math.floor(h)
				var p = 255 * v * (1 - s)
				var q = 255 * v * (1 - (s * f))
				var t = 255 * v * (1 - (s * (1 - f)))

				v = 255 * v

				switch (hi) {
					case 0:
						return [v, t, p]
					case 1:
						return [q, v, p]
					case 2:
						return [p, v, t]
					case 3:
						return [p, q, v]
					case 4:
						return [t, p, v]
					case 5:
						return [v, p, q]
				}
			},
			hsv2hsl: function hsv2hsl(hsv) {
				var h = hsv[0],
					s = hsv[1] / 100,
					v = hsv[2] / 100,
					sl, l;

				l = (2 - s) * v;
				sl = s * v;
				sl /= (l <= 1) ? l : 2 - l;
				l /= 2;
				return [h, sl * 100, l * 100];
			},
			// http://www.140byt.es/keywords/color
			rgb2hex: function(
				a, // red, as a number from 0 to 255
				b, // green, as a number from 0 to 255
				c // blue, as a number from 0 to 255
			) {
				return "#" + ((256 + a << 8 | b) << 8 | c).toString(16).slice(1)
			},
			hex2rgb: function(
				a // take a "#xxxxxx" hex string,
			) {
				a = '0x' + a.slice(1).replace(a.length > 4 ? a : /./g, '$&$&') | 0;
				return [a >> 16, a >> 8 & 255, a & 255]
			}
		}

	/***/ },
	/* 12 */
	/***/ function(module, exports) {

		/*
		    ## Color 字典数据

		    字典数据来源 [A nicer color palette for the web](http://clrs.cc/)
		*/
		module.exports = {
		    // name value nicer
		    navy: {
		        value: '#000080',
		        nicer: '#001F3F'
		    },
		    blue: {
		        value: '#0000ff',
		        nicer: '#0074D9'
		    },
		    aqua: {
		        value: '#00ffff',
		        nicer: '#7FDBFF'
		    },
		    teal: {
		        value: '#008080',
		        nicer: '#39CCCC'
		    },
		    olive: {
		        value: '#008000',
		        nicer: '#3D9970'
		    },
		    green: {
		        value: '#008000',
		        nicer: '#2ECC40'
		    },
		    lime: {
		        value: '#00ff00',
		        nicer: '#01FF70'
		    },
		    yellow: {
		        value: '#ffff00',
		        nicer: '#FFDC00'
		    },
		    orange: {
		        value: '#ffa500',
		        nicer: '#FF851B'
		    },
		    red: {
		        value: '#ff0000',
		        nicer: '#FF4136'
		    },
		    maroon: {
		        value: '#800000',
		        nicer: '#85144B'
		    },
		    fuchsia: {
		        value: '#ff00ff',
		        nicer: '#F012BE'
		    },
		    purple: {
		        value: '#800080',
		        nicer: '#B10DC9'
		    },
		    silver: {
		        value: '#c0c0c0',
		        nicer: '#DDDDDD'
		    },
		    gray: {
		        value: '#808080',
		        nicer: '#AAAAAA'
		    },
		    black: {
		        value: '#000000',
		        nicer: '#111111'
		    },
		    white: {
		        value: '#FFFFFF',
		        nicer: '#FFFFFF'
		    }
		}

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## Text

		    http://www.lipsum.com/
		*/
		var Basic = __webpack_require__(6)
		var Helper = __webpack_require__(14)

		function range(defaultMin, defaultMax, min, max) {
		    return min === undefined ? Basic.natural(defaultMin, defaultMax) : // ()
		        max === undefined ? min : // ( len )
		        Basic.natural(parseInt(min, 10), parseInt(max, 10)) // ( min, max )
		}

		module.exports = {
		    // 随机生成一段文本。
		    paragraph: function(min, max) {
		        var len = range(3, 7, min, max)
		        var result = []
		        for (var i = 0; i < len; i++) {
		            result.push(this.sentence())
		        }
		        return result.join(' ')
		    },
		    // 
		    cparagraph: function(min, max) {
		        var len = range(3, 7, min, max)
		        var result = []
		        for (var i = 0; i < len; i++) {
		            result.push(this.csentence())
		        }
		        return result.join('')
		    },
		    // 随机生成一个句子，第一个单词的首字母大写。
		    sentence: function(min, max) {
		        var len = range(12, 18, min, max)
		        var result = []
		        for (var i = 0; i < len; i++) {
		            result.push(this.word())
		        }
		        return Helper.capitalize(result.join(' ')) + '.'
		    },
		    // 随机生成一个中文句子。
		    csentence: function(min, max) {
		        var len = range(12, 18, min, max)
		        var result = []
		        for (var i = 0; i < len; i++) {
		            result.push(this.cword())
		        }

		        return result.join('') + '。'
		    },
		    // 随机生成一个单词。
		    word: function(min, max) {
		        var len = range(3, 10, min, max)
		        var result = '';
		        for (var i = 0; i < len; i++) {
		            result += Basic.character('lower')
		        }
		        return result
		    },
		    // 随机生成一个或多个汉字。
		    cword: function(pool, min, max) {
		        // 最常用的 500 个汉字 http://baike.baidu.com/view/568436.htm
		        var DICT_KANZI = '的一是在不了有和人这中大为上个国我以要他时来用们生到作地于出就分对成会可主发年动同工也能下过子说产种面而方后多定行学法所民得经十三之进着等部度家电力里如水化高自二理起小物现实加量都两体制机当使点从业本去把性好应开它合还因由其些然前外天政四日那社义事平形相全表间样与关各重新线内数正心反你明看原又么利比或但质气第向道命此变条只没结解问意建月公无系军很情者最立代想已通并提直题党程展五果料象员革位入常文总次品式活设及管特件长求老头基资边流路级少图山统接知较将组见计别她手角期根论运农指几九区强放决西被干做必战先回则任取据处队南给色光门即保治北造百规热领七海口东导器压志世金增争济阶油思术极交受联什认六共权收证改清己美再采转更单风切打白教速花带安场身车例真务具万每目至达走积示议声报斗完类八离华名确才科张信马节话米整空元况今集温传土许步群广石记需段研界拉林律叫且究观越织装影算低持音众书布复容儿须际商非验连断深难近矿千周委素技备半办青省列习响约支般史感劳便团往酸历市克何除消构府称太准精值号率族维划选标写存候毛亲快效斯院查江型眼王按格养易置派层片始却专状育厂京识适属圆包火住调满县局照参红细引听该铁价严龙飞'

		        var len
		        switch (arguments.length) {
		            case 0: // ()
		                pool = DICT_KANZI
		                len = 1
		                break
		            case 1: // ( pool )
		                if (typeof arguments[0] === 'string') {
		                    len = 1
		                } else {
		                    // ( length )
		                    len = pool
		                    pool = DICT_KANZI
		                }
		                break
		            case 2:
		                // ( pool, length )
		                if (typeof arguments[0] === 'string') {
		                    len = min
		                } else {
		                    // ( min, max )
		                    len = this.natural(pool, min)
		                    pool = DICT_KANZI
		                }
		                break
		            case 3:
		                len = this.natural(min, max)
		                break
		        }

		        var result = ''
		        for (var i = 0; i < len; i++) {
		            result += pool.charAt(this.natural(0, pool.length - 1))
		        }
		        return result
		    },
		    // 随机生成一句标题，其中每个单词的首字母大写。
		    title: function(min, max) {
		        var len = range(3, 7, min, max)
		        var result = []
		        for (var i = 0; i < len; i++) {
		            result.push(this.capitalize(this.word()))
		        }
		        return result.join(' ')
		    },
		    // 随机生成一句中文标题。
		    ctitle: function(min, max) {
		        var len = range(3, 7, min, max)
		        var result = []
		        for (var i = 0; i < len; i++) {
		            result.push(this.cword())
		        }
		        return result.join('')
		    }
		}

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## Helpers
		*/

		var Util = __webpack_require__(3)

		module.exports = {
			// 把字符串的第一个字母转换为大写。
			capitalize: function(word) {
				return (word + '').charAt(0).toUpperCase() + (word + '').substr(1)
			},
			// 把字符串转换为大写。
			upper: function(str) {
				return (str + '').toUpperCase()
			},
			// 把字符串转换为小写。
			lower: function(str) {
				return (str + '').toLowerCase()
			},
			// 从数组中随机选取一个元素，并返回。
			pick: function pick(arr, min, max) {
				// pick( item1, item2 ... )
				if (!Util.isArray(arr)) {
					arr = [].slice.call(arguments)
					min = 1
					max = 1
				} else {
					// pick( [ item1, item2 ... ] )
					if (min === undefined) min = 1

					// pick( [ item1, item2 ... ], count )
					if (max === undefined) max = min
				}

				if (min === 1 && max === 1) return arr[this.natural(0, arr.length - 1)]

				// pick( [ item1, item2 ... ], min, max )
				return this.shuffle(arr, min, max)

				// 通过参数个数判断方法签名，扩展性太差！#90
				// switch (arguments.length) {
				// 	case 1:
				// 		// pick( [ item1, item2 ... ] )
				// 		return arr[this.natural(0, arr.length - 1)]
				// 	case 2:
				// 		// pick( [ item1, item2 ... ], count )
				// 		max = min
				// 			/* falls through */
				// 	case 3:
				// 		// pick( [ item1, item2 ... ], min, max )
				// 		return this.shuffle(arr, min, max)
				// }
			},
			/*
			    打乱数组中元素的顺序，并返回。
			    Given an array, scramble the order and return it.

			    其他的实现思路：
			        // https://code.google.com/p/jslibs/wiki/JavascriptTips
			        result = result.sort(function() {
			            return Math.random() - 0.5
			        })
			*/
			shuffle: function shuffle(arr, min, max) {
				arr = arr || []
				var old = arr.slice(0),
					result = [],
					index = 0,
					length = old.length;
				for (var i = 0; i < length; i++) {
					index = this.natural(0, old.length - 1)
					result.push(old[index])
					old.splice(index, 1)
				}
				switch (arguments.length) {
					case 0:
					case 1:
						return result
					case 2:
						max = min
							/* falls through */
					case 3:
						min = parseInt(min, 10)
						max = parseInt(max, 10)
						return result.slice(0, this.natural(min, max))
				}
			},
			/*
			    * Random.order(item, item)
			    * Random.order([item, item ...])

			    顺序获取数组中的元素

			    [JSON导入数组支持数组数据录入](https://github.com/thx/RAP/issues/22)

			    不支持单独调用！
			*/
			order: function order(array) {
				order.cache = order.cache || {}

				if (arguments.length > 1) array = [].slice.call(arguments, 0)

				// options.context.path/templatePath
				var options = order.options
				var templatePath = options.context.templatePath.join('.')

				var cache = (
					order.cache[templatePath] = order.cache[templatePath] || {
						index: 0,
						array: array
					}
				)

				return cache.array[cache.index++ % cache.array.length]
			}
		}

	/***/ },
	/* 15 */
	/***/ function(module, exports) {

		/*
		    ## Name

		    [Beyond the Top 1000 Names](http://www.ssa.gov/oact/babynames/limits.html)
		*/
		module.exports = {
			// 随机生成一个常见的英文名。
			first: function() {
				var names = [
					// male
					"James", "John", "Robert", "Michael", "William",
					"David", "Richard", "Charles", "Joseph", "Thomas",
					"Christopher", "Daniel", "Paul", "Mark", "Donald",
					"George", "Kenneth", "Steven", "Edward", "Brian",
					"Ronald", "Anthony", "Kevin", "Jason", "Matthew",
					"Gary", "Timothy", "Jose", "Larry", "Jeffrey",
					"Frank", "Scott", "Eric"
				].concat([
					// female
					"Mary", "Patricia", "Linda", "Barbara", "Elizabeth",
					"Jennifer", "Maria", "Susan", "Margaret", "Dorothy",
					"Lisa", "Nancy", "Karen", "Betty", "Helen",
					"Sandra", "Donna", "Carol", "Ruth", "Sharon",
					"Michelle", "Laura", "Sarah", "Kimberly", "Deborah",
					"Jessica", "Shirley", "Cynthia", "Angela", "Melissa",
					"Brenda", "Amy", "Anna"
				])
				return this.pick(names)
					// or this.capitalize(this.word())
			},
			// 随机生成一个常见的英文姓。
			last: function() {
				var names = [
					"Smith", "Johnson", "Williams", "Brown", "Jones",
					"Miller", "Davis", "Garcia", "Rodriguez", "Wilson",
					"Martinez", "Anderson", "Taylor", "Thomas", "Hernandez",
					"Moore", "Martin", "Jackson", "Thompson", "White",
					"Lopez", "Lee", "Gonzalez", "Harris", "Clark",
					"Lewis", "Robinson", "Walker", "Perez", "Hall",
					"Young", "Allen"
				]
				return this.pick(names)
					// or this.capitalize(this.word())
			},
			// 随机生成一个常见的英文姓名。
			name: function(middle) {
				return this.first() + ' ' +
					(middle ? this.first() + ' ' : '') +
					this.last()
			},
			/*
			    随机生成一个常见的中文姓。
			    [世界常用姓氏排行](http://baike.baidu.com/view/1719115.htm)
			    [玄派网 - 网络小说创作辅助平台](http://xuanpai.sinaapp.com/)
			 */
			cfirst: function() {
				var names = (
					'王 李 张 刘 陈 杨 赵 黄 周 吴 ' +
					'徐 孙 胡 朱 高 林 何 郭 马 罗 ' +
					'梁 宋 郑 谢 韩 唐 冯 于 董 萧 ' +
					'程 曹 袁 邓 许 傅 沈 曾 彭 吕 ' +
					'苏 卢 蒋 蔡 贾 丁 魏 薛 叶 阎 ' +
					'余 潘 杜 戴 夏 锺 汪 田 任 姜 ' +
					'范 方 石 姚 谭 廖 邹 熊 金 陆 ' +
					'郝 孔 白 崔 康 毛 邱 秦 江 史 ' +
					'顾 侯 邵 孟 龙 万 段 雷 钱 汤 ' +
					'尹 黎 易 常 武 乔 贺 赖 龚 文'
				).split(' ')
				return this.pick(names)
			},
			/*
			    随机生成一个常见的中文名。
			    [中国最常见名字前50名_三九算命网](http://www.name999.net/xingming/xingshi/20131004/48.html)
			 */
			clast: function() {
				var names = (
					'伟 芳 娜 秀英 敏 静 丽 强 磊 军 ' +
					'洋 勇 艳 杰 娟 涛 明 超 秀兰 霞 ' +
					'平 刚 桂英'
				).split(' ')
				return this.pick(names)
			},
			// 随机生成一个常见的中文姓名。
			cname: function() {
				return this.cfirst() + this.clast()
			}
		}

	/***/ },
	/* 16 */
	/***/ function(module, exports) {

		/*
		    ## Web
		*/
		module.exports = {
		    /*
		        随机生成一个 URL。

		        [URL 规范](http://www.w3.org/Addressing/URL/url-spec.txt)
		            http                    Hypertext Transfer Protocol 
		            ftp                     File Transfer protocol 
		            gopher                  The Gopher protocol 
		            mailto                  Electronic mail address 
		            mid                     Message identifiers for electronic mail 
		            cid                     Content identifiers for MIME body part 
		            news                    Usenet news 
		            nntp                    Usenet news for local NNTP access only 
		            prospero                Access using the prospero protocols 
		            telnet rlogin tn3270    Reference to interactive sessions
		            wais                    Wide Area Information Servers 
		    */
		    url: function(protocol, host) {
		        return (protocol || this.protocol()) + '://' + // protocol?
		            (host || this.domain()) + // host?
		            '/' + this.word()
		    },
		    // 随机生成一个 URL 协议。
		    protocol: function() {
		        return this.pick(
		            // 协议簇
		            'http ftp gopher mailto mid cid news nntp prospero telnet rlogin tn3270 wais'.split(' ')
		        )
		    },
		    // 随机生成一个域名。
		    domain: function(tld) {
		        return this.word() + '.' + (tld || this.tld())
		    },
		    /*
		        随机生成一个顶级域名。
		        国际顶级域名 international top-level domain-names, iTLDs
		        国家顶级域名 national top-level domainnames, nTLDs
		        [域名后缀大全](http://www.163ns.com/zixun/post/4417.html)
		    */
		    tld: function() { // Top Level Domain
		        return this.pick(
		            (
		                // 域名后缀
		                'com net org edu gov int mil cn ' +
		                // 国内域名
		                'com.cn net.cn gov.cn org.cn ' +
		                // 中文国内域名
		                '中国 中国互联.公司 中国互联.网络 ' +
		                // 新国际域名
		                'tel biz cc tv info name hk mobi asia cd travel pro museum coop aero ' +
		                // 世界各国域名后缀
		                'ad ae af ag ai al am an ao aq ar as at au aw az ba bb bd be bf bg bh bi bj bm bn bo br bs bt bv bw by bz ca cc cf cg ch ci ck cl cm cn co cq cr cu cv cx cy cz de dj dk dm do dz ec ee eg eh es et ev fi fj fk fm fo fr ga gb gd ge gf gh gi gl gm gn gp gr gt gu gw gy hk hm hn hr ht hu id ie il in io iq ir is it jm jo jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv ly ma mc md mg mh ml mm mn mo mp mq mr ms mt mv mw mx my mz na nc ne nf ng ni nl no np nr nt nu nz om qa pa pe pf pg ph pk pl pm pn pr pt pw py re ro ru rw sa sb sc sd se sg sh si sj sk sl sm sn so sr st su sy sz tc td tf tg th tj tk tm tn to tp tr tt tv tw tz ua ug uk us uy va vc ve vg vn vu wf ws ye yu za zm zr zw'
		            ).split(' ')
		        )
		    },
		    // 随机生成一个邮件地址。
		    email: function(domain) {
		        return this.character('lower') + '.' + this.word() + '@' +
		            (
		                domain ||
		                (this.word() + '.' + this.tld())
		            )
		            // return this.character('lower') + '.' + this.last().toLowerCase() + '@' + this.last().toLowerCase() + '.' + this.tld()
		            // return this.word() + '@' + (domain || this.domain())
		    },
		    // 随机生成一个 IP 地址。
		    ip: function() {
		        return this.natural(0, 255) + '.' +
		            this.natural(0, 255) + '.' +
		            this.natural(0, 255) + '.' +
		            this.natural(0, 255)
		    }
		}

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## Address
		*/

		var DICT = __webpack_require__(18)
		var REGION = ['东北', '华北', '华东', '华中', '华南', '西南', '西北']

		module.exports = {
		    // 随机生成一个大区。
		    region: function() {
		        return this.pick(REGION)
		    },
		    // 随机生成一个（中国）省（或直辖市、自治区、特别行政区）。
		    province: function() {
		        return this.pick(DICT).name
		    },
		    // 随机生成一个（中国）市。
		    city: function(prefix) {
		        var province = this.pick(DICT)
		        var city = this.pick(province.children)
		        return prefix ? [province.name, city.name].join(' ') : city.name
		    },
		    // 随机生成一个（中国）县。
		    county: function(prefix) {
		        var province = this.pick(DICT)
		        var city = this.pick(province.children)
		        var county = this.pick(city.children) || {
		            name: '-'
		        }
		        return prefix ? [province.name, city.name, county.name].join(' ') : county.name
		    },
		    // 随机生成一个邮政编码（六位数字）。
		    zip: function(len) {
		        var zip = ''
		        for (var i = 0; i < (len || 6); i++) zip += this.natural(0, 9)
		        return zip
		    }

		    // address: function() {},
		    // phone: function() {},
		    // areacode: function() {},
		    // street: function() {},
		    // street_suffixes: function() {},
		    // street_suffix: function() {},
		    // states: function() {},
		    // state: function() {},
		}

	/***/ },
	/* 18 */
	/***/ function(module, exports) {

		/*
		    ## Address 字典数据

		    字典数据来源 http://www.atatech.org/articles/30028?rnd=254259856

		    国标 省（市）级行政区划码表

		    华北   北京市 天津市 河北省 山西省 内蒙古自治区
		    东北   辽宁省 吉林省 黑龙江省
		    华东   上海市 江苏省 浙江省 安徽省 福建省 江西省 山东省
		    华南   广东省 广西壮族自治区 海南省
		    华中   河南省 湖北省 湖南省
		    西南   重庆市 四川省 贵州省 云南省 西藏自治区
		    西北   陕西省 甘肃省 青海省 宁夏回族自治区 新疆维吾尔自治区
		    港澳台 香港特别行政区 澳门特别行政区 台湾省
		    
		    **排序**
		    
		    ```js
		    var map = {}
		    _.each(_.keys(REGIONS),function(id){
		      map[id] = REGIONS[ID]
		    })
		    JSON.stringify(map)
		    ```
		*/
		var DICT = {
		    "110000": "北京",
		    "110100": "北京市",
		    "110101": "东城区",
		    "110102": "西城区",
		    "110105": "朝阳区",
		    "110106": "丰台区",
		    "110107": "石景山区",
		    "110108": "海淀区",
		    "110109": "门头沟区",
		    "110111": "房山区",
		    "110112": "通州区",
		    "110113": "顺义区",
		    "110114": "昌平区",
		    "110115": "大兴区",
		    "110116": "怀柔区",
		    "110117": "平谷区",
		    "110228": "密云县",
		    "110229": "延庆县",
		    "110230": "其它区",
		    "120000": "天津",
		    "120100": "天津市",
		    "120101": "和平区",
		    "120102": "河东区",
		    "120103": "河西区",
		    "120104": "南开区",
		    "120105": "河北区",
		    "120106": "红桥区",
		    "120110": "东丽区",
		    "120111": "西青区",
		    "120112": "津南区",
		    "120113": "北辰区",
		    "120114": "武清区",
		    "120115": "宝坻区",
		    "120116": "滨海新区",
		    "120221": "宁河县",
		    "120223": "静海县",
		    "120225": "蓟县",
		    "120226": "其它区",
		    "130000": "河北省",
		    "130100": "石家庄市",
		    "130102": "长安区",
		    "130103": "桥东区",
		    "130104": "桥西区",
		    "130105": "新华区",
		    "130107": "井陉矿区",
		    "130108": "裕华区",
		    "130121": "井陉县",
		    "130123": "正定县",
		    "130124": "栾城县",
		    "130125": "行唐县",
		    "130126": "灵寿县",
		    "130127": "高邑县",
		    "130128": "深泽县",
		    "130129": "赞皇县",
		    "130130": "无极县",
		    "130131": "平山县",
		    "130132": "元氏县",
		    "130133": "赵县",
		    "130181": "辛集市",
		    "130182": "藁城市",
		    "130183": "晋州市",
		    "130184": "新乐市",
		    "130185": "鹿泉市",
		    "130186": "其它区",
		    "130200": "唐山市",
		    "130202": "路南区",
		    "130203": "路北区",
		    "130204": "古冶区",
		    "130205": "开平区",
		    "130207": "丰南区",
		    "130208": "丰润区",
		    "130223": "滦县",
		    "130224": "滦南县",
		    "130225": "乐亭县",
		    "130227": "迁西县",
		    "130229": "玉田县",
		    "130230": "曹妃甸区",
		    "130281": "遵化市",
		    "130283": "迁安市",
		    "130284": "其它区",
		    "130300": "秦皇岛市",
		    "130302": "海港区",
		    "130303": "山海关区",
		    "130304": "北戴河区",
		    "130321": "青龙满族自治县",
		    "130322": "昌黎县",
		    "130323": "抚宁县",
		    "130324": "卢龙县",
		    "130398": "其它区",
		    "130400": "邯郸市",
		    "130402": "邯山区",
		    "130403": "丛台区",
		    "130404": "复兴区",
		    "130406": "峰峰矿区",
		    "130421": "邯郸县",
		    "130423": "临漳县",
		    "130424": "成安县",
		    "130425": "大名县",
		    "130426": "涉县",
		    "130427": "磁县",
		    "130428": "肥乡县",
		    "130429": "永年县",
		    "130430": "邱县",
		    "130431": "鸡泽县",
		    "130432": "广平县",
		    "130433": "馆陶县",
		    "130434": "魏县",
		    "130435": "曲周县",
		    "130481": "武安市",
		    "130482": "其它区",
		    "130500": "邢台市",
		    "130502": "桥东区",
		    "130503": "桥西区",
		    "130521": "邢台县",
		    "130522": "临城县",
		    "130523": "内丘县",
		    "130524": "柏乡县",
		    "130525": "隆尧县",
		    "130526": "任县",
		    "130527": "南和县",
		    "130528": "宁晋县",
		    "130529": "巨鹿县",
		    "130530": "新河县",
		    "130531": "广宗县",
		    "130532": "平乡县",
		    "130533": "威县",
		    "130534": "清河县",
		    "130535": "临西县",
		    "130581": "南宫市",
		    "130582": "沙河市",
		    "130583": "其它区",
		    "130600": "保定市",
		    "130602": "新市区",
		    "130603": "北市区",
		    "130604": "南市区",
		    "130621": "满城县",
		    "130622": "清苑县",
		    "130623": "涞水县",
		    "130624": "阜平县",
		    "130625": "徐水县",
		    "130626": "定兴县",
		    "130627": "唐县",
		    "130628": "高阳县",
		    "130629": "容城县",
		    "130630": "涞源县",
		    "130631": "望都县",
		    "130632": "安新县",
		    "130633": "易县",
		    "130634": "曲阳县",
		    "130635": "蠡县",
		    "130636": "顺平县",
		    "130637": "博野县",
		    "130638": "雄县",
		    "130681": "涿州市",
		    "130682": "定州市",
		    "130683": "安国市",
		    "130684": "高碑店市",
		    "130699": "其它区",
		    "130700": "张家口市",
		    "130702": "桥东区",
		    "130703": "桥西区",
		    "130705": "宣化区",
		    "130706": "下花园区",
		    "130721": "宣化县",
		    "130722": "张北县",
		    "130723": "康保县",
		    "130724": "沽源县",
		    "130725": "尚义县",
		    "130726": "蔚县",
		    "130727": "阳原县",
		    "130728": "怀安县",
		    "130729": "万全县",
		    "130730": "怀来县",
		    "130731": "涿鹿县",
		    "130732": "赤城县",
		    "130733": "崇礼县",
		    "130734": "其它区",
		    "130800": "承德市",
		    "130802": "双桥区",
		    "130803": "双滦区",
		    "130804": "鹰手营子矿区",
		    "130821": "承德县",
		    "130822": "兴隆县",
		    "130823": "平泉县",
		    "130824": "滦平县",
		    "130825": "隆化县",
		    "130826": "丰宁满族自治县",
		    "130827": "宽城满族自治县",
		    "130828": "围场满族蒙古族自治县",
		    "130829": "其它区",
		    "130900": "沧州市",
		    "130902": "新华区",
		    "130903": "运河区",
		    "130921": "沧县",
		    "130922": "青县",
		    "130923": "东光县",
		    "130924": "海兴县",
		    "130925": "盐山县",
		    "130926": "肃宁县",
		    "130927": "南皮县",
		    "130928": "吴桥县",
		    "130929": "献县",
		    "130930": "孟村回族自治县",
		    "130981": "泊头市",
		    "130982": "任丘市",
		    "130983": "黄骅市",
		    "130984": "河间市",
		    "130985": "其它区",
		    "131000": "廊坊市",
		    "131002": "安次区",
		    "131003": "广阳区",
		    "131022": "固安县",
		    "131023": "永清县",
		    "131024": "香河县",
		    "131025": "大城县",
		    "131026": "文安县",
		    "131028": "大厂回族自治县",
		    "131081": "霸州市",
		    "131082": "三河市",
		    "131083": "其它区",
		    "131100": "衡水市",
		    "131102": "桃城区",
		    "131121": "枣强县",
		    "131122": "武邑县",
		    "131123": "武强县",
		    "131124": "饶阳县",
		    "131125": "安平县",
		    "131126": "故城县",
		    "131127": "景县",
		    "131128": "阜城县",
		    "131181": "冀州市",
		    "131182": "深州市",
		    "131183": "其它区",
		    "140000": "山西省",
		    "140100": "太原市",
		    "140105": "小店区",
		    "140106": "迎泽区",
		    "140107": "杏花岭区",
		    "140108": "尖草坪区",
		    "140109": "万柏林区",
		    "140110": "晋源区",
		    "140121": "清徐县",
		    "140122": "阳曲县",
		    "140123": "娄烦县",
		    "140181": "古交市",
		    "140182": "其它区",
		    "140200": "大同市",
		    "140202": "城区",
		    "140203": "矿区",
		    "140211": "南郊区",
		    "140212": "新荣区",
		    "140221": "阳高县",
		    "140222": "天镇县",
		    "140223": "广灵县",
		    "140224": "灵丘县",
		    "140225": "浑源县",
		    "140226": "左云县",
		    "140227": "大同县",
		    "140228": "其它区",
		    "140300": "阳泉市",
		    "140302": "城区",
		    "140303": "矿区",
		    "140311": "郊区",
		    "140321": "平定县",
		    "140322": "盂县",
		    "140323": "其它区",
		    "140400": "长治市",
		    "140421": "长治县",
		    "140423": "襄垣县",
		    "140424": "屯留县",
		    "140425": "平顺县",
		    "140426": "黎城县",
		    "140427": "壶关县",
		    "140428": "长子县",
		    "140429": "武乡县",
		    "140430": "沁县",
		    "140431": "沁源县",
		    "140481": "潞城市",
		    "140482": "城区",
		    "140483": "郊区",
		    "140485": "其它区",
		    "140500": "晋城市",
		    "140502": "城区",
		    "140521": "沁水县",
		    "140522": "阳城县",
		    "140524": "陵川县",
		    "140525": "泽州县",
		    "140581": "高平市",
		    "140582": "其它区",
		    "140600": "朔州市",
		    "140602": "朔城区",
		    "140603": "平鲁区",
		    "140621": "山阴县",
		    "140622": "应县",
		    "140623": "右玉县",
		    "140624": "怀仁县",
		    "140625": "其它区",
		    "140700": "晋中市",
		    "140702": "榆次区",
		    "140721": "榆社县",
		    "140722": "左权县",
		    "140723": "和顺县",
		    "140724": "昔阳县",
		    "140725": "寿阳县",
		    "140726": "太谷县",
		    "140727": "祁县",
		    "140728": "平遥县",
		    "140729": "灵石县",
		    "140781": "介休市",
		    "140782": "其它区",
		    "140800": "运城市",
		    "140802": "盐湖区",
		    "140821": "临猗县",
		    "140822": "万荣县",
		    "140823": "闻喜县",
		    "140824": "稷山县",
		    "140825": "新绛县",
		    "140826": "绛县",
		    "140827": "垣曲县",
		    "140828": "夏县",
		    "140829": "平陆县",
		    "140830": "芮城县",
		    "140881": "永济市",
		    "140882": "河津市",
		    "140883": "其它区",
		    "140900": "忻州市",
		    "140902": "忻府区",
		    "140921": "定襄县",
		    "140922": "五台县",
		    "140923": "代县",
		    "140924": "繁峙县",
		    "140925": "宁武县",
		    "140926": "静乐县",
		    "140927": "神池县",
		    "140928": "五寨县",
		    "140929": "岢岚县",
		    "140930": "河曲县",
		    "140931": "保德县",
		    "140932": "偏关县",
		    "140981": "原平市",
		    "140982": "其它区",
		    "141000": "临汾市",
		    "141002": "尧都区",
		    "141021": "曲沃县",
		    "141022": "翼城县",
		    "141023": "襄汾县",
		    "141024": "洪洞县",
		    "141025": "古县",
		    "141026": "安泽县",
		    "141027": "浮山县",
		    "141028": "吉县",
		    "141029": "乡宁县",
		    "141030": "大宁县",
		    "141031": "隰县",
		    "141032": "永和县",
		    "141033": "蒲县",
		    "141034": "汾西县",
		    "141081": "侯马市",
		    "141082": "霍州市",
		    "141083": "其它区",
		    "141100": "吕梁市",
		    "141102": "离石区",
		    "141121": "文水县",
		    "141122": "交城县",
		    "141123": "兴县",
		    "141124": "临县",
		    "141125": "柳林县",
		    "141126": "石楼县",
		    "141127": "岚县",
		    "141128": "方山县",
		    "141129": "中阳县",
		    "141130": "交口县",
		    "141181": "孝义市",
		    "141182": "汾阳市",
		    "141183": "其它区",
		    "150000": "内蒙古自治区",
		    "150100": "呼和浩特市",
		    "150102": "新城区",
		    "150103": "回民区",
		    "150104": "玉泉区",
		    "150105": "赛罕区",
		    "150121": "土默特左旗",
		    "150122": "托克托县",
		    "150123": "和林格尔县",
		    "150124": "清水河县",
		    "150125": "武川县",
		    "150126": "其它区",
		    "150200": "包头市",
		    "150202": "东河区",
		    "150203": "昆都仑区",
		    "150204": "青山区",
		    "150205": "石拐区",
		    "150206": "白云鄂博矿区",
		    "150207": "九原区",
		    "150221": "土默特右旗",
		    "150222": "固阳县",
		    "150223": "达尔罕茂明安联合旗",
		    "150224": "其它区",
		    "150300": "乌海市",
		    "150302": "海勃湾区",
		    "150303": "海南区",
		    "150304": "乌达区",
		    "150305": "其它区",
		    "150400": "赤峰市",
		    "150402": "红山区",
		    "150403": "元宝山区",
		    "150404": "松山区",
		    "150421": "阿鲁科尔沁旗",
		    "150422": "巴林左旗",
		    "150423": "巴林右旗",
		    "150424": "林西县",
		    "150425": "克什克腾旗",
		    "150426": "翁牛特旗",
		    "150428": "喀喇沁旗",
		    "150429": "宁城县",
		    "150430": "敖汉旗",
		    "150431": "其它区",
		    "150500": "通辽市",
		    "150502": "科尔沁区",
		    "150521": "科尔沁左翼中旗",
		    "150522": "科尔沁左翼后旗",
		    "150523": "开鲁县",
		    "150524": "库伦旗",
		    "150525": "奈曼旗",
		    "150526": "扎鲁特旗",
		    "150581": "霍林郭勒市",
		    "150582": "其它区",
		    "150600": "鄂尔多斯市",
		    "150602": "东胜区",
		    "150621": "达拉特旗",
		    "150622": "准格尔旗",
		    "150623": "鄂托克前旗",
		    "150624": "鄂托克旗",
		    "150625": "杭锦旗",
		    "150626": "乌审旗",
		    "150627": "伊金霍洛旗",
		    "150628": "其它区",
		    "150700": "呼伦贝尔市",
		    "150702": "海拉尔区",
		    "150703": "扎赉诺尔区",
		    "150721": "阿荣旗",
		    "150722": "莫力达瓦达斡尔族自治旗",
		    "150723": "鄂伦春自治旗",
		    "150724": "鄂温克族自治旗",
		    "150725": "陈巴尔虎旗",
		    "150726": "新巴尔虎左旗",
		    "150727": "新巴尔虎右旗",
		    "150781": "满洲里市",
		    "150782": "牙克石市",
		    "150783": "扎兰屯市",
		    "150784": "额尔古纳市",
		    "150785": "根河市",
		    "150786": "其它区",
		    "150800": "巴彦淖尔市",
		    "150802": "临河区",
		    "150821": "五原县",
		    "150822": "磴口县",
		    "150823": "乌拉特前旗",
		    "150824": "乌拉特中旗",
		    "150825": "乌拉特后旗",
		    "150826": "杭锦后旗",
		    "150827": "其它区",
		    "150900": "乌兰察布市",
		    "150902": "集宁区",
		    "150921": "卓资县",
		    "150922": "化德县",
		    "150923": "商都县",
		    "150924": "兴和县",
		    "150925": "凉城县",
		    "150926": "察哈尔右翼前旗",
		    "150927": "察哈尔右翼中旗",
		    "150928": "察哈尔右翼后旗",
		    "150929": "四子王旗",
		    "150981": "丰镇市",
		    "150982": "其它区",
		    "152200": "兴安盟",
		    "152201": "乌兰浩特市",
		    "152202": "阿尔山市",
		    "152221": "科尔沁右翼前旗",
		    "152222": "科尔沁右翼中旗",
		    "152223": "扎赉特旗",
		    "152224": "突泉县",
		    "152225": "其它区",
		    "152500": "锡林郭勒盟",
		    "152501": "二连浩特市",
		    "152502": "锡林浩特市",
		    "152522": "阿巴嘎旗",
		    "152523": "苏尼特左旗",
		    "152524": "苏尼特右旗",
		    "152525": "东乌珠穆沁旗",
		    "152526": "西乌珠穆沁旗",
		    "152527": "太仆寺旗",
		    "152528": "镶黄旗",
		    "152529": "正镶白旗",
		    "152530": "正蓝旗",
		    "152531": "多伦县",
		    "152532": "其它区",
		    "152900": "阿拉善盟",
		    "152921": "阿拉善左旗",
		    "152922": "阿拉善右旗",
		    "152923": "额济纳旗",
		    "152924": "其它区",
		    "210000": "辽宁省",
		    "210100": "沈阳市",
		    "210102": "和平区",
		    "210103": "沈河区",
		    "210104": "大东区",
		    "210105": "皇姑区",
		    "210106": "铁西区",
		    "210111": "苏家屯区",
		    "210112": "东陵区",
		    "210113": "新城子区",
		    "210114": "于洪区",
		    "210122": "辽中县",
		    "210123": "康平县",
		    "210124": "法库县",
		    "210181": "新民市",
		    "210184": "沈北新区",
		    "210185": "其它区",
		    "210200": "大连市",
		    "210202": "中山区",
		    "210203": "西岗区",
		    "210204": "沙河口区",
		    "210211": "甘井子区",
		    "210212": "旅顺口区",
		    "210213": "金州区",
		    "210224": "长海县",
		    "210281": "瓦房店市",
		    "210282": "普兰店市",
		    "210283": "庄河市",
		    "210298": "其它区",
		    "210300": "鞍山市",
		    "210302": "铁东区",
		    "210303": "铁西区",
		    "210304": "立山区",
		    "210311": "千山区",
		    "210321": "台安县",
		    "210323": "岫岩满族自治县",
		    "210381": "海城市",
		    "210382": "其它区",
		    "210400": "抚顺市",
		    "210402": "新抚区",
		    "210403": "东洲区",
		    "210404": "望花区",
		    "210411": "顺城区",
		    "210421": "抚顺县",
		    "210422": "新宾满族自治县",
		    "210423": "清原满族自治县",
		    "210424": "其它区",
		    "210500": "本溪市",
		    "210502": "平山区",
		    "210503": "溪湖区",
		    "210504": "明山区",
		    "210505": "南芬区",
		    "210521": "本溪满族自治县",
		    "210522": "桓仁满族自治县",
		    "210523": "其它区",
		    "210600": "丹东市",
		    "210602": "元宝区",
		    "210603": "振兴区",
		    "210604": "振安区",
		    "210624": "宽甸满族自治县",
		    "210681": "东港市",
		    "210682": "凤城市",
		    "210683": "其它区",
		    "210700": "锦州市",
		    "210702": "古塔区",
		    "210703": "凌河区",
		    "210711": "太和区",
		    "210726": "黑山县",
		    "210727": "义县",
		    "210781": "凌海市",
		    "210782": "北镇市",
		    "210783": "其它区",
		    "210800": "营口市",
		    "210802": "站前区",
		    "210803": "西市区",
		    "210804": "鲅鱼圈区",
		    "210811": "老边区",
		    "210881": "盖州市",
		    "210882": "大石桥市",
		    "210883": "其它区",
		    "210900": "阜新市",
		    "210902": "海州区",
		    "210903": "新邱区",
		    "210904": "太平区",
		    "210905": "清河门区",
		    "210911": "细河区",
		    "210921": "阜新蒙古族自治县",
		    "210922": "彰武县",
		    "210923": "其它区",
		    "211000": "辽阳市",
		    "211002": "白塔区",
		    "211003": "文圣区",
		    "211004": "宏伟区",
		    "211005": "弓长岭区",
		    "211011": "太子河区",
		    "211021": "辽阳县",
		    "211081": "灯塔市",
		    "211082": "其它区",
		    "211100": "盘锦市",
		    "211102": "双台子区",
		    "211103": "兴隆台区",
		    "211121": "大洼县",
		    "211122": "盘山县",
		    "211123": "其它区",
		    "211200": "铁岭市",
		    "211202": "银州区",
		    "211204": "清河区",
		    "211221": "铁岭县",
		    "211223": "西丰县",
		    "211224": "昌图县",
		    "211281": "调兵山市",
		    "211282": "开原市",
		    "211283": "其它区",
		    "211300": "朝阳市",
		    "211302": "双塔区",
		    "211303": "龙城区",
		    "211321": "朝阳县",
		    "211322": "建平县",
		    "211324": "喀喇沁左翼蒙古族自治县",
		    "211381": "北票市",
		    "211382": "凌源市",
		    "211383": "其它区",
		    "211400": "葫芦岛市",
		    "211402": "连山区",
		    "211403": "龙港区",
		    "211404": "南票区",
		    "211421": "绥中县",
		    "211422": "建昌县",
		    "211481": "兴城市",
		    "211482": "其它区",
		    "220000": "吉林省",
		    "220100": "长春市",
		    "220102": "南关区",
		    "220103": "宽城区",
		    "220104": "朝阳区",
		    "220105": "二道区",
		    "220106": "绿园区",
		    "220112": "双阳区",
		    "220122": "农安县",
		    "220181": "九台市",
		    "220182": "榆树市",
		    "220183": "德惠市",
		    "220188": "其它区",
		    "220200": "吉林市",
		    "220202": "昌邑区",
		    "220203": "龙潭区",
		    "220204": "船营区",
		    "220211": "丰满区",
		    "220221": "永吉县",
		    "220281": "蛟河市",
		    "220282": "桦甸市",
		    "220283": "舒兰市",
		    "220284": "磐石市",
		    "220285": "其它区",
		    "220300": "四平市",
		    "220302": "铁西区",
		    "220303": "铁东区",
		    "220322": "梨树县",
		    "220323": "伊通满族自治县",
		    "220381": "公主岭市",
		    "220382": "双辽市",
		    "220383": "其它区",
		    "220400": "辽源市",
		    "220402": "龙山区",
		    "220403": "西安区",
		    "220421": "东丰县",
		    "220422": "东辽县",
		    "220423": "其它区",
		    "220500": "通化市",
		    "220502": "东昌区",
		    "220503": "二道江区",
		    "220521": "通化县",
		    "220523": "辉南县",
		    "220524": "柳河县",
		    "220581": "梅河口市",
		    "220582": "集安市",
		    "220583": "其它区",
		    "220600": "白山市",
		    "220602": "浑江区",
		    "220621": "抚松县",
		    "220622": "靖宇县",
		    "220623": "长白朝鲜族自治县",
		    "220625": "江源区",
		    "220681": "临江市",
		    "220682": "其它区",
		    "220700": "松原市",
		    "220702": "宁江区",
		    "220721": "前郭尔罗斯蒙古族自治县",
		    "220722": "长岭县",
		    "220723": "乾安县",
		    "220724": "扶余市",
		    "220725": "其它区",
		    "220800": "白城市",
		    "220802": "洮北区",
		    "220821": "镇赉县",
		    "220822": "通榆县",
		    "220881": "洮南市",
		    "220882": "大安市",
		    "220883": "其它区",
		    "222400": "延边朝鲜族自治州",
		    "222401": "延吉市",
		    "222402": "图们市",
		    "222403": "敦化市",
		    "222404": "珲春市",
		    "222405": "龙井市",
		    "222406": "和龙市",
		    "222424": "汪清县",
		    "222426": "安图县",
		    "222427": "其它区",
		    "230000": "黑龙江省",
		    "230100": "哈尔滨市",
		    "230102": "道里区",
		    "230103": "南岗区",
		    "230104": "道外区",
		    "230106": "香坊区",
		    "230108": "平房区",
		    "230109": "松北区",
		    "230111": "呼兰区",
		    "230123": "依兰县",
		    "230124": "方正县",
		    "230125": "宾县",
		    "230126": "巴彦县",
		    "230127": "木兰县",
		    "230128": "通河县",
		    "230129": "延寿县",
		    "230181": "阿城区",
		    "230182": "双城市",
		    "230183": "尚志市",
		    "230184": "五常市",
		    "230186": "其它区",
		    "230200": "齐齐哈尔市",
		    "230202": "龙沙区",
		    "230203": "建华区",
		    "230204": "铁锋区",
		    "230205": "昂昂溪区",
		    "230206": "富拉尔基区",
		    "230207": "碾子山区",
		    "230208": "梅里斯达斡尔族区",
		    "230221": "龙江县",
		    "230223": "依安县",
		    "230224": "泰来县",
		    "230225": "甘南县",
		    "230227": "富裕县",
		    "230229": "克山县",
		    "230230": "克东县",
		    "230231": "拜泉县",
		    "230281": "讷河市",
		    "230282": "其它区",
		    "230300": "鸡西市",
		    "230302": "鸡冠区",
		    "230303": "恒山区",
		    "230304": "滴道区",
		    "230305": "梨树区",
		    "230306": "城子河区",
		    "230307": "麻山区",
		    "230321": "鸡东县",
		    "230381": "虎林市",
		    "230382": "密山市",
		    "230383": "其它区",
		    "230400": "鹤岗市",
		    "230402": "向阳区",
		    "230403": "工农区",
		    "230404": "南山区",
		    "230405": "兴安区",
		    "230406": "东山区",
		    "230407": "兴山区",
		    "230421": "萝北县",
		    "230422": "绥滨县",
		    "230423": "其它区",
		    "230500": "双鸭山市",
		    "230502": "尖山区",
		    "230503": "岭东区",
		    "230505": "四方台区",
		    "230506": "宝山区",
		    "230521": "集贤县",
		    "230522": "友谊县",
		    "230523": "宝清县",
		    "230524": "饶河县",
		    "230525": "其它区",
		    "230600": "大庆市",
		    "230602": "萨尔图区",
		    "230603": "龙凤区",
		    "230604": "让胡路区",
		    "230605": "红岗区",
		    "230606": "大同区",
		    "230621": "肇州县",
		    "230622": "肇源县",
		    "230623": "林甸县",
		    "230624": "杜尔伯特蒙古族自治县",
		    "230625": "其它区",
		    "230700": "伊春市",
		    "230702": "伊春区",
		    "230703": "南岔区",
		    "230704": "友好区",
		    "230705": "西林区",
		    "230706": "翠峦区",
		    "230707": "新青区",
		    "230708": "美溪区",
		    "230709": "金山屯区",
		    "230710": "五营区",
		    "230711": "乌马河区",
		    "230712": "汤旺河区",
		    "230713": "带岭区",
		    "230714": "乌伊岭区",
		    "230715": "红星区",
		    "230716": "上甘岭区",
		    "230722": "嘉荫县",
		    "230781": "铁力市",
		    "230782": "其它区",
		    "230800": "佳木斯市",
		    "230803": "向阳区",
		    "230804": "前进区",
		    "230805": "东风区",
		    "230811": "郊区",
		    "230822": "桦南县",
		    "230826": "桦川县",
		    "230828": "汤原县",
		    "230833": "抚远县",
		    "230881": "同江市",
		    "230882": "富锦市",
		    "230883": "其它区",
		    "230900": "七台河市",
		    "230902": "新兴区",
		    "230903": "桃山区",
		    "230904": "茄子河区",
		    "230921": "勃利县",
		    "230922": "其它区",
		    "231000": "牡丹江市",
		    "231002": "东安区",
		    "231003": "阳明区",
		    "231004": "爱民区",
		    "231005": "西安区",
		    "231024": "东宁县",
		    "231025": "林口县",
		    "231081": "绥芬河市",
		    "231083": "海林市",
		    "231084": "宁安市",
		    "231085": "穆棱市",
		    "231086": "其它区",
		    "231100": "黑河市",
		    "231102": "爱辉区",
		    "231121": "嫩江县",
		    "231123": "逊克县",
		    "231124": "孙吴县",
		    "231181": "北安市",
		    "231182": "五大连池市",
		    "231183": "其它区",
		    "231200": "绥化市",
		    "231202": "北林区",
		    "231221": "望奎县",
		    "231222": "兰西县",
		    "231223": "青冈县",
		    "231224": "庆安县",
		    "231225": "明水县",
		    "231226": "绥棱县",
		    "231281": "安达市",
		    "231282": "肇东市",
		    "231283": "海伦市",
		    "231284": "其它区",
		    "232700": "大兴安岭地区",
		    "232702": "松岭区",
		    "232703": "新林区",
		    "232704": "呼中区",
		    "232721": "呼玛县",
		    "232722": "塔河县",
		    "232723": "漠河县",
		    "232724": "加格达奇区",
		    "232725": "其它区",
		    "310000": "上海",
		    "310100": "上海市",
		    "310101": "黄浦区",
		    "310104": "徐汇区",
		    "310105": "长宁区",
		    "310106": "静安区",
		    "310107": "普陀区",
		    "310108": "闸北区",
		    "310109": "虹口区",
		    "310110": "杨浦区",
		    "310112": "闵行区",
		    "310113": "宝山区",
		    "310114": "嘉定区",
		    "310115": "浦东新区",
		    "310116": "金山区",
		    "310117": "松江区",
		    "310118": "青浦区",
		    "310120": "奉贤区",
		    "310230": "崇明县",
		    "310231": "其它区",
		    "320000": "江苏省",
		    "320100": "南京市",
		    "320102": "玄武区",
		    "320104": "秦淮区",
		    "320105": "建邺区",
		    "320106": "鼓楼区",
		    "320111": "浦口区",
		    "320113": "栖霞区",
		    "320114": "雨花台区",
		    "320115": "江宁区",
		    "320116": "六合区",
		    "320124": "溧水区",
		    "320125": "高淳区",
		    "320126": "其它区",
		    "320200": "无锡市",
		    "320202": "崇安区",
		    "320203": "南长区",
		    "320204": "北塘区",
		    "320205": "锡山区",
		    "320206": "惠山区",
		    "320211": "滨湖区",
		    "320281": "江阴市",
		    "320282": "宜兴市",
		    "320297": "其它区",
		    "320300": "徐州市",
		    "320302": "鼓楼区",
		    "320303": "云龙区",
		    "320305": "贾汪区",
		    "320311": "泉山区",
		    "320321": "丰县",
		    "320322": "沛县",
		    "320323": "铜山区",
		    "320324": "睢宁县",
		    "320381": "新沂市",
		    "320382": "邳州市",
		    "320383": "其它区",
		    "320400": "常州市",
		    "320402": "天宁区",
		    "320404": "钟楼区",
		    "320405": "戚墅堰区",
		    "320411": "新北区",
		    "320412": "武进区",
		    "320481": "溧阳市",
		    "320482": "金坛市",
		    "320483": "其它区",
		    "320500": "苏州市",
		    "320505": "虎丘区",
		    "320506": "吴中区",
		    "320507": "相城区",
		    "320508": "姑苏区",
		    "320581": "常熟市",
		    "320582": "张家港市",
		    "320583": "昆山市",
		    "320584": "吴江区",
		    "320585": "太仓市",
		    "320596": "其它区",
		    "320600": "南通市",
		    "320602": "崇川区",
		    "320611": "港闸区",
		    "320612": "通州区",
		    "320621": "海安县",
		    "320623": "如东县",
		    "320681": "启东市",
		    "320682": "如皋市",
		    "320684": "海门市",
		    "320694": "其它区",
		    "320700": "连云港市",
		    "320703": "连云区",
		    "320705": "新浦区",
		    "320706": "海州区",
		    "320721": "赣榆县",
		    "320722": "东海县",
		    "320723": "灌云县",
		    "320724": "灌南县",
		    "320725": "其它区",
		    "320800": "淮安市",
		    "320802": "清河区",
		    "320803": "淮安区",
		    "320804": "淮阴区",
		    "320811": "清浦区",
		    "320826": "涟水县",
		    "320829": "洪泽县",
		    "320830": "盱眙县",
		    "320831": "金湖县",
		    "320832": "其它区",
		    "320900": "盐城市",
		    "320902": "亭湖区",
		    "320903": "盐都区",
		    "320921": "响水县",
		    "320922": "滨海县",
		    "320923": "阜宁县",
		    "320924": "射阳县",
		    "320925": "建湖县",
		    "320981": "东台市",
		    "320982": "大丰市",
		    "320983": "其它区",
		    "321000": "扬州市",
		    "321002": "广陵区",
		    "321003": "邗江区",
		    "321023": "宝应县",
		    "321081": "仪征市",
		    "321084": "高邮市",
		    "321088": "江都区",
		    "321093": "其它区",
		    "321100": "镇江市",
		    "321102": "京口区",
		    "321111": "润州区",
		    "321112": "丹徒区",
		    "321181": "丹阳市",
		    "321182": "扬中市",
		    "321183": "句容市",
		    "321184": "其它区",
		    "321200": "泰州市",
		    "321202": "海陵区",
		    "321203": "高港区",
		    "321281": "兴化市",
		    "321282": "靖江市",
		    "321283": "泰兴市",
		    "321284": "姜堰区",
		    "321285": "其它区",
		    "321300": "宿迁市",
		    "321302": "宿城区",
		    "321311": "宿豫区",
		    "321322": "沭阳县",
		    "321323": "泗阳县",
		    "321324": "泗洪县",
		    "321325": "其它区",
		    "330000": "浙江省",
		    "330100": "杭州市",
		    "330102": "上城区",
		    "330103": "下城区",
		    "330104": "江干区",
		    "330105": "拱墅区",
		    "330106": "西湖区",
		    "330108": "滨江区",
		    "330109": "萧山区",
		    "330110": "余杭区",
		    "330122": "桐庐县",
		    "330127": "淳安县",
		    "330182": "建德市",
		    "330183": "富阳市",
		    "330185": "临安市",
		    "330186": "其它区",
		    "330200": "宁波市",
		    "330203": "海曙区",
		    "330204": "江东区",
		    "330205": "江北区",
		    "330206": "北仑区",
		    "330211": "镇海区",
		    "330212": "鄞州区",
		    "330225": "象山县",
		    "330226": "宁海县",
		    "330281": "余姚市",
		    "330282": "慈溪市",
		    "330283": "奉化市",
		    "330284": "其它区",
		    "330300": "温州市",
		    "330302": "鹿城区",
		    "330303": "龙湾区",
		    "330304": "瓯海区",
		    "330322": "洞头县",
		    "330324": "永嘉县",
		    "330326": "平阳县",
		    "330327": "苍南县",
		    "330328": "文成县",
		    "330329": "泰顺县",
		    "330381": "瑞安市",
		    "330382": "乐清市",
		    "330383": "其它区",
		    "330400": "嘉兴市",
		    "330402": "南湖区",
		    "330411": "秀洲区",
		    "330421": "嘉善县",
		    "330424": "海盐县",
		    "330481": "海宁市",
		    "330482": "平湖市",
		    "330483": "桐乡市",
		    "330484": "其它区",
		    "330500": "湖州市",
		    "330502": "吴兴区",
		    "330503": "南浔区",
		    "330521": "德清县",
		    "330522": "长兴县",
		    "330523": "安吉县",
		    "330524": "其它区",
		    "330600": "绍兴市",
		    "330602": "越城区",
		    "330621": "绍兴县",
		    "330624": "新昌县",
		    "330681": "诸暨市",
		    "330682": "上虞市",
		    "330683": "嵊州市",
		    "330684": "其它区",
		    "330700": "金华市",
		    "330702": "婺城区",
		    "330703": "金东区",
		    "330723": "武义县",
		    "330726": "浦江县",
		    "330727": "磐安县",
		    "330781": "兰溪市",
		    "330782": "义乌市",
		    "330783": "东阳市",
		    "330784": "永康市",
		    "330785": "其它区",
		    "330800": "衢州市",
		    "330802": "柯城区",
		    "330803": "衢江区",
		    "330822": "常山县",
		    "330824": "开化县",
		    "330825": "龙游县",
		    "330881": "江山市",
		    "330882": "其它区",
		    "330900": "舟山市",
		    "330902": "定海区",
		    "330903": "普陀区",
		    "330921": "岱山县",
		    "330922": "嵊泗县",
		    "330923": "其它区",
		    "331000": "台州市",
		    "331002": "椒江区",
		    "331003": "黄岩区",
		    "331004": "路桥区",
		    "331021": "玉环县",
		    "331022": "三门县",
		    "331023": "天台县",
		    "331024": "仙居县",
		    "331081": "温岭市",
		    "331082": "临海市",
		    "331083": "其它区",
		    "331100": "丽水市",
		    "331102": "莲都区",
		    "331121": "青田县",
		    "331122": "缙云县",
		    "331123": "遂昌县",
		    "331124": "松阳县",
		    "331125": "云和县",
		    "331126": "庆元县",
		    "331127": "景宁畲族自治县",
		    "331181": "龙泉市",
		    "331182": "其它区",
		    "340000": "安徽省",
		    "340100": "合肥市",
		    "340102": "瑶海区",
		    "340103": "庐阳区",
		    "340104": "蜀山区",
		    "340111": "包河区",
		    "340121": "长丰县",
		    "340122": "肥东县",
		    "340123": "肥西县",
		    "340192": "其它区",
		    "340200": "芜湖市",
		    "340202": "镜湖区",
		    "340203": "弋江区",
		    "340207": "鸠江区",
		    "340208": "三山区",
		    "340221": "芜湖县",
		    "340222": "繁昌县",
		    "340223": "南陵县",
		    "340224": "其它区",
		    "340300": "蚌埠市",
		    "340302": "龙子湖区",
		    "340303": "蚌山区",
		    "340304": "禹会区",
		    "340311": "淮上区",
		    "340321": "怀远县",
		    "340322": "五河县",
		    "340323": "固镇县",
		    "340324": "其它区",
		    "340400": "淮南市",
		    "340402": "大通区",
		    "340403": "田家庵区",
		    "340404": "谢家集区",
		    "340405": "八公山区",
		    "340406": "潘集区",
		    "340421": "凤台县",
		    "340422": "其它区",
		    "340500": "马鞍山市",
		    "340503": "花山区",
		    "340504": "雨山区",
		    "340506": "博望区",
		    "340521": "当涂县",
		    "340522": "其它区",
		    "340600": "淮北市",
		    "340602": "杜集区",
		    "340603": "相山区",
		    "340604": "烈山区",
		    "340621": "濉溪县",
		    "340622": "其它区",
		    "340700": "铜陵市",
		    "340702": "铜官山区",
		    "340703": "狮子山区",
		    "340711": "郊区",
		    "340721": "铜陵县",
		    "340722": "其它区",
		    "340800": "安庆市",
		    "340802": "迎江区",
		    "340803": "大观区",
		    "340811": "宜秀区",
		    "340822": "怀宁县",
		    "340823": "枞阳县",
		    "340824": "潜山县",
		    "340825": "太湖县",
		    "340826": "宿松县",
		    "340827": "望江县",
		    "340828": "岳西县",
		    "340881": "桐城市",
		    "340882": "其它区",
		    "341000": "黄山市",
		    "341002": "屯溪区",
		    "341003": "黄山区",
		    "341004": "徽州区",
		    "341021": "歙县",
		    "341022": "休宁县",
		    "341023": "黟县",
		    "341024": "祁门县",
		    "341025": "其它区",
		    "341100": "滁州市",
		    "341102": "琅琊区",
		    "341103": "南谯区",
		    "341122": "来安县",
		    "341124": "全椒县",
		    "341125": "定远县",
		    "341126": "凤阳县",
		    "341181": "天长市",
		    "341182": "明光市",
		    "341183": "其它区",
		    "341200": "阜阳市",
		    "341202": "颍州区",
		    "341203": "颍东区",
		    "341204": "颍泉区",
		    "341221": "临泉县",
		    "341222": "太和县",
		    "341225": "阜南县",
		    "341226": "颍上县",
		    "341282": "界首市",
		    "341283": "其它区",
		    "341300": "宿州市",
		    "341302": "埇桥区",
		    "341321": "砀山县",
		    "341322": "萧县",
		    "341323": "灵璧县",
		    "341324": "泗县",
		    "341325": "其它区",
		    "341400": "巢湖市",
		    "341421": "庐江县",
		    "341422": "无为县",
		    "341423": "含山县",
		    "341424": "和县",
		    "341500": "六安市",
		    "341502": "金安区",
		    "341503": "裕安区",
		    "341521": "寿县",
		    "341522": "霍邱县",
		    "341523": "舒城县",
		    "341524": "金寨县",
		    "341525": "霍山县",
		    "341526": "其它区",
		    "341600": "亳州市",
		    "341602": "谯城区",
		    "341621": "涡阳县",
		    "341622": "蒙城县",
		    "341623": "利辛县",
		    "341624": "其它区",
		    "341700": "池州市",
		    "341702": "贵池区",
		    "341721": "东至县",
		    "341722": "石台县",
		    "341723": "青阳县",
		    "341724": "其它区",
		    "341800": "宣城市",
		    "341802": "宣州区",
		    "341821": "郎溪县",
		    "341822": "广德县",
		    "341823": "泾县",
		    "341824": "绩溪县",
		    "341825": "旌德县",
		    "341881": "宁国市",
		    "341882": "其它区",
		    "350000": "福建省",
		    "350100": "福州市",
		    "350102": "鼓楼区",
		    "350103": "台江区",
		    "350104": "仓山区",
		    "350105": "马尾区",
		    "350111": "晋安区",
		    "350121": "闽侯县",
		    "350122": "连江县",
		    "350123": "罗源县",
		    "350124": "闽清县",
		    "350125": "永泰县",
		    "350128": "平潭县",
		    "350181": "福清市",
		    "350182": "长乐市",
		    "350183": "其它区",
		    "350200": "厦门市",
		    "350203": "思明区",
		    "350205": "海沧区",
		    "350206": "湖里区",
		    "350211": "集美区",
		    "350212": "同安区",
		    "350213": "翔安区",
		    "350214": "其它区",
		    "350300": "莆田市",
		    "350302": "城厢区",
		    "350303": "涵江区",
		    "350304": "荔城区",
		    "350305": "秀屿区",
		    "350322": "仙游县",
		    "350323": "其它区",
		    "350400": "三明市",
		    "350402": "梅列区",
		    "350403": "三元区",
		    "350421": "明溪县",
		    "350423": "清流县",
		    "350424": "宁化县",
		    "350425": "大田县",
		    "350426": "尤溪县",
		    "350427": "沙县",
		    "350428": "将乐县",
		    "350429": "泰宁县",
		    "350430": "建宁县",
		    "350481": "永安市",
		    "350482": "其它区",
		    "350500": "泉州市",
		    "350502": "鲤城区",
		    "350503": "丰泽区",
		    "350504": "洛江区",
		    "350505": "泉港区",
		    "350521": "惠安县",
		    "350524": "安溪县",
		    "350525": "永春县",
		    "350526": "德化县",
		    "350527": "金门县",
		    "350581": "石狮市",
		    "350582": "晋江市",
		    "350583": "南安市",
		    "350584": "其它区",
		    "350600": "漳州市",
		    "350602": "芗城区",
		    "350603": "龙文区",
		    "350622": "云霄县",
		    "350623": "漳浦县",
		    "350624": "诏安县",
		    "350625": "长泰县",
		    "350626": "东山县",
		    "350627": "南靖县",
		    "350628": "平和县",
		    "350629": "华安县",
		    "350681": "龙海市",
		    "350682": "其它区",
		    "350700": "南平市",
		    "350702": "延平区",
		    "350721": "顺昌县",
		    "350722": "浦城县",
		    "350723": "光泽县",
		    "350724": "松溪县",
		    "350725": "政和县",
		    "350781": "邵武市",
		    "350782": "武夷山市",
		    "350783": "建瓯市",
		    "350784": "建阳市",
		    "350785": "其它区",
		    "350800": "龙岩市",
		    "350802": "新罗区",
		    "350821": "长汀县",
		    "350822": "永定县",
		    "350823": "上杭县",
		    "350824": "武平县",
		    "350825": "连城县",
		    "350881": "漳平市",
		    "350882": "其它区",
		    "350900": "宁德市",
		    "350902": "蕉城区",
		    "350921": "霞浦县",
		    "350922": "古田县",
		    "350923": "屏南县",
		    "350924": "寿宁县",
		    "350925": "周宁县",
		    "350926": "柘荣县",
		    "350981": "福安市",
		    "350982": "福鼎市",
		    "350983": "其它区",
		    "360000": "江西省",
		    "360100": "南昌市",
		    "360102": "东湖区",
		    "360103": "西湖区",
		    "360104": "青云谱区",
		    "360105": "湾里区",
		    "360111": "青山湖区",
		    "360121": "南昌县",
		    "360122": "新建县",
		    "360123": "安义县",
		    "360124": "进贤县",
		    "360128": "其它区",
		    "360200": "景德镇市",
		    "360202": "昌江区",
		    "360203": "珠山区",
		    "360222": "浮梁县",
		    "360281": "乐平市",
		    "360282": "其它区",
		    "360300": "萍乡市",
		    "360302": "安源区",
		    "360313": "湘东区",
		    "360321": "莲花县",
		    "360322": "上栗县",
		    "360323": "芦溪县",
		    "360324": "其它区",
		    "360400": "九江市",
		    "360402": "庐山区",
		    "360403": "浔阳区",
		    "360421": "九江县",
		    "360423": "武宁县",
		    "360424": "修水县",
		    "360425": "永修县",
		    "360426": "德安县",
		    "360427": "星子县",
		    "360428": "都昌县",
		    "360429": "湖口县",
		    "360430": "彭泽县",
		    "360481": "瑞昌市",
		    "360482": "其它区",
		    "360483": "共青城市",
		    "360500": "新余市",
		    "360502": "渝水区",
		    "360521": "分宜县",
		    "360522": "其它区",
		    "360600": "鹰潭市",
		    "360602": "月湖区",
		    "360622": "余江县",
		    "360681": "贵溪市",
		    "360682": "其它区",
		    "360700": "赣州市",
		    "360702": "章贡区",
		    "360721": "赣县",
		    "360722": "信丰县",
		    "360723": "大余县",
		    "360724": "上犹县",
		    "360725": "崇义县",
		    "360726": "安远县",
		    "360727": "龙南县",
		    "360728": "定南县",
		    "360729": "全南县",
		    "360730": "宁都县",
		    "360731": "于都县",
		    "360732": "兴国县",
		    "360733": "会昌县",
		    "360734": "寻乌县",
		    "360735": "石城县",
		    "360781": "瑞金市",
		    "360782": "南康市",
		    "360783": "其它区",
		    "360800": "吉安市",
		    "360802": "吉州区",
		    "360803": "青原区",
		    "360821": "吉安县",
		    "360822": "吉水县",
		    "360823": "峡江县",
		    "360824": "新干县",
		    "360825": "永丰县",
		    "360826": "泰和县",
		    "360827": "遂川县",
		    "360828": "万安县",
		    "360829": "安福县",
		    "360830": "永新县",
		    "360881": "井冈山市",
		    "360882": "其它区",
		    "360900": "宜春市",
		    "360902": "袁州区",
		    "360921": "奉新县",
		    "360922": "万载县",
		    "360923": "上高县",
		    "360924": "宜丰县",
		    "360925": "靖安县",
		    "360926": "铜鼓县",
		    "360981": "丰城市",
		    "360982": "樟树市",
		    "360983": "高安市",
		    "360984": "其它区",
		    "361000": "抚州市",
		    "361002": "临川区",
		    "361021": "南城县",
		    "361022": "黎川县",
		    "361023": "南丰县",
		    "361024": "崇仁县",
		    "361025": "乐安县",
		    "361026": "宜黄县",
		    "361027": "金溪县",
		    "361028": "资溪县",
		    "361029": "东乡县",
		    "361030": "广昌县",
		    "361031": "其它区",
		    "361100": "上饶市",
		    "361102": "信州区",
		    "361121": "上饶县",
		    "361122": "广丰县",
		    "361123": "玉山县",
		    "361124": "铅山县",
		    "361125": "横峰县",
		    "361126": "弋阳县",
		    "361127": "余干县",
		    "361128": "鄱阳县",
		    "361129": "万年县",
		    "361130": "婺源县",
		    "361181": "德兴市",
		    "361182": "其它区",
		    "370000": "山东省",
		    "370100": "济南市",
		    "370102": "历下区",
		    "370103": "市中区",
		    "370104": "槐荫区",
		    "370105": "天桥区",
		    "370112": "历城区",
		    "370113": "长清区",
		    "370124": "平阴县",
		    "370125": "济阳县",
		    "370126": "商河县",
		    "370181": "章丘市",
		    "370182": "其它区",
		    "370200": "青岛市",
		    "370202": "市南区",
		    "370203": "市北区",
		    "370211": "黄岛区",
		    "370212": "崂山区",
		    "370213": "李沧区",
		    "370214": "城阳区",
		    "370281": "胶州市",
		    "370282": "即墨市",
		    "370283": "平度市",
		    "370285": "莱西市",
		    "370286": "其它区",
		    "370300": "淄博市",
		    "370302": "淄川区",
		    "370303": "张店区",
		    "370304": "博山区",
		    "370305": "临淄区",
		    "370306": "周村区",
		    "370321": "桓台县",
		    "370322": "高青县",
		    "370323": "沂源县",
		    "370324": "其它区",
		    "370400": "枣庄市",
		    "370402": "市中区",
		    "370403": "薛城区",
		    "370404": "峄城区",
		    "370405": "台儿庄区",
		    "370406": "山亭区",
		    "370481": "滕州市",
		    "370482": "其它区",
		    "370500": "东营市",
		    "370502": "东营区",
		    "370503": "河口区",
		    "370521": "垦利县",
		    "370522": "利津县",
		    "370523": "广饶县",
		    "370591": "其它区",
		    "370600": "烟台市",
		    "370602": "芝罘区",
		    "370611": "福山区",
		    "370612": "牟平区",
		    "370613": "莱山区",
		    "370634": "长岛县",
		    "370681": "龙口市",
		    "370682": "莱阳市",
		    "370683": "莱州市",
		    "370684": "蓬莱市",
		    "370685": "招远市",
		    "370686": "栖霞市",
		    "370687": "海阳市",
		    "370688": "其它区",
		    "370700": "潍坊市",
		    "370702": "潍城区",
		    "370703": "寒亭区",
		    "370704": "坊子区",
		    "370705": "奎文区",
		    "370724": "临朐县",
		    "370725": "昌乐县",
		    "370781": "青州市",
		    "370782": "诸城市",
		    "370783": "寿光市",
		    "370784": "安丘市",
		    "370785": "高密市",
		    "370786": "昌邑市",
		    "370787": "其它区",
		    "370800": "济宁市",
		    "370802": "市中区",
		    "370811": "任城区",
		    "370826": "微山县",
		    "370827": "鱼台县",
		    "370828": "金乡县",
		    "370829": "嘉祥县",
		    "370830": "汶上县",
		    "370831": "泗水县",
		    "370832": "梁山县",
		    "370881": "曲阜市",
		    "370882": "兖州市",
		    "370883": "邹城市",
		    "370884": "其它区",
		    "370900": "泰安市",
		    "370902": "泰山区",
		    "370903": "岱岳区",
		    "370921": "宁阳县",
		    "370923": "东平县",
		    "370982": "新泰市",
		    "370983": "肥城市",
		    "370984": "其它区",
		    "371000": "威海市",
		    "371002": "环翠区",
		    "371081": "文登市",
		    "371082": "荣成市",
		    "371083": "乳山市",
		    "371084": "其它区",
		    "371100": "日照市",
		    "371102": "东港区",
		    "371103": "岚山区",
		    "371121": "五莲县",
		    "371122": "莒县",
		    "371123": "其它区",
		    "371200": "莱芜市",
		    "371202": "莱城区",
		    "371203": "钢城区",
		    "371204": "其它区",
		    "371300": "临沂市",
		    "371302": "兰山区",
		    "371311": "罗庄区",
		    "371312": "河东区",
		    "371321": "沂南县",
		    "371322": "郯城县",
		    "371323": "沂水县",
		    "371324": "苍山县",
		    "371325": "费县",
		    "371326": "平邑县",
		    "371327": "莒南县",
		    "371328": "蒙阴县",
		    "371329": "临沭县",
		    "371330": "其它区",
		    "371400": "德州市",
		    "371402": "德城区",
		    "371421": "陵县",
		    "371422": "宁津县",
		    "371423": "庆云县",
		    "371424": "临邑县",
		    "371425": "齐河县",
		    "371426": "平原县",
		    "371427": "夏津县",
		    "371428": "武城县",
		    "371481": "乐陵市",
		    "371482": "禹城市",
		    "371483": "其它区",
		    "371500": "聊城市",
		    "371502": "东昌府区",
		    "371521": "阳谷县",
		    "371522": "莘县",
		    "371523": "茌平县",
		    "371524": "东阿县",
		    "371525": "冠县",
		    "371526": "高唐县",
		    "371581": "临清市",
		    "371582": "其它区",
		    "371600": "滨州市",
		    "371602": "滨城区",
		    "371621": "惠民县",
		    "371622": "阳信县",
		    "371623": "无棣县",
		    "371624": "沾化县",
		    "371625": "博兴县",
		    "371626": "邹平县",
		    "371627": "其它区",
		    "371700": "菏泽市",
		    "371702": "牡丹区",
		    "371721": "曹县",
		    "371722": "单县",
		    "371723": "成武县",
		    "371724": "巨野县",
		    "371725": "郓城县",
		    "371726": "鄄城县",
		    "371727": "定陶县",
		    "371728": "东明县",
		    "371729": "其它区",
		    "410000": "河南省",
		    "410100": "郑州市",
		    "410102": "中原区",
		    "410103": "二七区",
		    "410104": "管城回族区",
		    "410105": "金水区",
		    "410106": "上街区",
		    "410108": "惠济区",
		    "410122": "中牟县",
		    "410181": "巩义市",
		    "410182": "荥阳市",
		    "410183": "新密市",
		    "410184": "新郑市",
		    "410185": "登封市",
		    "410188": "其它区",
		    "410200": "开封市",
		    "410202": "龙亭区",
		    "410203": "顺河回族区",
		    "410204": "鼓楼区",
		    "410205": "禹王台区",
		    "410211": "金明区",
		    "410221": "杞县",
		    "410222": "通许县",
		    "410223": "尉氏县",
		    "410224": "开封县",
		    "410225": "兰考县",
		    "410226": "其它区",
		    "410300": "洛阳市",
		    "410302": "老城区",
		    "410303": "西工区",
		    "410304": "瀍河回族区",
		    "410305": "涧西区",
		    "410306": "吉利区",
		    "410307": "洛龙区",
		    "410322": "孟津县",
		    "410323": "新安县",
		    "410324": "栾川县",
		    "410325": "嵩县",
		    "410326": "汝阳县",
		    "410327": "宜阳县",
		    "410328": "洛宁县",
		    "410329": "伊川县",
		    "410381": "偃师市",
		    "410400": "平顶山市",
		    "410402": "新华区",
		    "410403": "卫东区",
		    "410404": "石龙区",
		    "410411": "湛河区",
		    "410421": "宝丰县",
		    "410422": "叶县",
		    "410423": "鲁山县",
		    "410425": "郏县",
		    "410481": "舞钢市",
		    "410482": "汝州市",
		    "410483": "其它区",
		    "410500": "安阳市",
		    "410502": "文峰区",
		    "410503": "北关区",
		    "410505": "殷都区",
		    "410506": "龙安区",
		    "410522": "安阳县",
		    "410523": "汤阴县",
		    "410526": "滑县",
		    "410527": "内黄县",
		    "410581": "林州市",
		    "410582": "其它区",
		    "410600": "鹤壁市",
		    "410602": "鹤山区",
		    "410603": "山城区",
		    "410611": "淇滨区",
		    "410621": "浚县",
		    "410622": "淇县",
		    "410623": "其它区",
		    "410700": "新乡市",
		    "410702": "红旗区",
		    "410703": "卫滨区",
		    "410704": "凤泉区",
		    "410711": "牧野区",
		    "410721": "新乡县",
		    "410724": "获嘉县",
		    "410725": "原阳县",
		    "410726": "延津县",
		    "410727": "封丘县",
		    "410728": "长垣县",
		    "410781": "卫辉市",
		    "410782": "辉县市",
		    "410783": "其它区",
		    "410800": "焦作市",
		    "410802": "解放区",
		    "410803": "中站区",
		    "410804": "马村区",
		    "410811": "山阳区",
		    "410821": "修武县",
		    "410822": "博爱县",
		    "410823": "武陟县",
		    "410825": "温县",
		    "410881": "济源市",
		    "410882": "沁阳市",
		    "410883": "孟州市",
		    "410884": "其它区",
		    "410900": "濮阳市",
		    "410902": "华龙区",
		    "410922": "清丰县",
		    "410923": "南乐县",
		    "410926": "范县",
		    "410927": "台前县",
		    "410928": "濮阳县",
		    "410929": "其它区",
		    "411000": "许昌市",
		    "411002": "魏都区",
		    "411023": "许昌县",
		    "411024": "鄢陵县",
		    "411025": "襄城县",
		    "411081": "禹州市",
		    "411082": "长葛市",
		    "411083": "其它区",
		    "411100": "漯河市",
		    "411102": "源汇区",
		    "411103": "郾城区",
		    "411104": "召陵区",
		    "411121": "舞阳县",
		    "411122": "临颍县",
		    "411123": "其它区",
		    "411200": "三门峡市",
		    "411202": "湖滨区",
		    "411221": "渑池县",
		    "411222": "陕县",
		    "411224": "卢氏县",
		    "411281": "义马市",
		    "411282": "灵宝市",
		    "411283": "其它区",
		    "411300": "南阳市",
		    "411302": "宛城区",
		    "411303": "卧龙区",
		    "411321": "南召县",
		    "411322": "方城县",
		    "411323": "西峡县",
		    "411324": "镇平县",
		    "411325": "内乡县",
		    "411326": "淅川县",
		    "411327": "社旗县",
		    "411328": "唐河县",
		    "411329": "新野县",
		    "411330": "桐柏县",
		    "411381": "邓州市",
		    "411382": "其它区",
		    "411400": "商丘市",
		    "411402": "梁园区",
		    "411403": "睢阳区",
		    "411421": "民权县",
		    "411422": "睢县",
		    "411423": "宁陵县",
		    "411424": "柘城县",
		    "411425": "虞城县",
		    "411426": "夏邑县",
		    "411481": "永城市",
		    "411482": "其它区",
		    "411500": "信阳市",
		    "411502": "浉河区",
		    "411503": "平桥区",
		    "411521": "罗山县",
		    "411522": "光山县",
		    "411523": "新县",
		    "411524": "商城县",
		    "411525": "固始县",
		    "411526": "潢川县",
		    "411527": "淮滨县",
		    "411528": "息县",
		    "411529": "其它区",
		    "411600": "周口市",
		    "411602": "川汇区",
		    "411621": "扶沟县",
		    "411622": "西华县",
		    "411623": "商水县",
		    "411624": "沈丘县",
		    "411625": "郸城县",
		    "411626": "淮阳县",
		    "411627": "太康县",
		    "411628": "鹿邑县",
		    "411681": "项城市",
		    "411682": "其它区",
		    "411700": "驻马店市",
		    "411702": "驿城区",
		    "411721": "西平县",
		    "411722": "上蔡县",
		    "411723": "平舆县",
		    "411724": "正阳县",
		    "411725": "确山县",
		    "411726": "泌阳县",
		    "411727": "汝南县",
		    "411728": "遂平县",
		    "411729": "新蔡县",
		    "411730": "其它区",
		    "420000": "湖北省",
		    "420100": "武汉市",
		    "420102": "江岸区",
		    "420103": "江汉区",
		    "420104": "硚口区",
		    "420105": "汉阳区",
		    "420106": "武昌区",
		    "420107": "青山区",
		    "420111": "洪山区",
		    "420112": "东西湖区",
		    "420113": "汉南区",
		    "420114": "蔡甸区",
		    "420115": "江夏区",
		    "420116": "黄陂区",
		    "420117": "新洲区",
		    "420118": "其它区",
		    "420200": "黄石市",
		    "420202": "黄石港区",
		    "420203": "西塞山区",
		    "420204": "下陆区",
		    "420205": "铁山区",
		    "420222": "阳新县",
		    "420281": "大冶市",
		    "420282": "其它区",
		    "420300": "十堰市",
		    "420302": "茅箭区",
		    "420303": "张湾区",
		    "420321": "郧县",
		    "420322": "郧西县",
		    "420323": "竹山县",
		    "420324": "竹溪县",
		    "420325": "房县",
		    "420381": "丹江口市",
		    "420383": "其它区",
		    "420500": "宜昌市",
		    "420502": "西陵区",
		    "420503": "伍家岗区",
		    "420504": "点军区",
		    "420505": "猇亭区",
		    "420506": "夷陵区",
		    "420525": "远安县",
		    "420526": "兴山县",
		    "420527": "秭归县",
		    "420528": "长阳土家族自治县",
		    "420529": "五峰土家族自治县",
		    "420581": "宜都市",
		    "420582": "当阳市",
		    "420583": "枝江市",
		    "420584": "其它区",
		    "420600": "襄阳市",
		    "420602": "襄城区",
		    "420606": "樊城区",
		    "420607": "襄州区",
		    "420624": "南漳县",
		    "420625": "谷城县",
		    "420626": "保康县",
		    "420682": "老河口市",
		    "420683": "枣阳市",
		    "420684": "宜城市",
		    "420685": "其它区",
		    "420700": "鄂州市",
		    "420702": "梁子湖区",
		    "420703": "华容区",
		    "420704": "鄂城区",
		    "420705": "其它区",
		    "420800": "荆门市",
		    "420802": "东宝区",
		    "420804": "掇刀区",
		    "420821": "京山县",
		    "420822": "沙洋县",
		    "420881": "钟祥市",
		    "420882": "其它区",
		    "420900": "孝感市",
		    "420902": "孝南区",
		    "420921": "孝昌县",
		    "420922": "大悟县",
		    "420923": "云梦县",
		    "420981": "应城市",
		    "420982": "安陆市",
		    "420984": "汉川市",
		    "420985": "其它区",
		    "421000": "荆州市",
		    "421002": "沙市区",
		    "421003": "荆州区",
		    "421022": "公安县",
		    "421023": "监利县",
		    "421024": "江陵县",
		    "421081": "石首市",
		    "421083": "洪湖市",
		    "421087": "松滋市",
		    "421088": "其它区",
		    "421100": "黄冈市",
		    "421102": "黄州区",
		    "421121": "团风县",
		    "421122": "红安县",
		    "421123": "罗田县",
		    "421124": "英山县",
		    "421125": "浠水县",
		    "421126": "蕲春县",
		    "421127": "黄梅县",
		    "421181": "麻城市",
		    "421182": "武穴市",
		    "421183": "其它区",
		    "421200": "咸宁市",
		    "421202": "咸安区",
		    "421221": "嘉鱼县",
		    "421222": "通城县",
		    "421223": "崇阳县",
		    "421224": "通山县",
		    "421281": "赤壁市",
		    "421283": "其它区",
		    "421300": "随州市",
		    "421302": "曾都区",
		    "421321": "随县",
		    "421381": "广水市",
		    "421382": "其它区",
		    "422800": "恩施土家族苗族自治州",
		    "422801": "恩施市",
		    "422802": "利川市",
		    "422822": "建始县",
		    "422823": "巴东县",
		    "422825": "宣恩县",
		    "422826": "咸丰县",
		    "422827": "来凤县",
		    "422828": "鹤峰县",
		    "422829": "其它区",
		    "429004": "仙桃市",
		    "429005": "潜江市",
		    "429006": "天门市",
		    "429021": "神农架林区",
		    "430000": "湖南省",
		    "430100": "长沙市",
		    "430102": "芙蓉区",
		    "430103": "天心区",
		    "430104": "岳麓区",
		    "430105": "开福区",
		    "430111": "雨花区",
		    "430121": "长沙县",
		    "430122": "望城区",
		    "430124": "宁乡县",
		    "430181": "浏阳市",
		    "430182": "其它区",
		    "430200": "株洲市",
		    "430202": "荷塘区",
		    "430203": "芦淞区",
		    "430204": "石峰区",
		    "430211": "天元区",
		    "430221": "株洲县",
		    "430223": "攸县",
		    "430224": "茶陵县",
		    "430225": "炎陵县",
		    "430281": "醴陵市",
		    "430282": "其它区",
		    "430300": "湘潭市",
		    "430302": "雨湖区",
		    "430304": "岳塘区",
		    "430321": "湘潭县",
		    "430381": "湘乡市",
		    "430382": "韶山市",
		    "430383": "其它区",
		    "430400": "衡阳市",
		    "430405": "珠晖区",
		    "430406": "雁峰区",
		    "430407": "石鼓区",
		    "430408": "蒸湘区",
		    "430412": "南岳区",
		    "430421": "衡阳县",
		    "430422": "衡南县",
		    "430423": "衡山县",
		    "430424": "衡东县",
		    "430426": "祁东县",
		    "430481": "耒阳市",
		    "430482": "常宁市",
		    "430483": "其它区",
		    "430500": "邵阳市",
		    "430502": "双清区",
		    "430503": "大祥区",
		    "430511": "北塔区",
		    "430521": "邵东县",
		    "430522": "新邵县",
		    "430523": "邵阳县",
		    "430524": "隆回县",
		    "430525": "洞口县",
		    "430527": "绥宁县",
		    "430528": "新宁县",
		    "430529": "城步苗族自治县",
		    "430581": "武冈市",
		    "430582": "其它区",
		    "430600": "岳阳市",
		    "430602": "岳阳楼区",
		    "430603": "云溪区",
		    "430611": "君山区",
		    "430621": "岳阳县",
		    "430623": "华容县",
		    "430624": "湘阴县",
		    "430626": "平江县",
		    "430681": "汨罗市",
		    "430682": "临湘市",
		    "430683": "其它区",
		    "430700": "常德市",
		    "430702": "武陵区",
		    "430703": "鼎城区",
		    "430721": "安乡县",
		    "430722": "汉寿县",
		    "430723": "澧县",
		    "430724": "临澧县",
		    "430725": "桃源县",
		    "430726": "石门县",
		    "430781": "津市市",
		    "430782": "其它区",
		    "430800": "张家界市",
		    "430802": "永定区",
		    "430811": "武陵源区",
		    "430821": "慈利县",
		    "430822": "桑植县",
		    "430823": "其它区",
		    "430900": "益阳市",
		    "430902": "资阳区",
		    "430903": "赫山区",
		    "430921": "南县",
		    "430922": "桃江县",
		    "430923": "安化县",
		    "430981": "沅江市",
		    "430982": "其它区",
		    "431000": "郴州市",
		    "431002": "北湖区",
		    "431003": "苏仙区",
		    "431021": "桂阳县",
		    "431022": "宜章县",
		    "431023": "永兴县",
		    "431024": "嘉禾县",
		    "431025": "临武县",
		    "431026": "汝城县",
		    "431027": "桂东县",
		    "431028": "安仁县",
		    "431081": "资兴市",
		    "431082": "其它区",
		    "431100": "永州市",
		    "431102": "零陵区",
		    "431103": "冷水滩区",
		    "431121": "祁阳县",
		    "431122": "东安县",
		    "431123": "双牌县",
		    "431124": "道县",
		    "431125": "江永县",
		    "431126": "宁远县",
		    "431127": "蓝山县",
		    "431128": "新田县",
		    "431129": "江华瑶族自治县",
		    "431130": "其它区",
		    "431200": "怀化市",
		    "431202": "鹤城区",
		    "431221": "中方县",
		    "431222": "沅陵县",
		    "431223": "辰溪县",
		    "431224": "溆浦县",
		    "431225": "会同县",
		    "431226": "麻阳苗族自治县",
		    "431227": "新晃侗族自治县",
		    "431228": "芷江侗族自治县",
		    "431229": "靖州苗族侗族自治县",
		    "431230": "通道侗族自治县",
		    "431281": "洪江市",
		    "431282": "其它区",
		    "431300": "娄底市",
		    "431302": "娄星区",
		    "431321": "双峰县",
		    "431322": "新化县",
		    "431381": "冷水江市",
		    "431382": "涟源市",
		    "431383": "其它区",
		    "433100": "湘西土家族苗族自治州",
		    "433101": "吉首市",
		    "433122": "泸溪县",
		    "433123": "凤凰县",
		    "433124": "花垣县",
		    "433125": "保靖县",
		    "433126": "古丈县",
		    "433127": "永顺县",
		    "433130": "龙山县",
		    "433131": "其它区",
		    "440000": "广东省",
		    "440100": "广州市",
		    "440103": "荔湾区",
		    "440104": "越秀区",
		    "440105": "海珠区",
		    "440106": "天河区",
		    "440111": "白云区",
		    "440112": "黄埔区",
		    "440113": "番禺区",
		    "440114": "花都区",
		    "440115": "南沙区",
		    "440116": "萝岗区",
		    "440183": "增城市",
		    "440184": "从化市",
		    "440189": "其它区",
		    "440200": "韶关市",
		    "440203": "武江区",
		    "440204": "浈江区",
		    "440205": "曲江区",
		    "440222": "始兴县",
		    "440224": "仁化县",
		    "440229": "翁源县",
		    "440232": "乳源瑶族自治县",
		    "440233": "新丰县",
		    "440281": "乐昌市",
		    "440282": "南雄市",
		    "440283": "其它区",
		    "440300": "深圳市",
		    "440303": "罗湖区",
		    "440304": "福田区",
		    "440305": "南山区",
		    "440306": "宝安区",
		    "440307": "龙岗区",
		    "440308": "盐田区",
		    "440309": "其它区",
		    "440320": "光明新区",
		    "440321": "坪山新区",
		    "440322": "大鹏新区",
		    "440323": "龙华新区",
		    "440400": "珠海市",
		    "440402": "香洲区",
		    "440403": "斗门区",
		    "440404": "金湾区",
		    "440488": "其它区",
		    "440500": "汕头市",
		    "440507": "龙湖区",
		    "440511": "金平区",
		    "440512": "濠江区",
		    "440513": "潮阳区",
		    "440514": "潮南区",
		    "440515": "澄海区",
		    "440523": "南澳县",
		    "440524": "其它区",
		    "440600": "佛山市",
		    "440604": "禅城区",
		    "440605": "南海区",
		    "440606": "顺德区",
		    "440607": "三水区",
		    "440608": "高明区",
		    "440609": "其它区",
		    "440700": "江门市",
		    "440703": "蓬江区",
		    "440704": "江海区",
		    "440705": "新会区",
		    "440781": "台山市",
		    "440783": "开平市",
		    "440784": "鹤山市",
		    "440785": "恩平市",
		    "440786": "其它区",
		    "440800": "湛江市",
		    "440802": "赤坎区",
		    "440803": "霞山区",
		    "440804": "坡头区",
		    "440811": "麻章区",
		    "440823": "遂溪县",
		    "440825": "徐闻县",
		    "440881": "廉江市",
		    "440882": "雷州市",
		    "440883": "吴川市",
		    "440884": "其它区",
		    "440900": "茂名市",
		    "440902": "茂南区",
		    "440903": "茂港区",
		    "440923": "电白县",
		    "440981": "高州市",
		    "440982": "化州市",
		    "440983": "信宜市",
		    "440984": "其它区",
		    "441200": "肇庆市",
		    "441202": "端州区",
		    "441203": "鼎湖区",
		    "441223": "广宁县",
		    "441224": "怀集县",
		    "441225": "封开县",
		    "441226": "德庆县",
		    "441283": "高要市",
		    "441284": "四会市",
		    "441285": "其它区",
		    "441300": "惠州市",
		    "441302": "惠城区",
		    "441303": "惠阳区",
		    "441322": "博罗县",
		    "441323": "惠东县",
		    "441324": "龙门县",
		    "441325": "其它区",
		    "441400": "梅州市",
		    "441402": "梅江区",
		    "441421": "梅县",
		    "441422": "大埔县",
		    "441423": "丰顺县",
		    "441424": "五华县",
		    "441426": "平远县",
		    "441427": "蕉岭县",
		    "441481": "兴宁市",
		    "441482": "其它区",
		    "441500": "汕尾市",
		    "441502": "城区",
		    "441521": "海丰县",
		    "441523": "陆河县",
		    "441581": "陆丰市",
		    "441582": "其它区",
		    "441600": "河源市",
		    "441602": "源城区",
		    "441621": "紫金县",
		    "441622": "龙川县",
		    "441623": "连平县",
		    "441624": "和平县",
		    "441625": "东源县",
		    "441626": "其它区",
		    "441700": "阳江市",
		    "441702": "江城区",
		    "441721": "阳西县",
		    "441723": "阳东县",
		    "441781": "阳春市",
		    "441782": "其它区",
		    "441800": "清远市",
		    "441802": "清城区",
		    "441821": "佛冈县",
		    "441823": "阳山县",
		    "441825": "连山壮族瑶族自治县",
		    "441826": "连南瑶族自治县",
		    "441827": "清新区",
		    "441881": "英德市",
		    "441882": "连州市",
		    "441883": "其它区",
		    "441900": "东莞市",
		    "442000": "中山市",
		    "442101": "东沙群岛",
		    "445100": "潮州市",
		    "445102": "湘桥区",
		    "445121": "潮安区",
		    "445122": "饶平县",
		    "445186": "其它区",
		    "445200": "揭阳市",
		    "445202": "榕城区",
		    "445221": "揭东区",
		    "445222": "揭西县",
		    "445224": "惠来县",
		    "445281": "普宁市",
		    "445285": "其它区",
		    "445300": "云浮市",
		    "445302": "云城区",
		    "445321": "新兴县",
		    "445322": "郁南县",
		    "445323": "云安县",
		    "445381": "罗定市",
		    "445382": "其它区",
		    "450000": "广西壮族自治区",
		    "450100": "南宁市",
		    "450102": "兴宁区",
		    "450103": "青秀区",
		    "450105": "江南区",
		    "450107": "西乡塘区",
		    "450108": "良庆区",
		    "450109": "邕宁区",
		    "450122": "武鸣县",
		    "450123": "隆安县",
		    "450124": "马山县",
		    "450125": "上林县",
		    "450126": "宾阳县",
		    "450127": "横县",
		    "450128": "其它区",
		    "450200": "柳州市",
		    "450202": "城中区",
		    "450203": "鱼峰区",
		    "450204": "柳南区",
		    "450205": "柳北区",
		    "450221": "柳江县",
		    "450222": "柳城县",
		    "450223": "鹿寨县",
		    "450224": "融安县",
		    "450225": "融水苗族自治县",
		    "450226": "三江侗族自治县",
		    "450227": "其它区",
		    "450300": "桂林市",
		    "450302": "秀峰区",
		    "450303": "叠彩区",
		    "450304": "象山区",
		    "450305": "七星区",
		    "450311": "雁山区",
		    "450321": "阳朔县",
		    "450322": "临桂区",
		    "450323": "灵川县",
		    "450324": "全州县",
		    "450325": "兴安县",
		    "450326": "永福县",
		    "450327": "灌阳县",
		    "450328": "龙胜各族自治县",
		    "450329": "资源县",
		    "450330": "平乐县",
		    "450331": "荔浦县",
		    "450332": "恭城瑶族自治县",
		    "450333": "其它区",
		    "450400": "梧州市",
		    "450403": "万秀区",
		    "450405": "长洲区",
		    "450406": "龙圩区",
		    "450421": "苍梧县",
		    "450422": "藤县",
		    "450423": "蒙山县",
		    "450481": "岑溪市",
		    "450482": "其它区",
		    "450500": "北海市",
		    "450502": "海城区",
		    "450503": "银海区",
		    "450512": "铁山港区",
		    "450521": "合浦县",
		    "450522": "其它区",
		    "450600": "防城港市",
		    "450602": "港口区",
		    "450603": "防城区",
		    "450621": "上思县",
		    "450681": "东兴市",
		    "450682": "其它区",
		    "450700": "钦州市",
		    "450702": "钦南区",
		    "450703": "钦北区",
		    "450721": "灵山县",
		    "450722": "浦北县",
		    "450723": "其它区",
		    "450800": "贵港市",
		    "450802": "港北区",
		    "450803": "港南区",
		    "450804": "覃塘区",
		    "450821": "平南县",
		    "450881": "桂平市",
		    "450882": "其它区",
		    "450900": "玉林市",
		    "450902": "玉州区",
		    "450903": "福绵区",
		    "450921": "容县",
		    "450922": "陆川县",
		    "450923": "博白县",
		    "450924": "兴业县",
		    "450981": "北流市",
		    "450982": "其它区",
		    "451000": "百色市",
		    "451002": "右江区",
		    "451021": "田阳县",
		    "451022": "田东县",
		    "451023": "平果县",
		    "451024": "德保县",
		    "451025": "靖西县",
		    "451026": "那坡县",
		    "451027": "凌云县",
		    "451028": "乐业县",
		    "451029": "田林县",
		    "451030": "西林县",
		    "451031": "隆林各族自治县",
		    "451032": "其它区",
		    "451100": "贺州市",
		    "451102": "八步区",
		    "451119": "平桂管理区",
		    "451121": "昭平县",
		    "451122": "钟山县",
		    "451123": "富川瑶族自治县",
		    "451124": "其它区",
		    "451200": "河池市",
		    "451202": "金城江区",
		    "451221": "南丹县",
		    "451222": "天峨县",
		    "451223": "凤山县",
		    "451224": "东兰县",
		    "451225": "罗城仫佬族自治县",
		    "451226": "环江毛南族自治县",
		    "451227": "巴马瑶族自治县",
		    "451228": "都安瑶族自治县",
		    "451229": "大化瑶族自治县",
		    "451281": "宜州市",
		    "451282": "其它区",
		    "451300": "来宾市",
		    "451302": "兴宾区",
		    "451321": "忻城县",
		    "451322": "象州县",
		    "451323": "武宣县",
		    "451324": "金秀瑶族自治县",
		    "451381": "合山市",
		    "451382": "其它区",
		    "451400": "崇左市",
		    "451402": "江州区",
		    "451421": "扶绥县",
		    "451422": "宁明县",
		    "451423": "龙州县",
		    "451424": "大新县",
		    "451425": "天等县",
		    "451481": "凭祥市",
		    "451482": "其它区",
		    "460000": "海南省",
		    "460100": "海口市",
		    "460105": "秀英区",
		    "460106": "龙华区",
		    "460107": "琼山区",
		    "460108": "美兰区",
		    "460109": "其它区",
		    "460200": "三亚市",
		    "460300": "三沙市",
		    "460321": "西沙群岛",
		    "460322": "南沙群岛",
		    "460323": "中沙群岛的岛礁及其海域",
		    "469001": "五指山市",
		    "469002": "琼海市",
		    "469003": "儋州市",
		    "469005": "文昌市",
		    "469006": "万宁市",
		    "469007": "东方市",
		    "469025": "定安县",
		    "469026": "屯昌县",
		    "469027": "澄迈县",
		    "469028": "临高县",
		    "469030": "白沙黎族自治县",
		    "469031": "昌江黎族自治县",
		    "469033": "乐东黎族自治县",
		    "469034": "陵水黎族自治县",
		    "469035": "保亭黎族苗族自治县",
		    "469036": "琼中黎族苗族自治县",
		    "471005": "其它区",
		    "500000": "重庆",
		    "500100": "重庆市",
		    "500101": "万州区",
		    "500102": "涪陵区",
		    "500103": "渝中区",
		    "500104": "大渡口区",
		    "500105": "江北区",
		    "500106": "沙坪坝区",
		    "500107": "九龙坡区",
		    "500108": "南岸区",
		    "500109": "北碚区",
		    "500110": "万盛区",
		    "500111": "双桥区",
		    "500112": "渝北区",
		    "500113": "巴南区",
		    "500114": "黔江区",
		    "500115": "长寿区",
		    "500222": "綦江区",
		    "500223": "潼南县",
		    "500224": "铜梁县",
		    "500225": "大足区",
		    "500226": "荣昌县",
		    "500227": "璧山县",
		    "500228": "梁平县",
		    "500229": "城口县",
		    "500230": "丰都县",
		    "500231": "垫江县",
		    "500232": "武隆县",
		    "500233": "忠县",
		    "500234": "开县",
		    "500235": "云阳县",
		    "500236": "奉节县",
		    "500237": "巫山县",
		    "500238": "巫溪县",
		    "500240": "石柱土家族自治县",
		    "500241": "秀山土家族苗族自治县",
		    "500242": "酉阳土家族苗族自治县",
		    "500243": "彭水苗族土家族自治县",
		    "500381": "江津区",
		    "500382": "合川区",
		    "500383": "永川区",
		    "500384": "南川区",
		    "500385": "其它区",
		    "510000": "四川省",
		    "510100": "成都市",
		    "510104": "锦江区",
		    "510105": "青羊区",
		    "510106": "金牛区",
		    "510107": "武侯区",
		    "510108": "成华区",
		    "510112": "龙泉驿区",
		    "510113": "青白江区",
		    "510114": "新都区",
		    "510115": "温江区",
		    "510121": "金堂县",
		    "510122": "双流县",
		    "510124": "郫县",
		    "510129": "大邑县",
		    "510131": "蒲江县",
		    "510132": "新津县",
		    "510181": "都江堰市",
		    "510182": "彭州市",
		    "510183": "邛崃市",
		    "510184": "崇州市",
		    "510185": "其它区",
		    "510300": "自贡市",
		    "510302": "自流井区",
		    "510303": "贡井区",
		    "510304": "大安区",
		    "510311": "沿滩区",
		    "510321": "荣县",
		    "510322": "富顺县",
		    "510323": "其它区",
		    "510400": "攀枝花市",
		    "510402": "东区",
		    "510403": "西区",
		    "510411": "仁和区",
		    "510421": "米易县",
		    "510422": "盐边县",
		    "510423": "其它区",
		    "510500": "泸州市",
		    "510502": "江阳区",
		    "510503": "纳溪区",
		    "510504": "龙马潭区",
		    "510521": "泸县",
		    "510522": "合江县",
		    "510524": "叙永县",
		    "510525": "古蔺县",
		    "510526": "其它区",
		    "510600": "德阳市",
		    "510603": "旌阳区",
		    "510623": "中江县",
		    "510626": "罗江县",
		    "510681": "广汉市",
		    "510682": "什邡市",
		    "510683": "绵竹市",
		    "510684": "其它区",
		    "510700": "绵阳市",
		    "510703": "涪城区",
		    "510704": "游仙区",
		    "510722": "三台县",
		    "510723": "盐亭县",
		    "510724": "安县",
		    "510725": "梓潼县",
		    "510726": "北川羌族自治县",
		    "510727": "平武县",
		    "510781": "江油市",
		    "510782": "其它区",
		    "510800": "广元市",
		    "510802": "利州区",
		    "510811": "昭化区",
		    "510812": "朝天区",
		    "510821": "旺苍县",
		    "510822": "青川县",
		    "510823": "剑阁县",
		    "510824": "苍溪县",
		    "510825": "其它区",
		    "510900": "遂宁市",
		    "510903": "船山区",
		    "510904": "安居区",
		    "510921": "蓬溪县",
		    "510922": "射洪县",
		    "510923": "大英县",
		    "510924": "其它区",
		    "511000": "内江市",
		    "511002": "市中区",
		    "511011": "东兴区",
		    "511024": "威远县",
		    "511025": "资中县",
		    "511028": "隆昌县",
		    "511029": "其它区",
		    "511100": "乐山市",
		    "511102": "市中区",
		    "511111": "沙湾区",
		    "511112": "五通桥区",
		    "511113": "金口河区",
		    "511123": "犍为县",
		    "511124": "井研县",
		    "511126": "夹江县",
		    "511129": "沐川县",
		    "511132": "峨边彝族自治县",
		    "511133": "马边彝族自治县",
		    "511181": "峨眉山市",
		    "511182": "其它区",
		    "511300": "南充市",
		    "511302": "顺庆区",
		    "511303": "高坪区",
		    "511304": "嘉陵区",
		    "511321": "南部县",
		    "511322": "营山县",
		    "511323": "蓬安县",
		    "511324": "仪陇县",
		    "511325": "西充县",
		    "511381": "阆中市",
		    "511382": "其它区",
		    "511400": "眉山市",
		    "511402": "东坡区",
		    "511421": "仁寿县",
		    "511422": "彭山县",
		    "511423": "洪雅县",
		    "511424": "丹棱县",
		    "511425": "青神县",
		    "511426": "其它区",
		    "511500": "宜宾市",
		    "511502": "翠屏区",
		    "511521": "宜宾县",
		    "511522": "南溪区",
		    "511523": "江安县",
		    "511524": "长宁县",
		    "511525": "高县",
		    "511526": "珙县",
		    "511527": "筠连县",
		    "511528": "兴文县",
		    "511529": "屏山县",
		    "511530": "其它区",
		    "511600": "广安市",
		    "511602": "广安区",
		    "511603": "前锋区",
		    "511621": "岳池县",
		    "511622": "武胜县",
		    "511623": "邻水县",
		    "511681": "华蓥市",
		    "511683": "其它区",
		    "511700": "达州市",
		    "511702": "通川区",
		    "511721": "达川区",
		    "511722": "宣汉县",
		    "511723": "开江县",
		    "511724": "大竹县",
		    "511725": "渠县",
		    "511781": "万源市",
		    "511782": "其它区",
		    "511800": "雅安市",
		    "511802": "雨城区",
		    "511821": "名山区",
		    "511822": "荥经县",
		    "511823": "汉源县",
		    "511824": "石棉县",
		    "511825": "天全县",
		    "511826": "芦山县",
		    "511827": "宝兴县",
		    "511828": "其它区",
		    "511900": "巴中市",
		    "511902": "巴州区",
		    "511903": "恩阳区",
		    "511921": "通江县",
		    "511922": "南江县",
		    "511923": "平昌县",
		    "511924": "其它区",
		    "512000": "资阳市",
		    "512002": "雁江区",
		    "512021": "安岳县",
		    "512022": "乐至县",
		    "512081": "简阳市",
		    "512082": "其它区",
		    "513200": "阿坝藏族羌族自治州",
		    "513221": "汶川县",
		    "513222": "理县",
		    "513223": "茂县",
		    "513224": "松潘县",
		    "513225": "九寨沟县",
		    "513226": "金川县",
		    "513227": "小金县",
		    "513228": "黑水县",
		    "513229": "马尔康县",
		    "513230": "壤塘县",
		    "513231": "阿坝县",
		    "513232": "若尔盖县",
		    "513233": "红原县",
		    "513234": "其它区",
		    "513300": "甘孜藏族自治州",
		    "513321": "康定县",
		    "513322": "泸定县",
		    "513323": "丹巴县",
		    "513324": "九龙县",
		    "513325": "雅江县",
		    "513326": "道孚县",
		    "513327": "炉霍县",
		    "513328": "甘孜县",
		    "513329": "新龙县",
		    "513330": "德格县",
		    "513331": "白玉县",
		    "513332": "石渠县",
		    "513333": "色达县",
		    "513334": "理塘县",
		    "513335": "巴塘县",
		    "513336": "乡城县",
		    "513337": "稻城县",
		    "513338": "得荣县",
		    "513339": "其它区",
		    "513400": "凉山彝族自治州",
		    "513401": "西昌市",
		    "513422": "木里藏族自治县",
		    "513423": "盐源县",
		    "513424": "德昌县",
		    "513425": "会理县",
		    "513426": "会东县",
		    "513427": "宁南县",
		    "513428": "普格县",
		    "513429": "布拖县",
		    "513430": "金阳县",
		    "513431": "昭觉县",
		    "513432": "喜德县",
		    "513433": "冕宁县",
		    "513434": "越西县",
		    "513435": "甘洛县",
		    "513436": "美姑县",
		    "513437": "雷波县",
		    "513438": "其它区",
		    "520000": "贵州省",
		    "520100": "贵阳市",
		    "520102": "南明区",
		    "520103": "云岩区",
		    "520111": "花溪区",
		    "520112": "乌当区",
		    "520113": "白云区",
		    "520121": "开阳县",
		    "520122": "息烽县",
		    "520123": "修文县",
		    "520151": "观山湖区",
		    "520181": "清镇市",
		    "520182": "其它区",
		    "520200": "六盘水市",
		    "520201": "钟山区",
		    "520203": "六枝特区",
		    "520221": "水城县",
		    "520222": "盘县",
		    "520223": "其它区",
		    "520300": "遵义市",
		    "520302": "红花岗区",
		    "520303": "汇川区",
		    "520321": "遵义县",
		    "520322": "桐梓县",
		    "520323": "绥阳县",
		    "520324": "正安县",
		    "520325": "道真仡佬族苗族自治县",
		    "520326": "务川仡佬族苗族自治县",
		    "520327": "凤冈县",
		    "520328": "湄潭县",
		    "520329": "余庆县",
		    "520330": "习水县",
		    "520381": "赤水市",
		    "520382": "仁怀市",
		    "520383": "其它区",
		    "520400": "安顺市",
		    "520402": "西秀区",
		    "520421": "平坝县",
		    "520422": "普定县",
		    "520423": "镇宁布依族苗族自治县",
		    "520424": "关岭布依族苗族自治县",
		    "520425": "紫云苗族布依族自治县",
		    "520426": "其它区",
		    "522200": "铜仁市",
		    "522201": "碧江区",
		    "522222": "江口县",
		    "522223": "玉屏侗族自治县",
		    "522224": "石阡县",
		    "522225": "思南县",
		    "522226": "印江土家族苗族自治县",
		    "522227": "德江县",
		    "522228": "沿河土家族自治县",
		    "522229": "松桃苗族自治县",
		    "522230": "万山区",
		    "522231": "其它区",
		    "522300": "黔西南布依族苗族自治州",
		    "522301": "兴义市",
		    "522322": "兴仁县",
		    "522323": "普安县",
		    "522324": "晴隆县",
		    "522325": "贞丰县",
		    "522326": "望谟县",
		    "522327": "册亨县",
		    "522328": "安龙县",
		    "522329": "其它区",
		    "522400": "毕节市",
		    "522401": "七星关区",
		    "522422": "大方县",
		    "522423": "黔西县",
		    "522424": "金沙县",
		    "522425": "织金县",
		    "522426": "纳雍县",
		    "522427": "威宁彝族回族苗族自治县",
		    "522428": "赫章县",
		    "522429": "其它区",
		    "522600": "黔东南苗族侗族自治州",
		    "522601": "凯里市",
		    "522622": "黄平县",
		    "522623": "施秉县",
		    "522624": "三穗县",
		    "522625": "镇远县",
		    "522626": "岑巩县",
		    "522627": "天柱县",
		    "522628": "锦屏县",
		    "522629": "剑河县",
		    "522630": "台江县",
		    "522631": "黎平县",
		    "522632": "榕江县",
		    "522633": "从江县",
		    "522634": "雷山县",
		    "522635": "麻江县",
		    "522636": "丹寨县",
		    "522637": "其它区",
		    "522700": "黔南布依族苗族自治州",
		    "522701": "都匀市",
		    "522702": "福泉市",
		    "522722": "荔波县",
		    "522723": "贵定县",
		    "522725": "瓮安县",
		    "522726": "独山县",
		    "522727": "平塘县",
		    "522728": "罗甸县",
		    "522729": "长顺县",
		    "522730": "龙里县",
		    "522731": "惠水县",
		    "522732": "三都水族自治县",
		    "522733": "其它区",
		    "530000": "云南省",
		    "530100": "昆明市",
		    "530102": "五华区",
		    "530103": "盘龙区",
		    "530111": "官渡区",
		    "530112": "西山区",
		    "530113": "东川区",
		    "530121": "呈贡区",
		    "530122": "晋宁县",
		    "530124": "富民县",
		    "530125": "宜良县",
		    "530126": "石林彝族自治县",
		    "530127": "嵩明县",
		    "530128": "禄劝彝族苗族自治县",
		    "530129": "寻甸回族彝族自治县",
		    "530181": "安宁市",
		    "530182": "其它区",
		    "530300": "曲靖市",
		    "530302": "麒麟区",
		    "530321": "马龙县",
		    "530322": "陆良县",
		    "530323": "师宗县",
		    "530324": "罗平县",
		    "530325": "富源县",
		    "530326": "会泽县",
		    "530328": "沾益县",
		    "530381": "宣威市",
		    "530382": "其它区",
		    "530400": "玉溪市",
		    "530402": "红塔区",
		    "530421": "江川县",
		    "530422": "澄江县",
		    "530423": "通海县",
		    "530424": "华宁县",
		    "530425": "易门县",
		    "530426": "峨山彝族自治县",
		    "530427": "新平彝族傣族自治县",
		    "530428": "元江哈尼族彝族傣族自治县",
		    "530429": "其它区",
		    "530500": "保山市",
		    "530502": "隆阳区",
		    "530521": "施甸县",
		    "530522": "腾冲县",
		    "530523": "龙陵县",
		    "530524": "昌宁县",
		    "530525": "其它区",
		    "530600": "昭通市",
		    "530602": "昭阳区",
		    "530621": "鲁甸县",
		    "530622": "巧家县",
		    "530623": "盐津县",
		    "530624": "大关县",
		    "530625": "永善县",
		    "530626": "绥江县",
		    "530627": "镇雄县",
		    "530628": "彝良县",
		    "530629": "威信县",
		    "530630": "水富县",
		    "530631": "其它区",
		    "530700": "丽江市",
		    "530702": "古城区",
		    "530721": "玉龙纳西族自治县",
		    "530722": "永胜县",
		    "530723": "华坪县",
		    "530724": "宁蒗彝族自治县",
		    "530725": "其它区",
		    "530800": "普洱市",
		    "530802": "思茅区",
		    "530821": "宁洱哈尼族彝族自治县",
		    "530822": "墨江哈尼族自治县",
		    "530823": "景东彝族自治县",
		    "530824": "景谷傣族彝族自治县",
		    "530825": "镇沅彝族哈尼族拉祜族自治县",
		    "530826": "江城哈尼族彝族自治县",
		    "530827": "孟连傣族拉祜族佤族自治县",
		    "530828": "澜沧拉祜族自治县",
		    "530829": "西盟佤族自治县",
		    "530830": "其它区",
		    "530900": "临沧市",
		    "530902": "临翔区",
		    "530921": "凤庆县",
		    "530922": "云县",
		    "530923": "永德县",
		    "530924": "镇康县",
		    "530925": "双江拉祜族佤族布朗族傣族自治县",
		    "530926": "耿马傣族佤族自治县",
		    "530927": "沧源佤族自治县",
		    "530928": "其它区",
		    "532300": "楚雄彝族自治州",
		    "532301": "楚雄市",
		    "532322": "双柏县",
		    "532323": "牟定县",
		    "532324": "南华县",
		    "532325": "姚安县",
		    "532326": "大姚县",
		    "532327": "永仁县",
		    "532328": "元谋县",
		    "532329": "武定县",
		    "532331": "禄丰县",
		    "532332": "其它区",
		    "532500": "红河哈尼族彝族自治州",
		    "532501": "个旧市",
		    "532502": "开远市",
		    "532522": "蒙自市",
		    "532523": "屏边苗族自治县",
		    "532524": "建水县",
		    "532525": "石屏县",
		    "532526": "弥勒市",
		    "532527": "泸西县",
		    "532528": "元阳县",
		    "532529": "红河县",
		    "532530": "金平苗族瑶族傣族自治县",
		    "532531": "绿春县",
		    "532532": "河口瑶族自治县",
		    "532533": "其它区",
		    "532600": "文山壮族苗族自治州",
		    "532621": "文山市",
		    "532622": "砚山县",
		    "532623": "西畴县",
		    "532624": "麻栗坡县",
		    "532625": "马关县",
		    "532626": "丘北县",
		    "532627": "广南县",
		    "532628": "富宁县",
		    "532629": "其它区",
		    "532800": "西双版纳傣族自治州",
		    "532801": "景洪市",
		    "532822": "勐海县",
		    "532823": "勐腊县",
		    "532824": "其它区",
		    "532900": "大理白族自治州",
		    "532901": "大理市",
		    "532922": "漾濞彝族自治县",
		    "532923": "祥云县",
		    "532924": "宾川县",
		    "532925": "弥渡县",
		    "532926": "南涧彝族自治县",
		    "532927": "巍山彝族回族自治县",
		    "532928": "永平县",
		    "532929": "云龙县",
		    "532930": "洱源县",
		    "532931": "剑川县",
		    "532932": "鹤庆县",
		    "532933": "其它区",
		    "533100": "德宏傣族景颇族自治州",
		    "533102": "瑞丽市",
		    "533103": "芒市",
		    "533122": "梁河县",
		    "533123": "盈江县",
		    "533124": "陇川县",
		    "533125": "其它区",
		    "533300": "怒江傈僳族自治州",
		    "533321": "泸水县",
		    "533323": "福贡县",
		    "533324": "贡山独龙族怒族自治县",
		    "533325": "兰坪白族普米族自治县",
		    "533326": "其它区",
		    "533400": "迪庆藏族自治州",
		    "533421": "香格里拉县",
		    "533422": "德钦县",
		    "533423": "维西傈僳族自治县",
		    "533424": "其它区",
		    "540000": "西藏自治区",
		    "540100": "拉萨市",
		    "540102": "城关区",
		    "540121": "林周县",
		    "540122": "当雄县",
		    "540123": "尼木县",
		    "540124": "曲水县",
		    "540125": "堆龙德庆县",
		    "540126": "达孜县",
		    "540127": "墨竹工卡县",
		    "540128": "其它区",
		    "542100": "昌都地区",
		    "542121": "昌都县",
		    "542122": "江达县",
		    "542123": "贡觉县",
		    "542124": "类乌齐县",
		    "542125": "丁青县",
		    "542126": "察雅县",
		    "542127": "八宿县",
		    "542128": "左贡县",
		    "542129": "芒康县",
		    "542132": "洛隆县",
		    "542133": "边坝县",
		    "542134": "其它区",
		    "542200": "山南地区",
		    "542221": "乃东县",
		    "542222": "扎囊县",
		    "542223": "贡嘎县",
		    "542224": "桑日县",
		    "542225": "琼结县",
		    "542226": "曲松县",
		    "542227": "措美县",
		    "542228": "洛扎县",
		    "542229": "加查县",
		    "542231": "隆子县",
		    "542232": "错那县",
		    "542233": "浪卡子县",
		    "542234": "其它区",
		    "542300": "日喀则地区",
		    "542301": "日喀则市",
		    "542322": "南木林县",
		    "542323": "江孜县",
		    "542324": "定日县",
		    "542325": "萨迦县",
		    "542326": "拉孜县",
		    "542327": "昂仁县",
		    "542328": "谢通门县",
		    "542329": "白朗县",
		    "542330": "仁布县",
		    "542331": "康马县",
		    "542332": "定结县",
		    "542333": "仲巴县",
		    "542334": "亚东县",
		    "542335": "吉隆县",
		    "542336": "聂拉木县",
		    "542337": "萨嘎县",
		    "542338": "岗巴县",
		    "542339": "其它区",
		    "542400": "那曲地区",
		    "542421": "那曲县",
		    "542422": "嘉黎县",
		    "542423": "比如县",
		    "542424": "聂荣县",
		    "542425": "安多县",
		    "542426": "申扎县",
		    "542427": "索县",
		    "542428": "班戈县",
		    "542429": "巴青县",
		    "542430": "尼玛县",
		    "542431": "其它区",
		    "542432": "双湖县",
		    "542500": "阿里地区",
		    "542521": "普兰县",
		    "542522": "札达县",
		    "542523": "噶尔县",
		    "542524": "日土县",
		    "542525": "革吉县",
		    "542526": "改则县",
		    "542527": "措勤县",
		    "542528": "其它区",
		    "542600": "林芝地区",
		    "542621": "林芝县",
		    "542622": "工布江达县",
		    "542623": "米林县",
		    "542624": "墨脱县",
		    "542625": "波密县",
		    "542626": "察隅县",
		    "542627": "朗县",
		    "542628": "其它区",
		    "610000": "陕西省",
		    "610100": "西安市",
		    "610102": "新城区",
		    "610103": "碑林区",
		    "610104": "莲湖区",
		    "610111": "灞桥区",
		    "610112": "未央区",
		    "610113": "雁塔区",
		    "610114": "阎良区",
		    "610115": "临潼区",
		    "610116": "长安区",
		    "610122": "蓝田县",
		    "610124": "周至县",
		    "610125": "户县",
		    "610126": "高陵县",
		    "610127": "其它区",
		    "610200": "铜川市",
		    "610202": "王益区",
		    "610203": "印台区",
		    "610204": "耀州区",
		    "610222": "宜君县",
		    "610223": "其它区",
		    "610300": "宝鸡市",
		    "610302": "渭滨区",
		    "610303": "金台区",
		    "610304": "陈仓区",
		    "610322": "凤翔县",
		    "610323": "岐山县",
		    "610324": "扶风县",
		    "610326": "眉县",
		    "610327": "陇县",
		    "610328": "千阳县",
		    "610329": "麟游县",
		    "610330": "凤县",
		    "610331": "太白县",
		    "610332": "其它区",
		    "610400": "咸阳市",
		    "610402": "秦都区",
		    "610403": "杨陵区",
		    "610404": "渭城区",
		    "610422": "三原县",
		    "610423": "泾阳县",
		    "610424": "乾县",
		    "610425": "礼泉县",
		    "610426": "永寿县",
		    "610427": "彬县",
		    "610428": "长武县",
		    "610429": "旬邑县",
		    "610430": "淳化县",
		    "610431": "武功县",
		    "610481": "兴平市",
		    "610482": "其它区",
		    "610500": "渭南市",
		    "610502": "临渭区",
		    "610521": "华县",
		    "610522": "潼关县",
		    "610523": "大荔县",
		    "610524": "合阳县",
		    "610525": "澄城县",
		    "610526": "蒲城县",
		    "610527": "白水县",
		    "610528": "富平县",
		    "610581": "韩城市",
		    "610582": "华阴市",
		    "610583": "其它区",
		    "610600": "延安市",
		    "610602": "宝塔区",
		    "610621": "延长县",
		    "610622": "延川县",
		    "610623": "子长县",
		    "610624": "安塞县",
		    "610625": "志丹县",
		    "610626": "吴起县",
		    "610627": "甘泉县",
		    "610628": "富县",
		    "610629": "洛川县",
		    "610630": "宜川县",
		    "610631": "黄龙县",
		    "610632": "黄陵县",
		    "610633": "其它区",
		    "610700": "汉中市",
		    "610702": "汉台区",
		    "610721": "南郑县",
		    "610722": "城固县",
		    "610723": "洋县",
		    "610724": "西乡县",
		    "610725": "勉县",
		    "610726": "宁强县",
		    "610727": "略阳县",
		    "610728": "镇巴县",
		    "610729": "留坝县",
		    "610730": "佛坪县",
		    "610731": "其它区",
		    "610800": "榆林市",
		    "610802": "榆阳区",
		    "610821": "神木县",
		    "610822": "府谷县",
		    "610823": "横山县",
		    "610824": "靖边县",
		    "610825": "定边县",
		    "610826": "绥德县",
		    "610827": "米脂县",
		    "610828": "佳县",
		    "610829": "吴堡县",
		    "610830": "清涧县",
		    "610831": "子洲县",
		    "610832": "其它区",
		    "610900": "安康市",
		    "610902": "汉滨区",
		    "610921": "汉阴县",
		    "610922": "石泉县",
		    "610923": "宁陕县",
		    "610924": "紫阳县",
		    "610925": "岚皋县",
		    "610926": "平利县",
		    "610927": "镇坪县",
		    "610928": "旬阳县",
		    "610929": "白河县",
		    "610930": "其它区",
		    "611000": "商洛市",
		    "611002": "商州区",
		    "611021": "洛南县",
		    "611022": "丹凤县",
		    "611023": "商南县",
		    "611024": "山阳县",
		    "611025": "镇安县",
		    "611026": "柞水县",
		    "611027": "其它区",
		    "620000": "甘肃省",
		    "620100": "兰州市",
		    "620102": "城关区",
		    "620103": "七里河区",
		    "620104": "西固区",
		    "620105": "安宁区",
		    "620111": "红古区",
		    "620121": "永登县",
		    "620122": "皋兰县",
		    "620123": "榆中县",
		    "620124": "其它区",
		    "620200": "嘉峪关市",
		    "620300": "金昌市",
		    "620302": "金川区",
		    "620321": "永昌县",
		    "620322": "其它区",
		    "620400": "白银市",
		    "620402": "白银区",
		    "620403": "平川区",
		    "620421": "靖远县",
		    "620422": "会宁县",
		    "620423": "景泰县",
		    "620424": "其它区",
		    "620500": "天水市",
		    "620502": "秦州区",
		    "620503": "麦积区",
		    "620521": "清水县",
		    "620522": "秦安县",
		    "620523": "甘谷县",
		    "620524": "武山县",
		    "620525": "张家川回族自治县",
		    "620526": "其它区",
		    "620600": "武威市",
		    "620602": "凉州区",
		    "620621": "民勤县",
		    "620622": "古浪县",
		    "620623": "天祝藏族自治县",
		    "620624": "其它区",
		    "620700": "张掖市",
		    "620702": "甘州区",
		    "620721": "肃南裕固族自治县",
		    "620722": "民乐县",
		    "620723": "临泽县",
		    "620724": "高台县",
		    "620725": "山丹县",
		    "620726": "其它区",
		    "620800": "平凉市",
		    "620802": "崆峒区",
		    "620821": "泾川县",
		    "620822": "灵台县",
		    "620823": "崇信县",
		    "620824": "华亭县",
		    "620825": "庄浪县",
		    "620826": "静宁县",
		    "620827": "其它区",
		    "620900": "酒泉市",
		    "620902": "肃州区",
		    "620921": "金塔县",
		    "620922": "瓜州县",
		    "620923": "肃北蒙古族自治县",
		    "620924": "阿克塞哈萨克族自治县",
		    "620981": "玉门市",
		    "620982": "敦煌市",
		    "620983": "其它区",
		    "621000": "庆阳市",
		    "621002": "西峰区",
		    "621021": "庆城县",
		    "621022": "环县",
		    "621023": "华池县",
		    "621024": "合水县",
		    "621025": "正宁县",
		    "621026": "宁县",
		    "621027": "镇原县",
		    "621028": "其它区",
		    "621100": "定西市",
		    "621102": "安定区",
		    "621121": "通渭县",
		    "621122": "陇西县",
		    "621123": "渭源县",
		    "621124": "临洮县",
		    "621125": "漳县",
		    "621126": "岷县",
		    "621127": "其它区",
		    "621200": "陇南市",
		    "621202": "武都区",
		    "621221": "成县",
		    "621222": "文县",
		    "621223": "宕昌县",
		    "621224": "康县",
		    "621225": "西和县",
		    "621226": "礼县",
		    "621227": "徽县",
		    "621228": "两当县",
		    "621229": "其它区",
		    "622900": "临夏回族自治州",
		    "622901": "临夏市",
		    "622921": "临夏县",
		    "622922": "康乐县",
		    "622923": "永靖县",
		    "622924": "广河县",
		    "622925": "和政县",
		    "622926": "东乡族自治县",
		    "622927": "积石山保安族东乡族撒拉族自治县",
		    "622928": "其它区",
		    "623000": "甘南藏族自治州",
		    "623001": "合作市",
		    "623021": "临潭县",
		    "623022": "卓尼县",
		    "623023": "舟曲县",
		    "623024": "迭部县",
		    "623025": "玛曲县",
		    "623026": "碌曲县",
		    "623027": "夏河县",
		    "623028": "其它区",
		    "630000": "青海省",
		    "630100": "西宁市",
		    "630102": "城东区",
		    "630103": "城中区",
		    "630104": "城西区",
		    "630105": "城北区",
		    "630121": "大通回族土族自治县",
		    "630122": "湟中县",
		    "630123": "湟源县",
		    "630124": "其它区",
		    "632100": "海东市",
		    "632121": "平安县",
		    "632122": "民和回族土族自治县",
		    "632123": "乐都区",
		    "632126": "互助土族自治县",
		    "632127": "化隆回族自治县",
		    "632128": "循化撒拉族自治县",
		    "632129": "其它区",
		    "632200": "海北藏族自治州",
		    "632221": "门源回族自治县",
		    "632222": "祁连县",
		    "632223": "海晏县",
		    "632224": "刚察县",
		    "632225": "其它区",
		    "632300": "黄南藏族自治州",
		    "632321": "同仁县",
		    "632322": "尖扎县",
		    "632323": "泽库县",
		    "632324": "河南蒙古族自治县",
		    "632325": "其它区",
		    "632500": "海南藏族自治州",
		    "632521": "共和县",
		    "632522": "同德县",
		    "632523": "贵德县",
		    "632524": "兴海县",
		    "632525": "贵南县",
		    "632526": "其它区",
		    "632600": "果洛藏族自治州",
		    "632621": "玛沁县",
		    "632622": "班玛县",
		    "632623": "甘德县",
		    "632624": "达日县",
		    "632625": "久治县",
		    "632626": "玛多县",
		    "632627": "其它区",
		    "632700": "玉树藏族自治州",
		    "632721": "玉树市",
		    "632722": "杂多县",
		    "632723": "称多县",
		    "632724": "治多县",
		    "632725": "囊谦县",
		    "632726": "曲麻莱县",
		    "632727": "其它区",
		    "632800": "海西蒙古族藏族自治州",
		    "632801": "格尔木市",
		    "632802": "德令哈市",
		    "632821": "乌兰县",
		    "632822": "都兰县",
		    "632823": "天峻县",
		    "632824": "其它区",
		    "640000": "宁夏回族自治区",
		    "640100": "银川市",
		    "640104": "兴庆区",
		    "640105": "西夏区",
		    "640106": "金凤区",
		    "640121": "永宁县",
		    "640122": "贺兰县",
		    "640181": "灵武市",
		    "640182": "其它区",
		    "640200": "石嘴山市",
		    "640202": "大武口区",
		    "640205": "惠农区",
		    "640221": "平罗县",
		    "640222": "其它区",
		    "640300": "吴忠市",
		    "640302": "利通区",
		    "640303": "红寺堡区",
		    "640323": "盐池县",
		    "640324": "同心县",
		    "640381": "青铜峡市",
		    "640382": "其它区",
		    "640400": "固原市",
		    "640402": "原州区",
		    "640422": "西吉县",
		    "640423": "隆德县",
		    "640424": "泾源县",
		    "640425": "彭阳县",
		    "640426": "其它区",
		    "640500": "中卫市",
		    "640502": "沙坡头区",
		    "640521": "中宁县",
		    "640522": "海原县",
		    "640523": "其它区",
		    "650000": "新疆维吾尔自治区",
		    "650100": "乌鲁木齐市",
		    "650102": "天山区",
		    "650103": "沙依巴克区",
		    "650104": "新市区",
		    "650105": "水磨沟区",
		    "650106": "头屯河区",
		    "650107": "达坂城区",
		    "650109": "米东区",
		    "650121": "乌鲁木齐县",
		    "650122": "其它区",
		    "650200": "克拉玛依市",
		    "650202": "独山子区",
		    "650203": "克拉玛依区",
		    "650204": "白碱滩区",
		    "650205": "乌尔禾区",
		    "650206": "其它区",
		    "652100": "吐鲁番地区",
		    "652101": "吐鲁番市",
		    "652122": "鄯善县",
		    "652123": "托克逊县",
		    "652124": "其它区",
		    "652200": "哈密地区",
		    "652201": "哈密市",
		    "652222": "巴里坤哈萨克自治县",
		    "652223": "伊吾县",
		    "652224": "其它区",
		    "652300": "昌吉回族自治州",
		    "652301": "昌吉市",
		    "652302": "阜康市",
		    "652323": "呼图壁县",
		    "652324": "玛纳斯县",
		    "652325": "奇台县",
		    "652327": "吉木萨尔县",
		    "652328": "木垒哈萨克自治县",
		    "652329": "其它区",
		    "652700": "博尔塔拉蒙古自治州",
		    "652701": "博乐市",
		    "652702": "阿拉山口市",
		    "652722": "精河县",
		    "652723": "温泉县",
		    "652724": "其它区",
		    "652800": "巴音郭楞蒙古自治州",
		    "652801": "库尔勒市",
		    "652822": "轮台县",
		    "652823": "尉犁县",
		    "652824": "若羌县",
		    "652825": "且末县",
		    "652826": "焉耆回族自治县",
		    "652827": "和静县",
		    "652828": "和硕县",
		    "652829": "博湖县",
		    "652830": "其它区",
		    "652900": "阿克苏地区",
		    "652901": "阿克苏市",
		    "652922": "温宿县",
		    "652923": "库车县",
		    "652924": "沙雅县",
		    "652925": "新和县",
		    "652926": "拜城县",
		    "652927": "乌什县",
		    "652928": "阿瓦提县",
		    "652929": "柯坪县",
		    "652930": "其它区",
		    "653000": "克孜勒苏柯尔克孜自治州",
		    "653001": "阿图什市",
		    "653022": "阿克陶县",
		    "653023": "阿合奇县",
		    "653024": "乌恰县",
		    "653025": "其它区",
		    "653100": "喀什地区",
		    "653101": "喀什市",
		    "653121": "疏附县",
		    "653122": "疏勒县",
		    "653123": "英吉沙县",
		    "653124": "泽普县",
		    "653125": "莎车县",
		    "653126": "叶城县",
		    "653127": "麦盖提县",
		    "653128": "岳普湖县",
		    "653129": "伽师县",
		    "653130": "巴楚县",
		    "653131": "塔什库尔干塔吉克自治县",
		    "653132": "其它区",
		    "653200": "和田地区",
		    "653201": "和田市",
		    "653221": "和田县",
		    "653222": "墨玉县",
		    "653223": "皮山县",
		    "653224": "洛浦县",
		    "653225": "策勒县",
		    "653226": "于田县",
		    "653227": "民丰县",
		    "653228": "其它区",
		    "654000": "伊犁哈萨克自治州",
		    "654002": "伊宁市",
		    "654003": "奎屯市",
		    "654021": "伊宁县",
		    "654022": "察布查尔锡伯自治县",
		    "654023": "霍城县",
		    "654024": "巩留县",
		    "654025": "新源县",
		    "654026": "昭苏县",
		    "654027": "特克斯县",
		    "654028": "尼勒克县",
		    "654029": "其它区",
		    "654200": "塔城地区",
		    "654201": "塔城市",
		    "654202": "乌苏市",
		    "654221": "额敏县",
		    "654223": "沙湾县",
		    "654224": "托里县",
		    "654225": "裕民县",
		    "654226": "和布克赛尔蒙古自治县",
		    "654227": "其它区",
		    "654300": "阿勒泰地区",
		    "654301": "阿勒泰市",
		    "654321": "布尔津县",
		    "654322": "富蕴县",
		    "654323": "福海县",
		    "654324": "哈巴河县",
		    "654325": "青河县",
		    "654326": "吉木乃县",
		    "654327": "其它区",
		    "659001": "石河子市",
		    "659002": "阿拉尔市",
		    "659003": "图木舒克市",
		    "659004": "五家渠市",
		    "710000": "台湾",
		    "710100": "台北市",
		    "710101": "中正区",
		    "710102": "大同区",
		    "710103": "中山区",
		    "710104": "松山区",
		    "710105": "大安区",
		    "710106": "万华区",
		    "710107": "信义区",
		    "710108": "士林区",
		    "710109": "北投区",
		    "710110": "内湖区",
		    "710111": "南港区",
		    "710112": "文山区",
		    "710113": "其它区",
		    "710200": "高雄市",
		    "710201": "新兴区",
		    "710202": "前金区",
		    "710203": "芩雅区",
		    "710204": "盐埕区",
		    "710205": "鼓山区",
		    "710206": "旗津区",
		    "710207": "前镇区",
		    "710208": "三民区",
		    "710209": "左营区",
		    "710210": "楠梓区",
		    "710211": "小港区",
		    "710212": "其它区",
		    "710241": "苓雅区",
		    "710242": "仁武区",
		    "710243": "大社区",
		    "710244": "冈山区",
		    "710245": "路竹区",
		    "710246": "阿莲区",
		    "710247": "田寮区",
		    "710248": "燕巢区",
		    "710249": "桥头区",
		    "710250": "梓官区",
		    "710251": "弥陀区",
		    "710252": "永安区",
		    "710253": "湖内区",
		    "710254": "凤山区",
		    "710255": "大寮区",
		    "710256": "林园区",
		    "710257": "鸟松区",
		    "710258": "大树区",
		    "710259": "旗山区",
		    "710260": "美浓区",
		    "710261": "六龟区",
		    "710262": "内门区",
		    "710263": "杉林区",
		    "710264": "甲仙区",
		    "710265": "桃源区",
		    "710266": "那玛夏区",
		    "710267": "茂林区",
		    "710268": "茄萣区",
		    "710300": "台南市",
		    "710301": "中西区",
		    "710302": "东区",
		    "710303": "南区",
		    "710304": "北区",
		    "710305": "安平区",
		    "710306": "安南区",
		    "710307": "其它区",
		    "710339": "永康区",
		    "710340": "归仁区",
		    "710341": "新化区",
		    "710342": "左镇区",
		    "710343": "玉井区",
		    "710344": "楠西区",
		    "710345": "南化区",
		    "710346": "仁德区",
		    "710347": "关庙区",
		    "710348": "龙崎区",
		    "710349": "官田区",
		    "710350": "麻豆区",
		    "710351": "佳里区",
		    "710352": "西港区",
		    "710353": "七股区",
		    "710354": "将军区",
		    "710355": "学甲区",
		    "710356": "北门区",
		    "710357": "新营区",
		    "710358": "后壁区",
		    "710359": "白河区",
		    "710360": "东山区",
		    "710361": "六甲区",
		    "710362": "下营区",
		    "710363": "柳营区",
		    "710364": "盐水区",
		    "710365": "善化区",
		    "710366": "大内区",
		    "710367": "山上区",
		    "710368": "新市区",
		    "710369": "安定区",
		    "710400": "台中市",
		    "710401": "中区",
		    "710402": "东区",
		    "710403": "南区",
		    "710404": "西区",
		    "710405": "北区",
		    "710406": "北屯区",
		    "710407": "西屯区",
		    "710408": "南屯区",
		    "710409": "其它区",
		    "710431": "太平区",
		    "710432": "大里区",
		    "710433": "雾峰区",
		    "710434": "乌日区",
		    "710435": "丰原区",
		    "710436": "后里区",
		    "710437": "石冈区",
		    "710438": "东势区",
		    "710439": "和平区",
		    "710440": "新社区",
		    "710441": "潭子区",
		    "710442": "大雅区",
		    "710443": "神冈区",
		    "710444": "大肚区",
		    "710445": "沙鹿区",
		    "710446": "龙井区",
		    "710447": "梧栖区",
		    "710448": "清水区",
		    "710449": "大甲区",
		    "710450": "外埔区",
		    "710451": "大安区",
		    "710500": "金门县",
		    "710507": "金沙镇",
		    "710508": "金湖镇",
		    "710509": "金宁乡",
		    "710510": "金城镇",
		    "710511": "烈屿乡",
		    "710512": "乌坵乡",
		    "710600": "南投县",
		    "710614": "南投市",
		    "710615": "中寮乡",
		    "710616": "草屯镇",
		    "710617": "国姓乡",
		    "710618": "埔里镇",
		    "710619": "仁爱乡",
		    "710620": "名间乡",
		    "710621": "集集镇",
		    "710622": "水里乡",
		    "710623": "鱼池乡",
		    "710624": "信义乡",
		    "710625": "竹山镇",
		    "710626": "鹿谷乡",
		    "710700": "基隆市",
		    "710701": "仁爱区",
		    "710702": "信义区",
		    "710703": "中正区",
		    "710704": "中山区",
		    "710705": "安乐区",
		    "710706": "暖暖区",
		    "710707": "七堵区",
		    "710708": "其它区",
		    "710800": "新竹市",
		    "710801": "东区",
		    "710802": "北区",
		    "710803": "香山区",
		    "710804": "其它区",
		    "710900": "嘉义市",
		    "710901": "东区",
		    "710902": "西区",
		    "710903": "其它区",
		    "711100": "新北市",
		    "711130": "万里区",
		    "711131": "金山区",
		    "711132": "板桥区",
		    "711133": "汐止区",
		    "711134": "深坑区",
		    "711135": "石碇区",
		    "711136": "瑞芳区",
		    "711137": "平溪区",
		    "711138": "双溪区",
		    "711139": "贡寮区",
		    "711140": "新店区",
		    "711141": "坪林区",
		    "711142": "乌来区",
		    "711143": "永和区",
		    "711144": "中和区",
		    "711145": "土城区",
		    "711146": "三峡区",
		    "711147": "树林区",
		    "711148": "莺歌区",
		    "711149": "三重区",
		    "711150": "新庄区",
		    "711151": "泰山区",
		    "711152": "林口区",
		    "711153": "芦洲区",
		    "711154": "五股区",
		    "711155": "八里区",
		    "711156": "淡水区",
		    "711157": "三芝区",
		    "711158": "石门区",
		    "711200": "宜兰县",
		    "711214": "宜兰市",
		    "711215": "头城镇",
		    "711216": "礁溪乡",
		    "711217": "壮围乡",
		    "711218": "员山乡",
		    "711219": "罗东镇",
		    "711220": "三星乡",
		    "711221": "大同乡",
		    "711222": "五结乡",
		    "711223": "冬山乡",
		    "711224": "苏澳镇",
		    "711225": "南澳乡",
		    "711226": "钓鱼台",
		    "711300": "新竹县",
		    "711314": "竹北市",
		    "711315": "湖口乡",
		    "711316": "新丰乡",
		    "711317": "新埔镇",
		    "711318": "关西镇",
		    "711319": "芎林乡",
		    "711320": "宝山乡",
		    "711321": "竹东镇",
		    "711322": "五峰乡",
		    "711323": "横山乡",
		    "711324": "尖石乡",
		    "711325": "北埔乡",
		    "711326": "峨眉乡",
		    "711400": "桃园县",
		    "711414": "中坜市",
		    "711415": "平镇市",
		    "711416": "龙潭乡",
		    "711417": "杨梅市",
		    "711418": "新屋乡",
		    "711419": "观音乡",
		    "711420": "桃园市",
		    "711421": "龟山乡",
		    "711422": "八德市",
		    "711423": "大溪镇",
		    "711424": "复兴乡",
		    "711425": "大园乡",
		    "711426": "芦竹乡",
		    "711500": "苗栗县",
		    "711519": "竹南镇",
		    "711520": "头份镇",
		    "711521": "三湾乡",
		    "711522": "南庄乡",
		    "711523": "狮潭乡",
		    "711524": "后龙镇",
		    "711525": "通霄镇",
		    "711526": "苑里镇",
		    "711527": "苗栗市",
		    "711528": "造桥乡",
		    "711529": "头屋乡",
		    "711530": "公馆乡",
		    "711531": "大湖乡",
		    "711532": "泰安乡",
		    "711533": "铜锣乡",
		    "711534": "三义乡",
		    "711535": "西湖乡",
		    "711536": "卓兰镇",
		    "711700": "彰化县",
		    "711727": "彰化市",
		    "711728": "芬园乡",
		    "711729": "花坛乡",
		    "711730": "秀水乡",
		    "711731": "鹿港镇",
		    "711732": "福兴乡",
		    "711733": "线西乡",
		    "711734": "和美镇",
		    "711735": "伸港乡",
		    "711736": "员林镇",
		    "711737": "社头乡",
		    "711738": "永靖乡",
		    "711739": "埔心乡",
		    "711740": "溪湖镇",
		    "711741": "大村乡",
		    "711742": "埔盐乡",
		    "711743": "田中镇",
		    "711744": "北斗镇",
		    "711745": "田尾乡",
		    "711746": "埤头乡",
		    "711747": "溪州乡",
		    "711748": "竹塘乡",
		    "711749": "二林镇",
		    "711750": "大城乡",
		    "711751": "芳苑乡",
		    "711752": "二水乡",
		    "711900": "嘉义县",
		    "711919": "番路乡",
		    "711920": "梅山乡",
		    "711921": "竹崎乡",
		    "711922": "阿里山乡",
		    "711923": "中埔乡",
		    "711924": "大埔乡",
		    "711925": "水上乡",
		    "711926": "鹿草乡",
		    "711927": "太保市",
		    "711928": "朴子市",
		    "711929": "东石乡",
		    "711930": "六脚乡",
		    "711931": "新港乡",
		    "711932": "民雄乡",
		    "711933": "大林镇",
		    "711934": "溪口乡",
		    "711935": "义竹乡",
		    "711936": "布袋镇",
		    "712100": "云林县",
		    "712121": "斗南镇",
		    "712122": "大埤乡",
		    "712123": "虎尾镇",
		    "712124": "土库镇",
		    "712125": "褒忠乡",
		    "712126": "东势乡",
		    "712127": "台西乡",
		    "712128": "仑背乡",
		    "712129": "麦寮乡",
		    "712130": "斗六市",
		    "712131": "林内乡",
		    "712132": "古坑乡",
		    "712133": "莿桐乡",
		    "712134": "西螺镇",
		    "712135": "二仑乡",
		    "712136": "北港镇",
		    "712137": "水林乡",
		    "712138": "口湖乡",
		    "712139": "四湖乡",
		    "712140": "元长乡",
		    "712400": "屏东县",
		    "712434": "屏东市",
		    "712435": "三地门乡",
		    "712436": "雾台乡",
		    "712437": "玛家乡",
		    "712438": "九如乡",
		    "712439": "里港乡",
		    "712440": "高树乡",
		    "712441": "盐埔乡",
		    "712442": "长治乡",
		    "712443": "麟洛乡",
		    "712444": "竹田乡",
		    "712445": "内埔乡",
		    "712446": "万丹乡",
		    "712447": "潮州镇",
		    "712448": "泰武乡",
		    "712449": "来义乡",
		    "712450": "万峦乡",
		    "712451": "崁顶乡",
		    "712452": "新埤乡",
		    "712453": "南州乡",
		    "712454": "林边乡",
		    "712455": "东港镇",
		    "712456": "琉球乡",
		    "712457": "佳冬乡",
		    "712458": "新园乡",
		    "712459": "枋寮乡",
		    "712460": "枋山乡",
		    "712461": "春日乡",
		    "712462": "狮子乡",
		    "712463": "车城乡",
		    "712464": "牡丹乡",
		    "712465": "恒春镇",
		    "712466": "满州乡",
		    "712500": "台东县",
		    "712517": "台东市",
		    "712518": "绿岛乡",
		    "712519": "兰屿乡",
		    "712520": "延平乡",
		    "712521": "卑南乡",
		    "712522": "鹿野乡",
		    "712523": "关山镇",
		    "712524": "海端乡",
		    "712525": "池上乡",
		    "712526": "东河乡",
		    "712527": "成功镇",
		    "712528": "长滨乡",
		    "712529": "金峰乡",
		    "712530": "大武乡",
		    "712531": "达仁乡",
		    "712532": "太麻里乡",
		    "712600": "花莲县",
		    "712615": "花莲市",
		    "712616": "新城乡",
		    "712617": "太鲁阁",
		    "712618": "秀林乡",
		    "712619": "吉安乡",
		    "712620": "寿丰乡",
		    "712621": "凤林镇",
		    "712622": "光复乡",
		    "712623": "丰滨乡",
		    "712624": "瑞穗乡",
		    "712625": "万荣乡",
		    "712626": "玉里镇",
		    "712627": "卓溪乡",
		    "712628": "富里乡",
		    "712700": "澎湖县",
		    "712707": "马公市",
		    "712708": "西屿乡",
		    "712709": "望安乡",
		    "712710": "七美乡",
		    "712711": "白沙乡",
		    "712712": "湖西乡",
		    "712800": "连江县",
		    "712805": "南竿乡",
		    "712806": "北竿乡",
		    "712807": "莒光乡",
		    "712808": "东引乡",
		    "810000": "香港特别行政区",
		    "810100": "香港岛",
		    "810101": "中西区",
		    "810102": "湾仔",
		    "810103": "东区",
		    "810104": "南区",
		    "810200": "九龙",
		    "810201": "九龙城区",
		    "810202": "油尖旺区",
		    "810203": "深水埗区",
		    "810204": "黄大仙区",
		    "810205": "观塘区",
		    "810300": "新界",
		    "810301": "北区",
		    "810302": "大埔区",
		    "810303": "沙田区",
		    "810304": "西贡区",
		    "810305": "元朗区",
		    "810306": "屯门区",
		    "810307": "荃湾区",
		    "810308": "葵青区",
		    "810309": "离岛区",
		    "820000": "澳门特别行政区",
		    "820100": "澳门半岛",
		    "820200": "离岛",
		    "990000": "海外",
		    "990100": "海外"
		}

		// id pid/parentId name children
		function tree(list) {
		    var mapped = {}
		    for (var i = 0, item; i < list.length; i++) {
		        item = list[i]
		        if (!item || !item.id) continue
		        mapped[item.id] = item
		    }

		    var result = []
		    for (var ii = 0; ii < list.length; ii++) {
		        item = list[ii]

		        if (!item) continue
		            /* jshint -W041 */
		        if (item.pid == undefined && item.parentId == undefined) {
		            result.push(item)
		            continue
		        }
		        var parent = mapped[item.pid] || mapped[item.parentId]
		        if (!parent) continue
		        if (!parent.children) parent.children = []
		        parent.children.push(item)
		    }
		    return result
		}

		var DICT_FIXED = function() {
		    var fixed = []
		    for (var id in DICT) {
		        var pid = id.slice(2, 6) === '0000' ? undefined :
		            id.slice(4, 6) == '00' ? (id.slice(0, 2) + '0000') :
		            id.slice(0, 4) + '00'
		        fixed.push({
		            id: id,
		            pid: pid,
		            name: DICT[id]
		        })
		    }
		    return tree(fixed)
		}()

		module.exports = DICT_FIXED

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## Miscellaneous
		*/
		var DICT = __webpack_require__(18)
		module.exports = {
			// Dice
			d4: function() {
				return this.natural(1, 4)
			},
			d6: function() {
				return this.natural(1, 6)
			},
			d8: function() {
				return this.natural(1, 8)
			},
			d12: function() {
				return this.natural(1, 12)
			},
			d20: function() {
				return this.natural(1, 20)
			},
			d100: function() {
				return this.natural(1, 100)
			},
			/*
			    随机生成一个 GUID。

			    http://www.broofa.com/2008/09/javascript-uuid-function/
			    [UUID 规范](http://www.ietf.org/rfc/rfc4122.txt)
			        UUIDs (Universally Unique IDentifier)
			        GUIDs (Globally Unique IDentifier)
			        The formal definition of the UUID string representation is provided by the following ABNF [7]:
			            UUID                   = time-low "-" time-mid "-"
			                                   time-high-and-version "-"
			                                   clock-seq-and-reserved
			                                   clock-seq-low "-" node
			            time-low               = 4hexOctet
			            time-mid               = 2hexOctet
			            time-high-and-version  = 2hexOctet
			            clock-seq-and-reserved = hexOctet
			            clock-seq-low          = hexOctet
			            node                   = 6hexOctet
			            hexOctet               = hexDigit hexDigit
			            hexDigit =
			                "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" /
			                "a" / "b" / "c" / "d" / "e" / "f" /
			                "A" / "B" / "C" / "D" / "E" / "F"
			    
			    https://github.com/victorquinn/chancejs/blob/develop/chance.js#L1349
			*/
			guid: function() {
				var pool = "abcdefABCDEF1234567890",
					guid = this.string(pool, 8) + '-' +
					this.string(pool, 4) + '-' +
					this.string(pool, 4) + '-' +
					this.string(pool, 4) + '-' +
					this.string(pool, 12);
				return guid
			},
			uuid: function() {
				return this.guid()
			},
			/*
			    随机生成一个 18 位身份证。

			    [身份证](http://baike.baidu.com/view/1697.htm#4)
			        地址码 6 + 出生日期码 8 + 顺序码 3 + 校验码 1
			    [《中华人民共和国行政区划代码》国家标准(GB/T2260)](http://zhidao.baidu.com/question/1954561.html)
			*/
			id: function() {
				var id,
					sum = 0,
					rank = [
						"7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7", "9", "10", "5", "8", "4", "2"
					],
					last = [
						"1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"
					]

				id = this.pick(DICT).id +
					this.date('yyyyMMdd') +
					this.string('number', 3)

				for (var i = 0; i < id.length; i++) {
					sum += id[i] * rank[i];
				}
				id += last[sum % 11];

				return id
			},

			/*
			    生成一个全局的自增整数。
			    类似自增主键（auto increment primary key）。
			*/
			increment: function() {
				var key = 0
				return function(step) {
					return key += (+step || 1) // step?
				}
			}(),
			inc: function(step) {
				return this.increment(step)
			}
		}

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		var Parser = __webpack_require__(21)
		var Handler = __webpack_require__(22)
		module.exports = {
			Parser: Parser,
			Handler: Handler
		}

	/***/ },
	/* 21 */
	/***/ function(module, exports) {

		// https://github.com/nuysoft/regexp
		// forked from https://github.com/ForbesLindesay/regexp

		function parse(n) {
		    if ("string" != typeof n) {
		        var l = new TypeError("The regexp to parse must be represented as a string.");
		        throw l;
		    }
		    return index = 1, cgs = {}, parser.parse(n);
		}

		function Token(n) {
		    this.type = n, this.offset = Token.offset(), this.text = Token.text();
		}

		function Alternate(n, l) {
		    Token.call(this, "alternate"), this.left = n, this.right = l;
		}

		function Match(n) {
		    Token.call(this, "match"), this.body = n.filter(Boolean);
		}

		function Group(n, l) {
		    Token.call(this, n), this.body = l;
		}

		function CaptureGroup(n) {
		    Group.call(this, "capture-group"), this.index = cgs[this.offset] || (cgs[this.offset] = index++), 
		    this.body = n;
		}

		function Quantified(n, l) {
		    Token.call(this, "quantified"), this.body = n, this.quantifier = l;
		}

		function Quantifier(n, l) {
		    Token.call(this, "quantifier"), this.min = n, this.max = l, this.greedy = !0;
		}

		function CharSet(n, l) {
		    Token.call(this, "charset"), this.invert = n, this.body = l;
		}

		function CharacterRange(n, l) {
		    Token.call(this, "range"), this.start = n, this.end = l;
		}

		function Literal(n) {
		    Token.call(this, "literal"), this.body = n, this.escaped = this.body != this.text;
		}

		function Unicode(n) {
		    Token.call(this, "unicode"), this.code = n.toUpperCase();
		}

		function Hex(n) {
		    Token.call(this, "hex"), this.code = n.toUpperCase();
		}

		function Octal(n) {
		    Token.call(this, "octal"), this.code = n.toUpperCase();
		}

		function BackReference(n) {
		    Token.call(this, "back-reference"), this.code = n.toUpperCase();
		}

		function ControlCharacter(n) {
		    Token.call(this, "control-character"), this.code = n.toUpperCase();
		}

		var parser = function() {
		    function n(n, l) {
		        function u() {
		            this.constructor = n;
		        }
		        u.prototype = l.prototype, n.prototype = new u();
		    }
		    function l(n, l, u, t, r) {
		        function e(n, l) {
		            function u(n) {
		                function l(n) {
		                    return n.charCodeAt(0).toString(16).toUpperCase();
		                }
		                return n.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(n) {
		                    return "\\x0" + l(n);
		                }).replace(/[\x10-\x1F\x80-\xFF]/g, function(n) {
		                    return "\\x" + l(n);
		                }).replace(/[\u0180-\u0FFF]/g, function(n) {
		                    return "\\u0" + l(n);
		                }).replace(/[\u1080-\uFFFF]/g, function(n) {
		                    return "\\u" + l(n);
		                });
		            }
		            var t, r;
		            switch (n.length) {
		              case 0:
		                t = "end of input";
		                break;

		              case 1:
		                t = n[0];
		                break;

		              default:
		                t = n.slice(0, -1).join(", ") + " or " + n[n.length - 1];
		            }
		            return r = l ? '"' + u(l) + '"' : "end of input", "Expected " + t + " but " + r + " found.";
		        }
		        this.expected = n, this.found = l, this.offset = u, this.line = t, this.column = r, 
		        this.name = "SyntaxError", this.message = e(n, l);
		    }
		    function u(n) {
		        function u() {
		            return n.substring(Lt, qt);
		        }
		        function t() {
		            return Lt;
		        }
		        function r(l) {
		            function u(l, u, t) {
		                var r, e;
		                for (r = u; t > r; r++) e = n.charAt(r), "\n" === e ? (l.seenCR || l.line++, l.column = 1, 
		                l.seenCR = !1) : "\r" === e || "\u2028" === e || "\u2029" === e ? (l.line++, l.column = 1, 
		                l.seenCR = !0) : (l.column++, l.seenCR = !1);
		            }
		            return Mt !== l && (Mt > l && (Mt = 0, Dt = {
		                line: 1,
		                column: 1,
		                seenCR: !1
		            }), u(Dt, Mt, l), Mt = l), Dt;
		        }
		        function e(n) {
		            Ht > qt || (qt > Ht && (Ht = qt, Ot = []), Ot.push(n));
		        }
		        function o(n) {
		            var l = 0;
		            for (n.sort(); l < n.length; ) n[l - 1] === n[l] ? n.splice(l, 1) : l++;
		        }
		        function c() {
		            var l, u, t, r, o;
		            return l = qt, u = i(), null !== u ? (t = qt, 124 === n.charCodeAt(qt) ? (r = fl, 
		            qt++) : (r = null, 0 === Wt && e(sl)), null !== r ? (o = c(), null !== o ? (r = [ r, o ], 
		            t = r) : (qt = t, t = il)) : (qt = t, t = il), null === t && (t = al), null !== t ? (Lt = l, 
		            u = hl(u, t), null === u ? (qt = l, l = u) : l = u) : (qt = l, l = il)) : (qt = l, 
		            l = il), l;
		        }
		        function i() {
		            var n, l, u, t, r;
		            if (n = qt, l = f(), null === l && (l = al), null !== l) if (u = qt, Wt++, t = d(), 
		            Wt--, null === t ? u = al : (qt = u, u = il), null !== u) {
		                for (t = [], r = h(), null === r && (r = a()); null !== r; ) t.push(r), r = h(), 
		                null === r && (r = a());
		                null !== t ? (r = s(), null === r && (r = al), null !== r ? (Lt = n, l = dl(l, t, r), 
		                null === l ? (qt = n, n = l) : n = l) : (qt = n, n = il)) : (qt = n, n = il);
		            } else qt = n, n = il; else qt = n, n = il;
		            return n;
		        }
		        function a() {
		            var n;
		            return n = x(), null === n && (n = Q(), null === n && (n = B())), n;
		        }
		        function f() {
		            var l, u;
		            return l = qt, 94 === n.charCodeAt(qt) ? (u = pl, qt++) : (u = null, 0 === Wt && e(vl)), 
		            null !== u && (Lt = l, u = wl()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function s() {
		            var l, u;
		            return l = qt, 36 === n.charCodeAt(qt) ? (u = Al, qt++) : (u = null, 0 === Wt && e(Cl)), 
		            null !== u && (Lt = l, u = gl()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function h() {
		            var n, l, u;
		            return n = qt, l = a(), null !== l ? (u = d(), null !== u ? (Lt = n, l = bl(l, u), 
		            null === l ? (qt = n, n = l) : n = l) : (qt = n, n = il)) : (qt = n, n = il), n;
		        }
		        function d() {
		            var n, l, u;
		            return Wt++, n = qt, l = p(), null !== l ? (u = k(), null === u && (u = al), null !== u ? (Lt = n, 
		            l = Tl(l, u), null === l ? (qt = n, n = l) : n = l) : (qt = n, n = il)) : (qt = n, 
		            n = il), Wt--, null === n && (l = null, 0 === Wt && e(kl)), n;
		        }
		        function p() {
		            var n;
		            return n = v(), null === n && (n = w(), null === n && (n = A(), null === n && (n = C(), 
		            null === n && (n = g(), null === n && (n = b()))))), n;
		        }
		        function v() {
		            var l, u, t, r, o, c;
		            return l = qt, 123 === n.charCodeAt(qt) ? (u = xl, qt++) : (u = null, 0 === Wt && e(yl)), 
		            null !== u ? (t = T(), null !== t ? (44 === n.charCodeAt(qt) ? (r = ml, qt++) : (r = null, 
		            0 === Wt && e(Rl)), null !== r ? (o = T(), null !== o ? (125 === n.charCodeAt(qt) ? (c = Fl, 
		            qt++) : (c = null, 0 === Wt && e(Ql)), null !== c ? (Lt = l, u = Sl(t, o), null === u ? (qt = l, 
		            l = u) : l = u) : (qt = l, l = il)) : (qt = l, l = il)) : (qt = l, l = il)) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        function w() {
		            var l, u, t, r;
		            return l = qt, 123 === n.charCodeAt(qt) ? (u = xl, qt++) : (u = null, 0 === Wt && e(yl)), 
		            null !== u ? (t = T(), null !== t ? (n.substr(qt, 2) === Ul ? (r = Ul, qt += 2) : (r = null, 
		            0 === Wt && e(El)), null !== r ? (Lt = l, u = Gl(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il)) : (qt = l, l = il), l;
		        }
		        function A() {
		            var l, u, t, r;
		            return l = qt, 123 === n.charCodeAt(qt) ? (u = xl, qt++) : (u = null, 0 === Wt && e(yl)), 
		            null !== u ? (t = T(), null !== t ? (125 === n.charCodeAt(qt) ? (r = Fl, qt++) : (r = null, 
		            0 === Wt && e(Ql)), null !== r ? (Lt = l, u = Bl(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il)) : (qt = l, l = il), l;
		        }
		        function C() {
		            var l, u;
		            return l = qt, 43 === n.charCodeAt(qt) ? (u = jl, qt++) : (u = null, 0 === Wt && e($l)), 
		            null !== u && (Lt = l, u = ql()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function g() {
		            var l, u;
		            return l = qt, 42 === n.charCodeAt(qt) ? (u = Ll, qt++) : (u = null, 0 === Wt && e(Ml)), 
		            null !== u && (Lt = l, u = Dl()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function b() {
		            var l, u;
		            return l = qt, 63 === n.charCodeAt(qt) ? (u = Hl, qt++) : (u = null, 0 === Wt && e(Ol)), 
		            null !== u && (Lt = l, u = Wl()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function k() {
		            var l;
		            return 63 === n.charCodeAt(qt) ? (l = Hl, qt++) : (l = null, 0 === Wt && e(Ol)), 
		            l;
		        }
		        function T() {
		            var l, u, t;
		            if (l = qt, u = [], zl.test(n.charAt(qt)) ? (t = n.charAt(qt), qt++) : (t = null, 
		            0 === Wt && e(Il)), null !== t) for (;null !== t; ) u.push(t), zl.test(n.charAt(qt)) ? (t = n.charAt(qt), 
		            qt++) : (t = null, 0 === Wt && e(Il)); else u = il;
		            return null !== u && (Lt = l, u = Jl(u)), null === u ? (qt = l, l = u) : l = u, 
		            l;
		        }
		        function x() {
		            var l, u, t, r;
		            return l = qt, 40 === n.charCodeAt(qt) ? (u = Kl, qt++) : (u = null, 0 === Wt && e(Nl)), 
		            null !== u ? (t = R(), null === t && (t = F(), null === t && (t = m(), null === t && (t = y()))), 
		            null !== t ? (41 === n.charCodeAt(qt) ? (r = Pl, qt++) : (r = null, 0 === Wt && e(Vl)), 
		            null !== r ? (Lt = l, u = Xl(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il)) : (qt = l, l = il), l;
		        }
		        function y() {
		            var n, l;
		            return n = qt, l = c(), null !== l && (Lt = n, l = Yl(l)), null === l ? (qt = n, 
		            n = l) : n = l, n;
		        }
		        function m() {
		            var l, u, t;
		            return l = qt, n.substr(qt, 2) === Zl ? (u = Zl, qt += 2) : (u = null, 0 === Wt && e(_l)), 
		            null !== u ? (t = c(), null !== t ? (Lt = l, u = nu(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        function R() {
		            var l, u, t;
		            return l = qt, n.substr(qt, 2) === lu ? (u = lu, qt += 2) : (u = null, 0 === Wt && e(uu)), 
		            null !== u ? (t = c(), null !== t ? (Lt = l, u = tu(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        function F() {
		            var l, u, t;
		            return l = qt, n.substr(qt, 2) === ru ? (u = ru, qt += 2) : (u = null, 0 === Wt && e(eu)), 
		            null !== u ? (t = c(), null !== t ? (Lt = l, u = ou(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        function Q() {
		            var l, u, t, r, o;
		            if (Wt++, l = qt, 91 === n.charCodeAt(qt) ? (u = iu, qt++) : (u = null, 0 === Wt && e(au)), 
		            null !== u) if (94 === n.charCodeAt(qt) ? (t = pl, qt++) : (t = null, 0 === Wt && e(vl)), 
		            null === t && (t = al), null !== t) {
		                for (r = [], o = S(), null === o && (o = U()); null !== o; ) r.push(o), o = S(), 
		                null === o && (o = U());
		                null !== r ? (93 === n.charCodeAt(qt) ? (o = fu, qt++) : (o = null, 0 === Wt && e(su)), 
		                null !== o ? (Lt = l, u = hu(t, r), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		                l = il)) : (qt = l, l = il);
		            } else qt = l, l = il; else qt = l, l = il;
		            return Wt--, null === l && (u = null, 0 === Wt && e(cu)), l;
		        }
		        function S() {
		            var l, u, t, r;
		            return Wt++, l = qt, u = U(), null !== u ? (45 === n.charCodeAt(qt) ? (t = pu, qt++) : (t = null, 
		            0 === Wt && e(vu)), null !== t ? (r = U(), null !== r ? (Lt = l, u = wu(u, r), null === u ? (qt = l, 
		            l = u) : l = u) : (qt = l, l = il)) : (qt = l, l = il)) : (qt = l, l = il), Wt--, 
		            null === l && (u = null, 0 === Wt && e(du)), l;
		        }
		        function U() {
		            var n, l;
		            return Wt++, n = G(), null === n && (n = E()), Wt--, null === n && (l = null, 0 === Wt && e(Au)), 
		            n;
		        }
		        function E() {
		            var l, u;
		            return l = qt, Cu.test(n.charAt(qt)) ? (u = n.charAt(qt), qt++) : (u = null, 0 === Wt && e(gu)), 
		            null !== u && (Lt = l, u = bu(u)), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function G() {
		            var n;
		            return n = L(), null === n && (n = Y(), null === n && (n = H(), null === n && (n = O(), 
		            null === n && (n = W(), null === n && (n = z(), null === n && (n = I(), null === n && (n = J(), 
		            null === n && (n = K(), null === n && (n = N(), null === n && (n = P(), null === n && (n = V(), 
		            null === n && (n = X(), null === n && (n = _(), null === n && (n = nl(), null === n && (n = ll(), 
		            null === n && (n = ul(), null === n && (n = tl()))))))))))))))))), n;
		        }
		        function B() {
		            var n;
		            return n = j(), null === n && (n = q(), null === n && (n = $())), n;
		        }
		        function j() {
		            var l, u;
		            return l = qt, 46 === n.charCodeAt(qt) ? (u = ku, qt++) : (u = null, 0 === Wt && e(Tu)), 
		            null !== u && (Lt = l, u = xu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function $() {
		            var l, u;
		            return Wt++, l = qt, mu.test(n.charAt(qt)) ? (u = n.charAt(qt), qt++) : (u = null, 
		            0 === Wt && e(Ru)), null !== u && (Lt = l, u = bu(u)), null === u ? (qt = l, l = u) : l = u, 
		            Wt--, null === l && (u = null, 0 === Wt && e(yu)), l;
		        }
		        function q() {
		            var n;
		            return n = M(), null === n && (n = D(), null === n && (n = Y(), null === n && (n = H(), 
		            null === n && (n = O(), null === n && (n = W(), null === n && (n = z(), null === n && (n = I(), 
		            null === n && (n = J(), null === n && (n = K(), null === n && (n = N(), null === n && (n = P(), 
		            null === n && (n = V(), null === n && (n = X(), null === n && (n = Z(), null === n && (n = _(), 
		            null === n && (n = nl(), null === n && (n = ll(), null === n && (n = ul(), null === n && (n = tl()))))))))))))))))))), 
		            n;
		        }
		        function L() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Fu ? (u = Fu, qt += 2) : (u = null, 0 === Wt && e(Qu)), 
		            null !== u && (Lt = l, u = Su()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function M() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Fu ? (u = Fu, qt += 2) : (u = null, 0 === Wt && e(Qu)), 
		            null !== u && (Lt = l, u = Uu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function D() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Eu ? (u = Eu, qt += 2) : (u = null, 0 === Wt && e(Gu)), 
		            null !== u && (Lt = l, u = Bu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function H() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === ju ? (u = ju, qt += 2) : (u = null, 0 === Wt && e($u)), 
		            null !== u && (Lt = l, u = qu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function O() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Lu ? (u = Lu, qt += 2) : (u = null, 0 === Wt && e(Mu)), 
		            null !== u && (Lt = l, u = Du()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function W() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Hu ? (u = Hu, qt += 2) : (u = null, 0 === Wt && e(Ou)), 
		            null !== u && (Lt = l, u = Wu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function z() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === zu ? (u = zu, qt += 2) : (u = null, 0 === Wt && e(Iu)), 
		            null !== u && (Lt = l, u = Ju()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function I() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Ku ? (u = Ku, qt += 2) : (u = null, 0 === Wt && e(Nu)), 
		            null !== u && (Lt = l, u = Pu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function J() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Vu ? (u = Vu, qt += 2) : (u = null, 0 === Wt && e(Xu)), 
		            null !== u && (Lt = l, u = Yu()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function K() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Zu ? (u = Zu, qt += 2) : (u = null, 0 === Wt && e(_u)), 
		            null !== u && (Lt = l, u = nt()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function N() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === lt ? (u = lt, qt += 2) : (u = null, 0 === Wt && e(ut)), 
		            null !== u && (Lt = l, u = tt()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function P() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === rt ? (u = rt, qt += 2) : (u = null, 0 === Wt && e(et)), 
		            null !== u && (Lt = l, u = ot()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function V() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === ct ? (u = ct, qt += 2) : (u = null, 0 === Wt && e(it)), 
		            null !== u && (Lt = l, u = at()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function X() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === ft ? (u = ft, qt += 2) : (u = null, 0 === Wt && e(st)), 
		            null !== u && (Lt = l, u = ht()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function Y() {
		            var l, u, t;
		            return l = qt, n.substr(qt, 2) === dt ? (u = dt, qt += 2) : (u = null, 0 === Wt && e(pt)), 
		            null !== u ? (n.length > qt ? (t = n.charAt(qt), qt++) : (t = null, 0 === Wt && e(vt)), 
		            null !== t ? (Lt = l, u = wt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        function Z() {
		            var l, u, t;
		            return l = qt, 92 === n.charCodeAt(qt) ? (u = At, qt++) : (u = null, 0 === Wt && e(Ct)), 
		            null !== u ? (gt.test(n.charAt(qt)) ? (t = n.charAt(qt), qt++) : (t = null, 0 === Wt && e(bt)), 
		            null !== t ? (Lt = l, u = kt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        function _() {
		            var l, u, t, r;
		            if (l = qt, n.substr(qt, 2) === Tt ? (u = Tt, qt += 2) : (u = null, 0 === Wt && e(xt)), 
		            null !== u) {
		                if (t = [], yt.test(n.charAt(qt)) ? (r = n.charAt(qt), qt++) : (r = null, 0 === Wt && e(mt)), 
		                null !== r) for (;null !== r; ) t.push(r), yt.test(n.charAt(qt)) ? (r = n.charAt(qt), 
		                qt++) : (r = null, 0 === Wt && e(mt)); else t = il;
		                null !== t ? (Lt = l, u = Rt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		                l = il);
		            } else qt = l, l = il;
		            return l;
		        }
		        function nl() {
		            var l, u, t, r;
		            if (l = qt, n.substr(qt, 2) === Ft ? (u = Ft, qt += 2) : (u = null, 0 === Wt && e(Qt)), 
		            null !== u) {
		                if (t = [], St.test(n.charAt(qt)) ? (r = n.charAt(qt), qt++) : (r = null, 0 === Wt && e(Ut)), 
		                null !== r) for (;null !== r; ) t.push(r), St.test(n.charAt(qt)) ? (r = n.charAt(qt), 
		                qt++) : (r = null, 0 === Wt && e(Ut)); else t = il;
		                null !== t ? (Lt = l, u = Et(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		                l = il);
		            } else qt = l, l = il;
		            return l;
		        }
		        function ll() {
		            var l, u, t, r;
		            if (l = qt, n.substr(qt, 2) === Gt ? (u = Gt, qt += 2) : (u = null, 0 === Wt && e(Bt)), 
		            null !== u) {
		                if (t = [], St.test(n.charAt(qt)) ? (r = n.charAt(qt), qt++) : (r = null, 0 === Wt && e(Ut)), 
		                null !== r) for (;null !== r; ) t.push(r), St.test(n.charAt(qt)) ? (r = n.charAt(qt), 
		                qt++) : (r = null, 0 === Wt && e(Ut)); else t = il;
		                null !== t ? (Lt = l, u = jt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		                l = il);
		            } else qt = l, l = il;
		            return l;
		        }
		        function ul() {
		            var l, u;
		            return l = qt, n.substr(qt, 2) === Tt ? (u = Tt, qt += 2) : (u = null, 0 === Wt && e(xt)), 
		            null !== u && (Lt = l, u = $t()), null === u ? (qt = l, l = u) : l = u, l;
		        }
		        function tl() {
		            var l, u, t;
		            return l = qt, 92 === n.charCodeAt(qt) ? (u = At, qt++) : (u = null, 0 === Wt && e(Ct)), 
		            null !== u ? (n.length > qt ? (t = n.charAt(qt), qt++) : (t = null, 0 === Wt && e(vt)), 
		            null !== t ? (Lt = l, u = bu(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
		            l = il)) : (qt = l, l = il), l;
		        }
		        var rl, el = arguments.length > 1 ? arguments[1] : {}, ol = {
		            regexp: c
		        }, cl = c, il = null, al = "", fl = "|", sl = '"|"', hl = function(n, l) {
		            return l ? new Alternate(n, l[1]) : n;
		        }, dl = function(n, l, u) {
		            return new Match([ n ].concat(l).concat([ u ]));
		        }, pl = "^", vl = '"^"', wl = function() {
		            return new Token("start");
		        }, Al = "$", Cl = '"$"', gl = function() {
		            return new Token("end");
		        }, bl = function(n, l) {
		            return new Quantified(n, l);
		        }, kl = "Quantifier", Tl = function(n, l) {
		            return l && (n.greedy = !1), n;
		        }, xl = "{", yl = '"{"', ml = ",", Rl = '","', Fl = "}", Ql = '"}"', Sl = function(n, l) {
		            return new Quantifier(n, l);
		        }, Ul = ",}", El = '",}"', Gl = function(n) {
		            return new Quantifier(n, 1/0);
		        }, Bl = function(n) {
		            return new Quantifier(n, n);
		        }, jl = "+", $l = '"+"', ql = function() {
		            return new Quantifier(1, 1/0);
		        }, Ll = "*", Ml = '"*"', Dl = function() {
		            return new Quantifier(0, 1/0);
		        }, Hl = "?", Ol = '"?"', Wl = function() {
		            return new Quantifier(0, 1);
		        }, zl = /^[0-9]/, Il = "[0-9]", Jl = function(n) {
		            return +n.join("");
		        }, Kl = "(", Nl = '"("', Pl = ")", Vl = '")"', Xl = function(n) {
		            return n;
		        }, Yl = function(n) {
		            return new CaptureGroup(n);
		        }, Zl = "?:", _l = '"?:"', nu = function(n) {
		            return new Group("non-capture-group", n);
		        }, lu = "?=", uu = '"?="', tu = function(n) {
		            return new Group("positive-lookahead", n);
		        }, ru = "?!", eu = '"?!"', ou = function(n) {
		            return new Group("negative-lookahead", n);
		        }, cu = "CharacterSet", iu = "[", au = '"["', fu = "]", su = '"]"', hu = function(n, l) {
		            return new CharSet(!!n, l);
		        }, du = "CharacterRange", pu = "-", vu = '"-"', wu = function(n, l) {
		            return new CharacterRange(n, l);
		        }, Au = "Character", Cu = /^[^\\\]]/, gu = "[^\\\\\\]]", bu = function(n) {
		            return new Literal(n);
		        }, ku = ".", Tu = '"."', xu = function() {
		            return new Token("any-character");
		        }, yu = "Literal", mu = /^[^|\\\/.[()?+*$\^]/, Ru = "[^|\\\\\\/.[()?+*$\\^]", Fu = "\\b", Qu = '"\\\\b"', Su = function() {
		            return new Token("backspace");
		        }, Uu = function() {
		            return new Token("word-boundary");
		        }, Eu = "\\B", Gu = '"\\\\B"', Bu = function() {
		            return new Token("non-word-boundary");
		        }, ju = "\\d", $u = '"\\\\d"', qu = function() {
		            return new Token("digit");
		        }, Lu = "\\D", Mu = '"\\\\D"', Du = function() {
		            return new Token("non-digit");
		        }, Hu = "\\f", Ou = '"\\\\f"', Wu = function() {
		            return new Token("form-feed");
		        }, zu = "\\n", Iu = '"\\\\n"', Ju = function() {
		            return new Token("line-feed");
		        }, Ku = "\\r", Nu = '"\\\\r"', Pu = function() {
		            return new Token("carriage-return");
		        }, Vu = "\\s", Xu = '"\\\\s"', Yu = function() {
		            return new Token("white-space");
		        }, Zu = "\\S", _u = '"\\\\S"', nt = function() {
		            return new Token("non-white-space");
		        }, lt = "\\t", ut = '"\\\\t"', tt = function() {
		            return new Token("tab");
		        }, rt = "\\v", et = '"\\\\v"', ot = function() {
		            return new Token("vertical-tab");
		        }, ct = "\\w", it = '"\\\\w"', at = function() {
		            return new Token("word");
		        }, ft = "\\W", st = '"\\\\W"', ht = function() {
		            return new Token("non-word");
		        }, dt = "\\c", pt = '"\\\\c"', vt = "any character", wt = function(n) {
		            return new ControlCharacter(n);
		        }, At = "\\", Ct = '"\\\\"', gt = /^[1-9]/, bt = "[1-9]", kt = function(n) {
		            return new BackReference(n);
		        }, Tt = "\\0", xt = '"\\\\0"', yt = /^[0-7]/, mt = "[0-7]", Rt = function(n) {
		            return new Octal(n.join(""));
		        }, Ft = "\\x", Qt = '"\\\\x"', St = /^[0-9a-fA-F]/, Ut = "[0-9a-fA-F]", Et = function(n) {
		            return new Hex(n.join(""));
		        }, Gt = "\\u", Bt = '"\\\\u"', jt = function(n) {
		            return new Unicode(n.join(""));
		        }, $t = function() {
		            return new Token("null-character");
		        }, qt = 0, Lt = 0, Mt = 0, Dt = {
		            line: 1,
		            column: 1,
		            seenCR: !1
		        }, Ht = 0, Ot = [], Wt = 0;
		        if ("startRule" in el) {
		            if (!(el.startRule in ol)) throw new Error("Can't start parsing from rule \"" + el.startRule + '".');
		            cl = ol[el.startRule];
		        }
		        if (Token.offset = t, Token.text = u, rl = cl(), null !== rl && qt === n.length) return rl;
		        throw o(Ot), Lt = Math.max(qt, Ht), new l(Ot, Lt < n.length ? n.charAt(Lt) : null, Lt, r(Lt).line, r(Lt).column);
		    }
		    return n(l, Error), {
		        SyntaxError: l,
		        parse: u
		    };
		}(), index = 1, cgs = {};

		module.exports = parser

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## RegExp Handler

		    https://github.com/ForbesLindesay/regexp
		    https://github.com/dmajda/pegjs
		    http://www.regexper.com/

		    每个节点的结构
		        {
		            type: '',
		            offset: number,
		            text: '',
		            body: {},
		            escaped: true/false
		        }

		    type 可选值
		        alternate             |         选择
		        match                 匹配
		        capture-group         ()        捕获组
		        non-capture-group     (?:...)   非捕获组
		        positive-lookahead    (?=p)     零宽正向先行断言
		        negative-lookahead    (?!p)     零宽负向先行断言
		        quantified            a*        重复节点
		        quantifier            *         量词
		        charset               []        字符集
		        range                 {m, n}    范围
		        literal               a         直接量字符
		        unicode               \uxxxx    Unicode
		        hex                   \x        十六进制
		        octal                 八进制
		        back-reference        \n        反向引用
		        control-character     \cX       控制字符

		        // Token
		        start               ^       开头
		        end                 $       结尾
		        any-character       .       任意字符
		        backspace           [\b]    退格直接量
		        word-boundary       \b      单词边界
		        non-word-boundary   \B      非单词边界
		        digit               \d      ASCII 数字，[0-9]
		        non-digit           \D      非 ASCII 数字，[^0-9]
		        form-feed           \f      换页符
		        line-feed           \n      换行符
		        carriage-return     \r      回车符
		        white-space         \s      空白符
		        non-white-space     \S      非空白符
		        tab                 \t      制表符
		        vertical-tab        \v      垂直制表符
		        word                \w      ASCII 字符，[a-zA-Z0-9]
		        non-word            \W      非 ASCII 字符，[^a-zA-Z0-9]
		        null-character      \o      NUL 字符
		 */

		var Util = __webpack_require__(3)
		var Random = __webpack_require__(5)
		    /*
		        
		    */
		var Handler = {
		    extend: Util.extend
		}

		// http://en.wikipedia.org/wiki/ASCII#ASCII_printable_code_chart
		/*var ASCII_CONTROL_CODE_CHART = {
		    '@': ['\u0000'],
		    A: ['\u0001'],
		    B: ['\u0002'],
		    C: ['\u0003'],
		    D: ['\u0004'],
		    E: ['\u0005'],
		    F: ['\u0006'],
		    G: ['\u0007', '\a'],
		    H: ['\u0008', '\b'],
		    I: ['\u0009', '\t'],
		    J: ['\u000A', '\n'],
		    K: ['\u000B', '\v'],
		    L: ['\u000C', '\f'],
		    M: ['\u000D', '\r'],
		    N: ['\u000E'],
		    O: ['\u000F'],
		    P: ['\u0010'],
		    Q: ['\u0011'],
		    R: ['\u0012'],
		    S: ['\u0013'],
		    T: ['\u0014'],
		    U: ['\u0015'],
		    V: ['\u0016'],
		    W: ['\u0017'],
		    X: ['\u0018'],
		    Y: ['\u0019'],
		    Z: ['\u001A'],
		    '[': ['\u001B', '\e'],
		    '\\': ['\u001C'],
		    ']': ['\u001D'],
		    '^': ['\u001E'],
		    '_': ['\u001F']
		}*/

		// ASCII printable code chart
		// var LOWER = 'abcdefghijklmnopqrstuvwxyz'
		// var UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
		// var NUMBER = '0123456789'
		// var SYMBOL = ' !"#$%&\'()*+,-./' + ':;<=>?@' + '[\\]^_`' + '{|}~'
		var LOWER = ascii(97, 122)
		var UPPER = ascii(65, 90)
		var NUMBER = ascii(48, 57)
		var OTHER = ascii(32, 47) + ascii(58, 64) + ascii(91, 96) + ascii(123, 126) // 排除 95 _ ascii(91, 94) + ascii(96, 96)
		var PRINTABLE = ascii(32, 126)
		var SPACE = ' \f\n\r\t\v\u00A0\u2028\u2029'
		var CHARACTER_CLASSES = {
		    '\\w': LOWER + UPPER + NUMBER + '_', // ascii(95, 95)
		    '\\W': OTHER.replace('_', ''),
		    '\\s': SPACE,
		    '\\S': function() {
		        var result = PRINTABLE
		        for (var i = 0; i < SPACE.length; i++) {
		            result = result.replace(SPACE[i], '')
		        }
		        return result
		    }(),
		    '\\d': NUMBER,
		    '\\D': LOWER + UPPER + OTHER
		}

		function ascii(from, to) {
		    var result = ''
		    for (var i = from; i <= to; i++) {
		        result += String.fromCharCode(i)
		    }
		    return result
		}

		// var ast = RegExpParser.parse(regexp.source)
		Handler.gen = function(node, result, cache) {
		    cache = cache || {
		        guid: 1
		    }
		    return Handler[node.type] ? Handler[node.type](node, result, cache) :
		        Handler.token(node, result, cache)
		}

		Handler.extend({
		    /* jshint unused:false */
		    token: function(node, result, cache) {
		        switch (node.type) {
		            case 'start':
		            case 'end':
		                return ''
		            case 'any-character':
		                return Random.character()
		            case 'backspace':
		                return ''
		            case 'word-boundary': // TODO
		                return ''
		            case 'non-word-boundary': // TODO
		                break
		            case 'digit':
		                return Random.pick(
		                    NUMBER.split('')
		                )
		            case 'non-digit':
		                return Random.pick(
		                    (LOWER + UPPER + OTHER).split('')
		                )
		            case 'form-feed':
		                break
		            case 'line-feed':
		                return node.body || node.text
		            case 'carriage-return':
		                break
		            case 'white-space':
		                return Random.pick(
		                    SPACE.split('')
		                )
		            case 'non-white-space':
		                return Random.pick(
		                    (LOWER + UPPER + NUMBER).split('')
		                )
		            case 'tab':
		                break
		            case 'vertical-tab':
		                break
		            case 'word': // \w [a-zA-Z0-9]
		                return Random.pick(
		                    (LOWER + UPPER + NUMBER).split('')
		                )
		            case 'non-word': // \W [^a-zA-Z0-9]
		                return Random.pick(
		                    OTHER.replace('_', '').split('')
		                )
		            case 'null-character':
		                break
		        }
		        return node.body || node.text
		    },
		    /*
		        {
		            type: 'alternate',
		            offset: 0,
		            text: '',
		            left: {
		                boyd: []
		            },
		            right: {
		                boyd: []
		            }
		        }
		    */
		    alternate: function(node, result, cache) {
		        // node.left/right {}
		        return this.gen(
		            Random.boolean() ? node.left : node.right,
		            result,
		            cache
		        )
		    },
		    /*
		        {
		            type: 'match',
		            offset: 0,
		            text: '',
		            body: []
		        }
		    */
		    match: function(node, result, cache) {
		        result = ''
		            // node.body []
		        for (var i = 0; i < node.body.length; i++) {
		            result += this.gen(node.body[i], result, cache)
		        }
		        return result
		    },
		    // ()
		    'capture-group': function(node, result, cache) {
		        // node.body {}
		        result = this.gen(node.body, result, cache)
		        cache[cache.guid++] = result
		        return result
		    },
		    // (?:...)
		    'non-capture-group': function(node, result, cache) {
		        // node.body {}
		        return this.gen(node.body, result, cache)
		    },
		    // (?=p)
		    'positive-lookahead': function(node, result, cache) {
		        // node.body
		        return this.gen(node.body, result, cache)
		    },
		    // (?!p)
		    'negative-lookahead': function(node, result, cache) {
		        // node.body
		        return ''
		    },
		    /*
		        {
		            type: 'quantified',
		            offset: 3,
		            text: 'c*',
		            body: {
		                type: 'literal',
		                offset: 3,
		                text: 'c',
		                body: 'c',
		                escaped: false
		            },
		            quantifier: {
		                type: 'quantifier',
		                offset: 4,
		                text: '*',
		                min: 0,
		                max: Infinity,
		                greedy: true
		            }
		        }
		    */
		    quantified: function(node, result, cache) {
		        result = ''
		            // node.quantifier {}
		        var count = this.quantifier(node.quantifier);
		        // node.body {}
		        for (var i = 0; i < count; i++) {
		            result += this.gen(node.body, result, cache)
		        }
		        return result
		    },
		    /*
		        quantifier: {
		            type: 'quantifier',
		            offset: 4,
		            text: '*',
		            min: 0,
		            max: Infinity,
		            greedy: true
		        }
		    */
		    quantifier: function(node, result, cache) {
		        var min = Math.max(node.min, 0)
		        var max = isFinite(node.max) ? node.max :
		            min + Random.integer(3, 7)
		        return Random.integer(min, max)
		    },
		    /*
		        
		    */
		    charset: function(node, result, cache) {
		        // node.invert
		        if (node.invert) return this['invert-charset'](node, result, cache)

		        // node.body []
		        var literal = Random.pick(node.body)
		        return this.gen(literal, result, cache)
		    },
		    'invert-charset': function(node, result, cache) {
		        var pool = PRINTABLE
		        for (var i = 0, item; i < node.body.length; i++) {
		            item = node.body[i]
		            switch (item.type) {
		                case 'literal':
		                    pool = pool.replace(item.body, '')
		                    break
		                case 'range':
		                    var min = this.gen(item.start, result, cache).charCodeAt()
		                    var max = this.gen(item.end, result, cache).charCodeAt()
		                    for (var ii = min; ii <= max; ii++) {
		                        pool = pool.replace(String.fromCharCode(ii), '')
		                    }
		                    /* falls through */
		                default:
		                    var characters = CHARACTER_CLASSES[item.text]
		                    if (characters) {
		                        for (var iii = 0; iii <= characters.length; iii++) {
		                            pool = pool.replace(characters[iii], '')
		                        }
		                    }
		            }
		        }
		        return Random.pick(pool.split(''))
		    },
		    range: function(node, result, cache) {
		        // node.start, node.end
		        var min = this.gen(node.start, result, cache).charCodeAt()
		        var max = this.gen(node.end, result, cache).charCodeAt()
		        return String.fromCharCode(
		            Random.integer(min, max)
		        )
		    },
		    literal: function(node, result, cache) {
		        return node.escaped ? node.body : node.text
		    },
		    // Unicode \u
		    unicode: function(node, result, cache) {
		        return String.fromCharCode(
		            parseInt(node.code, 16)
		        )
		    },
		    // 十六进制 \xFF
		    hex: function(node, result, cache) {
		        return String.fromCharCode(
		            parseInt(node.code, 16)
		        )
		    },
		    // 八进制 \0
		    octal: function(node, result, cache) {
		        return String.fromCharCode(
		            parseInt(node.code, 8)
		        )
		    },
		    // 反向引用
		    'back-reference': function(node, result, cache) {
		        return cache[node.code] || ''
		    },
		    /*
		        http://en.wikipedia.org/wiki/C0_and_C1_control_codes
		    */
		    CONTROL_CHARACTER_MAP: function() {
		        var CONTROL_CHARACTER = '@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _'.split(' ')
		        var CONTROL_CHARACTER_UNICODE = '\u0000 \u0001 \u0002 \u0003 \u0004 \u0005 \u0006 \u0007 \u0008 \u0009 \u000A \u000B \u000C \u000D \u000E \u000F \u0010 \u0011 \u0012 \u0013 \u0014 \u0015 \u0016 \u0017 \u0018 \u0019 \u001A \u001B \u001C \u001D \u001E \u001F'.split(' ')
		        var map = {}
		        for (var i = 0; i < CONTROL_CHARACTER.length; i++) {
		            map[CONTROL_CHARACTER[i]] = CONTROL_CHARACTER_UNICODE[i]
		        }
		        return map
		    }(),
		    'control-character': function(node, result, cache) {
		        return this.CONTROL_CHARACTER_MAP[node.code]
		    }
		})

		module.exports = Handler

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(24)

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## toJSONSchema

		    把 Mock.js 风格的数据模板转换成 JSON Schema。

		    > [JSON Schema](http://json-schema.org/)
		 */
		var Constant = __webpack_require__(2)
		var Util = __webpack_require__(3)
		var Parser = __webpack_require__(4)

		function toJSONSchema(template, name, path /* Internal Use Only */ ) {
		    // type rule properties items
		    path = path || []
		    var result = {
		        name: typeof name === 'string' ? name.replace(Constant.RE_KEY, '$1') : name,
		        template: template,
		        type: Util.type(template), // 可能不准确，例如 { 'name|1': [{}, {} ...] }
		        rule: Parser.parse(name)
		    }
		    result.path = path.slice(0)
		    result.path.push(name === undefined ? 'ROOT' : result.name)

		    switch (result.type) {
		        case 'array':
		            result.items = []
		            Util.each(template, function(value, index) {
		                result.items.push(
		                    toJSONSchema(value, index, result.path)
		                )
		            })
		            break
		        case 'object':
		            result.properties = []
		            Util.each(template, function(value, name) {
		                result.properties.push(
		                    toJSONSchema(value, name, result.path)
		                )
		            })
		            break
		    }

		    return result

		}

		module.exports = toJSONSchema


	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(26)

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		    ## valid(template, data)

		    校验真实数据 data 是否与数据模板 template 匹配。
		    
		    实现思路：
		    1. 解析规则。
		        先把数据模板 template 解析为更方便机器解析的 JSON-Schame
		        name               属性名 
		        type               属性值类型
		        template           属性值模板
		        properties         对象属性数组
		        items              数组元素数组
		        rule               属性值生成规则
		    2. 递归验证规则。
		        然后用 JSON-Schema 校验真实数据，校验项包括属性名、值类型、值、值生成规则。

		    提示信息 
		    https://github.com/fge/json-schema-validator/blob/master/src/main/resources/com/github/fge/jsonschema/validator/validation.properties
		    [JSON-Schama validator](http://json-schema-validator.herokuapp.com/)
		    [Regexp Demo](http://demos.forbeslindesay.co.uk/regexp/)
		*/
		var Constant = __webpack_require__(2)
		var Util = __webpack_require__(3)
		var toJSONSchema = __webpack_require__(23)

		function valid(template, data) {
		    var schema = toJSONSchema(template)
		    var result = Diff.diff(schema, data)
		    for (var i = 0; i < result.length; i++) {
		        // console.log(template, data)
		        // console.warn(Assert.message(result[i]))
		    }
		    return result
		}

		/*
		    ## name
		        有生成规则：比较解析后的 name
		        无生成规则：直接比较
		    ## type
		        无类型转换：直接比较
		        有类型转换：先试着解析 template，然后再检查？
		    ## value vs. template
		        基本类型
		            无生成规则：直接比较
		            有生成规则：
		                number
		                    min-max.dmin-dmax
		                    min-max.dcount
		                    count.dmin-dmax
		                    count.dcount
		                    +step
		                    整数部分
		                    小数部分
		                boolean 
		                string  
		                    min-max
		                    count
		    ## properties
		        对象
		            有生成规则：检测期望的属性个数，继续递归
		            无生成规则：检测全部的属性个数，继续递归
		    ## items
		        数组
		            有生成规则：
		                `'name|1': [{}, {} ...]`            其中之一，继续递归
		                `'name|+1': [{}, {} ...]`           顺序检测，继续递归
		                `'name|min-max': [{}, {} ...]`      检测个数，继续递归
		                `'name|count': [{}, {} ...]`        检测个数，继续递归
		            无生成规则：检测全部的元素个数，继续递归
		*/
		var Diff = {
		    diff: function diff(schema, data, name /* Internal Use Only */ ) {
		        var result = []

		        // 先检测名称 name 和类型 type，如果匹配，才有必要继续检测
		        if (
		            this.name(schema, data, name, result) &&
		            this.type(schema, data, name, result)
		        ) {
		            this.value(schema, data, name, result)
		            this.properties(schema, data, name, result)
		            this.items(schema, data, name, result)
		        }

		        return result
		    },
		    /* jshint unused:false */
		    name: function(schema, data, name, result) {
		        var length = result.length

		        Assert.equal('name', schema.path, name + '', schema.name + '', result)

		        return result.length === length
		    },
		    type: function(schema, data, name, result) {
		        var length = result.length

		        switch (schema.type) {
		            case 'string':
		                // 跳过含有『占位符』的属性值，因为『占位符』返回值的类型可能和模板不一致，例如 '@int' 会返回一个整形值
		                if (schema.template.match(Constant.RE_PLACEHOLDER)) return true
		                break
		            case 'array':
		                if (schema.rule.parameters) {
		                    // name|count: array
		                    if (schema.rule.min !== undefined && schema.rule.max === undefined) {
		                        // 跳过 name|1: array，因为最终值的类型（很可能）不是数组，也不一定与 `array` 中的类型一致
		                        if (schema.rule.count === 1) return true
		                    }
		                    // 跳过 name|+inc: array
		                    if (schema.rule.parameters[2]) return true
		                }
		                break
		            case 'function':
		                // 跳过 `'name': function`，因为函数可以返回任何类型的值。
		                return true
		        }

		        Assert.equal('type', schema.path, Util.type(data), schema.type, result)

		        return result.length === length
		    },
		    value: function(schema, data, name, result) {
		        var length = result.length

		        var rule = schema.rule
		        var templateType = schema.type
		        if (templateType === 'object' || templateType === 'array' || templateType === 'function') return true

		        // 无生成规则
		        if (!rule.parameters) {
		            switch (templateType) {
		                case 'regexp':
		                    Assert.match('value', schema.path, data, schema.template, result)
		                    return result.length === length
		                case 'string':
		                    // 同样跳过含有『占位符』的属性值，因为『占位符』的返回值会通常会与模板不一致
		                    if (schema.template.match(Constant.RE_PLACEHOLDER)) return result.length === length
		                    break
		            }
		            Assert.equal('value', schema.path, data, schema.template, result)
		            return result.length === length
		        }

		        // 有生成规则
		        var actualRepeatCount
		        switch (templateType) {
		            case 'number':
		                var parts = (data + '').split('.')
		                parts[0] = +parts[0]

		                // 整数部分
		                // |min-max
		                if (rule.min !== undefined && rule.max !== undefined) {
		                    Assert.greaterThanOrEqualTo('value', schema.path, parts[0], Math.min(rule.min, rule.max), result)
		                        // , 'numeric instance is lower than the required minimum (minimum: {expected}, found: {actual})')
		                    Assert.lessThanOrEqualTo('value', schema.path, parts[0], Math.max(rule.min, rule.max), result)
		                }
		                // |count
		                if (rule.min !== undefined && rule.max === undefined) {
		                    Assert.equal('value', schema.path, parts[0], rule.min, result, '[value] ' + name)
		                }

		                // 小数部分
		                if (rule.decimal) {
		                    // |dmin-dmax
		                    if (rule.dmin !== undefined && rule.dmax !== undefined) {
		                        Assert.greaterThanOrEqualTo('value', schema.path, parts[1].length, rule.dmin, result)
		                        Assert.lessThanOrEqualTo('value', schema.path, parts[1].length, rule.dmax, result)
		                    }
		                    // |dcount
		                    if (rule.dmin !== undefined && rule.dmax === undefined) {
		                        Assert.equal('value', schema.path, parts[1].length, rule.dmin, result)
		                    }
		                }

		                break

		            case 'boolean':
		                break

		            case 'string':
		                // 'aaa'.match(/a/g)
		                actualRepeatCount = data.match(new RegExp(schema.template, 'g'))
		                actualRepeatCount = actualRepeatCount ? actualRepeatCount.length : 0

		                // |min-max
		                if (rule.min !== undefined && rule.max !== undefined) {
		                    Assert.greaterThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.min, result)
		                    Assert.lessThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.max, result)
		                }
		                // |count
		                if (rule.min !== undefined && rule.max === undefined) {
		                    Assert.equal('repeat count', schema.path, actualRepeatCount, rule.min, result)
		                }

		                break

		            case 'regexp':
		                actualRepeatCount = data.match(new RegExp(schema.template.source.replace(/^\^|\$$/g, ''), 'g'))
		                actualRepeatCount = actualRepeatCount ? actualRepeatCount.length : 0

		                // |min-max
		                if (rule.min !== undefined && rule.max !== undefined) {
		                    Assert.greaterThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.min, result)
		                    Assert.lessThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.max, result)
		                }
		                // |count
		                if (rule.min !== undefined && rule.max === undefined) {
		                    Assert.equal('repeat count', schema.path, actualRepeatCount, rule.min, result)
		                }
		                break
		        }

		        return result.length === length
		    },
		    properties: function(schema, data, name, result) {
		        var length = result.length

		        var rule = schema.rule
		        var keys = Util.keys(data)
		        if (!schema.properties) return

		        // 无生成规则
		        if (!schema.rule.parameters) {
		            Assert.equal('properties length', schema.path, keys.length, schema.properties.length, result)
		        } else {
		            // 有生成规则
		            // |min-max
		            if (rule.min !== undefined && rule.max !== undefined) {
		                Assert.greaterThanOrEqualTo('properties length', schema.path, keys.length, Math.min(rule.min, rule.max), result)
		                Assert.lessThanOrEqualTo('properties length', schema.path, keys.length, Math.max(rule.min, rule.max), result)
		            }
		            // |count
		            if (rule.min !== undefined && rule.max === undefined) {
		                // |1, |>1
		                if (rule.count !== 1) Assert.equal('properties length', schema.path, keys.length, rule.min, result)
		            }
		        }

		        if (result.length !== length) return false

		        for (var i = 0; i < keys.length; i++) {
		            result.push.apply(
		                result,
		                this.diff(
		                    function() {
		                        var property
		                        Util.each(schema.properties, function(item /*, index*/ ) {
		                            if (item.name === keys[i]) property = item
		                        })
		                        return property || schema.properties[i]
		                    }(),
		                    data[keys[i]],
		                    keys[i]
		                )
		            )
		        }

		        return result.length === length
		    },
		    items: function(schema, data, name, result) {
		        var length = result.length

		        if (!schema.items) return

		        var rule = schema.rule

		        // 无生成规则
		        if (!schema.rule.parameters) {
		            Assert.equal('items length', schema.path, data.length, schema.items.length, result)
		        } else {
		            // 有生成规则
		            // |min-max
		            if (rule.min !== undefined && rule.max !== undefined) {
		                Assert.greaterThanOrEqualTo('items', schema.path, data.length, (Math.min(rule.min, rule.max) * schema.items.length), result,
		                    '[{utype}] array is too short: {path} must have at least {expected} elements but instance has {actual} elements')
		                Assert.lessThanOrEqualTo('items', schema.path, data.length, (Math.max(rule.min, rule.max) * schema.items.length), result,
		                    '[{utype}] array is too long: {path} must have at most {expected} elements but instance has {actual} elements')
		            }
		            // |count
		            if (rule.min !== undefined && rule.max === undefined) {
		                // |1, |>1
		                if (rule.count === 1) return result.length === length
		                else Assert.equal('items length', schema.path, data.length, (rule.min * schema.items.length), result)
		            }
		            // |+inc
		            if (rule.parameters[2]) return result.length === length
		        }

		        if (result.length !== length) return false

		        for (var i = 0; i < data.length; i++) {
		            result.push.apply(
		                result,
		                this.diff(
		                    schema.items[i % schema.items.length],
		                    data[i],
		                    i % schema.items.length
		                )
		            )
		        }

		        return result.length === length
		    }
		}

		/*
		    完善、友好的提示信息
		    
		    Equal, not equal to, greater than, less than, greater than or equal to, less than or equal to
		    路径 验证类型 描述 

		    Expect path.name is less than or equal to expected, but path.name is actual.

		    Expect path.name is less than or equal to expected, but path.name is actual.
		    Expect path.name is greater than or equal to expected, but path.name is actual.

		*/
		var Assert = {
		    message: function(item) {
		        return (item.message ||
		                '[{utype}] Expect {path}\'{ltype} {action} {expected}, but is {actual}')
		            .replace('{utype}', item.type.toUpperCase())
		            .replace('{ltype}', item.type.toLowerCase())
		            .replace('{path}', Util.isArray(item.path) && item.path.join('.') || item.path)
		            .replace('{action}', item.action)
		            .replace('{expected}', item.expected)
		            .replace('{actual}', item.actual)
		    },
		    equal: function(type, path, actual, expected, result, message) {
		        if (actual === expected) return true
		        switch (type) {
		            case 'type':
		                // 正则模板 === 字符串最终值
		                if (expected === 'regexp' && actual === 'string') return true
		                break
		        }

		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'is equal to',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    },
		    // actual matches expected
		    match: function(type, path, actual, expected, result, message) {
		        if (expected.test(actual)) return true

		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'matches',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    },
		    notEqual: function(type, path, actual, expected, result, message) {
		        if (actual !== expected) return true
		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'is not equal to',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    },
		    greaterThan: function(type, path, actual, expected, result, message) {
		        if (actual > expected) return true
		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'is greater than',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    },
		    lessThan: function(type, path, actual, expected, result, message) {
		        if (actual < expected) return true
		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'is less to',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    },
		    greaterThanOrEqualTo: function(type, path, actual, expected, result, message) {
		        if (actual >= expected) return true
		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'is greater than or equal to',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    },
		    lessThanOrEqualTo: function(type, path, actual, expected, result, message) {
		        if (actual <= expected) return true
		        var item = {
		            path: path,
		            type: type,
		            actual: actual,
		            expected: expected,
		            action: 'is less than or equal to',
		            message: message
		        }
		        item.message = Assert.message(item)
		        result.push(item)
		        return false
		    }
		}

		valid.Diff = Diff
		valid.Assert = Assert

		module.exports = valid

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(28)

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		/* global window, document, location, Event, setTimeout */
		/*
		    ## MockXMLHttpRequest

		    期望的功能：
		    1. 完整地覆盖原生 XHR 的行为
		    2. 完整地模拟原生 XHR 的行为
		    3. 在发起请求时，自动检测是否需要拦截
		    4. 如果不必拦截，则执行原生 XHR 的行为
		    5. 如果需要拦截，则执行虚拟 XHR 的行为
		    6. 兼容 XMLHttpRequest 和 ActiveXObject
		        new window.XMLHttpRequest()
		        new window.ActiveXObject("Microsoft.XMLHTTP")

		    关键方法的逻辑：
		    * new   此时尚无法确定是否需要拦截，所以创建原生 XHR 对象是必须的。
		    * open  此时可以取到 URL，可以决定是否进行拦截。
		    * send  此时已经确定了请求方式。

		    规范：
		    http://xhr.spec.whatwg.org/
		    http://www.w3.org/TR/XMLHttpRequest2/

		    参考实现：
		    https://github.com/philikon/MockHttpRequest/blob/master/lib/mock.js
		    https://github.com/trek/FakeXMLHttpRequest/blob/master/fake_xml_http_request.js
		    https://github.com/ilinsky/xmlhttprequest/blob/master/XMLHttpRequest.js
		    https://github.com/firebug/firebug-lite/blob/master/content/lite/xhr.js
		    https://github.com/thx/RAP/blob/master/lab/rap.plugin.xinglie.js

		    **需不需要全面重写 XMLHttpRequest？**
		        http://xhr.spec.whatwg.org/#interface-xmlhttprequest
		        关键属性 readyState、status、statusText、response、responseText、responseXML 是 readonly，所以，试图通过修改这些状态，来模拟响应是不可行的。
		        因此，唯一的办法是模拟整个 XMLHttpRequest，就像 jQuery 对事件模型的封装。

		    // Event handlers
		    onloadstart         loadstart
		    onprogress          progress
		    onabort             abort
		    onerror             error
		    onload              load
		    ontimeout           timeout
		    onloadend           loadend
		    onreadystatechange  readystatechange
		 */

		var Util = __webpack_require__(3)

		// 备份原生 XMLHttpRequest
		window._XMLHttpRequest = window.XMLHttpRequest
		window._ActiveXObject = window.ActiveXObject

		/*
		    PhantomJS
		    TypeError: '[object EventConstructor]' is not a constructor (evaluating 'new Event("readystatechange")')

		    https://github.com/bluerail/twitter-bootstrap-rails-confirm/issues/18
		    https://github.com/ariya/phantomjs/issues/11289
		*/
		try {
		    new window.Event('custom')
		} catch (exception) {
		    window.Event = function(type, bubbles, cancelable, detail) {
		        var event = document.createEvent('CustomEvent') // MUST be 'CustomEvent'
		        event.initCustomEvent(type, bubbles, cancelable, detail)
		        return event
		    }
		}

		var XHR_STATES = {
		    // The object has been constructed.
		    UNSENT: 0,
		    // The open() method has been successfully invoked.
		    OPENED: 1,
		    // All redirects (if any) have been followed and all HTTP headers of the response have been received.
		    HEADERS_RECEIVED: 2,
		    // The response's body is being received.
		    LOADING: 3,
		    // The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).
		    DONE: 4
		}

		var XHR_EVENTS = 'readystatechange loadstart progress abort error load timeout loadend'.split(' ')
		var XHR_REQUEST_PROPERTIES = 'timeout withCredentials'.split(' ')
		var XHR_RESPONSE_PROPERTIES = 'readyState responseURL status statusText responseType response responseText responseXML'.split(' ')

		// https://github.com/trek/FakeXMLHttpRequest/blob/master/fake_xml_http_request.js#L32
		var HTTP_STATUS_CODES = {
		    100: "Continue",
		    101: "Switching Protocols",
		    200: "OK",
		    201: "Created",
		    202: "Accepted",
		    203: "Non-Authoritative Information",
		    204: "No Content",
		    205: "Reset Content",
		    206: "Partial Content",
		    300: "Multiple Choice",
		    301: "Moved Permanently",
		    302: "Found",
		    303: "See Other",
		    304: "Not Modified",
		    305: "Use Proxy",
		    307: "Temporary Redirect",
		    400: "Bad Request",
		    401: "Unauthorized",
		    402: "Payment Required",
		    403: "Forbidden",
		    404: "Not Found",
		    405: "Method Not Allowed",
		    406: "Not Acceptable",
		    407: "Proxy Authentication Required",
		    408: "Request Timeout",
		    409: "Conflict",
		    410: "Gone",
		    411: "Length Required",
		    412: "Precondition Failed",
		    413: "Request Entity Too Large",
		    414: "Request-URI Too Long",
		    415: "Unsupported Media Type",
		    416: "Requested Range Not Satisfiable",
		    417: "Expectation Failed",
		    422: "Unprocessable Entity",
		    500: "Internal Server Error",
		    501: "Not Implemented",
		    502: "Bad Gateway",
		    503: "Service Unavailable",
		    504: "Gateway Timeout",
		    505: "HTTP Version Not Supported"
		}

		/*
		    MockXMLHttpRequest
		*/

		function MockXMLHttpRequest() {
		    // 初始化 custom 对象，用于存储自定义属性
		    this.custom = {
		        events: {},
		        requestHeaders: {},
		        responseHeaders: {}
		    }
		}

		MockXMLHttpRequest._settings = {
		    timeout: '10-100',
		    /*
		        timeout: 50,
		        timeout: '10-100',
		     */
		}

		MockXMLHttpRequest.setup = function(settings) {
		    Util.extend(MockXMLHttpRequest._settings, settings)
		    return MockXMLHttpRequest._settings
		}

		Util.extend(MockXMLHttpRequest, XHR_STATES)
		Util.extend(MockXMLHttpRequest.prototype, XHR_STATES)

		// 标记当前对象为 MockXMLHttpRequest
		MockXMLHttpRequest.prototype.mock = true

		// 是否拦截 Ajax 请求
		MockXMLHttpRequest.prototype.match = false

		// 初始化 Request 相关的属性和方法
		Util.extend(MockXMLHttpRequest.prototype, {
		    // https://xhr.spec.whatwg.org/#the-open()-method
		    // Sets the request method, request URL, and synchronous flag.
		    open: function(method, url, async, username, password) {
		        var that = this

		        Util.extend(this.custom, {
		            method: method,
		            url: url,
		            async: typeof async === 'boolean' ? async : true,
		            username: username,
		            password: password,
		            options: {
		                url: url,
		                type: method
		            }
		        })

		        this.custom.timeout = function(timeout) {
		            if (typeof timeout === 'number') return timeout
		            if (typeof timeout === 'string' && !~timeout.indexOf('-')) return parseInt(timeout, 10)
		            if (typeof timeout === 'string' && ~timeout.indexOf('-')) {
		                var tmp = timeout.split('-')
		                var min = parseInt(tmp[0], 10)
		                var max = parseInt(tmp[1], 10)
		                return Math.round(Math.random() * (max - min)) + min
		            }
		        }(MockXMLHttpRequest._settings.timeout)

		        // 查找与请求参数匹配的数据模板
		        var item = find(this.custom.options)

		        function handle(event) {
		            // 同步属性 NativeXMLHttpRequest => MockXMLHttpRequest
		            for (var i = 0; i < XHR_RESPONSE_PROPERTIES.length; i++) {
		                try {
		                    that[XHR_RESPONSE_PROPERTIES[i]] = xhr[XHR_RESPONSE_PROPERTIES[i]]
		                } catch (e) {}
		            }
		            // 触发 MockXMLHttpRequest 上的同名事件
		            that.dispatchEvent(new Event(event.type /*, false, false, that*/ ))
		        }

		        // 如果未找到匹配的数据模板，则采用原生 XHR 发送请求。
		        if (!item) {
		            // 创建原生 XHR 对象，调用原生 open()，监听所有原生事件
		            var xhr = createNativeXMLHttpRequest()
		            this.custom.xhr = xhr

		            // 初始化所有事件，用于监听原生 XHR 对象的事件
		            for (var i = 0; i < XHR_EVENTS.length; i++) {
		                xhr.addEventListener(XHR_EVENTS[i], handle)
		            }

		            // xhr.open()
		            if (username) xhr.open(method, url, async, username, password)
		            else xhr.open(method, url, async)

		            // 同步属性 MockXMLHttpRequest => NativeXMLHttpRequest
		            for (var j = 0; j < XHR_REQUEST_PROPERTIES.length; j++) {
		                try {
		                    xhr[XHR_REQUEST_PROPERTIES[j]] = that[XHR_REQUEST_PROPERTIES[j]]
		                } catch (e) {}
		            }

		            return
		        }

		        // 找到了匹配的数据模板，开始拦截 XHR 请求
		        this.match = true
		        this.custom.template = item
		        this.readyState = MockXMLHttpRequest.OPENED
		        this.dispatchEvent(new Event('readystatechange' /*, false, false, this*/ ))
		    },
		    // https://xhr.spec.whatwg.org/#the-setrequestheader()-method
		    // Combines a header in author request headers.
		    setRequestHeader: function(name, value) {
		        // 原生 XHR
		        if (!this.match) {
		            this.custom.xhr.setRequestHeader(name, value)
		            return
		        }

		        // 拦截 XHR
		        var requestHeaders = this.custom.requestHeaders
		        if (requestHeaders[name]) requestHeaders[name] += ',' + value
		        else requestHeaders[name] = value
		    },
		    timeout: 0,
		    withCredentials: false,
		    upload: {},
		    // https://xhr.spec.whatwg.org/#the-send()-method
		    // Initiates the request.
		    send: function send(data) {
		        var that = this
		        this.custom.options.body = data

		        // 原生 XHR
		        if (!this.match) {
		            this.custom.xhr.send(data)
		            return
		        }

		        // 拦截 XHR

		        // X-Requested-With header
		        this.setRequestHeader('X-Requested-With', 'MockXMLHttpRequest')

		        // loadstart The fetch initiates.
		        this.dispatchEvent(new Event('loadstart' /*, false, false, this*/ ))

		        if (this.custom.async) setTimeout(done, this.custom.timeout) // 异步
		        else done() // 同步

		        function done() {
		            that.readyState = MockXMLHttpRequest.HEADERS_RECEIVED
		            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))
		            that.readyState = MockXMLHttpRequest.LOADING
		            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))

		            that.status = 200
		            that.statusText = HTTP_STATUS_CODES[200]

		            // fix #92 #93 by @qddegtya
		            that.response = that.responseText = JSON.stringify(
		                convert(that.custom.template, that.custom.options),
		                null, 4
		            )

		            that.readyState = MockXMLHttpRequest.DONE
		            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))
		            that.dispatchEvent(new Event('load' /*, false, false, that*/ ));
		            that.dispatchEvent(new Event('loadend' /*, false, false, that*/ ));
		        }
		    },
		    // https://xhr.spec.whatwg.org/#the-abort()-method
		    // Cancels any network activity.
		    abort: function abort() {
		        // 原生 XHR
		        if (!this.match) {
		            this.custom.xhr.abort()
		            return
		        }

		        // 拦截 XHR
		        this.readyState = MockXMLHttpRequest.UNSENT
		        this.dispatchEvent(new Event('abort', false, false, this))
		        this.dispatchEvent(new Event('error', false, false, this))
		    }
		})

		// 初始化 Response 相关的属性和方法
		Util.extend(MockXMLHttpRequest.prototype, {
		    responseURL: '',
		    status: MockXMLHttpRequest.UNSENT,
		    statusText: '',
		    // https://xhr.spec.whatwg.org/#the-getresponseheader()-method
		    getResponseHeader: function(name) {
		        // 原生 XHR
		        if (!this.match) {
		            return this.custom.xhr.getResponseHeader(name)
		        }

		        // 拦截 XHR
		        return this.custom.responseHeaders[name.toLowerCase()]
		    },
		    // https://xhr.spec.whatwg.org/#the-getallresponseheaders()-method
		    // http://www.utf8-chartable.de/
		    getAllResponseHeaders: function() {
		        // 原生 XHR
		        if (!this.match) {
		            return this.custom.xhr.getAllResponseHeaders()
		        }

		        // 拦截 XHR
		        var responseHeaders = this.custom.responseHeaders
		        var headers = ''
		        for (var h in responseHeaders) {
		            if (!responseHeaders.hasOwnProperty(h)) continue
		            headers += h + ': ' + responseHeaders[h] + '\r\n'
		        }
		        return headers
		    },
		    overrideMimeType: function( /*mime*/ ) {},
		    responseType: '', // '', 'text', 'arraybuffer', 'blob', 'document', 'json'
		    response: null,
		    responseText: '',
		    responseXML: null
		})

		// EventTarget
		Util.extend(MockXMLHttpRequest.prototype, {
		    addEventListener: function addEventListener(type, handle) {
		        var events = this.custom.events
		        if (!events[type]) events[type] = []
		        events[type].push(handle)
		    },
		    removeEventListener: function removeEventListener(type, handle) {
		        var handles = this.custom.events[type] || []
		        for (var i = 0; i < handles.length; i++) {
		            if (handles[i] === handle) {
		                handles.splice(i--, 1)
		            }
		        }
		    },
		    dispatchEvent: function dispatchEvent(event) {
		        var handles = this.custom.events[event.type] || []
		        for (var i = 0; i < handles.length; i++) {
		            handles[i].call(this, event)
		        }

		        var ontype = 'on' + event.type
		        if (this[ontype]) this[ontype](event)
		    }
		})

		// Inspired by jQuery
		function createNativeXMLHttpRequest() {
		    var isLocal = function() {
		        var rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/
		        var rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/
		        var ajaxLocation = location.href
		        var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
		        return rlocalProtocol.test(ajaxLocParts[1])
		    }()

		    return window.ActiveXObject ?
		        (!isLocal && createStandardXHR() || createActiveXHR()) : createStandardXHR()

		    function createStandardXHR() {
		        try {
		            return new window._XMLHttpRequest();
		        } catch (e) {}
		    }

		    function createActiveXHR() {
		        try {
		            return new window._ActiveXObject("Microsoft.XMLHTTP");
		        } catch (e) {}
		    }
		}


		// 查找与请求参数匹配的数据模板：URL，Type
		function find(options) {

		    for (var sUrlType in MockXMLHttpRequest.Mock._mocked) {
		        var item = MockXMLHttpRequest.Mock._mocked[sUrlType]
		        if (
		            (!item.rurl || match(item.rurl, options.url)) &&
		            (!item.rtype || match(item.rtype, options.type.toLowerCase()))
		        ) {
		            // console.log('[mock]', options.url, '>', item.rurl)
		            return item
		        }
		    }

		    function match(expected, actual) {
		        if (Util.type(expected) === 'string') {
		            return expected === actual
		        }
		        if (Util.type(expected) === 'regexp') {
		            return expected.test(actual)
		        }
		    }

		}

		// 数据模板 ＝> 响应数据
		function convert(item, options) {
		    return Util.isFunction(item.template) ?
		        item.template(options) : MockXMLHttpRequest.Mock.mock(item.template)
		}

		module.exports = MockXMLHttpRequest

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(488);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(494);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(496);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(497);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(498);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(495);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;

	var _isPlainObject = __webpack_require__(489);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _symbolObservable = __webpack_require__(491);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/zenparsing/es-observable
	   */
	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(367),
	    getPrototype = __webpack_require__(490),
	    isObjectLike = __webpack_require__(411);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(425);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(492);


/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ponyfill = __webpack_require__(493);

	var _ponyfill2 = _interopRequireDefault(_ponyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var root; /* global window */


	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(414)(module)))

/***/ },
/* 493 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = combineReducers;

	var _createStore = __webpack_require__(488);

	var _isPlainObject = __webpack_require__(489);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(495);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });

	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  if (process.env.NODE_ENV !== 'production') {
	    var unexpectedKeyCache = {};
	  }

	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }

	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];

	    if (sanityError) {
	      throw sanityError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 495 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 496 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = applyMiddleware;

	var _compose = __webpack_require__(498);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 498 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  var last = funcs[funcs.length - 1];
	  var rest = funcs.slice(0, -1);
	  return function () {
	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */

	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.Immutable = factory());
	}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }

	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }


	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }


	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }


	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }



	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }

	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }

	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }

	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }

	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }

	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;

	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;


	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';

	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;

	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};

	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };

	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }

	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }

	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}

	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }

	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }

	  function wrapIndex(iter, index) {
	    // This implements "is array index" which the ECMAString spec defines as:
	    //
	    //     A String property name P is an array index if and only if
	    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	    //     to 2^32−1.
	    //
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	    if (typeof index !== 'number') {
	      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	      if ('' + uint32Index !== index || uint32Index === 4294967295) {
	        return NaN;
	      }
	      index = uint32Index;
	    }
	    return index < 0 ? ensureSize(iter) + index : index;
	  }

	  function returnTrue() {
	    return true;
	  }

	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }

	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }

	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }

	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }

	  /* global Symbol */

	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;

	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';

	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


	  function Iterator(next) {
	      this.next = next;
	    }

	    Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };


	  Iterator.KEYS = ITERATE_KEYS;
	  Iterator.VALUES = ITERATE_VALUES;
	  Iterator.ENTRIES = ITERATE_ENTRIES;

	  Iterator.prototype.inspect =
	  Iterator.prototype.toSource = function () { return this.toString(); }
	  Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };


	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }

	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }

	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }

	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }

	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }

	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }

	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }

	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };

	    Seq.prototype.toSeq = function() {
	      return this;
	    };

	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };

	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };

	    // abstract __iterateUncached(fn, reverse)

	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };

	    // abstract __iteratorUncached(type, reverse)

	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };



	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }

	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };



	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }

	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };

	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };

	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };

	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };

	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };



	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }

	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };

	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };



	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;

	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

	  Seq.prototype[IS_SEQ_SENTINEL] = true;



	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }

	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };

	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };



	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }

	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };

	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };

	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };

	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }

	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };

	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };



	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }

	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };

	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };




	  // # pragma Helper functions

	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }

	  var EMPTY_SEQ;

	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }

	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }

	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }

	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }

	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }

	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }

	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }

	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }

	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }

	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	        return true;
	      }
	      if (!valueA || !valueB) {
	        return false;
	      }
	    }
	    if (typeof valueA.equals === 'function' &&
	        typeof valueB.equals === 'function' &&
	        valueA.equals(valueB)) {
	      return true;
	    }
	    return false;
	  }

	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }

	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }

	    var notAssociative = !isAssociative(a);

	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }

	    var flipped = false;

	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        if (typeof a.cacheResult === 'function') {
	          a.cacheResult();
	        }
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }

	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });

	    return allEqual && a.size === bSize;
	  }

	  createClass(Repeat, IndexedSeq);

	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }

	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };

	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };

	    Repeat.prototype.includes = function(searchValue) {
	      return is(this._value, searchValue);
	    };

	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };

	    Repeat.prototype.reverse = function() {
	      return this;
	    };

	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };

	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };

	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };

	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };


	  var EMPTY_REPEAT;

	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }

	  createClass(Range, IndexedSeq);

	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }

	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step !== 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };

	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };

	    Range.prototype.includes = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };

	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };

	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };

	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };

	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };

	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };

	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };


	  var EMPTY_RANGE;

	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }


	  createClass(KeyedCollection, Collection);function KeyedCollection() {}

	  createClass(IndexedCollection, Collection);function IndexedCollection() {}

	  createClass(SetCollection, Collection);function SetCollection() {}


	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;

	  var imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };

	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }

	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      if (o !== o || o === Infinity) {
	        return 0;
	      }
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    if (type === 'object') {
	      return hashJSObj(o);
	    }
	    if (typeof o.toString === 'function') {
	      return hashString(o.toString());
	    }
	    throw new Error('Value type ' + type + ' cannot be hashed.');
	  }

	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }

	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }

	  function hashJSObj(obj) {
	    var hash;
	    if (usingWeakMap) {
	      hash = weakMap.get(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = obj[UID_HASH_KEY];
	    if (hash !== undefined) {
	      return hash;
	    }

	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash !== undefined) {
	        return hash;
	      }

	      hash = getIENodeHash(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }

	    if (usingWeakMap) {
	      weakMap.set(obj, hash);
	    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable !== undefined &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType !== undefined) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }

	    return hash;
	  }

	  // Get references to ES5 object methods.
	  var isExtensible = Object.isExtensible;

	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());

	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }

	  // If possible, use a WeakMap.
	  var usingWeakMap = typeof WeakMap === 'function';
	  var weakMap;
	  if (usingWeakMap) {
	    weakMap = new WeakMap();
	  }

	  var objHashUID = 0;

	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }

	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};

	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }

	  createClass(Map, KeyedCollection);

	    // @pragma Construction

	    function Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) && !isOrdered(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
	      return emptyMap().withMutations(function(map ) {
	        for (var i = 0; i < keyValues.length; i += 2) {
	          if (i + 1 >= keyValues.length) {
	            throw new Error('Missing value for key: ' + keyValues[i]);
	          }
	          map.set(keyValues[i], keyValues[i + 1]);
	        }
	      });
	    };

	    Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };

	    // @pragma Access

	    Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };

	    // @pragma Modification

	    Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };

	    Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };

	    Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };

	    Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };

	    Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };

	    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };

	    Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };

	    // @pragma Composition

	    Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };

	    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };

	    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.merge === 'function' ?
	          m.merge.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger, arguments);
	    };

	    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
	    };

	    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.mergeDeep === 'function' ?
	          m.mergeDeep.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };

	    Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };

	    // @pragma Mutability

	    Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };

	    Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };

	    Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };

	    Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };

	    Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };

	    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };

	    Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };


	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }

	  Map.isMap = isMap;

	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

	  var MapPrototype = Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;


	  // #pragma Trie Nodes



	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }

	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && entries.length === 1) {
	        return; // undefined
	      }

	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new ArrayMapNode(ownerID, newEntries);
	    };




	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }

	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };

	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;

	      if (!exists && value === NOT_SET) {
	        return this;
	      }

	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

	      if (newNode === node) {
	        return this;
	      }

	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }

	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }

	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };




	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }

	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };

	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];

	      if (removed && !node) {
	        return this;
	      }

	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }

	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };




	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }

	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }

	      var removed = value === NOT_SET;

	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };




	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }

	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };

	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }

	      SetRef(didAlter);

	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }

	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }

	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };



	  // #pragma Iterators

	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  }

	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  }

	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  }

	  createClass(MapIterator, Iterator);

	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }

	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };


	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }

	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }

	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }

	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }

	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }

	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }

	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }

	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }

	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }

	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }

	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }

	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }

	  function deepMerger(existing, value, key) {
	    return existing && existing.mergeDeep && isIterable(value) ?
	      existing.mergeDeep(value) :
	      is(existing, value) ? existing : value;
	  }

	  function deepMergerWith(merger) {
	    return function(existing, value, key)  {
	      if (existing && existing.mergeDeepWith && isIterable(value)) {
	        return existing.mergeDeepWith(merger, value);
	      }
	      var nextValue = merger(existing, value, key);
	      return is(existing, nextValue) ? existing : nextValue;
	    };
	  }

	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value, key)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        }
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }

	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }

	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }

	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }

	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }

	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }

	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	  createClass(List, IndexedCollection);

	    // @pragma Construction

	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }

	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };

	    // @pragma Access

	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index >= 0 && index < this.size) {
	        index += this._origin;
	        var node = listNodeFor(this, index);
	        return node && node.array[index & MASK];
	      }
	      return notSetValue;
	    };

	    // @pragma Modification

	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };

	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };

	    List.prototype.insert = function(index, value) {
	      return this.splice(index, 0, value);
	    };

	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };

	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };

	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };

	    // @pragma Composition

	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };

	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };

	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger, arguments);
	    };

	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMergerWith(merger), iters);
	    };

	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };

	    // @pragma Iteration

	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };

	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };

	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };

	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };


	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }

	  List.isList = isList;

	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;



	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }

	    // TODO: seems like these methods are very similar

	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };

	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }

	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	          return this;
	        }
	      }

	      var editable = editableVNode(this, ownerID);
	      editable.array.splice(sizeIndex + 1);
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };



	  var DONE = {};

	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;

	    return iterateNodeOrLeaf(list._root, list._level, 0);

	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }

	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }

	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }

	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }

	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }

	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);

	    if (index !== index) {
	      return list;
	    }

	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value)
	      });
	    }

	    index += list._origin;

	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }

	    if (!didAlter.value) {
	      return list;
	    }

	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }

	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }

	    var newNode;

	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }

	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }

	    SetRef(didAlter);

	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }

	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }

	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }

	  function setListBounds(list, begin, end) {
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }

	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }

	    var newLevel = list._level;
	    var newRoot = list._root;

	    // New origin might need creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }

	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);

	    // New size might need creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }

	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }

	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }

	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;

	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }

	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }

	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }

	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }

	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }

	  createClass(OrderedMap, Map);

	    // @pragma Construction

	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };

	    // @pragma Access

	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };

	    // @pragma Modification

	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };

	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };

	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };

	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };

	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };

	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };

	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };


	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }

	  OrderedMap.isOrderedMap = isOrderedMap;

	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }

	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }

	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }

	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }

	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };

	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };

	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };

	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };

	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };

	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          ((ii = reverse ? resolveSize(this) : 0),
	            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };

	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };

	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToIndexedSequence.prototype.includes = function(value) {
	      return this._iter.includes(value);
	    };

	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };

	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };



	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.includes(key);
	    };

	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };

	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };



	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }

	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };

	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedIterable = isIterable(entry);
	          return fn(
	            indexedIterable ? entry.get(1) : entry[1],
	            indexedIterable ? entry.get(0) : entry[0],
	            this$0
	          );
	        }
	      }, reverse);
	    };

	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            var indexedIterable = isIterable(entry);
	            return iteratorValue(
	              type,
	              indexedIterable ? entry.get(0) : entry[0],
	              indexedIterable ? entry.get(1) : entry[1],
	              step
	            );
	          }
	        }
	      });
	    };


	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;


	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.includes(key)};
	    flipSequence.includes = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    }
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    }
	    return flipSequence;
	  }


	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    }
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    }
	    return mappedSequence;
	  }


	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.includes = function(value ) {return iterable.includes(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }


	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    }
	    return filterSequence;
	  }


	  function countByFactory(iterable, grouper, context) {
	    var groups = Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }


	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }


	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;

	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      if (end === Infinity) {
	        end = originalSize;
	      } else {
	        end = end | 0;
	      }
	    }

	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }

	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);

	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size and these do not resolve to NaN.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }

	    // Note: resolvedEnd is undefined when the original sequence's length is
	    // unknown and this slice did not supply an end and should contain all
	    // elements after resolvedBegin.
	    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	    var resolvedSize = resolvedEnd - resolvedBegin;
	    var sliceSize;
	    if (resolvedSize === resolvedSize) {
	      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	    }

	    var sliceSeq = makeSequence(iterable);

	    // If iterable.size is undefined, the size of the realized sliceSeq is
	    // unknown at this point unless the number of items to slice is 0
	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      }
	    }

	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };

	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize !== 0 && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (skipped++ < resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    }

	    return sliceSeq;
	  }


	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }


	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }


	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});

	    if (iters.length === 0) {
	      return iterable;
	    }

	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }

	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }


	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    }
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    }
	    return flatSequence;
	  }


	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }


	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }


	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }


	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }

	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }


	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }


	  // #pragma Helper Functions

	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }

	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }

	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }

	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }

	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }

	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }

	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }

	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }

	  createClass(Record, KeyedCollection);

	    function Record(defaultValues, name) {
	      var hasInitialized;

	      var RecordType = function Record(values) {
	        if (values instanceof RecordType) {
	          return values;
	        }
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        if (!hasInitialized) {
	          hasInitialized = true;
	          var keys = Object.keys(defaultValues);
	          setProps(RecordTypePrototype, keys);
	          RecordTypePrototype.size = keys.length;
	          RecordTypePrototype._name = name;
	          RecordTypePrototype._keys = keys;
	          RecordTypePrototype._defaultValues = defaultValues;
	        }
	        this._map = Map(values);
	      };

	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;

	      return RecordType;
	    }

	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };

	    // @pragma Access

	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };

	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };

	    // @pragma Modification

	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var RecordType = this.constructor;
	      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
	    };

	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      if (this._map && !this._map.has(k)) {
	        var defaultVal = this._defaultValues[k];
	        if (v === defaultVal) {
	          return this;
	        }
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };

	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };

	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };


	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;


	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }

	  function recordName(record) {
	    return record._name || record.constructor.name || 'Record';
	  }

	  function setProps(prototype, names) {
	    try {
	      names.forEach(setProp.bind(undefined, prototype));
	    } catch (error) {
	      // Object.defineProperty failed. Probably IE8.
	    }
	  }

	  function setProp(prototype, name) {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      }
	    });
	  }

	  createClass(Set, SetCollection);

	    // @pragma Construction

	    function Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) && !isOrdered(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    Set.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };

	    // @pragma Access

	    Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };

	    // @pragma Modification

	    Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };

	    Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };

	    Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };

	    // @pragma Composition

	    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };

	    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };

	    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };

	    Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };

	    Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };

	    Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };

	    Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };

	    Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };


	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }

	  Set.isSet = isSet;

	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

	  var SetPrototype = Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;

	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;

	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }

	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }

	  createClass(OrderedSet, Set);

	    // @pragma Construction

	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };


	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }

	  OrderedSet.isOrderedSet = isOrderedSet;

	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;

	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }

	  createClass(Stack, IndexedCollection);

	    // @pragma Construction

	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }

	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };

	    // @pragma Access

	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };

	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };

	    // @pragma Modification

	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };

	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };

	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };

	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };

	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };

	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    // @pragma Mutability

	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };

	    // @pragma Iteration

	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };

	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };


	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }

	  Stack.isStack = isStack;

	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;


	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }

	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }

	  Iterable.Iterator = Iterator;

	  mixin(Iterable, {

	    // ### Conversion to other types

	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },

	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },

	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },

	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },

	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Map(this.toKeyedSeq());
	    },

	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },

	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },

	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Set(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },

	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },

	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },


	    // ### Common JavaScript methods and properties

	    toString: function() {
	      return '[Iterable]';
	    },

	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },

	    includes: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },

	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },

	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },

	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },

	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },

	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },

	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },

	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },

	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },

	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },

	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },

	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },

	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },


	    // ### More sequential methods

	    butLast: function() {
	      return this.slice(0, -1);
	    },

	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },

	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },

	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },

	    equals: function(other) {
	      return deepEqual(this, other);
	    },

	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },

	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },

	    findEntry: function(predicate, context, notSetValue) {
	      var found = notSetValue;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },

	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },

	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },

	    findLastEntry: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
	    },

	    findLastKey: function(predicate, context) {
	      return this.toKeyedSeq().reverse().findKey(predicate, context);
	    },

	    first: function() {
	      return this.find(returnTrue);
	    },

	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },

	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },

	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },

	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },

	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },

	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },

	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },

	    isSubset: function(iter) {
	      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.includes(value)});
	    },

	    isSuperset: function(iter) {
	      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
	      return iter.isSubset(this);
	    },

	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },

	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },

	    last: function() {
	      return this.toSeq().reverse().first();
	    },

	    lastKeyOf: function(searchValue) {
	      return this.toKeyedSeq().reverse().keyOf(searchValue);
	    },

	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },

	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },

	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },

	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },

	    rest: function() {
	      return this.slice(1);
	    },

	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },

	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },

	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },

	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },

	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },

	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },

	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },

	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },

	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },


	    // ### Hashable Object

	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    }


	    // ### Internal

	    // abstract __iterate(fn, reverse)

	    // abstract __iterator(type, reverse)
	  });

	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;
	  IterablePrototype.contains = IterablePrototype.includes;

	  mixin(KeyedIterable, {

	    // ### More sequential methods

	    flip: function() {
	      return reify(this, flipFactory(this));
	    },

	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },

	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    }

	  });

	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



	  mixin(IndexedIterable, {

	    // ### Conversion to other types

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },

	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    indexOf: function(searchValue) {
	      var key = this.keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    lastIndexOf: function(searchValue) {
	      var key = this.lastKeyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },

	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      // If index is negative, it should resolve relative to the size of the
	      // collection. However size may be expensive to compute if not cached, so
	      // only call count() if the number is in fact negative.
	      index = resolveBegin(index, index < 0 ? this.count() : this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },


	    // ### More collection methods

	    findLastIndex: function(predicate, context) {
	      var entry = this.findLastEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    first: function() {
	      return this.get(0);
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },

	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },

	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },

	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },

	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },

	    keySeq: function() {
	      return Range(0, this.size);
	    },

	    last: function() {
	      return this.get(-1);
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },

	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },

	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    }

	  });

	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



	  mixin(SetIterable, {

	    // ### ES6 Collection methods (ES6 Array and Map)

	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },

	    includes: function(value) {
	      return this.has(value);
	    },


	    // ### More sequential methods

	    keySeq: function() {
	      return this.valueSeq();
	    }

	  });

	  SetIterable.prototype.has = IterablePrototype.includes;
	  SetIterable.prototype.contains = SetIterable.prototype.includes;


	  // Mixin subclasses

	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);

	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);


	  // #pragma Helper functions

	  function keyMapper(v, k) {
	    return k;
	  }

	  function entryMapper(v, k) {
	    return [k, v];
	  }

	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }

	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }

	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : String(value);
	  }

	  function defaultZipper() {
	    return arrCopy(arguments);
	  }

	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }

	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }

	  function murmurHashOfSize(size, h) {
	    h = imul(h, 0xCC9E2D51);
	    h = imul(h << 15 | h >>> -15, 0x1B873593);
	    h = imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }

	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }

	  var Immutable = {

	    Iterable: Iterable,

	    Seq: Seq,
	    Collection: Collection,
	    Map: Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: Set,
	    OrderedSet: OrderedSet,

	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,

	    is: is,
	    fromJS: fromJS

	  };

	  return Immutable;

	}));

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(501);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(504);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(502);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _warning = __webpack_require__(503);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    return _react.Children.only(this.props.children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;


	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;


	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _react.PropTypes.element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	exports["default"] = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  dispatch: _react.PropTypes.func.isRequired,
	  getState: _react.PropTypes.func.isRequired
	});

/***/ },
/* 503 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = connect;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(502);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(505);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(506);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _warning = __webpack_require__(503);

	var _warning2 = _interopRequireDefault(_warning);

	var _isPlainObject = __webpack_require__(489);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(507);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;

	  var mapDispatch = void 0;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure,
	      pure = _options$pure === undefined ? true : _options$pure,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;

	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;

	  // Helps track hot reloading.
	  var version = nextVersion++;

	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';

	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }

	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (process.env.NODE_ENV !== 'production') {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }

	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }

	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }

	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged,
	            hasStoreStateChanged = this.hasStoreStateChanged,
	            haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated,
	            statePropsPrecalculationError = this.statePropsPrecalculationError,
	            renderedElement = this.renderedElement;


	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;

	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 505 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(487);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ },
/* 507 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};


/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.RouterContext = exports.createRoutes = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

	var _RouteUtils = __webpack_require__(509);

	Object.defineProperty(exports, 'createRoutes', {
	  enumerable: true,
	  get: function get() {
	    return _RouteUtils.createRoutes;
	  }
	});

	var _PropTypes = __webpack_require__(510);

	Object.defineProperty(exports, 'locationShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.locationShape;
	  }
	});
	Object.defineProperty(exports, 'routerShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.routerShape;
	  }
	});

	var _PatternUtils = __webpack_require__(511);

	Object.defineProperty(exports, 'formatPattern', {
	  enumerable: true,
	  get: function get() {
	    return _PatternUtils.formatPattern;
	  }
	});

	var _Router2 = __webpack_require__(512);

	var _Router3 = _interopRequireDefault(_Router2);

	var _Link2 = __webpack_require__(528);

	var _Link3 = _interopRequireDefault(_Link2);

	var _IndexLink2 = __webpack_require__(529);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	var _withRouter2 = __webpack_require__(530);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	var _IndexRedirect2 = __webpack_require__(531);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	var _IndexRoute2 = __webpack_require__(533);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	var _Redirect2 = __webpack_require__(532);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(534);

	var _Route3 = _interopRequireDefault(_Route2);

	var _RouterContext2 = __webpack_require__(524);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	var _match2 = __webpack_require__(535);

	var _match3 = _interopRequireDefault(_match2);

	var _useRouterHistory2 = __webpack_require__(548);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	var _applyRouterMiddleware2 = __webpack_require__(549);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	var _browserHistory2 = __webpack_require__(550);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	var _hashHistory2 = __webpack_require__(558);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	var _createMemoryHistory2 = __webpack_require__(537);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Router = _Router3.default; /* components */

	exports.Link = _Link3.default;
	exports.IndexLink = _IndexLink3.default;
	exports.withRouter = _withRouter3.default;

	/* components (configuration) */

	exports.IndexRedirect = _IndexRedirect3.default;
	exports.IndexRoute = _IndexRoute3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;

	/* utils */

	exports.RouterContext = _RouterContext3.default;
	exports.match = _match3.default;
	exports.useRouterHistory = _useRouterHistory3.default;
	exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

	/* histories */

	exports.browserHistory = _browserHistory3.default;
	exports.hashHistory = _hashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isValidChild(object) {
	  return object == null || _react2.default.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2.default.Children.forEach(children, function (element) {
	    if (_react2.default.isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationShape = exports.routerShape = undefined;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	var routerShape = exports.routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	var locationShape = exports.locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = void 0,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = Object.create(null);

	function compilePattern(pattern) {
	  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern),
	      regexpSource = _compilePattern2.regexpSource,
	      paramNames = _compilePattern2.paramNames,
	      tokens = _compilePattern2.tokens;

	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
	  if (match == null) {
	    return null;
	  }

	  var matchedPath = match[0];
	  var remainingPathname = pathname.substr(matchedPath.length);

	  if (remainingPathname) {
	    // Require that the match ends at a path separator, if we didn't match
	    // the full path, so any remaining pathname is a new path segment.
	    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	      return null;
	    }

	    // If there is a remaining pathname, treat the path separator as part of
	    // the remaining pathname for properly continuing the match.
	    remainingPathname = '/' + remainingPathname;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    })
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var match = matchPattern(pattern, pathname);
	  if (!match) {
	    return null;
	  }

	  var paramNames = match.paramNames,
	      paramValues = match.paramValues;

	  var params = {};

	  paramNames.forEach(function (paramName, index) {
	    params[paramName] = paramValues[index];
	  });

	  return params;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern),
	      tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0,
	      parenHistory = [];

	  var token = void 0,
	      paramName = void 0,
	      paramValue = void 0;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenHistory[parenCount] = '';
	      parenCount += 1;
	    } else if (token === ')') {
	      var parenText = parenHistory.pop();
	      parenCount -= 1;

	      if (parenCount) parenHistory[parenCount - 1] += parenText;else pathname += parenText;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue == null) {
	        if (parenCount) {
	          parenHistory[parenCount - 1] = '';

	          var curTokenIdx = tokens.indexOf(token);
	          var tokensSubset = tokens.slice(curTokenIdx, tokens.length);
	          var nextParenIdx = -1;

	          for (var _i = 0; _i < tokensSubset.length; _i++) {
	            if (tokensSubset[_i] == ')') {
	              nextParenIdx = _i;
	              break;
	            }
	          }

	          !(nextParenIdx > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren at segment "%s"', pattern, tokensSubset.join('')) : (0, _invariant2.default)(false) : void 0;

	          // jump to ending paren
	          i = curTokenIdx + nextParenIdx - 1;
	        }
	      } else if (parenCount) parenHistory[parenCount - 1] += encodeURIComponent(paramValue);else pathname += encodeURIComponent(paramValue);
	    } else {
	      if (parenCount) parenHistory[parenCount - 1] += token;else pathname += token;
	    }
	  }

	  !(parenCount <= 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren', pattern) : (0, _invariant2.default)(false) : void 0;

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager2 = __webpack_require__(513);

	var _createTransitionManager3 = _interopRequireDefault(_createTransitionManager2);

	var _InternalPropTypes = __webpack_require__(523);

	var _RouterContext = __webpack_require__(524);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(509);

	var _RouterUtils = __webpack_require__(527);

	var _routerWarning = __webpack_require__(514);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */

	var Router = _react2.default.createClass({
	  displayName: 'Router',


	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2.default.createElement(_RouterContext2.default, props);
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	  createRouterObject: function createRouterObject(state) {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.router;
	    }

	    var history = this.props.history;

	    return (0, _RouterUtils.createRouterObject)(history, this.transitionManager, state);
	  },
	  createTransitionManager: function createTransitionManager() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.transitionManager;
	    }

	    var history = this.props.history;
	    var _props = this.props,
	        routes = _props.routes,
	        children = _props.children;


	    !history.getCurrentLocation ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v2.x or ' + 'earlier. This version of React Router is only compatible with v3 ' + 'history objects. Please upgrade to history v3.x.') : (0, _invariant2.default)(false) : void 0;

	    return (0, _createTransitionManager3.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    this.transitionManager = this.createTransitionManager();
	    this.router = this.createRouterObject(this.state);

	    this._unlisten = this.transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        // Keep the identity of this.router because of a caveat in ContextUtils:
	        // they only work if the object identity is preserved.
	        (0, _RouterUtils.assignRouterState)(_this.router, state);
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });
	  },


	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	  render: function render() {
	    var _state = this.state,
	        location = _state.location,
	        routes = _state.routes,
	        params = _state.params,
	        components = _state.components;

	    var _props2 = this.props,
	        createElement = _props2.createElement,
	        render = _props2.render,
	        props = _objectWithoutProperties(_props2, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	});

	exports.default = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createTransitionManager;

	var _routerWarning = __webpack_require__(514);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _computeChangedRoutes2 = __webpack_require__(516);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(517);

	var _isActive2 = __webpack_require__(519);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(520);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(522);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location, indexOnly) {
	    location = history.createLocation(location);

	    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
	  }

	  var partialNextState = void 0;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState),
	        leaveRoutes = _computeChangedRoutes.leaveRoutes,
	        changeRoutes = _computeChangedRoutes.changeRoutes,
	        enterRoutes = _computeChangedRoutes.enterRoutes;

	    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      (0, _getComponents2.default)(nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, redirectInfo);
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.map(function (route) {
	      return RouteHooks[getRouteID(route)];
	    }).filter(function (hook) {
	      return hook;
	    });
	  }

	  function transitionHook(location, callback) {
	    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

	      var result = void 0;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = void 0;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = void 0,
	      unlistenBeforeUnload = void 0;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
	    var routeID = getRouteID(route, true);

	    RouteHooks[routeID] = hook;

	    if (thereWereNoRouteHooks) {
	      // setup transition & beforeunload hooks
	      unlistenBefore = history.listenBefore(transitionHook);

	      if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	    }

	    return function () {
	      removeListenBeforeHooksForRoute(route);
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    function historyListener(location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.replace(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
	          }
	        });
	      }
	    }

	    // TODO: Only use a single history listener. Otherwise we'll end up with
	    // multiple concurrent calls to match.

	    // Set up the history listener first in case the initial match redirects.
	    var unsubscribe = history.listen(historyListener);

	    if (state.location) {
	      // Picking up on a matchContext.
	      listener(null, state);
	    } else {
	      historyListener(history.getCurrentLocation());
	    }

	    return unsubscribe;
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = routerWarning;
	exports._resetWarned = _resetWarned;

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
	}

	function _resetWarned() {
	  warned = {};
	}

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(511);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = void 0,
	      changeRoutes = void 0,
	      enterRoutes = void 0;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports.default = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(518);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PendingHooks = function PendingHooks() {
	  var _this = this;

	  _classCallCheck(this, PendingHooks);

	  this.hooks = [];

	  this.add = function (hook) {
	    return _this.hooks.push(hook);
	  };

	  this.remove = function (hook) {
	    return _this.hooks = _this.hooks.filter(function (h) {
	      return h !== hook;
	    });
	  };

	  this.has = function (hook) {
	    return _this.hooks.indexOf(hook) !== -1;
	  };

	  this.clear = function () {
	    return _this.hooks = [];
	  };
	};

	var enterHooks = new PendingHooks();
	var changeHooks = new PendingHooks();

	function createTransitionHook(hook, route, asyncArity, pendingHooks) {
	  var isSync = hook.length < asyncArity;

	  var transitionHook = function transitionHook() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (isSync) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };

	  pendingHooks.add(transitionHook);

	  return transitionHook;
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3, enterHooks));
	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4, changeHooks));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = void 0;
	  function replace(location) {
	    redirectInfo = location;
	  }

	  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runEnterHooks(routes, nextState, callback) {
	  enterHooks.clear();
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (enterHooks.has(hooks[index])) {
	        next();
	        enterHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runChangeHooks(routes, state, nextState, callback) {
	  changeHooks.clear();
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (changeHooks.has(hooks[index])) {
	        next();
	        changeHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](state, nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	function runLeaveHooks(routes, prevState) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
	  }
	}

/***/ },
/* 518 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(Array.prototype.slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = isActive;

	var _PatternUtils = __webpack_require__(511);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname,
	      query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}
	module.exports = exports['default'];

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(518);

	var _PromiseUtils = __webpack_require__(521);

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (getComponent) {
	    var componentReturn = getComponent.call(route, nextState, callback);
	    if ((0, _PromiseUtils.isPromise)(componentReturn)) componentReturn.then(function (component) {
	      return callback(null, component);
	    }, callback);
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports.default = getComponents;
	module.exports = exports['default'];

/***/ },
/* 521 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.isPromise = isPromise;
	function isPromise(obj) {
	  return obj && typeof obj.then === 'function';
	}

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = matchRoutes;

	var _AsyncUtils = __webpack_require__(518);

	var _PromiseUtils = __webpack_require__(521);

	var _PatternUtils = __webpack_require__(511);

	var _routerWarning = __webpack_require__(514);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _RouteUtils = __webpack_require__(509);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getChildRoutes(route, location, paramNames, paramValues, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = void 0;

	  var partialNextState = {
	    location: location,
	    params: createParams(paramNames, paramValues)
	  };

	  var childRoutesReturn = route.getChildRoutes(partialNextState, function (error, childRoutes) {
	    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  if ((0, _PromiseUtils.isPromise)(childRoutesReturn)) childRoutesReturn.then(function (childRoutes) {
	    return callback(null, (0, _RouteUtils.createRoutes)(childRoutes));
	  }, callback);

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, paramNames, paramValues, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    var partialNextState = {
	      location: location,
	      params: createParams(paramNames, paramValues)
	    };

	    var indexRoutesReturn = route.getIndexRoute(partialNextState, function (error, indexRoute) {
	      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    });

	    if ((0, _PromiseUtils.isPromise)(indexRoutesReturn)) indexRoutesReturn.then(function (indexRoute) {
	      return callback(null, (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    }, callback);
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    try {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }
	    } catch (error) {
	      callback(error);
	    }

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : void 0;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	  var paramValues = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
	exports.falsy = falsy;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    arrayOf = _react.PropTypes.arrayOf,
	    oneOfType = _react.PropTypes.oneOfType,
	    element = _react.PropTypes.element,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = exports.history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	var component = exports.component = oneOfType([func, string]);
	var components = exports.components = oneOfType([component, object]);
	var route = exports.route = oneOfType([object, element]);
	var routes = exports.routes = oneOfType([route, arrayOf(route)]);

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _getRouteParams = __webpack_require__(525);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _ContextUtils = __webpack_require__(526);

	var _RouteUtils = __webpack_require__(509);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    array = _React$PropTypes.array,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */

	var RouterContext = _react2.default.createClass({
	  displayName: 'RouterContext',


	  mixins: [(0, _ContextUtils.ContextProvider)('router')],

	  propTypes: {
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2.default.createElement
	    };
	  },


	  childContextTypes: {
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      router: this.props.router
	    };
	  },
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	  render: function render() {
	    var _this = this;

	    var _props = this.props,
	        location = _props.location,
	        routes = _props.routes,
	        params = _props.params,
	        components = _props.components,
	        router = _props.router;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = (0, _getRouteParams2.default)(route, params);
	        var props = {
	          location: location,
	          params: params,
	          route: route,
	          router: router,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if ((0, _RouteUtils.isReactChildren)(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

	    return element;
	  }
	});

	exports.default = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(511);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
	    if (Object.prototype.hasOwnProperty.call(params, p)) {
	      routeParams[p] = params[p];
	    }
	  });

	  return routeParams;
	}

	exports.default = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ContextProvider = ContextProvider;
	exports.ContextSubscriber = ContextSubscriber;

	var _react = __webpack_require__(1);

	// Works around issues with context updates failing to propagate.
	// Caveat: the context value is expected to never change its identity.
	// https://github.com/facebook/react/issues/2517
	// https://github.com/reactjs/react-router/issues/470

	var contextProviderShape = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  eventIndex: _react.PropTypes.number.isRequired
	});

	function makeContextName(name) {
	  return '@@contextSubscriber/' + name;
	}

	function ContextProvider(name) {
	  var _childContextTypes, _ref2;

	  var contextName = makeContextName(name);
	  var listenersKey = contextName + '/listeners';
	  var eventIndexKey = contextName + '/eventIndex';
	  var subscribeKey = contextName + '/subscribe';

	  return _ref2 = {
	    childContextTypes: (_childContextTypes = {}, _childContextTypes[contextName] = contextProviderShape.isRequired, _childContextTypes),

	    getChildContext: function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[contextName] = {
	        eventIndex: this[eventIndexKey],
	        subscribe: this[subscribeKey]
	      }, _ref;
	    },
	    componentWillMount: function componentWillMount() {
	      this[listenersKey] = [];
	      this[eventIndexKey] = 0;
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this[eventIndexKey]++;
	    },
	    componentDidUpdate: function componentDidUpdate() {
	      var _this = this;

	      this[listenersKey].forEach(function (listener) {
	        return listener(_this[eventIndexKey]);
	      });
	    }
	  }, _ref2[subscribeKey] = function (listener) {
	    var _this2 = this;

	    // No need to immediately call listener here.
	    this[listenersKey].push(listener);

	    return function () {
	      _this2[listenersKey] = _this2[listenersKey].filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }, _ref2;
	}

	function ContextSubscriber(name) {
	  var _contextTypes, _ref4;

	  var contextName = makeContextName(name);
	  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';
	  var handleContextUpdateKey = contextName + '/handleContextUpdate';
	  var unsubscribeKey = contextName + '/unsubscribe';

	  return _ref4 = {
	    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = contextProviderShape, _contextTypes),

	    getInitialState: function getInitialState() {
	      var _ref3;

	      if (!this.context[contextName]) {
	        return {};
	      }

	      return _ref3 = {}, _ref3[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref3;
	    },
	    componentDidMount: function componentDidMount() {
	      if (!this.context[contextName]) {
	        return;
	      }

	      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      var _setState;

	      if (!this.context[contextName]) {
	        return;
	      }

	      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      if (!this[unsubscribeKey]) {
	        return;
	      }

	      this[unsubscribeKey]();
	      this[unsubscribeKey] = null;
	    }
	  }, _ref4[handleContextUpdateKey] = function (eventIndex) {
	    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {
	      var _setState2;

	      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));
	    }
	  }, _ref4;
	}

/***/ },
/* 527 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.assignRouterState = assignRouterState;
	function createRouterObject(history, transitionManager, state) {
	  var router = _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });

	  return assignRouterState(router, state);
	}

	function assignRouterState(router, _ref) {
	  var location = _ref.location,
	      params = _ref.params,
	      routes = _ref.routes;

	  router.location = location;
	  router.params = params;
	  router.routes = routes;

	  return router;
	}

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PropTypes = __webpack_require__(510);

	var _ContextUtils = __webpack_require__(526);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes,
	    bool = _React$PropTypes.bool,
	    object = _React$PropTypes.object,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func,
	    oneOfType = _React$PropTypes.oneOfType;


	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function resolveToLocation(to, router) {
	  return typeof to === 'function' ? to(router.location) : to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2.default.createClass({
	  displayName: 'Link',


	  mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object, func]),
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func,
	    target: string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },
	  handleClick: function handleClick(event) {
	    if (this.props.onClick) this.props.onClick(event);

	    if (event.defaultPrevented) return;

	    var router = this.context.router;

	    !router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    // If target prop is set (e.g. to "_blank"), let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) return;

	    event.preventDefault();

	    router.push(resolveToLocation(this.props.to, router));
	  },
	  render: function render() {
	    var _props = this.props,
	        to = _props.to,
	        activeClassName = _props.activeClassName,
	        activeStyle = _props.activeStyle,
	        onlyActiveOnIndex = _props.onlyActiveOnIndex,
	        props = _objectWithoutProperties(_props, ['to', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    // Ignore if rendered outside the context of router to simplify unit testing.


	    var router = this.context.router;


	    if (router) {
	      // If user does not specify a `to` prop, return an empty anchor tag.
	      if (to == null) {
	        return _react2.default.createElement('a', props);
	      }

	      var toLocation = resolveToLocation(to, router);
	      props.href = router.createHref(toLocation);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(toLocation, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	});

	exports.default = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(528);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2.default.createClass({
	  displayName: 'IndexLink',
	  render: function render() {
	    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	});

	exports.default = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = withRouter;

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _hoistNonReactStatics = __webpack_require__(507);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _ContextUtils = __webpack_require__(526);

	var _PropTypes = __webpack_require__(510);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function withRouter(WrappedComponent, options) {
	  var withRef = options && options.withRef;

	  var WithRouter = _react2.default.createClass({
	    displayName: 'WithRouter',

	    mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	    contextTypes: { router: _PropTypes.routerShape },
	    propTypes: { router: _PropTypes.routerShape },

	    getWrappedInstance: function getWrappedInstance() {
	      !withRef ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

	      return this.wrappedInstance;
	    },
	    render: function render() {
	      var _this = this;

	      var router = this.props.router || this.context.router;
	      var params = router.params,
	          location = router.location,
	          routes = router.routes;

	      var props = _extends({}, this.props, { router: router, params: params, location: location, routes: routes });

	      if (withRef) {
	        props.ref = function (c) {
	          _this.wrappedInstance = c;
	        };
	      }

	      return _react2.default.createElement(WrappedComponent, props);
	    }
	  });

	  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
	  WithRouter.WrappedComponent = WrappedComponent;

	  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(514);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(532);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(523);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRedirect = _react2.default.createClass({
	  displayName: 'IndexRedirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(509);

	var _PatternUtils = __webpack_require__(511);

	var _InternalPropTypes = __webpack_require__(523);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	/* eslint-disable react/require-render-return */

	var Redirect = _react2.default.createClass({
	  displayName: 'Redirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location,
	            params = nextState.params;


	        var pathname = void 0;
	        if (route.to.charAt(0) === '/') {
	          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }
	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(514);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(509);

	var _InternalPropTypes = __webpack_require__(523);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react2.default.PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRoute = _react2.default.createClass({
	  displayName: 'IndexRoute',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(509);

	var _InternalPropTypes = __webpack_require__(523);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	/* eslint-disable react/require-render-return */

	var Route = _react2.default.createClass({
	  displayName: 'Route',


	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _Actions = __webpack_require__(536);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(537);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(513);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(509);

	var _RouterUtils = __webpack_require__(527);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history,
	      routes = _ref.routes,
	      location = _ref.location,
	      options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

	  history = history ? history : (0, _createMemoryHistory2.default)(options);
	  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    location = history.getCurrentLocation();
	  }

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    var renderProps = void 0;

	    if (nextState) {
	      var router = (0, _RouterUtils.createRouterObject)(history, transitionManager, nextState);
	      renderProps = _extends({}, nextState, {
	        router: router,
	        matchContext: { transitionManager: transitionManager, router: router }
	      });
	    }

	    callback(error, redirectLocation && history.createLocation(redirectLocation, _Actions.REPLACE), renderProps);
	  });
	}

	exports.default = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 536 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	var PUSH = exports.PUSH = 'PUSH';

	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = exports.REPLACE = 'REPLACE';

	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = exports.POP = 'POP';

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = createMemoryHistory;

	var _useQueries = __webpack_require__(538);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(544);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	var _createMemoryHistory = __webpack_require__(545);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useQueries` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = (0, _createMemoryHistory2.default)(options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	  return history;
	}
	module.exports = exports['default'];

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _queryString = __webpack_require__(539);

	var _runTransitionHook = __webpack_require__(541);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _LocationUtils = __webpack_require__(542);

	var _PathUtils = __webpack_require__(543);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultStringifyQuery = function defaultStringifyQuery(query) {
	  return (0, _queryString.stringify)(query).replace(/%20/g, '+');
	};

	var defaultParseQueryString = _queryString.parse;

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	var useQueries = function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;


	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    var decodeQuery = function decodeQuery(location) {
	      if (!location) return location;

	      if (location.query == null) location.query = parseQueryString(location.search.substring(1));

	      return location;
	    };

	    var encodeQuery = function encodeQuery(location, query) {
	      if (query == null) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var queryString = stringifyQuery(query);
	      var search = queryString ? '?' + queryString : '';

	      return _extends({}, object, {
	        search: search
	      });
	    };

	    // Override all read methods with query-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return decodeQuery(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, decodeQuery(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(decodeQuery(location));
	      });
	    };

	    // Override all write methods with query-aware versions.
	    var push = function push(location) {
	      return history.push(encodeQuery(location, location.query));
	    };

	    var replace = function replace(location) {
	      return history.replace(encodeQuery(location, location.query));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(encodeQuery(location, location.query));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(encodeQuery(location, location.query));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var newLocation = history.createLocation.apply(history, [encodeQuery(location, location.query)].concat(args));

	      if (location.query) newLocation.query = (0, _LocationUtils.createQuery)(location.query);

	      return decodeQuery(newLocation);
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useQueries;

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(540);
	var objectAssign = __webpack_require__(4);

	function encode(value, opts) {
		if (opts.encode) {
			return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}

		return value;
	}

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);

		if (typeof str !== 'string') {
			return ret;
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return ret;
		}

		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (ret[key] === undefined) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}
		});

		return ret;
	};

	exports.stringify = function (obj, opts) {
		var defaults = {
			encode: true,
			strict: true
		};

		opts = objectAssign(defaults, opts);

		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return encode(key, opts);
			}

			if (Array.isArray(val)) {
				var result = [];

				val.slice().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}

					if (val2 === null) {
						result.push(encode(key, opts));
					} else {
						result.push(encode(key, opts) + '=' + encode(val2, opts));
					}
				});

				return result.join('&');
			}

			return encode(key, opts) + '=' + encode(val, opts);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 540 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var runTransitionHook = function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(result === undefined, 'You should not "return" in a transition hook with a callback argument; ' + 'call the callback instead') : void 0;
	  }
	};

	exports.default = runTransitionHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.statesAreEqual = exports.createLocation = exports.createQuery = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(543);

	var _Actions = __webpack_require__(536);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createQuery = exports.createQuery = function createQuery(props) {
	  return _extends(Object.create(null), props);
	};

	var createLocation = exports.createLocation = function createLocation() {
	  var input = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var object = typeof input === 'string' ? (0, _PathUtils.parsePath)(input) : input;

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!object.path, 'Location descriptor objects should have a `pathname`, not a `path`.') : void 0;

	  var pathname = object.pathname || '/';
	  var search = object.search || '';
	  var hash = object.hash || '';
	  var state = object.state;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	};

	var isDate = function isDate(object) {
	  return Object.prototype.toString.call(object) === '[object Date]';
	};

	var statesAreEqual = exports.statesAreEqual = function statesAreEqual(a, b) {
	  if (a === b) return true;

	  var typeofA = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var typeofB = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (typeofA !== typeofB) return false;

	  !(typeofA !== 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store functions in location state') : (0, _invariant2.default)(false) : void 0;

	  // Not the same object, but same type.
	  if (typeofA === 'object') {
	    !!(isDate(a) && isDate(b)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store Date objects in location state') : (0, _invariant2.default)(false) : void 0;

	    if (!Array.isArray(a)) {
	      var keysofA = Object.keys(a);
	      var keysofB = Object.keys(b);
	      return keysofA.length === keysofB.length && keysofA.every(function (key) {
	        return statesAreEqual(a[key], b[key]);
	      });
	    }

	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return statesAreEqual(item, b[index]);
	    });
	  }

	  // All other serializable types (string, number, boolean)
	  // should be strict equal.
	  return false;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.key === b.key &&
	  // a.action === b.action && // Different action !== location change.
	  a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && statesAreEqual(a.state, b.state);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = undefined;

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var addQueryStringValueToPath = exports.addQueryStringValueToPath = function addQueryStringValueToPath(path, key, value) {
	  var _parsePath = parsePath(path);

	  var pathname = _parsePath.pathname;
	  var search = _parsePath.search;
	  var hash = _parsePath.hash;


	  return createPath({
	    pathname: pathname,
	    search: search + (search.indexOf('?') === -1 ? '?' : '&') + key + '=' + value,
	    hash: hash
	  });
	};

	var stripQueryStringValueFromPath = exports.stripQueryStringValueFromPath = function stripQueryStringValueFromPath(path, key) {
	  var _parsePath2 = parsePath(path);

	  var pathname = _parsePath2.pathname;
	  var search = _parsePath2.search;
	  var hash = _parsePath2.hash;


	  return createPath({
	    pathname: pathname,
	    search: search.replace(new RegExp('([?&])' + key + '=[a-zA-Z0-9]+(&?)'), function (match, prefix, suffix) {
	      return prefix === '?' ? prefix : suffix;
	    }),
	    hash: hash
	  });
	};

	var getQueryStringValueFromPath = exports.getQueryStringValueFromPath = function getQueryStringValueFromPath(path, key) {
	  var _parsePath3 = parsePath(path);

	  var search = _parsePath3.search;

	  var match = search.match(new RegExp('[?&]' + key + '=([a-zA-Z0-9]+)'));
	  return match && match[1];
	};

	var extractPath = function extractPath(string) {
	  var match = string.match(/^(https?:)?\/\/[^\/]*/);
	  return match == null ? string : string.substring(match[0].length);
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(path === pathname, 'A path must be pathname + search + hash only, not a full URL like "%s"', path) : void 0;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  if (location == null || typeof location === 'string') return location;

	  var basename = location.basename;
	  var pathname = location.pathname;
	  var search = location.search;
	  var hash = location.hash;

	  var path = (basename || '') + pathname;

	  if (search && search !== '?') path += search;

	  if (hash) path += hash;

	  return path;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _runTransitionHook = __webpack_require__(541);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(543);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var useBasename = function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var basename = options.basename;


	    var addBasename = function addBasename(location) {
	      if (!location) return location;

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    };

	    var prependBasename = function prependBasename(location) {
	      if (!basename) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var pname = object.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, object, {
	        pathname: pathname
	      });
	    };

	    // Override all read methods with basename-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return addBasename(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, addBasename(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(addBasename(location));
	      });
	    };

	    // Override all write methods with basename-aware versions.
	    var push = function push(location) {
	      return history.push(prependBasename(location));
	    };

	    var replace = function replace(location) {
	      return history.replace(prependBasename(location));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(prependBasename(location));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(prependBasename(location));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useBasename;

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(542);

	var _PathUtils = __webpack_require__(543);

	var _createHistory = __webpack_require__(546);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	var _Actions = __webpack_require__(536);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createStateStorage = function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	};

	var createMemoryHistory = function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var getCurrentLocation = function getCurrentLocation() {
	    var entry = entries[current];
	    var path = (0, _PathUtils.createPath)(entry);

	    var key = void 0,
	        state = void 0;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    }

	    var init = (0, _PathUtils.parsePath)(path);

	    return (0, _LocationUtils.createLocation)(_extends({}, init, { state: state }), undefined, key);
	  };

	  var canGo = function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  };

	  var go = function go(n) {
	    if (!n) return;

	    if (!canGo(n)) {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Cannot go(%s) there is not enough history', n) : void 0;

	      return;
	    }

	    current += n;
	    var currentLocation = getCurrentLocation();

	    // Change action to POP
	    history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	  };

	  var pushLocation = function pushLocation(location) {
	    current += 1;

	    if (current < entries.length) entries.splice(current);

	    entries.push(location);

	    saveState(location.key, location.state);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    entries[current] = location;
	    saveState(location.key, location.state);
	  };

	  var history = (0, _createHistory2.default)(_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;


	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    return (0, _LocationUtils.createLocation)(entry);
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : (0, _invariant2.default)(false) : void 0;
	  }

	  var storage = createStateStorage(entries);

	  var saveState = function saveState(key, state) {
	    return storage[key] = state;
	  };

	  var readState = function readState(key) {
	    return storage[key];
	  };

	  return _extends({}, history, {
	    canGo: canGo
	  });
	};

	exports.default = createMemoryHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(547);

	var _PathUtils = __webpack_require__(543);

	var _runTransitionHook = __webpack_require__(541);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _Actions = __webpack_require__(536);

	var _LocationUtils = __webpack_require__(542);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createHistory = function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var getUserConfirmation = options.getUserConfirmation;
	  var pushLocation = options.pushLocation;
	  var replaceLocation = options.replaceLocation;
	  var go = options.go;
	  var keyLength = options.keyLength;


	  var currentLocation = void 0;
	  var pendingLocation = void 0;
	  var beforeListeners = [];
	  var listeners = [];
	  var allKeys = [];

	  var getCurrentIndex = function getCurrentIndex() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) return allKeys.indexOf(pendingLocation.key);

	    if (currentLocation) return allKeys.indexOf(currentLocation.key);

	    return -1;
	  };

	  var updateLocation = function updateLocation(nextLocation) {
	    var currentIndex = getCurrentIndex();

	    currentLocation = nextLocation;

	    if (currentLocation.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, currentIndex + 1), [currentLocation.key]);
	    } else if (currentLocation.action === _Actions.REPLACE) {
	      allKeys[currentIndex] = currentLocation.key;
	    }

	    listeners.forEach(function (listener) {
	      return listener(currentLocation);
	    });
	  };

	  var listenBefore = function listenBefore(listener) {
	    beforeListeners.push(listener);

	    return function () {
	      return beforeListeners = beforeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var listen = function listen(listener) {
	    listeners.push(listener);

	    return function () {
	      return listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, callback) {
	    (0, _AsyncUtils.loopAsync)(beforeListeners.length, function (index, next, done) {
	      (0, _runTransitionHook2.default)(beforeListeners[index], location, function (result) {
	        return result != null ? done(result) : next();
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          return callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  };

	  var transitionTo = function transitionTo(nextLocation) {
	    if (currentLocation && (0, _LocationUtils.locationsAreEqual)(currentLocation, nextLocation) || pendingLocation && (0, _LocationUtils.locationsAreEqual)(pendingLocation, nextLocation)) return; // Nothing to do

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted during confirmation

	      pendingLocation = null;

	      if (ok) {
	        // Treat PUSH to same path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = (0, _PathUtils.createPath)(currentLocation);
	          var nextPath = (0, _PathUtils.createPath)(nextLocation);

	          if (nextPath === prevPath && (0, _LocationUtils.statesAreEqual)(currentLocation.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (nextLocation.action === _Actions.POP) {
	          updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.PUSH) {
	          if (pushLocation(nextLocation) !== false) updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.REPLACE) {
	          if (replaceLocation(nextLocation) !== false) updateLocation(nextLocation);
	        }
	      } else if (currentLocation && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(currentLocation.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL
	      }
	    });
	  };

	  var push = function push(input) {
	    return transitionTo(createLocation(input, _Actions.PUSH));
	  };

	  var replace = function replace(input) {
	    return transitionTo(createLocation(input, _Actions.REPLACE));
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength || 6);
	  };

	  var createHref = function createHref(location) {
	    return (0, _PathUtils.createPath)(location);
	  };

	  var createLocation = function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
	    return (0, _LocationUtils.createLocation)(location, action, key);
	  };

	  return {
	    getCurrentLocation: getCurrentLocation,
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: _PathUtils.createPath,
	    createHref: createHref,
	    createLocation: createLocation
	  };
	};

	exports.default = createHistory;

/***/ },
/* 547 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var loopAsync = exports.loopAsync = function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var isSync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  var done = function done() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    isDone = true;

	    if (isSync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = args;
	      return;
	    }

	    callback.apply(undefined, args);
	  };

	  var next = function next() {
	    if (isDone) return;

	    hasNext = true;

	    if (isSync) return; // Iterate instead of recursing if possible.

	    isSync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work(currentTurn++, next, done);
	    }

	    isSync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(undefined, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  };

	  next();
	};

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = useRouterHistory;

	var _useQueries = __webpack_require__(538);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(544);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	    return history;
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(524);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(514);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    middlewares.forEach(function (middleware, index) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
	    });
	  }

	  var withContext = middlewares.map(function (middleware) {
	    return middleware.renderRouterContext;
	  }).filter(Boolean);
	  var withComponent = middlewares.map(function (middleware) {
	    return middleware.renderRouteComponent;
	  }).filter(Boolean);

	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _react.createElement;
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createBrowserHistory = __webpack_require__(551);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _createRouterHistory = __webpack_require__(557);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(552);

	var _BrowserProtocol = __webpack_require__(553);

	var BrowserProtocol = _interopRequireWildcard(_BrowserProtocol);

	var _RefreshProtocol = __webpack_require__(556);

	var RefreshProtocol = _interopRequireWildcard(_RefreshProtocol);

	var _DOMUtils = __webpack_require__(554);

	var _createHistory = __webpack_require__(546);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve clean URLs. You can force this
	 * behavior using { forceRefresh: true } in options.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var useRefresh = options.forceRefresh || !(0, _DOMUtils.supportsHistory)();
	  var Protocol = useRefresh ? RefreshProtocol : BrowserProtocol;

	  var getUserConfirmation = Protocol.getUserConfirmation;
	  var getCurrentLocation = Protocol.getCurrentLocation;
	  var pushLocation = Protocol.pushLocation;
	  var replaceLocation = Protocol.replaceLocation;
	  var go = Protocol.go;


	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = BrowserProtocol.startListener(history.transitionTo);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen
	  });
	};

	exports.default = createBrowserHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 552 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.go = exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getUserConfirmation = exports.getCurrentLocation = undefined;

	var _LocationUtils = __webpack_require__(542);

	var _DOMUtils = __webpack_require__(554);

	var _DOMStateStorage = __webpack_require__(555);

	var _PathUtils = __webpack_require__(543);

	var _ExecutionEnvironment = __webpack_require__(552);

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var needsHashchangeListener = _ExecutionEnvironment.canUseDOM && !(0, _DOMUtils.supportsPopstateOnHashchange)();

	var _createLocation = function _createLocation(historyState) {
	  var key = historyState && historyState.key;

	  return (0, _LocationUtils.createLocation)({
	    pathname: window.location.pathname,
	    search: window.location.search,
	    hash: window.location.hash,
	    state: key ? (0, _DOMStateStorage.readState)(key) : undefined
	  }, undefined, key);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  var historyState = void 0;
	  try {
	    historyState = window.history.state || {};
	  } catch (error) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    historyState = {};
	  }

	  return _createLocation(historyState);
	};

	var getUserConfirmation = exports.getUserConfirmation = function getUserConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	var startListener = exports.startListener = function startListener(listener) {
	  var handlePopState = function handlePopState(event) {
	    if (event.state !== undefined) // Ignore extraneous popstate events in WebKit
	      listener(_createLocation(event.state));
	  };

	  (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	  var handleUnpoppedHashChange = function handleUnpoppedHashChange() {
	    return listener(getCurrentLocation());
	  };

	  if (needsHashchangeListener) {
	    (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	  }

	  return function () {
	    (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	    if (needsHashchangeListener) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	    }
	  };
	};

	var updateLocation = function updateLocation(location, updateState) {
	  var state = location.state;
	  var key = location.key;


	  if (state !== undefined) (0, _DOMStateStorage.saveState)(key, state);

	  updateState({ key: key }, (0, _PathUtils.createPath)(location));
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.pushState(state, null, path);
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.replaceState(state, null, path);
	  });
	};

	var go = exports.go = function go(n) {
	  if (n) window.history.go(n);
	};

/***/ },
/* 554 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopstateOnHashchange = exports.supportsPopstateOnHashchange = function supportsPopstateOnHashchange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.readState = exports.saveState = undefined;

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var QuotaExceededErrors = {
	  QuotaExceededError: true,
	  QUOTA_EXCEEDED_ERR: true
	};

	var SecurityErrors = {
	  SecurityError: true
	};

	var KeyPrefix = '@@History/';

	var createKey = function createKey(key) {
	  return KeyPrefix + key;
	};

	var saveState = exports.saveState = function saveState(key, state) {
	  if (!window.sessionStorage) {
	    // Session storage is not available or hidden.
	    // sessionStorage is undefined in Internet Explorer when served via file protocol.
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available') : void 0;

	    return;
	  }

	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available due to security settings') : void 0;

	      return;
	    }

	    if (QuotaExceededErrors[error.name] && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : void 0;

	      return;
	    }

	    throw error;
	  }
	};

	var readState = exports.readState = function readState(key) {
	  var json = void 0;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to read state; sessionStorage is not available due to security settings') : void 0;

	      return undefined;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return undefined;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(553);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _LocationUtils = __webpack_require__(542);

	var _PathUtils = __webpack_require__(543);

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  return (0, _LocationUtils.createLocation)(window.location);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  window.location.href = (0, _PathUtils.createPath)(location);
	  return false; // Don't update location
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  window.location.replace((0, _PathUtils.createPath)(location));
	  return false; // Don't update location
	};

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (createHistory) {
	  var history = void 0;
	  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
	  return history;
	};

	var _useRouterHistory = __webpack_require__(548);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	module.exports = exports['default'];

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createHashHistory = __webpack_require__(559);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _createRouterHistory = __webpack_require__(557);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(342);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(552);

	var _DOMUtils = __webpack_require__(554);

	var _HashProtocol = __webpack_require__(560);

	var HashProtocol = _interopRequireWildcard(_HashProtocol);

	var _createHistory = __webpack_require__(546);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DefaultQueryKey = '_k';

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!' + path;
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substring(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '/' ? path.substring(1) : path;
	    },
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	var createHashHistory = function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var queryKey = options.queryKey;
	  var hashType = options.hashType;


	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(queryKey !== false, 'Using { queryKey: false } no longer works. Instead, just don\'t ' + 'use location state if you don\'t want a key in your URL query string') : void 0;

	  if (typeof queryKey !== 'string') queryKey = DefaultQueryKey;

	  if (hashType == null) hashType = 'slash';

	  if (!(hashType in HashPathCoders)) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Invalid hash type: %s', hashType) : void 0;

	    hashType = 'slash';
	  }

	  var pathCoder = HashPathCoders[hashType];

	  var getUserConfirmation = HashProtocol.getUserConfirmation;


	  var getCurrentLocation = function getCurrentLocation() {
	    return HashProtocol.getCurrentLocation(pathCoder, queryKey);
	  };

	  var pushLocation = function pushLocation(location) {
	    return HashProtocol.pushLocation(location, pathCoder, queryKey);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    return HashProtocol.replaceLocation(location, pathCoder, queryKey);
	  };

	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: HashProtocol.go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = HashProtocol.startListener(history.transitionTo, pathCoder, queryKey);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  var goIsSupportedWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var go = function go(n) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

	    history.go(n);
	  };

	  var createHref = function createHref(path) {
	    return '#' + pathCoder.encodePath(history.createHref(path));
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    go: go,
	    createHref: createHref
	  });
	};

	exports.default = createHashHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(553);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _warning = __webpack_require__(515);

	var _warning2 = _interopRequireDefault(_warning);

	var _LocationUtils = __webpack_require__(542);

	var _DOMUtils = __webpack_require__(554);

	var _DOMStateStorage = __webpack_require__(555);

	var _PathUtils = __webpack_require__(543);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {
	  var path = pathCoder.decodePath(getHashPath());
	  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);

	  var state = void 0;
	  if (key) {
	    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);
	    state = (0, _DOMStateStorage.readState)(key);
	  }

	  var init = (0, _PathUtils.parsePath)(path);
	  init.state = state;

	  return (0, _LocationUtils.createLocation)(init, undefined, key);
	};

	var prevLocation = void 0;

	var startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {
	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = pathCoder.encodePath(path);

	    if (path !== encodedPath) {
	      // Always be sure we have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var currentLocation = getCurrentLocation(pathCoder, queryKey);

	      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events

	      prevLocation = currentLocation;

	      listener(currentLocation);
	    }
	  };

	  // Ensure the hash is encoded properly.
	  var path = getHashPath();
	  var encodedPath = pathCoder.encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);

	  return function () {
	    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	  };
	};

	var updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {
	  var state = location.state;
	  var key = location.key;


	  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));

	  if (state !== undefined) {
	    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);
	    (0, _DOMStateStorage.saveState)(key, state);
	  }

	  prevLocation = location;

	  updateHash(path);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) {
	      pushHashPath(path);
	    } else {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;
	    }
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) replaceHashPath(path);
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.routerMiddleware = exports.routerActions = exports.goForward = exports.goBack = exports.go = exports.replace = exports.push = exports.CALL_HISTORY_METHOD = exports.routerReducer = exports.LOCATION_CHANGE = exports.syncHistoryWithStore = undefined;

	var _reducer = __webpack_require__(562);

	Object.defineProperty(exports, 'LOCATION_CHANGE', {
	  enumerable: true,
	  get: function get() {
	    return _reducer.LOCATION_CHANGE;
	  }
	});
	Object.defineProperty(exports, 'routerReducer', {
	  enumerable: true,
	  get: function get() {
	    return _reducer.routerReducer;
	  }
	});

	var _actions = __webpack_require__(563);

	Object.defineProperty(exports, 'CALL_HISTORY_METHOD', {
	  enumerable: true,
	  get: function get() {
	    return _actions.CALL_HISTORY_METHOD;
	  }
	});
	Object.defineProperty(exports, 'push', {
	  enumerable: true,
	  get: function get() {
	    return _actions.push;
	  }
	});
	Object.defineProperty(exports, 'replace', {
	  enumerable: true,
	  get: function get() {
	    return _actions.replace;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _actions.go;
	  }
	});
	Object.defineProperty(exports, 'goBack', {
	  enumerable: true,
	  get: function get() {
	    return _actions.goBack;
	  }
	});
	Object.defineProperty(exports, 'goForward', {
	  enumerable: true,
	  get: function get() {
	    return _actions.goForward;
	  }
	});
	Object.defineProperty(exports, 'routerActions', {
	  enumerable: true,
	  get: function get() {
	    return _actions.routerActions;
	  }
	});

	var _sync = __webpack_require__(564);

	var _sync2 = _interopRequireDefault(_sync);

	var _middleware = __webpack_require__(565);

	var _middleware2 = _interopRequireDefault(_middleware);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	exports.syncHistoryWithStore = _sync2['default'];
	exports.routerMiddleware = _middleware2['default'];

/***/ },
/* 562 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.routerReducer = routerReducer;
	/**
	 * This action type will be dispatched when your history
	 * receives a location change.
	 */
	var LOCATION_CHANGE = exports.LOCATION_CHANGE = '@@router/LOCATION_CHANGE';

	var initialState = {
	  locationBeforeTransitions: null
	};

	/**
	 * This reducer will update the state with the most recent location history
	 * has transitioned to. This may not be in sync with the router, particularly
	 * if you have asynchronously-loaded routes, so reading from and relying on
	 * this state is discouraged.
	 */
	function routerReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;

	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      type = _ref.type,
	      payload = _ref.payload;

	  if (type === LOCATION_CHANGE) {
	    return _extends({}, state, { locationBeforeTransitions: payload });
	  }

	  return state;
	}

/***/ },
/* 563 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This action type will be dispatched by the history actions below.
	 * If you're writing a middleware to watch for navigation events, be sure to
	 * look for actions of this type.
	 */
	var CALL_HISTORY_METHOD = exports.CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';

	function updateLocation(method) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return {
	      type: CALL_HISTORY_METHOD,
	      payload: { method: method, args: args }
	    };
	  };
	}

	/**
	 * These actions correspond to the history API.
	 * The associated routerMiddleware will capture these events before they get to
	 * your reducer and reissue them as the matching function on your history.
	 */
	var push = exports.push = updateLocation('push');
	var replace = exports.replace = updateLocation('replace');
	var go = exports.go = updateLocation('go');
	var goBack = exports.goBack = updateLocation('goBack');
	var goForward = exports.goForward = updateLocation('goForward');

	var routerActions = exports.routerActions = { push: push, replace: replace, go: go, goBack: goBack, goForward: goForward };

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = syncHistoryWithStore;

	var _reducer = __webpack_require__(562);

	var defaultSelectLocationState = function defaultSelectLocationState(state) {
	  return state.routing;
	};

	/**
	 * This function synchronizes your history state with the Redux store.
	 * Location changes flow from history to the store. An enhanced history is
	 * returned with a listen method that responds to store updates for location.
	 *
	 * When this history is provided to the router, this means the location data
	 * will flow like this:
	 * history.push -> store.dispatch -> enhancedHistory.listen -> router
	 * This ensures that when the store state changes due to a replay or other
	 * event, the router will be updated appropriately and can transition to the
	 * correct router state.
	 */
	function syncHistoryWithStore(history, store) {
	  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref$selectLocationSt = _ref.selectLocationState,
	      selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,
	      _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,
	      adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla;

	  // Ensure that the reducer is mounted on the store and functioning properly.
	  if (typeof selectLocationState(store.getState()) === 'undefined') {
	    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');
	  }

	  var initialLocation = void 0;
	  var isTimeTraveling = void 0;
	  var unsubscribeFromStore = void 0;
	  var unsubscribeFromHistory = void 0;
	  var currentLocation = void 0;

	  // What does the store say about current location?
	  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {
	    var locationState = selectLocationState(store.getState());
	    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);
	  };

	  // Init initialLocation with potential location in store
	  initialLocation = getLocationInStore();

	  // If the store is replayed, update the URL in the browser to match.
	  if (adjustUrlOnReplay) {
	    var handleStoreChange = function handleStoreChange() {
	      var locationInStore = getLocationInStore(true);
	      if (currentLocation === locationInStore || initialLocation === locationInStore) {
	        return;
	      }

	      // Update address bar to reflect store state
	      isTimeTraveling = true;
	      currentLocation = locationInStore;
	      history.transitionTo(_extends({}, locationInStore, {
	        action: 'PUSH'
	      }));
	      isTimeTraveling = false;
	    };

	    unsubscribeFromStore = store.subscribe(handleStoreChange);
	    handleStoreChange();
	  }

	  // Whenever location changes, dispatch an action to get it in the store
	  var handleLocationChange = function handleLocationChange(location) {
	    // ... unless we just caused that location change
	    if (isTimeTraveling) {
	      return;
	    }

	    // Remember where we are
	    currentLocation = location;

	    // Are we being called for the first time?
	    if (!initialLocation) {
	      // Remember as a fallback in case state is reset
	      initialLocation = location;

	      // Respect persisted location, if any
	      if (getLocationInStore()) {
	        return;
	      }
	    }

	    // Tell the store to update by dispatching an action
	    store.dispatch({
	      type: _reducer.LOCATION_CHANGE,
	      payload: location
	    });
	  };
	  unsubscribeFromHistory = history.listen(handleLocationChange);

	  // support history 3.x
	  if (history.getCurrentLocation) {
	    handleLocationChange(history.getCurrentLocation());
	  }

	  // The enhanced history uses store as source of truth
	  return _extends({}, history, {
	    // The listeners are subscribed to the store instead of history
	    listen: function listen(listener) {
	      // Copy of last location.
	      var lastPublishedLocation = getLocationInStore(true);

	      // Keep track of whether we unsubscribed, as Redux store
	      // only applies changes in subscriptions on next dispatch
	      var unsubscribed = false;
	      var unsubscribeFromStore = store.subscribe(function () {
	        var currentLocation = getLocationInStore(true);
	        if (currentLocation === lastPublishedLocation) {
	          return;
	        }
	        lastPublishedLocation = currentLocation;
	        if (!unsubscribed) {
	          listener(lastPublishedLocation);
	        }
	      });

	      // History listeners expect a synchronous call. Make the first call to the
	      // listener after subscribing to the store, in case the listener causes a
	      // location change (e.g. when it redirects)
	      listener(lastPublishedLocation);

	      // Let user unsubscribe later
	      return function () {
	        unsubscribed = true;
	        unsubscribeFromStore();
	      };
	    },


	    // It also provides a way to destroy internal listeners
	    unsubscribe: function unsubscribe() {
	      if (adjustUrlOnReplay) {
	        unsubscribeFromStore();
	      }
	      unsubscribeFromHistory();
	    }
	  });
	}

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = routerMiddleware;

	var _actions = __webpack_require__(563);

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	/**
	 * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
	 * provided history object. This will prevent these actions from reaching your
	 * reducer or any middleware that comes after this one.
	 */
	function routerMiddleware(history) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type !== _actions.CALL_HISTORY_METHOD) {
	          return next(action);
	        }

	        var _action$payload = action.payload,
	            method = _action$payload.method,
	            args = _action$payload.args;

	        history[method].apply(history, _toConsumableArray(args));
	      };
	    };
	  };
	}

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _core = __webpack_require__(567);

	var _helpers = __webpack_require__(568);

	var _defaults = __webpack_require__(571);

	var _defaults2 = _interopRequireDefault(_defaults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Creates logger with following options
	 *
	 * @namespace
	 * @param {object} options - options for logger
	 * @param {string | function | object} options.level - console[level]
	 * @param {boolean} options.duration - print duration of each action?
	 * @param {boolean} options.timestamp - print timestamp with each action?
	 * @param {object} options.colors - custom colors
	 * @param {object} options.logger - implementation of the `console` API
	 * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?
	 * @param {boolean} options.collapsed - is group collapsed?
	 * @param {boolean} options.predicate - condition which resolves logger behavior
	 * @param {function} options.stateTransformer - transform state before print
	 * @param {function} options.actionTransformer - transform action before print
	 * @param {function} options.errorTransformer - transform error before print
	 *
	 * @returns {function} logger middleware
	 */
	function createLogger() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  var loggerOptions = _extends({}, _defaults2.default, options);

	  var logger = loggerOptions.logger;
	  var transformer = loggerOptions.transformer;
	  var stateTransformer = loggerOptions.stateTransformer;
	  var errorTransformer = loggerOptions.errorTransformer;
	  var predicate = loggerOptions.predicate;
	  var logErrors = loggerOptions.logErrors;
	  var diffPredicate = loggerOptions.diffPredicate;

	  // Return if 'console' object is not defined

	  if (typeof logger === 'undefined') {
	    return function () {
	      return function (next) {
	        return function (action) {
	          return next(action);
	        };
	      };
	    };
	  }

	  if (transformer) {
	    console.error('Option \'transformer\' is deprecated, use \'stateTransformer\' instead!'); // eslint-disable-line no-console
	  }

	  var logBuffer = [];

	  return function (_ref) {
	    var getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        // Exit early if predicate function returns 'false'
	        if (typeof predicate === 'function' && !predicate(getState, action)) {
	          return next(action);
	        }

	        var logEntry = {};
	        logBuffer.push(logEntry);

	        logEntry.started = _helpers.timer.now();
	        logEntry.startedTime = new Date();
	        logEntry.prevState = stateTransformer(getState());
	        logEntry.action = action;

	        var returnedValue = undefined;
	        if (logErrors) {
	          try {
	            returnedValue = next(action);
	          } catch (e) {
	            logEntry.error = errorTransformer(e);
	          }
	        } else {
	          returnedValue = next(action);
	        }

	        logEntry.took = _helpers.timer.now() - logEntry.started;
	        logEntry.nextState = stateTransformer(getState());

	        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;

	        (0, _core.printBuffer)(logBuffer, _extends({}, loggerOptions, { diff: diff }));
	        logBuffer.length = 0;

	        if (logEntry.error) throw logEntry.error;
	        return returnedValue;
	      };
	    };
	  };
	}

	exports.default = createLogger;
	module.exports = exports['default'];

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.printBuffer = printBuffer;

	var _helpers = __webpack_require__(568);

	var _diff = __webpack_require__(569);

	var _diff2 = _interopRequireDefault(_diff);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

	/**
	 * Get log level string based on supplied params
	 *
	 * @param {string | function | object} level - console[level]
	 * @param {object} action - selected action
	 * @param {array} payload - selected payload
	 * @param {string} type - log entry type
	 *
	 * @returns {string} level
	 */
	function getLogLevel(level, action, payload, type) {
	  switch (typeof level === 'undefined' ? 'undefined' : _typeof(level)) {
	    case 'object':
	      return typeof level[type] === 'function' ? level[type].apply(level, _toConsumableArray(payload)) : level[type];
	    case 'function':
	      return level(action);
	    default:
	      return level;
	  }
	}

	function defaultTitleFormatter(options) {
	  var timestamp = options.timestamp;
	  var duration = options.duration;

	  return function (action, time, took) {
	    var parts = ['action'];
	    if (timestamp) {
	      parts.push('@ ' + time);
	    }
	    parts.push(action.type);
	    if (duration) {
	      parts.push('(in ' + took.toFixed(2) + ' ms)');
	    }
	    return parts.join(' ');
	  };
	}

	function printBuffer(buffer, options) {
	  var logger = options.logger;
	  var actionTransformer = options.actionTransformer;
	  var _options$titleFormatt = options.titleFormatter;
	  var titleFormatter = _options$titleFormatt === undefined ? defaultTitleFormatter(options) : _options$titleFormatt;
	  var collapsed = options.collapsed;
	  var colors = options.colors;
	  var level = options.level;
	  var diff = options.diff;

	  buffer.forEach(function (logEntry, key) {
	    var started = logEntry.started;
	    var startedTime = logEntry.startedTime;
	    var action = logEntry.action;
	    var prevState = logEntry.prevState;
	    var error = logEntry.error;
	    var took = logEntry.took;
	    var nextState = logEntry.nextState;

	    var nextEntry = buffer[key + 1];

	    if (nextEntry) {
	      nextState = nextEntry.prevState;
	      took = nextEntry.started - started;
	    }

	    // Message
	    var formattedAction = actionTransformer(action);
	    var isCollapsed = typeof collapsed === 'function' ? collapsed(function () {
	      return nextState;
	    }, action) : collapsed;

	    var formattedTime = (0, _helpers.formatTime)(startedTime);
	    var titleCSS = colors.title ? 'color: ' + colors.title(formattedAction) + ';' : null;
	    var title = titleFormatter(formattedAction, formattedTime, took);

	    // Render
	    try {
	      if (isCollapsed) {
	        if (colors.title) logger.groupCollapsed('%c ' + title, titleCSS);else logger.groupCollapsed(title);
	      } else {
	        if (colors.title) logger.group('%c ' + title, titleCSS);else logger.group(title);
	      }
	    } catch (e) {
	      logger.log(title);
	    }

	    var prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');
	    var actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');
	    var errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');
	    var nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');

	    if (prevStateLevel) {
	      if (colors.prevState) logger[prevStateLevel]('%c prev state', 'color: ' + colors.prevState(prevState) + '; font-weight: bold', prevState);else logger[prevStateLevel]('prev state', prevState);
	    }

	    if (actionLevel) {
	      if (colors.action) logger[actionLevel]('%c action', 'color: ' + colors.action(formattedAction) + '; font-weight: bold', formattedAction);else logger[actionLevel]('action', formattedAction);
	    }

	    if (error && errorLevel) {
	      if (colors.error) logger[errorLevel]('%c error', 'color: ' + colors.error(error, prevState) + '; font-weight: bold', error);else logger[errorLevel]('error', error);
	    }

	    if (nextStateLevel) {
	      if (colors.nextState) logger[nextStateLevel]('%c next state', 'color: ' + colors.nextState(nextState) + '; font-weight: bold', nextState);else logger[nextStateLevel]('next state', nextState);
	    }

	    if (diff) {
	      (0, _diff2.default)(prevState, nextState, logger, isCollapsed);
	    }

	    try {
	      logger.groupEnd();
	    } catch (e) {
	      logger.log('—— log end ——');
	    }
	  });
	}

/***/ },
/* 568 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var repeat = exports.repeat = function repeat(str, times) {
	  return new Array(times + 1).join(str);
	};

	var pad = exports.pad = function pad(num, maxLength) {
	  return repeat("0", maxLength - num.toString().length) + num;
	};

	var formatTime = exports.formatTime = function formatTime(time) {
	  return pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
	};

	// Use performance API if it's available in order to get better precision
	var timer = exports.timer = typeof performance !== "undefined" && performance !== null && typeof performance.now === "function" ? performance : Date;

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = diffLogger;

	var _deepDiff = __webpack_require__(570);

	var _deepDiff2 = _interopRequireDefault(_deepDiff);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// https://github.com/flitbit/diff#differences
	var dictionary = {
	  'E': {
	    color: '#2196F3',
	    text: 'CHANGED:'
	  },
	  'N': {
	    color: '#4CAF50',
	    text: 'ADDED:'
	  },
	  'D': {
	    color: '#F44336',
	    text: 'DELETED:'
	  },
	  'A': {
	    color: '#2196F3',
	    text: 'ARRAY:'
	  }
	};

	function style(kind) {
	  return 'color: ' + dictionary[kind].color + '; font-weight: bold';
	}

	function render(diff) {
	  var kind = diff.kind;
	  var path = diff.path;
	  var lhs = diff.lhs;
	  var rhs = diff.rhs;
	  var index = diff.index;
	  var item = diff.item;

	  switch (kind) {
	    case 'E':
	      return path.join('.') + ' ' + lhs + ' → ' + rhs;
	    case 'N':
	      return path.join('.') + ' ' + rhs;
	    case 'D':
	      return '' + path.join('.');
	    case 'A':
	      return [path.join('.') + '[' + index + ']', item];
	    default:
	      return null;
	  }
	}

	function diffLogger(prevState, newState, logger, isCollapsed) {
	  var diff = (0, _deepDiff2.default)(prevState, newState);

	  try {
	    if (isCollapsed) {
	      logger.groupCollapsed('diff');
	    } else {
	      logger.group('diff');
	    }
	  } catch (e) {
	    logger.log('diff');
	  }

	  if (diff) {
	    diff.forEach(function (elem) {
	      var kind = elem.kind;

	      var output = render(elem);

	      logger.log('%c ' + dictionary[kind].text, style(kind), output);
	    });
	  } else {
	    logger.log('—— no diff ——');
	  }

	  try {
	    logger.groupEnd();
	  } catch (e) {
	    logger.log('—— diff end —— ');
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * deep-diff.
	 * Licensed under the MIT License.
	 */
	;(function(root, factory) {
	  'use strict';
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return factory();
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    root.DeepDiff = factory();
	  }
	}(this, function(undefined) {
	  'use strict';

	  var $scope, conflict, conflictResolution = [];
	  if (typeof global === 'object' && global) {
	    $scope = global;
	  } else if (typeof window !== 'undefined') {
	    $scope = window;
	  } else {
	    $scope = {};
	  }
	  conflict = $scope.DeepDiff;
	  if (conflict) {
	    conflictResolution.push(
	      function() {
	        if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {
	          $scope.DeepDiff = conflict;
	          conflict = undefined;
	        }
	      });
	  }

	  // nodejs compatible on server side and in the browser.
	  function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  }

	  function Diff(kind, path) {
	    Object.defineProperty(this, 'kind', {
	      value: kind,
	      enumerable: true
	    });
	    if (path && path.length) {
	      Object.defineProperty(this, 'path', {
	        value: path,
	        enumerable: true
	      });
	    }
	  }

	  function DiffEdit(path, origin, value) {
	    DiffEdit.super_.call(this, 'E', path);
	    Object.defineProperty(this, 'lhs', {
	      value: origin,
	      enumerable: true
	    });
	    Object.defineProperty(this, 'rhs', {
	      value: value,
	      enumerable: true
	    });
	  }
	  inherits(DiffEdit, Diff);

	  function DiffNew(path, value) {
	    DiffNew.super_.call(this, 'N', path);
	    Object.defineProperty(this, 'rhs', {
	      value: value,
	      enumerable: true
	    });
	  }
	  inherits(DiffNew, Diff);

	  function DiffDeleted(path, value) {
	    DiffDeleted.super_.call(this, 'D', path);
	    Object.defineProperty(this, 'lhs', {
	      value: value,
	      enumerable: true
	    });
	  }
	  inherits(DiffDeleted, Diff);

	  function DiffArray(path, index, item) {
	    DiffArray.super_.call(this, 'A', path);
	    Object.defineProperty(this, 'index', {
	      value: index,
	      enumerable: true
	    });
	    Object.defineProperty(this, 'item', {
	      value: item,
	      enumerable: true
	    });
	  }
	  inherits(DiffArray, Diff);

	  function arrayRemove(arr, from, to) {
	    var rest = arr.slice((to || from) + 1 || arr.length);
	    arr.length = from < 0 ? arr.length + from : from;
	    arr.push.apply(arr, rest);
	    return arr;
	  }

	  function realTypeOf(subject) {
	    var type = typeof subject;
	    if (type !== 'object') {
	      return type;
	    }

	    if (subject === Math) {
	      return 'math';
	    } else if (subject === null) {
	      return 'null';
	    } else if (Array.isArray(subject)) {
	      return 'array';
	    } else if (Object.prototype.toString.call(subject) === '[object Date]') {
	      return 'date';
	    } else if (typeof subject.toString !== 'undefined' && /^\/.*\//.test(subject.toString())) {
	      return 'regexp';
	    }
	    return 'object';
	  }

	  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {
	    path = path || [];
	    var currentPath = path.slice(0);
	    if (typeof key !== 'undefined') {
	      if (prefilter) {
	        if (typeof(prefilter) === 'function' && prefilter(currentPath, key)) { return; }
	        else if (typeof(prefilter) === 'object') {
	          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) { return; }
	          if (prefilter.normalize) {
	            var alt = prefilter.normalize(currentPath, key, lhs, rhs);
	            if (alt) {
	              lhs = alt[0];
	              rhs = alt[1];
	            }
	          }
	        }
	      }
	      currentPath.push(key);
	    }

	    // Use string comparison for regexes
	    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {
	      lhs = lhs.toString();
	      rhs = rhs.toString();
	    }

	    var ltype = typeof lhs;
	    var rtype = typeof rhs;
	    if (ltype === 'undefined') {
	      if (rtype !== 'undefined') {
	        changes(new DiffNew(currentPath, rhs));
	      }
	    } else if (rtype === 'undefined') {
	      changes(new DiffDeleted(currentPath, lhs));
	    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {
	      changes(new DiffEdit(currentPath, lhs, rhs));
	    } else if (Object.prototype.toString.call(lhs) === '[object Date]' && Object.prototype.toString.call(rhs) === '[object Date]' && ((lhs - rhs) !== 0)) {
	      changes(new DiffEdit(currentPath, lhs, rhs));
	    } else if (ltype === 'object' && lhs !== null && rhs !== null) {
	      stack = stack || [];
	      if (stack.indexOf(lhs) < 0) {
	        stack.push(lhs);
	        if (Array.isArray(lhs)) {
	          var i, len = lhs.length;
	          for (i = 0; i < lhs.length; i++) {
	            if (i >= rhs.length) {
	              changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));
	            } else {
	              deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);
	            }
	          }
	          while (i < rhs.length) {
	            changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));
	          }
	        } else {
	          var akeys = Object.keys(lhs);
	          var pkeys = Object.keys(rhs);
	          akeys.forEach(function(k, i) {
	            var other = pkeys.indexOf(k);
	            if (other >= 0) {
	              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);
	              pkeys = arrayRemove(pkeys, other);
	            } else {
	              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);
	            }
	          });
	          pkeys.forEach(function(k) {
	            deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);
	          });
	        }
	        stack.length = stack.length - 1;
	      }
	    } else if (lhs !== rhs) {
	      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {
	        changes(new DiffEdit(currentPath, lhs, rhs));
	      }
	    }
	  }

	  function accumulateDiff(lhs, rhs, prefilter, accum) {
	    accum = accum || [];
	    deepDiff(lhs, rhs,
	      function(diff) {
	        if (diff) {
	          accum.push(diff);
	        }
	      },
	      prefilter);
	    return (accum.length) ? accum : undefined;
	  }

	  function applyArrayChange(arr, index, change) {
	    if (change.path && change.path.length) {
	      var it = arr[index],
	          i, u = change.path.length - 1;
	      for (i = 0; i < u; i++) {
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          applyArrayChange(it[change.path[i]], change.index, change.item);
	          break;
	        case 'D':
	          delete it[change.path[i]];
	          break;
	        case 'E':
	        case 'N':
	          it[change.path[i]] = change.rhs;
	          break;
	      }
	    } else {
	      switch (change.kind) {
	        case 'A':
	          applyArrayChange(arr[index], change.index, change.item);
	          break;
	        case 'D':
	          arr = arrayRemove(arr, index);
	          break;
	        case 'E':
	        case 'N':
	          arr[index] = change.rhs;
	          break;
	      }
	    }
	    return arr;
	  }

	  function applyChange(target, source, change) {
	    if (target && source && change && change.kind) {
	      var it = target,
	          i = -1,
	          last = change.path ? change.path.length - 1 : 0;
	      while (++i < last) {
	        if (typeof it[change.path[i]] === 'undefined') {
	          it[change.path[i]] = (typeof change.path[i] === 'number') ? [] : {};
	        }
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);
	          break;
	        case 'D':
	          delete it[change.path[i]];
	          break;
	        case 'E':
	        case 'N':
	          it[change.path[i]] = change.rhs;
	          break;
	      }
	    }
	  }

	  function revertArrayChange(arr, index, change) {
	    if (change.path && change.path.length) {
	      // the structure of the object at the index has changed...
	      var it = arr[index],
	          i, u = change.path.length - 1;
	      for (i = 0; i < u; i++) {
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          revertArrayChange(it[change.path[i]], change.index, change.item);
	          break;
	        case 'D':
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'E':
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'N':
	          delete it[change.path[i]];
	          break;
	      }
	    } else {
	      // the array item is different...
	      switch (change.kind) {
	        case 'A':
	          revertArrayChange(arr[index], change.index, change.item);
	          break;
	        case 'D':
	          arr[index] = change.lhs;
	          break;
	        case 'E':
	          arr[index] = change.lhs;
	          break;
	        case 'N':
	          arr = arrayRemove(arr, index);
	          break;
	      }
	    }
	    return arr;
	  }

	  function revertChange(target, source, change) {
	    if (target && source && change && change.kind) {
	      var it = target,
	          i, u;
	      u = change.path.length - 1;
	      for (i = 0; i < u; i++) {
	        if (typeof it[change.path[i]] === 'undefined') {
	          it[change.path[i]] = {};
	        }
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          // Array was modified...
	          // it will be an array...
	          revertArrayChange(it[change.path[i]], change.index, change.item);
	          break;
	        case 'D':
	          // Item was deleted...
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'E':
	          // Item was edited...
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'N':
	          // Item is new...
	          delete it[change.path[i]];
	          break;
	      }
	    }
	  }

	  function applyDiff(target, source, filter) {
	    if (target && source) {
	      var onChange = function(change) {
	        if (!filter || filter(target, source, change)) {
	          applyChange(target, source, change);
	        }
	      };
	      deepDiff(target, source, onChange);
	    }
	  }

	  Object.defineProperties(accumulateDiff, {

	    diff: {
	      value: accumulateDiff,
	      enumerable: true
	    },
	    observableDiff: {
	      value: deepDiff,
	      enumerable: true
	    },
	    applyDiff: {
	      value: applyDiff,
	      enumerable: true
	    },
	    applyChange: {
	      value: applyChange,
	      enumerable: true
	    },
	    revertChange: {
	      value: revertChange,
	      enumerable: true
	    },
	    isConflict: {
	      value: function() {
	        return 'undefined' !== typeof conflict;
	      },
	      enumerable: true
	    },
	    noConflict: {
	      value: function() {
	        if (conflictResolution) {
	          conflictResolution.forEach(function(it) {
	            it();
	          });
	          conflictResolution = null;
	        }
	        return accumulateDiff;
	      },
	      enumerable: true
	    }
	  });

	  return accumulateDiff;
	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 571 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  level: "log",
	  logger: console,
	  logErrors: true,
	  collapsed: undefined,
	  predicate: undefined,
	  duration: false,
	  timestamp: true,
	  stateTransformer: function stateTransformer(state) {
	    return state;
	  },
	  actionTransformer: function actionTransformer(action) {
	    return action;
	  },
	  errorTransformer: function errorTransformer(error) {
	    return error;
	  },
	  colors: {
	    title: function title() {
	      return "inherit";
	    },
	    prevState: function prevState() {
	      return "#9E9E9E";
	    },
	    action: function action() {
	      return "#03A9F4";
	    },
	    nextState: function nextState() {
	      return "#4CAF50";
	    },
	    error: function error() {
	      return "#F20404";
	    }
	  },
	  diff: false,
	  diffPredicate: undefined,

	  // Deprecated options
	  transformer: undefined
	};
	module.exports = exports['default'];

/***/ },
/* 572 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch;
	    var getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }

	        return next(action);
	      };
	    };
	  };
	}

	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;

	exports['default'] = thunk;

/***/ }
/******/ ]);